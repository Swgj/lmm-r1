[2025-04-23 23:51:29,174] [INFO] [real_accelerator.py:239:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Warning: The cache directory for DeepSpeed Triton autotune, /home/wsongan/.triton/autotune, appears to be on an NFS system. While this is generally acceptable, if you experience slowdowns or hanging when DeepSpeed exits, it is recommended to set the TRITON_CACHE_DIR environment variable to a non-NFS path.
[2025-04-23 23:51:41,814] [WARNING] [runner.py:215:fetch_hostfile] Unable to find hostfile, will proceed with training with local resources only.
Detected VISIBLE_DEVICES=0,1: setting --include=localhost:0,1
[2025-04-23 23:51:41,814] [INFO] [runner.py:605:main] cmd = /home/wsongan/.conda/envs/lmm-r1/bin/python -u -m deepspeed.launcher.launch --world_info=eyJsb2NhbGhvc3QiOiBbMCwgMV19 --master_addr=127.0.0.1 --master_port=29501 --module --enable_each_rank_log=None openrlhf.cli.train_sft --max_len 4096 --dataset ./data/am_0.5M.jsonl --input_key question --output_key response --train_batch_size 32 --micro_train_batch_size 4 --max_samples 50000 --pretrain ../../Qwen2.5-VL-3B-Instruct --save_path ./checkpoints/qwen-2.5-vl-3b-sft-text --save_steps -1 --logging_steps 50 --eval_steps 3125 --zero_stage 3 --max_epochs 1 --bf16 --flash_attn --learning_rate 2e-6 --load_checkpoint --gradient_checkpointing --use_wandb dabb4679bdd222ed5d5a2f48741598127d413010 --wandb_run_name qwen-2.5-vl-3b-sft-text --wandb_group "r1"
[2025-04-23 23:51:43,741] [INFO] [real_accelerator.py:239:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Warning: The cache directory for DeepSpeed Triton autotune, /home/wsongan/.triton/autotune, appears to be on an NFS system. While this is generally acceptable, if you experience slowdowns or hanging when DeepSpeed exits, it is recommended to set the TRITON_CACHE_DIR environment variable to a non-NFS path.
[2025-04-23 23:51:47,231] [INFO] [launch.py:139:main] 0 NCCL_ASYNC_ERROR_HANDLING=1
[2025-04-23 23:51:47,231] [INFO] [launch.py:139:main] 0 NCCL_IB_DISABLE=0
[2025-04-23 23:51:47,231] [INFO] [launch.py:146:main] WORLD INFO DICT: {'localhost': [0, 1]}
[2025-04-23 23:51:47,231] [INFO] [launch.py:152:main] nnodes=1, num_local_procs=2, node_rank=0
[2025-04-23 23:51:47,231] [INFO] [launch.py:163:main] global_rank_mapping=defaultdict(<class 'list'>, {'localhost': [0, 1]})
[2025-04-23 23:51:47,231] [INFO] [launch.py:164:main] dist_world_size=2
[2025-04-23 23:51:47,231] [INFO] [launch.py:168:main] Setting CUDA_VISIBLE_DEVICES=0,1
[2025-04-23 23:51:47,233] [INFO] [launch.py:256:main] process 928947 spawned with command: ['/home/wsongan/.conda/envs/lmm-r1/bin/python', '-u', '-m', 'openrlhf.cli.train_sft', '--local_rank=0', '--max_len', '4096', '--dataset', './data/am_0.5M.jsonl', '--input_key', 'question', '--output_key', 'response', '--train_batch_size', '32', '--micro_train_batch_size', '4', '--max_samples', '50000', '--pretrain', '../../Qwen2.5-VL-3B-Instruct', '--save_path', './checkpoints/qwen-2.5-vl-3b-sft-text', '--save_steps', '-1', '--logging_steps', '50', '--eval_steps', '3125', '--zero_stage', '3', '--max_epochs', '1', '--bf16', '--flash_attn', '--learning_rate', '2e-6', '--load_checkpoint', '--gradient_checkpointing', '--use_wandb', 'dabb4679bdd222ed5d5a2f48741598127d413010', '--wandb_run_name', 'qwen-2.5-vl-3b-sft-text', '--wandb_group', '"r1"']
[2025-04-23 23:51:47,234] [INFO] [launch.py:256:main] process 928948 spawned with command: ['/home/wsongan/.conda/envs/lmm-r1/bin/python', '-u', '-m', 'openrlhf.cli.train_sft', '--local_rank=1', '--max_len', '4096', '--dataset', './data/am_0.5M.jsonl', '--input_key', 'question', '--output_key', 'response', '--train_batch_size', '32', '--micro_train_batch_size', '4', '--max_samples', '50000', '--pretrain', '../../Qwen2.5-VL-3B-Instruct', '--save_path', './checkpoints/qwen-2.5-vl-3b-sft-text', '--save_steps', '-1', '--logging_steps', '50', '--eval_steps', '3125', '--zero_stage', '3', '--max_epochs', '1', '--bf16', '--flash_attn', '--learning_rate', '2e-6', '--load_checkpoint', '--gradient_checkpointing', '--use_wandb', 'dabb4679bdd222ed5d5a2f48741598127d413010', '--wandb_run_name', 'qwen-2.5-vl-3b-sft-text', '--wandb_group', '"r1"']
[2025-04-23 23:51:51,734] [INFO] [real_accelerator.py:239:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2025-04-23 23:51:51,736] [INFO] [real_accelerator.py:239:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Warning: The cache directory for DeepSpeed Triton autotune, /home/wsongan/.triton/autotune, appears to be on an NFS system. While this is generally acceptable, if you experience slowdowns or hanging when DeepSpeed exits, it is recommended to set the TRITON_CACHE_DIR environment variable to a non-NFS path.
Warning: The cache directory for DeepSpeed Triton autotune, /home/wsongan/.triton/autotune, appears to be on an NFS system. While this is generally acceptable, if you experience slowdowns or hanging when DeepSpeed exits, it is recommended to set the TRITON_CACHE_DIR environment variable to a non-NFS path.
[2025-04-23 23:51:56,650] [INFO] [comm.py:658:init_distributed] cdb=None
[2025-04-23 23:51:56,650] [INFO] [comm.py:689:init_distributed] Initializing TorchBackend in DeepSpeed with backend nccl
[2025-04-23 23:51:56,885] [INFO] [comm.py:658:init_distributed] cdb=None
[W423 23:51:56.811273329 Utils.hpp:136] Warning: Environment variable NCCL_ASYNC_ERROR_HANDLING is deprecated; use TORCH_NCCL_ASYNC_ERROR_HANDLING instead (function operator())
[W423 23:51:56.811618850 Utils.hpp:136] Warning: Environment variable NCCL_ASYNC_ERROR_HANDLING is deprecated; use TORCH_NCCL_ASYNC_ERROR_HANDLING instead (function operator())
[2025-04-23 23:51:56,922] [INFO] [config.py:734:__init__] Config mesh_device None world_size = 2
[2025-04-23 23:51:56,922] [INFO] [config.py:734:__init__] Config mesh_device None world_size = 2
You are attempting to use Flash Attention 2.0 with a model not initialized on GPU. Make sure to move the model to GPU after initializing it on CPU with `model.to('cuda')`.
You are attempting to use Flash Attention 2.0 with a model not initialized on GPU. Make sure to move the model to GPU after initializing it on CPU with `model.to('cuda')`.
[2025-04-23 23:51:58,743] [INFO] [partition_parameters.py:348:__exit__] finished initializing model - num_params = 825, num_elems = 4.07B
Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:  50%|█████     | 1/2 [00:09<00:09,  9.72s/it]Loading checkpoint shards:  50%|█████     | 1/2 [00:09<00:09,  9.85s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:18<00:00,  9.18s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:18<00:00,  9.26s/it]
Using /home/wsongan/.cache/torch_extensions/py312_cu124 as PyTorch extensions root...
Detected CUDA files, patching ldflags
Emitting ninja build file /home/wsongan/.cache/torch_extensions/py312_cu124/fused_adam/build.ninja...
/home/wsongan/.conda/envs/lmm-r1/lib/python3.12/site-packages/torch/utils/cpp_extension.py:2059: UserWarning: TORCH_CUDA_ARCH_LIST is not set, all archs for visible cards are included for compilation. 
If this is not desired, please set os.environ['TORCH_CUDA_ARCH_LIST'].
  warnings.warn(
Building extension module fused_adam...
Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
Loading checkpoint shards: 100%|██████████| 2/2 [00:19<00:00,  9.44s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:19<00:00,  9.50s/it]
Actor(
  (model): Qwen2_5_VLForConditionalGeneration(
    (visual): Qwen2_5_VisionTransformerPretrainedModel(
      (patch_embed): Qwen2_5_VisionPatchEmbed(
        (proj): Conv3d(3, 1280, kernel_size=(2, 14, 14), stride=(2, 14, 14), bias=False)
      )
      (rotary_pos_emb): Qwen2_5_VisionRotaryEmbedding()
      (blocks): ModuleList(
        (0-31): 32 x Qwen2_5_VLVisionBlock(
          (norm1): Qwen2RMSNorm((0,), eps=1e-06)
          (norm2): Qwen2RMSNorm((0,), eps=1e-06)
          (attn): Qwen2_5_VLVisionFlashAttention2(
            (qkv): Linear(in_features=1280, out_features=3840, bias=True)
            (proj): Linear(in_features=1280, out_features=1280, bias=True)
          )
          (mlp): Qwen2_5_VLMLP(
            (gate_proj): Linear(in_features=1280, out_features=3420, bias=True)
            (up_proj): Linear(in_features=1280, out_features=3420, bias=True)
            (down_proj): Linear(in_features=3420, out_features=1280, bias=True)
            (act_fn): SiLU()
          )
        )
      )
      (merger): Qwen2_5_VLPatchMerger(
        (ln_q): Qwen2RMSNorm((0,), eps=1e-06)
        (mlp): Sequential(
          (0): Linear(in_features=5120, out_features=5120, bias=True)
          (1): GELU(approximate='none')
          (2): Linear(in_features=5120, out_features=2048, bias=True)
        )
      )
    )
    (model): Qwen2_5_VLModel(
      (embed_tokens): Embedding(151936, 2048)
      (layers): ModuleList(
        (0-35): 36 x Qwen2_5_VLDecoderLayer(
          (self_attn): Qwen2_5_VLFlashAttention2(
            (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
            (k_proj): Linear(in_features=2048, out_features=256, bias=True)
            (v_proj): Linear(in_features=2048, out_features=256, bias=True)
            (o_proj): Linear(in_features=2048, out_features=2048, bias=False)
            (rotary_emb): Qwen2_5_VLRotaryEmbedding()
          )
          (mlp): Qwen2MLP(
            (gate_proj): Linear(in_features=2048, out_features=11008, bias=False)
            (up_proj): Linear(in_features=2048, out_features=11008, bias=False)
            (down_proj): Linear(in_features=11008, out_features=2048, bias=False)
            (act_fn): SiLU()
          )
          (input_layernorm): Qwen2RMSNorm((0,), eps=1e-06)
          (post_attention_layernorm): Qwen2RMSNorm((0,), eps=1e-06)
        )
      )
      (norm): Qwen2RMSNorm((0,), eps=1e-06)
      (rotary_emb): Qwen2_5_VLRotaryEmbedding()
    )
    (lm_head): Linear(in_features=2048, out_features=151936, bias=False)
  )
)
Using /home/wsongan/.cache/torch_extensions/py312_cu124 as PyTorch extensions root...
ninja: no work to do.
Loading extension module fused_adam...
Loading extension module fused_adam...
Time to load fused_adam op: 2.6055455207824707 seconds
Time to load fused_adam op: 3.0217251777648926 seconds
dataset: ./data/am_0.5M.jsonl
loaded ./data/am_0.5M.jsonl with data_files=./data/am_0.5M.jsonl
[Dataset({
    features: ['question', 'response'],
    num_rows: 50000
})]
Map (num_proc=8):   0%|          | 0/50000 [00:00<?, ? examples/s]Map (num_proc=8):   0%|          | 0/50000 [00:00<?, ? examples/s]Map (num_proc=8):   0%|          | 93/50000 [00:00<04:22, 190.20 examples/s]Map (num_proc=8):   0%|          | 166/50000 [00:00<02:32, 327.12 examples/s]Map (num_proc=8):   1%|▏         | 729/50000 [00:00<00:33, 1490.92 examples/s]Map (num_proc=8):   2%|▏         | 817/50000 [00:00<00:32, 1513.74 examples/s]Map (num_proc=8):   3%|▎         | 1643/50000 [00:00<00:14, 3316.68 examples/s]Map (num_proc=8):   5%|▌         | 2747/50000 [00:00<00:09, 5246.10 examples/s]Map (num_proc=8):   6%|▌         | 2833/50000 [00:00<00:08, 5481.84 examples/s]Map (num_proc=8):   9%|▊         | 4261/50000 [00:00<00:06, 7531.47 examples/s]Map (num_proc=8):   9%|▊         | 4366/50000 [00:00<00:05, 8098.01 examples/s]Map (num_proc=8):  12%|█▏        | 6245/50000 [00:00<00:04, 10178.71 examples/s]Map (num_proc=8):  13%|█▎        | 6256/50000 [00:01<00:03, 11040.39 examples/s]Map (num_proc=8):  17%|█▋        | 8477/50000 [00:01<00:03, 13249.06 examples/s]Map (num_proc=8):  17%|█▋        | 8407/50000 [00:01<00:03, 13855.36 examples/s]Map (num_proc=8):  22%|██▏       | 10838/50000 [00:01<00:02, 15989.39 examples/s]Map (num_proc=8):  22%|██▏       | 10763/50000 [00:01<00:02, 16593.77 examples/s]Map (num_proc=8):  26%|██▋       | 13151/50000 [00:01<00:02, 17947.38 examples/s]Map (num_proc=8):  26%|██▋       | 13145/50000 [00:01<00:01, 18664.03 examples/s]Map (num_proc=8):  31%|███       | 15561/50000 [00:01<00:01, 19666.47 examples/s]Map (num_proc=8):  31%|███       | 15532/50000 [00:01<00:01, 20167.54 examples/s]Map (num_proc=8):  36%|███▌      | 17874/50000 [00:01<00:01, 20649.08 examples/s]Map (num_proc=8):  36%|███▌      | 17856/50000 [00:01<00:01, 21063.44 examples/s]Map (num_proc=8):  40%|████      | 20119/50000 [00:01<00:01, 21155.51 examples/s]Map (num_proc=8):  41%|████      | 20388/50000 [00:01<00:01, 21878.82 examples/s]Map (num_proc=8):  45%|████▍     | 22330/50000 [00:01<00:01, 21427.27 examples/s]Map (num_proc=8):  45%|████▌     | 22740/50000 [00:01<00:01, 21959.52 examples/s]Map (num_proc=8):  49%|████▉     | 24559/50000 [00:01<00:01, 20459.43 examples/s]Map (num_proc=8):  50%|█████     | 25104/50000 [00:01<00:01, 21933.41 examples/s]Map (num_proc=8):  53%|█████▎    | 26691/50000 [00:01<00:01, 19745.19 examples/s]Map (num_proc=8):  55%|█████▍    | 27427/50000 [00:01<00:01, 21146.39 examples/s]Map (num_proc=8):  58%|█████▊    | 28866/50000 [00:02<00:01, 20285.23 examples/s]Map (num_proc=8):  59%|█████▉    | 29677/50000 [00:02<00:00, 21491.67 examples/s]Map (num_proc=8):  62%|██████▏   | 31138/50000 [00:02<00:00, 19799.14 examples/s]Map (num_proc=8):  64%|██████▍   | 31961/50000 [00:02<00:00, 21297.72 examples/s]Map (num_proc=8):  67%|██████▋   | 33279/50000 [00:02<00:00, 20242.51 examples/s]Map (num_proc=8):  68%|██████▊   | 34194/50000 [00:02<00:00, 21369.72 examples/s]Map (num_proc=8):  71%|███████   | 35514/50000 [00:02<00:00, 20826.54 examples/s]Map (num_proc=8):  73%|███████▎  | 36459/50000 [00:02<00:00, 21367.74 examples/s]Map (num_proc=8):  75%|███████▌  | 37621/50000 [00:02<00:00, 20277.10 examples/s]Map (num_proc=8):  77%|███████▋  | 38685/50000 [00:02<00:00, 19158.43 examples/s]Map (num_proc=8):  79%|███████▉  | 39685/50000 [00:02<00:00, 17816.90 examples/s]Map (num_proc=8):  81%|████████▏ | 40726/50000 [00:02<00:00, 15347.06 examples/s]Map (num_proc=8):  83%|████████▎ | 41579/50000 [00:02<00:00, 13752.03 examples/s]Map (num_proc=8):  85%|████████▍ | 42441/50000 [00:03<00:00, 10666.72 examples/s]Map (num_proc=8):  86%|████████▋ | 43152/50000 [00:03<00:00, 9239.33 examples/s] Map (num_proc=8):  88%|████████▊ | 43824/50000 [00:03<00:00, 8524.64 examples/s] Map (num_proc=8):  89%|████████▉ | 44407/50000 [00:03<00:00, 7282.26 examples/s]Map (num_proc=8):  90%|████████▉ | 44968/50000 [00:03<00:00, 6508.46 examples/s]Map (num_proc=8):  91%|█████████ | 45404/50000 [00:03<00:00, 5860.93 examples/s]Map (num_proc=8):  92%|█████████▏| 45905/50000 [00:03<00:00, 5351.62 examples/s]Map (num_proc=8):  93%|█████████▎| 46253/50000 [00:04<00:00, 4707.23 examples/s]Map (num_proc=8):  93%|█████████▎| 46630/50000 [00:04<00:00, 4483.61 examples/s]Map (num_proc=8):  94%|█████████▍| 46914/50000 [00:04<00:00, 4151.71 examples/s]Map (num_proc=8):  95%|█████████▍| 47261/50000 [00:04<00:00, 3966.58 examples/s]Map (num_proc=8):  95%|█████████▌| 47511/50000 [00:04<00:00, 4086.70 examples/s]Map (num_proc=8):  96%|█████████▌| 47793/50000 [00:04<00:00, 3877.87 examples/s]Map (num_proc=8):  96%|█████████▌| 48001/50000 [00:04<00:00, 3848.80 examples/s]Map (num_proc=8):  96%|█████████▋| 48239/50000 [00:04<00:00, 3673.35 examples/s]Map (num_proc=8):  97%|█████████▋| 48462/50000 [00:04<00:00, 3659.62 examples/s]Map (num_proc=8):  97%|█████████▋| 48699/50000 [00:04<00:00, 3523.76 examples/s]Map (num_proc=8):  98%|█████████▊| 48864/50000 [00:04<00:00, 3503.34 examples/s]Map (num_proc=8):  98%|█████████▊| 49109/50000 [00:05<00:00, 3463.23 examples/s]Map (num_proc=8):  99%|█████████▊| 49301/50000 [00:05<00:00, 3338.04 examples/s]Map (num_proc=8):  99%|█████████▉| 49504/50000 [00:05<00:00, 3304.13 examples/s]Map (num_proc=8):  99%|█████████▉| 49682/50000 [00:05<00:00, 3023.65 examples/s]Map (num_proc=8): 100%|█████████▉| 49918/50000 [00:05<00:00, 2561.54 examples/s]Map (num_proc=8): 100%|██████████| 50000/50000 [00:05<00:00, 2287.81 examples/s]Map (num_proc=8): 100%|██████████| 50000/50000 [00:05<00:00, 8865.06 examples/s]
Map (num_proc=8): 100%|██████████| 50000/50000 [00:05<00:00, 8824.86 examples/s]
Filter:   0%|          | 0/50000 [00:00<?, ? examples/s]Filter:   0%|          | 0/50000 [00:00<?, ? examples/s]Filter:   8%|▊         | 4000/50000 [00:00<00:01, 26797.54 examples/s]Filter:   8%|▊         | 4000/50000 [00:00<00:01, 30989.32 examples/s]Filter:  20%|██        | 10000/50000 [00:00<00:01, 37870.50 examples/s]Filter:  20%|██        | 10000/50000 [00:00<00:01, 35465.64 examples/s]Filter:  30%|███       | 15000/50000 [00:00<00:00, 38662.97 examples/s]Filter:  30%|███       | 15000/50000 [00:00<00:00, 37358.54 examples/s]Filter:  40%|████      | 20000/50000 [00:00<00:00, 38360.80 examples/s]Filter:  40%|████      | 20000/50000 [00:00<00:00, 38807.73 examples/s]Filter:  50%|█████     | 25000/50000 [00:00<00:00, 40145.72 examples/s]Filter:  52%|█████▏    | 26000/50000 [00:00<00:00, 39009.98 examples/s]Filter:  60%|██████    | 30000/50000 [00:00<00:00, 40461.45 examples/s]Filter:  64%|██████▍   | 32000/50000 [00:00<00:00, 40333.76 examples/s]Filter:  72%|███████▏  | 36000/50000 [00:00<00:00, 40363.98 examples/s]Filter:  74%|███████▍  | 37000/50000 [00:00<00:00, 39061.26 examples/s]Filter:  82%|████████▏ | 41000/50000 [00:01<00:00, 34165.46 examples/s]Filter:  84%|████████▍ | 42000/50000 [00:01<00:00, 33528.36 examples/s]Filter:  90%|█████████ | 45000/50000 [00:01<00:00, 30440.62 examples/s]Filter:  92%|█████████▏| 46000/50000 [00:01<00:00, 30233.66 examples/s]Filter:  98%|█████████▊| 49000/50000 [00:01<00:00, 28624.66 examples/s]Filter: 100%|██████████| 50000/50000 [00:01<00:00, 28710.63 examples/s]Filter: 100%|██████████| 50000/50000 [00:01<00:00, 32915.51 examples/s]
Filter: 100%|██████████| 50000/50000 [00:01<00:00, 33329.66 examples/s]
[2025-04-23 23:52:30,288] [INFO] [logging.py:107:log_dist] [Rank 0] DeepSpeed info: version=0.16.5, git-hash=unknown, git-branch=unknown
[2025-04-23 23:52:30,289] [INFO] [comm.py:683:init_distributed] Distributed backend already initialized
[2025-04-23 23:52:30,289] [INFO] [config.py:734:__init__] Config mesh_device None world_size = 2
[2025-04-23 23:52:30,301] [INFO] [config.py:734:__init__] Config mesh_device None world_size = 2
[2025-04-23 23:52:30,304] [INFO] [logging.py:107:log_dist] [Rank 0] DeepSpeed Flops Profiler Enabled: False
[2025-04-23 23:52:30,305] [INFO] [logging.py:107:log_dist] [Rank 0] Using client Optimizer as basic optimizer
[2025-04-23 23:52:30,305] [INFO] [logging.py:107:log_dist] [Rank 0] Removing param_group that has no 'params' in the basic Optimizer
[2025-04-23 23:52:30,337] [INFO] [logging.py:107:log_dist] [Rank 0] DeepSpeed Basic Optimizer = FusedAdam
[2025-04-23 23:52:30,337] [INFO] [utils.py:59:is_zero_supported_optimizer] Checking ZeRO support for optimizer=FusedAdam type=<class 'deepspeed.ops.adam.fused_adam.FusedAdam'>
[2025-04-23 23:52:30,337] [INFO] [logging.py:107:log_dist] [Rank 0] Creating fp16 ZeRO stage 3 optimizer, MiCS is enabled False, Hierarchical params gather False
[2025-04-23 23:52:30,337] [INFO] [logging.py:107:log_dist] [Rank 0] Creating torch.bfloat16 ZeRO stage 3 optimizer
[2025-04-23 23:52:30,481] [INFO] [utils.py:781:see_memory_usage] Stage 3 initialize beginning
[2025-04-23 23:52:30,482] [INFO] [utils.py:782:see_memory_usage] MA 3.88 GB         Max_MA 5.13 GB         CA 5.21 GB         Max_CA 5 GB 
[2025-04-23 23:52:30,482] [INFO] [utils.py:789:see_memory_usage] CPU Virtual Memory:  used = 157.61 GB, percent = 7.8%
[2025-04-23 23:52:30,484] [INFO] [stage3.py:170:__init__] Reduce bucket size 500000000
[2025-04-23 23:52:30,484] [INFO] [stage3.py:171:__init__] Prefetch bucket size 50000000
[2025-04-23 23:52:30,583] [INFO] [utils.py:781:see_memory_usage] DeepSpeedZeRoOffload initialize [begin]
[2025-04-23 23:52:30,583] [INFO] [utils.py:782:see_memory_usage] MA 3.88 GB         Max_MA 3.88 GB         CA 5.21 GB         Max_CA 5 GB 
[2025-04-23 23:52:30,583] [INFO] [utils.py:789:see_memory_usage] CPU Virtual Memory:  used = 157.61 GB, percent = 7.8%
Parameter Offload: Total persistent parameters: 755712 in 408 params
[2025-04-23 23:52:30,750] [INFO] [utils.py:781:see_memory_usage] DeepSpeedZeRoOffload initialize [end]
[2025-04-23 23:52:30,750] [INFO] [utils.py:782:see_memory_usage] MA 3.88 GB         Max_MA 3.88 GB         CA 5.21 GB         Max_CA 5 GB 
[2025-04-23 23:52:30,750] [INFO] [utils.py:789:see_memory_usage] CPU Virtual Memory:  used = 157.62 GB, percent = 7.8%
[2025-04-23 23:52:30,861] [INFO] [utils.py:781:see_memory_usage] Before creating fp16 partitions
[2025-04-23 23:52:30,861] [INFO] [utils.py:782:see_memory_usage] MA 3.88 GB         Max_MA 3.88 GB         CA 5.21 GB         Max_CA 5 GB 
[2025-04-23 23:52:30,861] [INFO] [utils.py:789:see_memory_usage] CPU Virtual Memory:  used = 157.62 GB, percent = 7.8%
[2025-04-23 23:52:33,644] [INFO] [utils.py:781:see_memory_usage] After creating fp16 partitions: 3
[2025-04-23 23:52:33,645] [INFO] [utils.py:782:see_memory_usage] MA 3.5 GB         Max_MA 3.88 GB         CA 3.52 GB         Max_CA 5 GB 
[2025-04-23 23:52:33,645] [INFO] [utils.py:789:see_memory_usage] CPU Virtual Memory:  used = 157.62 GB, percent = 7.8%
[2025-04-23 23:52:33,756] [INFO] [utils.py:781:see_memory_usage] Before creating fp32 partitions
[2025-04-23 23:52:33,757] [INFO] [utils.py:782:see_memory_usage] MA 3.5 GB         Max_MA 3.5 GB         CA 3.52 GB         Max_CA 4 GB 
[2025-04-23 23:52:33,757] [INFO] [utils.py:789:see_memory_usage] CPU Virtual Memory:  used = 157.62 GB, percent = 7.8%
[2025-04-23 23:52:33,972] [INFO] [utils.py:781:see_memory_usage] After creating fp32 partitions
[2025-04-23 23:52:33,972] [INFO] [utils.py:782:see_memory_usage] MA 11.0 GB         Max_MA 12.75 GB         CA 14.77 GB         Max_CA 15 GB 
[2025-04-23 23:52:33,973] [INFO] [utils.py:789:see_memory_usage] CPU Virtual Memory:  used = 157.62 GB, percent = 7.8%
[2025-04-23 23:52:34,082] [INFO] [utils.py:781:see_memory_usage] Before initializing optimizer states
[2025-04-23 23:52:34,082] [INFO] [utils.py:782:see_memory_usage] MA 11.0 GB         Max_MA 11.0 GB         CA 14.77 GB         Max_CA 15 GB 
[2025-04-23 23:52:34,083] [INFO] [utils.py:789:see_memory_usage] CPU Virtual Memory:  used = 157.62 GB, percent = 7.8%
[2025-04-23 23:52:34,221] [INFO] [utils.py:781:see_memory_usage] After initializing optimizer states
[2025-04-23 23:52:34,221] [INFO] [utils.py:782:see_memory_usage] MA 11.0 GB         Max_MA 15.0 GB         CA 18.77 GB         Max_CA 19 GB 
[2025-04-23 23:52:34,221] [INFO] [utils.py:789:see_memory_usage] CPU Virtual Memory:  used = 157.62 GB, percent = 7.8%
[2025-04-23 23:52:34,222] [INFO] [stage3.py:534:_setup_for_real_optimizer] optimizer state initialized
[2025-04-23 23:52:34,513] [INFO] [utils.py:781:see_memory_usage] After initializing ZeRO optimizer
[2025-04-23 23:52:34,514] [INFO] [utils.py:782:see_memory_usage] MA 15.5 GB         Max_MA 16.75 GB         CA 20.51 GB         Max_CA 21 GB 
[2025-04-23 23:52:34,514] [INFO] [utils.py:789:see_memory_usage] CPU Virtual Memory:  used = 157.63 GB, percent = 7.8%
[2025-04-23 23:52:34,514] [INFO] [logging.py:107:log_dist] [Rank 0] DeepSpeed Final Optimizer = DeepSpeedZeroOptimizer_Stage3
[2025-04-23 23:52:34,514] [INFO] [logging.py:107:log_dist] [Rank 0] DeepSpeed using client LR scheduler
[2025-04-23 23:52:34,514] [INFO] [logging.py:107:log_dist] [Rank 0] DeepSpeed LR Scheduler = <torch.optim.lr_scheduler.LambdaLR object at 0x1550c89b49e0>
[2025-04-23 23:52:34,514] [INFO] [logging.py:107:log_dist] [Rank 0] step=0, skipped=0, lr=[0.0, 0.0], mom=[(0.9, 0.95), (0.9, 0.95)]
[2025-04-23 23:52:34,515] [INFO] [config.py:1000:print] DeepSpeedEngine configuration:
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   activation_checkpointing_config  {
    "partition_activations": false, 
    "contiguous_memory_optimization": false, 
    "cpu_checkpointing": false, 
    "number_checkpoints": null, 
    "synchronize_checkpoint_boundary": false, 
    "profile": false
}
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   aio_config ................... {'block_size': 1048576, 'queue_depth': 8, 'intra_op_parallelism': 1, 'single_submit': False, 'overlap_events': True, 'use_gds': False}
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   amp_enabled .................. False
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   amp_params ................... False
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   autotuning_config ............ {
    "enabled": false, 
    "start_step": null, 
    "end_step": null, 
    "metric_path": null, 
    "arg_mappings": null, 
    "metric": "throughput", 
    "model_info": null, 
    "results_dir": "autotuning_results", 
    "exps_dir": "autotuning_exps", 
    "overwrite": true, 
    "fast": true, 
    "start_profile_step": 3, 
    "end_profile_step": 5, 
    "tuner_type": "gridsearch", 
    "tuner_early_stopping": 5, 
    "tuner_num_trials": 50, 
    "model_info_path": null, 
    "mp_size": 1, 
    "max_train_batch_size": null, 
    "min_train_batch_size": 1, 
    "max_train_micro_batch_size_per_gpu": 1.024000e+03, 
    "min_train_micro_batch_size_per_gpu": 1, 
    "num_tuning_micro_batch_sizes": 3
}
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   bfloat16_enabled ............. True
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   bfloat16_immediate_grad_update  True
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   checkpoint_parallel_write_pipeline  False
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   checkpoint_tag_validation_enabled  True
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   checkpoint_tag_validation_fail  False
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   comms_config ................. <deepspeed.comm.config.DeepSpeedCommsConfig object at 0x1550c89b44d0>
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   communication_data_type ...... None
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   compression_config ........... {'weight_quantization': {'shared_parameters': {'enabled': False, 'quantizer_kernel': False, 'schedule_offset': 0, 'quantize_groups': 1, 'quantize_verbose': False, 'quantization_type': 'symmetric', 'quantize_weight_in_forward': False, 'rounding': 'nearest', 'fp16_mixed_quantize': False, 'quantize_change_ratio': 0.001}, 'different_groups': {}}, 'activation_quantization': {'shared_parameters': {'enabled': False, 'quantization_type': 'symmetric', 'range_calibration': 'dynamic', 'schedule_offset': 1000}, 'different_groups': {}}, 'sparse_pruning': {'shared_parameters': {'enabled': False, 'method': 'l1', 'schedule_offset': 1000}, 'different_groups': {}}, 'row_pruning': {'shared_parameters': {'enabled': False, 'method': 'l1', 'schedule_offset': 1000}, 'different_groups': {}}, 'head_pruning': {'shared_parameters': {'enabled': False, 'method': 'topk', 'schedule_offset': 1000}, 'different_groups': {}}, 'channel_pruning': {'shared_parameters': {'enabled': False, 'method': 'l1', 'schedule_offset': 1000}, 'different_groups': {}}, 'layer_reduction': {'enabled': False}}
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   curriculum_enabled_legacy .... False
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   curriculum_params_legacy ..... False
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   data_efficiency_config ....... {'enabled': False, 'seed': 1234, 'data_sampling': {'enabled': False, 'num_epochs': 1000, 'num_workers': 0, 'pin_memory': False, 'curriculum_learning': {'enabled': False}, 'dynamic_batching': {'enabled': False, 'lr_scaling_method': 'linear', 'min_batch_size': 1, 'max_batch_size': None, 'sequence_picking_order': 'dataloader', 'verbose': False}}, 'data_routing': {'enabled': False, 'random_ltd': {'enabled': False, 'layer_token_lr_schedule': {'enabled': False}}}}
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   data_efficiency_enabled ...... False
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   dataloader_drop_last ......... False
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   disable_allgather ............ False
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   dump_state ................... False
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   dynamic_loss_scale_args ...... None
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   eigenvalue_enabled ........... False
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   eigenvalue_gas_boundary_resolution  1
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   eigenvalue_layer_name ........ bert.encoder.layer
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   eigenvalue_layer_num ......... 0
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   eigenvalue_max_iter .......... 100
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   eigenvalue_stability ......... 1e-06
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   eigenvalue_tol ............... 0.01
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   eigenvalue_verbose ........... False
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   elasticity_enabled ........... False
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   flops_profiler_config ........ {
    "enabled": false, 
    "recompute_fwd_factor": 0.0, 
    "profile_step": 1, 
    "module_depth": -1, 
    "top_modules": 1, 
    "detailed": true, 
    "output_file": null
}
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   fp16_auto_cast ............... None
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   fp16_enabled ................. False
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   fp16_master_weights_and_gradients  False
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   global_rank .................. 0
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   grad_accum_dtype ............. None
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   gradient_accumulation_steps .. 4
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   gradient_clipping ............ 1.0
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   gradient_predivide_factor .... 1.0
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   graph_harvesting ............. False
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   hybrid_engine ................ enabled=False max_out_tokens=512 inference_tp_size=1 release_inference_cache=False pin_parameters=True tp_gather_partition_size=8
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   initial_dynamic_scale ........ 1
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   load_universal_checkpoint .... False
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   loss_scale ................... 1.0
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   memory_breakdown ............. False
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   mics_hierarchial_params_gather  False
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   mics_shard_size .............. -1
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   monitor_config ............... tensorboard=TensorBoardConfig(enabled=False, output_path='', job_name='DeepSpeedJobName') comet=CometConfig(enabled=False, samples_log_interval=100, project=None, workspace=None, api_key=None, experiment_name=None, experiment_key=None, online=None, mode=None) wandb=WandbConfig(enabled=False, group=None, team=None, project='deepspeed') csv_monitor=CSVConfig(enabled=False, output_path='', job_name='DeepSpeedJobName')
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   nebula_config ................ {
    "enabled": false, 
    "persistent_storage_path": null, 
    "persistent_time_interval": 100, 
    "num_of_version_in_retention": 2, 
    "enable_nebula_load": true, 
    "load_path": null
}
[2025-04-23 23:52:34,516] [INFO] [config.py:1004:print]   optimizer_legacy_fusion ...... False
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   optimizer_name ............... None
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   optimizer_params ............. None
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   pipeline ..................... {'stages': 'auto', 'partition': 'best', 'seed_layers': False, 'activation_checkpoint_interval': 0, 'pipe_partitioned': True, 'grad_partitioned': True}
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   pld_enabled .................. False
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   pld_params ................... False
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   prescale_gradients ........... False
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   scheduler_name ............... None
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   scheduler_params ............. None
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   seq_parallel_communication_data_type  torch.float32
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   sparse_attention ............. None
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   sparse_gradients_enabled ..... False
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   steps_per_print .............. 100
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   tensor_parallel_config ....... dtype=torch.float16 autotp_size=0 tensor_parallel=TPConfig(tp_size=1, tp_grain_size=1, mpu=None, tp_group=None) injection_policy_tuple=None keep_module_on_host=False replace_with_kernel_inject=False
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   timers_config ................ enabled=True synchronized=True
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   train_batch_size ............. 32
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   train_micro_batch_size_per_gpu  4
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   use_data_before_expert_parallel_  False
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   use_node_local_storage ....... False
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   wall_clock_breakdown ......... False
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   weight_quantization_config ... None
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   world_size ................... 2
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   zero_allow_untested_optimizer  False
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   zero_config .................. stage=3 contiguous_gradients=True reduce_scatter=True reduce_bucket_size=500000000 use_multi_rank_bucket_allreduce=True allgather_partitions=True allgather_bucket_size=500000000 overlap_comm=True load_from_fp32_weights=True elastic_checkpoint=False offload_param=DeepSpeedZeroOffloadParamConfig(device='none', nvme_path=None, buffer_count=5, buffer_size=100000000, max_in_cpu=1000000000, pin_memory=False) offload_optimizer=DeepSpeedZeroOffloadOptimizerConfig(device='none', nvme_path=None, buffer_count=4, pin_memory=True, pipeline_read=False, pipeline_write=False, fast_init=False, ratio=1.0) sub_group_size=1000000000 cpu_offload_param=None cpu_offload_use_pin_memory=None cpu_offload=None prefetch_bucket_size=50000000 param_persistence_threshold=100000 model_persistence_threshold=9223372036854775807 max_live_parameters=1000000000 max_reuse_distance=1000000000 gather_16bit_weights_on_model_save=False module_granularity_threshold=0 use_all_reduce_for_fetch_params=False stage3_gather_fp16_weights_on_model_save=False ignore_unused_parameters=True legacy_stage1=False round_robin_gradients=False zero_hpz_partition_size=1 zero_quantized_weights=False zero_quantized_nontrainable_weights=False zero_quantized_gradients=False zeropp_loco_param=None mics_shard_size=-1 mics_hierarchical_params_gather=False memory_efficient_linear=True pipeline_loading_checkpoint=False override_module_apply=True log_trace_cache_warnings=False
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   zero_enabled ................. True
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   zero_force_ds_cpu_optimizer .. True
[2025-04-23 23:52:34,517] [INFO] [config.py:1004:print]   zero_optimization_stage ...... 3
[2025-04-23 23:52:34,517] [INFO] [config.py:990:print_user_config]   json = {
    "steps_per_print": 100, 
    "zero_optimization": {
        "stage": 3, 
        "offload_param": {
            "device": "none"
        }, 
        "offload_optimizer": {
            "device": "none", 
            "pin_memory": true
        }, 
        "sub_group_size": "auto", 
        "stage3_max_live_parameters": "auto", 
        "stage3_max_reuse_distance": "auto", 
        "stage3_param_persistence_threshold": "auto", 
        "stage3_prefetch_bucket_size": "auto", 
        "reduce_bucket_size": "auto", 
        "zero_hpz_partition_size": 1, 
        "zero_quantized_weights": false, 
        "zero_quantized_gradients": false, 
        "reduce_scatter": true
    }, 
    "bf16": {
        "enabled": true
    }, 
    "gradient_clipping": 1.0, 
    "prescale_gradients": false, 
    "wall_clock_breakdown": false, 
    "data_types": {
        "grad_accum_dtype": null
    }, 
    "checkpoint": {
        "load_universal": false
    }, 
    "train_micro_batch_size_per_gpu": 4, 
    "train_batch_size": 32
}
wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: s_wgj (swgj) to https://api.wandb.ai. Use `wandb login --relogin` to force relogin
wandb: WARNING Using a boolean value for 'reinit' is deprecated. Use 'return_previous' or 'finish_previous' instead.
wandb: Tracking run with wandb version 0.19.9
wandb: Run data is saved locally in /home/wsongan/lmm-r1/examples/wandb/run-20250423_235237-025ikyus
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run qwen-2.5-vl-3b-sft-text
wandb: ⭐️ View project at https://wandb.ai/swgj/openrlhf_train_sft
wandb: 🚀 View run at https://wandb.ai/swgj/openrlhf_train_sft/runs/025ikyus
Train epoch:   0%|          | 0/1 [00:00<?, ?it/s]
Train step of epoch 0:   0%|          | 0/6250 [00:00<?, ?it/s][A
Train step of epoch 0:   0%|          | 0/6250 [00:06<?, ?it/s, gpt_loss=1.09, lr=0][A
Train step of epoch 0:   0%|          | 1/6250 [00:06<11:49:23,  6.81s/it, gpt_loss=1.09, lr=0][A
Train step of epoch 0:   0%|          | 1/6250 [00:10<11:49:23,  6.81s/it, gpt_loss=0.92, lr=0][A
Train step of epoch 0:   0%|          | 2/6250 [00:10<8:24:33,  4.85s/it, gpt_loss=0.92, lr=0] [A
Train step of epoch 0:   0%|          | 2/6250 [00:14<8:24:33,  4.85s/it, gpt_loss=1.18, lr=0][A
Train step of epoch 0:   0%|          | 3/6250 [00:14<7:55:38,  4.57s/it, gpt_loss=1.18, lr=0][A[2025-04-23 23:52:57,292] [WARNING] [stage3.py:2139:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   0%|          | 3/6250 [00:18<7:55:38,  4.57s/it, gpt_loss=0.958, lr=4.26e-8][A
Train step of epoch 0:   0%|          | 4/6250 [00:18<7:33:32,  4.36s/it, gpt_loss=0.958, lr=4.26e-8][A
Train step of epoch 0:   0%|          | 4/6250 [00:21<7:33:32,  4.36s/it, gpt_loss=1.05, lr=4.26e-8] [A
Train step of epoch 0:   0%|          | 5/6250 [00:21<6:58:18,  4.02s/it, gpt_loss=1.05, lr=4.26e-8][A
Train step of epoch 0:   0%|          | 5/6250 [00:25<6:58:18,  4.02s/it, gpt_loss=1.1, lr=4.26e-8] [A
Train step of epoch 0:   0%|          | 6/6250 [00:25<6:33:58,  3.79s/it, gpt_loss=1.1, lr=4.26e-8][A
Train step of epoch 0:   0%|          | 6/6250 [00:29<6:33:58,  3.79s/it, gpt_loss=0.961, lr=4.26e-8][A
Train step of epoch 0:   0%|          | 7/6250 [00:29<6:47:14,  3.91s/it, gpt_loss=0.961, lr=4.26e-8][A[2025-04-23 23:53:13,573] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   0%|          | 7/6250 [00:34<6:47:14,  3.91s/it, gpt_loss=0.752, lr=8.51e-8][A
Train step of epoch 0:   0%|          | 8/6250 [00:34<7:34:44,  4.37s/it, gpt_loss=0.752, lr=8.51e-8][A
Train step of epoch 0:   0%|          | 8/6250 [00:38<7:34:44,  4.37s/it, gpt_loss=0.95, lr=8.51e-8] [A
Train step of epoch 0:   0%|          | 9/6250 [00:38<7:11:35,  4.15s/it, gpt_loss=0.95, lr=8.51e-8][A
Train step of epoch 0:   0%|          | 9/6250 [00:41<7:11:35,  4.15s/it, gpt_loss=1.08, lr=8.51e-8][A
Train step of epoch 0:   0%|          | 10/6250 [00:41<6:24:25,  3.70s/it, gpt_loss=1.08, lr=8.51e-8][A
Train step of epoch 0:   0%|          | 10/6250 [00:45<6:24:25,  3.70s/it, gpt_loss=0.907, lr=8.51e-8][A
Train step of epoch 0:   0%|          | 11/6250 [00:45<6:38:42,  3.83s/it, gpt_loss=0.907, lr=8.51e-8][A[2025-04-23 23:53:27,478] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   0%|          | 11/6250 [00:48<6:38:42,  3.83s/it, gpt_loss=0.943, lr=1.28e-7][A
Train step of epoch 0:   0%|          | 12/6250 [00:48<6:25:21,  3.71s/it, gpt_loss=0.943, lr=1.28e-7][A
Train step of epoch 0:   0%|          | 12/6250 [00:52<6:25:21,  3.71s/it, gpt_loss=0.836, lr=1.28e-7][A
Train step of epoch 0:   0%|          | 13/6250 [00:52<6:37:58,  3.83s/it, gpt_loss=0.836, lr=1.28e-7][A
Train step of epoch 0:   0%|          | 13/6250 [00:56<6:37:58,  3.83s/it, gpt_loss=0.803, lr=1.28e-7][A
Train step of epoch 0:   0%|          | 14/6250 [00:56<6:17:41,  3.63s/it, gpt_loss=0.803, lr=1.28e-7][A
Train step of epoch 0:   0%|          | 14/6250 [00:59<6:17:41,  3.63s/it, gpt_loss=0.945, lr=1.28e-7][A
Train step of epoch 0:   0%|          | 15/6250 [00:59<6:15:35,  3.61s/it, gpt_loss=0.945, lr=1.28e-7][A[2025-04-23 23:53:42,501] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   0%|          | 15/6250 [01:03<6:15:35,  3.61s/it, gpt_loss=1.02, lr=1.7e-7]  [A
Train step of epoch 0:   0%|          | 16/6250 [01:03<6:32:36,  3.78s/it, gpt_loss=1.02, lr=1.7e-7][A
Train step of epoch 0:   0%|          | 16/6250 [01:07<6:32:36,  3.78s/it, gpt_loss=0.898, lr=1.7e-7][A
Train step of epoch 0:   0%|          | 17/6250 [01:07<6:46:36,  3.91s/it, gpt_loss=0.898, lr=1.7e-7][A
Train step of epoch 0:   0%|          | 17/6250 [01:11<6:46:36,  3.91s/it, gpt_loss=0.993, lr=1.7e-7][A
Train step of epoch 0:   0%|          | 18/6250 [01:11<6:19:49,  3.66s/it, gpt_loss=0.993, lr=1.7e-7][A
Train step of epoch 0:   0%|          | 18/6250 [01:14<6:19:49,  3.66s/it, gpt_loss=1.13, lr=1.7e-7] [A
Train step of epoch 0:   0%|          | 19/6250 [01:14<6:06:21,  3.53s/it, gpt_loss=1.13, lr=1.7e-7][A[2025-04-23 23:53:56,349] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   0%|          | 19/6250 [01:17<6:06:21,  3.53s/it, gpt_loss=0.763, lr=2.13e-7][A
Train step of epoch 0:   0%|          | 20/6250 [01:17<6:00:16,  3.47s/it, gpt_loss=0.763, lr=2.13e-7][A
Train step of epoch 0:   0%|          | 20/6250 [01:21<6:00:16,  3.47s/it, gpt_loss=1.13, lr=2.13e-7] [A
Train step of epoch 0:   0%|          | 21/6250 [01:21<6:28:31,  3.74s/it, gpt_loss=1.13, lr=2.13e-7][A
Train step of epoch 0:   0%|          | 21/6250 [01:26<6:28:31,  3.74s/it, gpt_loss=0.896, lr=2.13e-7][A
Train step of epoch 0:   0%|          | 22/6250 [01:26<6:54:57,  4.00s/it, gpt_loss=0.896, lr=2.13e-7][A
Train step of epoch 0:   0%|          | 22/6250 [01:31<6:54:57,  4.00s/it, gpt_loss=1.01, lr=2.13e-7] [A
Train step of epoch 0:   0%|          | 23/6250 [01:31<7:09:33,  4.14s/it, gpt_loss=1.01, lr=2.13e-7][A[2025-04-23 23:54:13,905] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   0%|          | 23/6250 [01:35<7:09:33,  4.14s/it, gpt_loss=0.824, lr=2.55e-7][A
Train step of epoch 0:   0%|          | 24/6250 [01:35<7:08:45,  4.13s/it, gpt_loss=0.824, lr=2.55e-7][A
Train step of epoch 0:   0%|          | 24/6250 [01:39<7:08:45,  4.13s/it, gpt_loss=1.19, lr=2.55e-7] [A
Train step of epoch 0:   0%|          | 25/6250 [01:39<7:05:14,  4.10s/it, gpt_loss=1.19, lr=2.55e-7][A
Train step of epoch 0:   0%|          | 25/6250 [01:43<7:05:14,  4.10s/it, gpt_loss=0.94, lr=2.55e-7][A
Train step of epoch 0:   0%|          | 26/6250 [01:43<7:10:28,  4.15s/it, gpt_loss=0.94, lr=2.55e-7][A
Train step of epoch 0:   0%|          | 26/6250 [01:47<7:10:28,  4.15s/it, gpt_loss=1.02, lr=2.55e-7][A
Train step of epoch 0:   0%|          | 27/6250 [01:47<6:54:56,  4.00s/it, gpt_loss=1.02, lr=2.55e-7][A[2025-04-23 23:54:28,910] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   0%|          | 27/6250 [01:50<6:54:56,  4.00s/it, gpt_loss=0.793, lr=2.98e-7][A
Train step of epoch 0:   0%|          | 28/6250 [01:50<6:25:39,  3.72s/it, gpt_loss=0.793, lr=2.98e-7][A
Train step of epoch 0:   0%|          | 28/6250 [01:52<6:25:39,  3.72s/it, gpt_loss=0.839, lr=2.98e-7][A
Train step of epoch 0:   0%|          | 29/6250 [01:52<5:49:26,  3.37s/it, gpt_loss=0.839, lr=2.98e-7][A
Train step of epoch 0:   0%|          | 29/6250 [01:56<5:49:26,  3.37s/it, gpt_loss=1.26, lr=2.98e-7] [A
Train step of epoch 0:   0%|          | 30/6250 [01:56<6:10:45,  3.58s/it, gpt_loss=1.26, lr=2.98e-7][A
Train step of epoch 0:   0%|          | 30/6250 [02:00<6:10:45,  3.58s/it, gpt_loss=0.778, lr=2.98e-7][A
Train step of epoch 0:   0%|          | 31/6250 [02:00<6:07:33,  3.55s/it, gpt_loss=0.778, lr=2.98e-7][A[2025-04-23 23:54:43,675] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   0%|          | 31/6250 [02:04<6:07:33,  3.55s/it, gpt_loss=0.968, lr=3.4e-7] [A
Train step of epoch 0:   1%|          | 32/6250 [02:04<6:42:36,  3.89s/it, gpt_loss=0.968, lr=3.4e-7][A
Train step of epoch 0:   1%|          | 32/6250 [02:08<6:42:36,  3.89s/it, gpt_loss=1.11, lr=3.4e-7] [A
Train step of epoch 0:   1%|          | 33/6250 [02:08<6:34:18,  3.81s/it, gpt_loss=1.11, lr=3.4e-7][A
Train step of epoch 0:   1%|          | 33/6250 [02:11<6:34:18,  3.81s/it, gpt_loss=0.987, lr=3.4e-7][A
Train step of epoch 0:   1%|          | 34/6250 [02:11<6:19:41,  3.66s/it, gpt_loss=0.987, lr=3.4e-7][A
Train step of epoch 0:   1%|          | 34/6250 [02:15<6:19:41,  3.66s/it, gpt_loss=1.09, lr=3.4e-7] [A
Train step of epoch 0:   1%|          | 35/6250 [02:15<6:27:50,  3.74s/it, gpt_loss=1.09, lr=3.4e-7][A[2025-04-23 23:54:58,020] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   1%|          | 35/6250 [02:19<6:27:50,  3.74s/it, gpt_loss=1.06, lr=3.83e-7][A
Train step of epoch 0:   1%|          | 36/6250 [02:19<6:18:55,  3.66s/it, gpt_loss=1.06, lr=3.83e-7][A
Train step of epoch 0:   1%|          | 36/6250 [02:23<6:18:55,  3.66s/it, gpt_loss=0.853, lr=3.83e-7][A
Train step of epoch 0:   1%|          | 37/6250 [02:23<6:45:04,  3.91s/it, gpt_loss=0.853, lr=3.83e-7][A
Train step of epoch 0:   1%|          | 37/6250 [02:27<6:45:04,  3.91s/it, gpt_loss=0.965, lr=3.83e-7][A
Train step of epoch 0:   1%|          | 38/6250 [02:27<6:25:47,  3.73s/it, gpt_loss=0.965, lr=3.83e-7][A
Train step of epoch 0:   1%|          | 38/6250 [02:31<6:25:47,  3.73s/it, gpt_loss=0.924, lr=3.83e-7][A
Train step of epoch 0:   1%|          | 39/6250 [02:31<6:53:12,  3.99s/it, gpt_loss=0.924, lr=3.83e-7][A[2025-04-23 23:55:15,356] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   1%|          | 39/6250 [02:36<6:53:12,  3.99s/it, gpt_loss=1, lr=4.26e-7]    [A
Train step of epoch 0:   1%|          | 40/6250 [02:36<7:22:15,  4.27s/it, gpt_loss=1, lr=4.26e-7][A
Train step of epoch 0:   1%|          | 40/6250 [02:39<7:22:15,  4.27s/it, gpt_loss=1.06, lr=4.26e-7][A
Train step of epoch 0:   1%|          | 41/6250 [02:39<6:43:04,  3.90s/it, gpt_loss=1.06, lr=4.26e-7][A
Train step of epoch 0:   1%|          | 41/6250 [02:42<6:43:04,  3.90s/it, gpt_loss=0.898, lr=4.26e-7][A
Train step of epoch 0:   1%|          | 42/6250 [02:42<6:14:40,  3.62s/it, gpt_loss=0.898, lr=4.26e-7][A
Train step of epoch 0:   1%|          | 42/6250 [02:46<6:14:40,  3.62s/it, gpt_loss=1.01, lr=4.26e-7] [A
Train step of epoch 0:   1%|          | 43/6250 [02:46<6:38:11,  3.85s/it, gpt_loss=1.01, lr=4.26e-7][A[2025-04-23 23:55:29,426] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   1%|          | 43/6250 [02:50<6:38:11,  3.85s/it, gpt_loss=0.873, lr=4.68e-7][A
Train step of epoch 0:   1%|          | 44/6250 [02:50<6:33:17,  3.80s/it, gpt_loss=0.873, lr=4.68e-7][A
Train step of epoch 0:   1%|          | 44/6250 [02:54<6:33:17,  3.80s/it, gpt_loss=0.955, lr=4.68e-7][A
Train step of epoch 0:   1%|          | 45/6250 [02:54<6:36:09,  3.83s/it, gpt_loss=0.955, lr=4.68e-7][A
Train step of epoch 0:   1%|          | 45/6250 [02:57<6:36:09,  3.83s/it, gpt_loss=0.994, lr=4.68e-7][A
Train step of epoch 0:   1%|          | 46/6250 [02:57<6:15:47,  3.63s/it, gpt_loss=0.994, lr=4.68e-7][A
Train step of epoch 0:   1%|          | 46/6250 [03:02<6:15:47,  3.63s/it, gpt_loss=1.1, lr=4.68e-7]  [A
Train step of epoch 0:   1%|          | 47/6250 [03:02<6:45:33,  3.92s/it, gpt_loss=1.1, lr=4.68e-7][A[2025-04-23 23:55:45,203] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   1%|          | 47/6250 [03:06<6:45:33,  3.92s/it, gpt_loss=0.782, lr=5.11e-7][A
Train step of epoch 0:   1%|          | 48/6250 [03:06<6:51:14,  3.98s/it, gpt_loss=0.782, lr=5.11e-7][A
Train step of epoch 0:   1%|          | 48/6250 [03:10<6:51:14,  3.98s/it, gpt_loss=0.859, lr=5.11e-7][A
Train step of epoch 0:   1%|          | 49/6250 [03:10<6:45:05,  3.92s/it, gpt_loss=0.859, lr=5.11e-7][A
Train step of epoch 0:   1%|          | 49/6250 [03:13<6:45:05,  3.92s/it, gpt_loss=1.03, lr=5.11e-7] [A
Train step of epoch 0:   1%|          | 50/6250 [03:13<6:11:41,  3.60s/it, gpt_loss=1.03, lr=5.11e-7][A
Train step of epoch 0:   1%|          | 50/6250 [03:16<6:11:41,  3.60s/it, gpt_loss=0.924, lr=5.11e-7][A
Train step of epoch 0:   1%|          | 51/6250 [03:16<5:53:21,  3.42s/it, gpt_loss=0.924, lr=5.11e-7][A[2025-04-23 23:55:58,663] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   1%|          | 51/6250 [03:19<5:53:21,  3.42s/it, gpt_loss=0.902, lr=5.53e-7][A
Train step of epoch 0:   1%|          | 52/6250 [03:19<6:05:52,  3.54s/it, gpt_loss=0.902, lr=5.53e-7][A
Train step of epoch 0:   1%|          | 52/6250 [03:23<6:05:52,  3.54s/it, gpt_loss=0.974, lr=5.53e-7][A
Train step of epoch 0:   1%|          | 53/6250 [03:23<5:57:53,  3.47s/it, gpt_loss=0.974, lr=5.53e-7][A
Train step of epoch 0:   1%|          | 53/6250 [03:25<5:57:53,  3.47s/it, gpt_loss=0.885, lr=5.53e-7][A
Train step of epoch 0:   1%|          | 54/6250 [03:25<5:36:04,  3.25s/it, gpt_loss=0.885, lr=5.53e-7][A
Train step of epoch 0:   1%|          | 54/6250 [03:29<5:36:04,  3.25s/it, gpt_loss=1.06, lr=5.53e-7] [A
Train step of epoch 0:   1%|          | 55/6250 [03:29<5:59:31,  3.48s/it, gpt_loss=1.06, lr=5.53e-7][A[2025-04-23 23:56:13,121] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   1%|          | 55/6250 [03:34<5:59:31,  3.48s/it, gpt_loss=0.918, lr=5.96e-7][A
Train step of epoch 0:   1%|          | 56/6250 [03:34<6:27:44,  3.76s/it, gpt_loss=0.918, lr=5.96e-7][A
Train step of epoch 0:   1%|          | 56/6250 [03:38<6:27:44,  3.76s/it, gpt_loss=1.02, lr=5.96e-7] [A
Train step of epoch 0:   1%|          | 57/6250 [03:38<6:37:02,  3.85s/it, gpt_loss=1.02, lr=5.96e-7][A
Train step of epoch 0:   1%|          | 57/6250 [03:41<6:37:02,  3.85s/it, gpt_loss=0.936, lr=5.96e-7][A
Train step of epoch 0:   1%|          | 58/6250 [03:41<6:07:30,  3.56s/it, gpt_loss=0.936, lr=5.96e-7][A
Train step of epoch 0:   1%|          | 58/6250 [03:45<6:07:30,  3.56s/it, gpt_loss=1.04, lr=5.96e-7] [A
Train step of epoch 0:   1%|          | 59/6250 [03:45<6:14:43,  3.63s/it, gpt_loss=1.04, lr=5.96e-7][A[2025-04-23 23:56:27,240] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   1%|          | 59/6250 [03:48<6:14:43,  3.63s/it, gpt_loss=0.826, lr=6.38e-7][A
Train step of epoch 0:   1%|          | 60/6250 [03:48<6:06:35,  3.55s/it, gpt_loss=0.826, lr=6.38e-7][A
Train step of epoch 0:   1%|          | 60/6250 [03:52<6:06:35,  3.55s/it, gpt_loss=0.847, lr=6.38e-7][A
Train step of epoch 0:   1%|          | 61/6250 [03:52<6:10:16,  3.59s/it, gpt_loss=0.847, lr=6.38e-7][A
Train step of epoch 0:   1%|          | 61/6250 [03:55<6:10:16,  3.59s/it, gpt_loss=1, lr=6.38e-7]    [A
Train step of epoch 0:   1%|          | 62/6250 [03:55<5:50:39,  3.40s/it, gpt_loss=1, lr=6.38e-7][A
Train step of epoch 0:   1%|          | 62/6250 [03:59<5:50:39,  3.40s/it, gpt_loss=0.955, lr=6.38e-7][A
Train step of epoch 0:   1%|          | 63/6250 [03:59<6:18:09,  3.67s/it, gpt_loss=0.955, lr=6.38e-7][A[2025-04-23 23:56:42,911] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   1%|          | 63/6250 [04:04<6:18:09,  3.67s/it, gpt_loss=1.03, lr=6.81e-7] [A
Train step of epoch 0:   1%|          | 64/6250 [04:04<6:51:29,  3.99s/it, gpt_loss=1.03, lr=6.81e-7][A
Train step of epoch 0:   1%|          | 64/6250 [04:08<6:51:29,  3.99s/it, gpt_loss=0.972, lr=6.81e-7][A
Train step of epoch 0:   1%|          | 65/6250 [04:08<6:50:36,  3.98s/it, gpt_loss=0.972, lr=6.81e-7][A
Train step of epoch 0:   1%|          | 65/6250 [04:12<6:50:36,  3.98s/it, gpt_loss=1.03, lr=6.81e-7] [A
Train step of epoch 0:   1%|          | 66/6250 [04:12<7:03:47,  4.11s/it, gpt_loss=1.03, lr=6.81e-7][A
Train step of epoch 0:   1%|          | 66/6250 [04:16<7:03:47,  4.11s/it, gpt_loss=0.76, lr=6.81e-7][A
Train step of epoch 0:   1%|          | 67/6250 [04:16<6:54:18,  4.02s/it, gpt_loss=0.76, lr=6.81e-7][A[2025-04-23 23:56:58,087] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   1%|          | 67/6250 [04:19<6:54:18,  4.02s/it, gpt_loss=0.766, lr=7.23e-7][A
Train step of epoch 0:   1%|          | 68/6250 [04:19<6:22:28,  3.71s/it, gpt_loss=0.766, lr=7.23e-7][A
Train step of epoch 0:   1%|          | 68/6250 [04:22<6:22:28,  3.71s/it, gpt_loss=0.875, lr=7.23e-7][A
Train step of epoch 0:   1%|          | 69/6250 [04:22<6:17:27,  3.66s/it, gpt_loss=0.875, lr=7.23e-7][A
Train step of epoch 0:   1%|          | 69/6250 [04:26<6:17:27,  3.66s/it, gpt_loss=0.834, lr=7.23e-7][A
Train step of epoch 0:   1%|          | 70/6250 [04:26<6:19:15,  3.68s/it, gpt_loss=0.834, lr=7.23e-7][A
Train step of epoch 0:   1%|          | 70/6250 [04:30<6:19:15,  3.68s/it, gpt_loss=0.844, lr=7.23e-7][A
Train step of epoch 0:   1%|          | 71/6250 [04:30<6:18:27,  3.67s/it, gpt_loss=0.844, lr=7.23e-7][A[2025-04-23 23:57:14,376] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   1%|          | 71/6250 [04:35<6:18:27,  3.67s/it, gpt_loss=0.889, lr=7.66e-7][A
Train step of epoch 0:   1%|          | 72/6250 [04:35<7:10:17,  4.18s/it, gpt_loss=0.889, lr=7.66e-7][A
Train step of epoch 0:   1%|          | 72/6250 [04:39<7:10:17,  4.18s/it, gpt_loss=0.974, lr=7.66e-7][A
Train step of epoch 0:   1%|          | 73/6250 [04:39<6:51:45,  4.00s/it, gpt_loss=0.974, lr=7.66e-7][A
Train step of epoch 0:   1%|          | 73/6250 [04:43<6:51:45,  4.00s/it, gpt_loss=0.889, lr=7.66e-7][A
Train step of epoch 0:   1%|          | 74/6250 [04:43<6:45:11,  3.94s/it, gpt_loss=0.889, lr=7.66e-7][A
Train step of epoch 0:   1%|          | 74/6250 [04:46<6:45:11,  3.94s/it, gpt_loss=0.841, lr=7.66e-7][A
Train step of epoch 0:   1%|          | 75/6250 [04:46<6:24:54,  3.74s/it, gpt_loss=0.841, lr=7.66e-7][A[2025-04-23 23:57:28,765] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   1%|          | 75/6250 [04:50<6:24:54,  3.74s/it, gpt_loss=0.703, lr=8.09e-7][A
Train step of epoch 0:   1%|          | 76/6250 [04:50<6:24:45,  3.74s/it, gpt_loss=0.703, lr=8.09e-7][A
Train step of epoch 0:   1%|          | 76/6250 [04:53<6:24:45,  3.74s/it, gpt_loss=0.939, lr=8.09e-7][A
Train step of epoch 0:   1%|          | 77/6250 [04:53<6:24:17,  3.74s/it, gpt_loss=0.939, lr=8.09e-7][A
Train step of epoch 0:   1%|          | 77/6250 [04:56<6:24:17,  3.74s/it, gpt_loss=0.923, lr=8.09e-7][A
Train step of epoch 0:   1%|          | 78/6250 [04:56<6:05:01,  3.55s/it, gpt_loss=0.923, lr=8.09e-7][A
Train step of epoch 0:   1%|          | 78/6250 [05:00<6:05:01,  3.55s/it, gpt_loss=0.865, lr=8.09e-7][A
Train step of epoch 0:   1%|▏         | 79/6250 [05:00<6:20:58,  3.70s/it, gpt_loss=0.865, lr=8.09e-7][A[2025-04-23 23:57:44,032] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   1%|▏         | 79/6250 [05:05<6:20:58,  3.70s/it, gpt_loss=0.828, lr=8.51e-7][A
Train step of epoch 0:   1%|▏         | 80/6250 [05:05<6:41:09,  3.90s/it, gpt_loss=0.828, lr=8.51e-7][A
Train step of epoch 0:   1%|▏         | 80/6250 [05:08<6:41:09,  3.90s/it, gpt_loss=1.09, lr=8.51e-7] [A
Train step of epoch 0:   1%|▏         | 81/6250 [05:08<6:20:55,  3.70s/it, gpt_loss=1.09, lr=8.51e-7][A
Train step of epoch 0:   1%|▏         | 81/6250 [05:12<6:20:55,  3.70s/it, gpt_loss=0.961, lr=8.51e-7][A
Train step of epoch 0:   1%|▏         | 82/6250 [05:12<6:14:49,  3.65s/it, gpt_loss=0.961, lr=8.51e-7][A
Train step of epoch 0:   1%|▏         | 82/6250 [05:16<6:14:49,  3.65s/it, gpt_loss=0.874, lr=8.51e-7][A
Train step of epoch 0:   1%|▏         | 83/6250 [05:16<6:32:58,  3.82s/it, gpt_loss=0.874, lr=8.51e-7][A[2025-04-23 23:57:58,319] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   1%|▏         | 83/6250 [05:19<6:32:58,  3.82s/it, gpt_loss=0.806, lr=8.94e-7][A
Train step of epoch 0:   1%|▏         | 84/6250 [05:19<6:16:36,  3.66s/it, gpt_loss=0.806, lr=8.94e-7][A
Train step of epoch 0:   1%|▏         | 84/6250 [05:23<6:16:36,  3.66s/it, gpt_loss=0.946, lr=8.94e-7][A
Train step of epoch 0:   1%|▏         | 85/6250 [05:23<6:25:43,  3.75s/it, gpt_loss=0.946, lr=8.94e-7][A
Train step of epoch 0:   1%|▏         | 85/6250 [05:27<6:25:43,  3.75s/it, gpt_loss=0.856, lr=8.94e-7][A
Train step of epoch 0:   1%|▏         | 86/6250 [05:27<6:20:50,  3.71s/it, gpt_loss=0.856, lr=8.94e-7][A
Train step of epoch 0:   1%|▏         | 86/6250 [05:30<6:20:50,  3.71s/it, gpt_loss=0.92, lr=8.94e-7] [A
Train step of epoch 0:   1%|▏         | 87/6250 [05:30<6:21:16,  3.71s/it, gpt_loss=0.92, lr=8.94e-7][A[2025-04-23 23:58:13,356] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   1%|▏         | 87/6250 [05:34<6:21:16,  3.71s/it, gpt_loss=0.987, lr=9.36e-7][A
Train step of epoch 0:   1%|▏         | 88/6250 [05:34<6:22:30,  3.72s/it, gpt_loss=0.987, lr=9.36e-7][A
Train step of epoch 0:   1%|▏         | 88/6250 [05:38<6:22:30,  3.72s/it, gpt_loss=0.964, lr=9.36e-7][A
Train step of epoch 0:   1%|▏         | 89/6250 [05:38<6:35:19,  3.85s/it, gpt_loss=0.964, lr=9.36e-7][A
Train step of epoch 0:   1%|▏         | 89/6250 [05:41<6:35:19,  3.85s/it, gpt_loss=0.954, lr=9.36e-7][A
Train step of epoch 0:   1%|▏         | 90/6250 [05:41<6:03:42,  3.54s/it, gpt_loss=0.954, lr=9.36e-7][A
Train step of epoch 0:   1%|▏         | 90/6250 [05:45<6:03:42,  3.54s/it, gpt_loss=0.804, lr=9.36e-7][A
Train step of epoch 0:   1%|▏         | 91/6250 [05:45<6:05:41,  3.56s/it, gpt_loss=0.804, lr=9.36e-7][A[2025-04-23 23:58:27,481] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   1%|▏         | 91/6250 [05:48<6:05:41,  3.56s/it, gpt_loss=0.873, lr=9.79e-7][A
Train step of epoch 0:   1%|▏         | 92/6250 [05:48<6:05:10,  3.56s/it, gpt_loss=0.873, lr=9.79e-7][A
Train step of epoch 0:   1%|▏         | 92/6250 [05:52<6:05:10,  3.56s/it, gpt_loss=0.909, lr=9.79e-7][A
Train step of epoch 0:   1%|▏         | 93/6250 [05:52<6:00:18,  3.51s/it, gpt_loss=0.909, lr=9.79e-7][A
Train step of epoch 0:   1%|▏         | 93/6250 [05:55<6:00:18,  3.51s/it, gpt_loss=1.06, lr=9.79e-7] [A
Train step of epoch 0:   2%|▏         | 94/6250 [05:55<6:09:46,  3.60s/it, gpt_loss=1.06, lr=9.79e-7][A
Train step of epoch 0:   2%|▏         | 94/6250 [05:59<6:09:46,  3.60s/it, gpt_loss=0.876, lr=9.79e-7][A
Train step of epoch 0:   2%|▏         | 95/6250 [05:59<6:06:08,  3.57s/it, gpt_loss=0.876, lr=9.79e-7][A[2025-04-23 23:58:42,038] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   2%|▏         | 95/6250 [06:03<6:06:08,  3.57s/it, gpt_loss=0.879, lr=1.02e-6][A
Train step of epoch 0:   2%|▏         | 96/6250 [06:03<6:14:35,  3.65s/it, gpt_loss=0.879, lr=1.02e-6][A
Train step of epoch 0:   2%|▏         | 96/6250 [06:06<6:14:35,  3.65s/it, gpt_loss=0.843, lr=1.02e-6][A
Train step of epoch 0:   2%|▏         | 97/6250 [06:06<5:59:38,  3.51s/it, gpt_loss=0.843, lr=1.02e-6][A
Train step of epoch 0:   2%|▏         | 97/6250 [06:09<5:59:38,  3.51s/it, gpt_loss=0.814, lr=1.02e-6][A
Train step of epoch 0:   2%|▏         | 98/6250 [06:09<5:51:11,  3.43s/it, gpt_loss=0.814, lr=1.02e-6][A
Train step of epoch 0:   2%|▏         | 98/6250 [06:12<5:51:11,  3.43s/it, gpt_loss=1.01, lr=1.02e-6] [A
Train step of epoch 0:   2%|▏         | 99/6250 [06:12<5:46:45,  3.38s/it, gpt_loss=1.01, lr=1.02e-6][A[2025-04-23 23:58:55,748] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   2%|▏         | 99/6250 [06:17<5:46:45,  3.38s/it, gpt_loss=0.987, lr=1.06e-6][A
Train step of epoch 0:   2%|▏         | 100/6250 [06:17<6:06:27,  3.58s/it, gpt_loss=0.987, lr=1.06e-6][A
Train step of epoch 0:   2%|▏         | 100/6250 [06:20<6:06:27,  3.58s/it, gpt_loss=0.914, lr=1.06e-6][A
Train step of epoch 0:   2%|▏         | 101/6250 [06:20<5:55:28,  3.47s/it, gpt_loss=0.914, lr=1.06e-6][A
Train step of epoch 0:   2%|▏         | 101/6250 [06:23<5:55:28,  3.47s/it, gpt_loss=0.659, lr=1.06e-6][A
Train step of epoch 0:   2%|▏         | 102/6250 [06:23<5:50:02,  3.42s/it, gpt_loss=0.659, lr=1.06e-6][A
Train step of epoch 0:   2%|▏         | 102/6250 [06:26<5:50:02,  3.42s/it, gpt_loss=1.06, lr=1.06e-6] [A
Train step of epoch 0:   2%|▏         | 103/6250 [06:26<5:51:10,  3.43s/it, gpt_loss=1.06, lr=1.06e-6][A[2025-04-23 23:59:09,676] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   2%|▏         | 103/6250 [06:30<5:51:10,  3.43s/it, gpt_loss=0.822, lr=1.11e-6][A
Train step of epoch 0:   2%|▏         | 104/6250 [06:30<6:07:27,  3.59s/it, gpt_loss=0.822, lr=1.11e-6][A
Train step of epoch 0:   2%|▏         | 104/6250 [06:35<6:07:27,  3.59s/it, gpt_loss=0.879, lr=1.11e-6][A
Train step of epoch 0:   2%|▏         | 105/6250 [06:35<6:39:00,  3.90s/it, gpt_loss=0.879, lr=1.11e-6][A
Train step of epoch 0:   2%|▏         | 105/6250 [06:39<6:39:00,  3.90s/it, gpt_loss=1.03, lr=1.11e-6] [A
Train step of epoch 0:   2%|▏         | 106/6250 [06:39<6:49:14,  4.00s/it, gpt_loss=1.03, lr=1.11e-6][A
Train step of epoch 0:   2%|▏         | 106/6250 [06:43<6:49:14,  4.00s/it, gpt_loss=0.701, lr=1.11e-6][A
Train step of epoch 0:   2%|▏         | 107/6250 [06:43<6:52:46,  4.03s/it, gpt_loss=0.701, lr=1.11e-6][A[2025-04-23 23:59:26,146] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   2%|▏         | 107/6250 [06:47<6:52:46,  4.03s/it, gpt_loss=0.999, lr=1.15e-6][A
Train step of epoch 0:   2%|▏         | 108/6250 [06:47<6:36:40,  3.87s/it, gpt_loss=0.999, lr=1.15e-6][A
Train step of epoch 0:   2%|▏         | 108/6250 [06:50<6:36:40,  3.87s/it, gpt_loss=0.845, lr=1.15e-6][A
Train step of epoch 0:   2%|▏         | 109/6250 [06:50<6:20:58,  3.72s/it, gpt_loss=0.845, lr=1.15e-6][A
Train step of epoch 0:   2%|▏         | 109/6250 [06:55<6:20:58,  3.72s/it, gpt_loss=0.889, lr=1.15e-6][A
Train step of epoch 0:   2%|▏         | 110/6250 [06:55<6:46:13,  3.97s/it, gpt_loss=0.889, lr=1.15e-6][A
Train step of epoch 0:   2%|▏         | 110/6250 [06:59<6:46:13,  3.97s/it, gpt_loss=0.742, lr=1.15e-6][A
Train step of epoch 0:   2%|▏         | 111/6250 [06:59<6:56:03,  4.07s/it, gpt_loss=0.742, lr=1.15e-6][A[2025-04-23 23:59:42,497] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   2%|▏         | 111/6250 [07:03<6:56:03,  4.07s/it, gpt_loss=0.999, lr=1.19e-6][A
Train step of epoch 0:   2%|▏         | 112/6250 [07:03<6:58:25,  4.09s/it, gpt_loss=0.999, lr=1.19e-6][A
Train step of epoch 0:   2%|▏         | 112/6250 [07:07<6:58:25,  4.09s/it, gpt_loss=0.929, lr=1.19e-6][A
Train step of epoch 0:   2%|▏         | 113/6250 [07:07<6:57:10,  4.08s/it, gpt_loss=0.929, lr=1.19e-6][A
Train step of epoch 0:   2%|▏         | 113/6250 [07:10<6:57:10,  4.08s/it, gpt_loss=0.771, lr=1.19e-6][A
Train step of epoch 0:   2%|▏         | 114/6250 [07:10<6:21:57,  3.73s/it, gpt_loss=0.771, lr=1.19e-6][A
Train step of epoch 0:   2%|▏         | 114/6250 [07:13<6:21:57,  3.73s/it, gpt_loss=0.767, lr=1.19e-6][A
Train step of epoch 0:   2%|▏         | 115/6250 [07:13<5:47:25,  3.40s/it, gpt_loss=0.767, lr=1.19e-6][A[2025-04-23 23:59:57,120] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   2%|▏         | 115/6250 [07:18<5:47:25,  3.40s/it, gpt_loss=0.769, lr=1.23e-6][A
Train step of epoch 0:   2%|▏         | 116/6250 [07:18<6:37:22,  3.89s/it, gpt_loss=0.769, lr=1.23e-6][A
Train step of epoch 0:   2%|▏         | 116/6250 [07:21<6:37:22,  3.89s/it, gpt_loss=0.967, lr=1.23e-6][A
Train step of epoch 0:   2%|▏         | 117/6250 [07:21<6:24:03,  3.76s/it, gpt_loss=0.967, lr=1.23e-6][A
Train step of epoch 0:   2%|▏         | 117/6250 [07:27<6:24:03,  3.76s/it, gpt_loss=0.851, lr=1.23e-6][A
Train step of epoch 0:   2%|▏         | 118/6250 [07:27<7:24:44,  4.35s/it, gpt_loss=0.851, lr=1.23e-6][A
Train step of epoch 0:   2%|▏         | 118/6250 [07:30<7:24:44,  4.35s/it, gpt_loss=0.768, lr=1.23e-6][A
Train step of epoch 0:   2%|▏         | 119/6250 [07:30<6:50:57,  4.02s/it, gpt_loss=0.768, lr=1.23e-6][A[2025-04-24 00:00:13,948] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   2%|▏         | 119/6250 [07:35<6:50:57,  4.02s/it, gpt_loss=0.885, lr=1.28e-6][A
Train step of epoch 0:   2%|▏         | 120/6250 [07:35<7:01:56,  4.13s/it, gpt_loss=0.885, lr=1.28e-6][A
Train step of epoch 0:   2%|▏         | 120/6250 [07:38<7:01:56,  4.13s/it, gpt_loss=1.02, lr=1.28e-6] [A
Train step of epoch 0:   2%|▏         | 121/6250 [07:38<6:39:50,  3.91s/it, gpt_loss=1.02, lr=1.28e-6][A
Train step of epoch 0:   2%|▏         | 121/6250 [07:42<6:39:50,  3.91s/it, gpt_loss=0.946, lr=1.28e-6][A
Train step of epoch 0:   2%|▏         | 122/6250 [07:42<6:41:59,  3.94s/it, gpt_loss=0.946, lr=1.28e-6][A
Train step of epoch 0:   2%|▏         | 122/6250 [07:44<6:41:59,  3.94s/it, gpt_loss=0.967, lr=1.28e-6][A
Train step of epoch 0:   2%|▏         | 123/6250 [07:44<5:54:23,  3.47s/it, gpt_loss=0.967, lr=1.28e-6][A[2025-04-24 00:00:27,807] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   2%|▏         | 123/6250 [07:49<5:54:23,  3.47s/it, gpt_loss=0.947, lr=1.32e-6][A
Train step of epoch 0:   2%|▏         | 124/6250 [07:49<6:12:55,  3.65s/it, gpt_loss=0.947, lr=1.32e-6][A
Train step of epoch 0:   2%|▏         | 124/6250 [07:52<6:12:55,  3.65s/it, gpt_loss=1.04, lr=1.32e-6] [A
Train step of epoch 0:   2%|▏         | 125/6250 [07:52<6:20:15,  3.72s/it, gpt_loss=1.04, lr=1.32e-6][A
Train step of epoch 0:   2%|▏         | 125/6250 [07:56<6:20:15,  3.72s/it, gpt_loss=0.954, lr=1.32e-6][A
Train step of epoch 0:   2%|▏         | 126/6250 [07:56<6:07:33,  3.60s/it, gpt_loss=0.954, lr=1.32e-6][A
Train step of epoch 0:   2%|▏         | 126/6250 [08:00<6:07:33,  3.60s/it, gpt_loss=0.981, lr=1.32e-6][A
Train step of epoch 0:   2%|▏         | 127/6250 [08:00<6:18:51,  3.71s/it, gpt_loss=0.981, lr=1.32e-6][A[2025-04-24 00:00:43,850] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   2%|▏         | 127/6250 [08:05<6:18:51,  3.71s/it, gpt_loss=0.867, lr=1.36e-6][A
Train step of epoch 0:   2%|▏         | 128/6250 [08:05<6:54:04,  4.06s/it, gpt_loss=0.867, lr=1.36e-6][A
Train step of epoch 0:   2%|▏         | 128/6250 [08:08<6:54:04,  4.06s/it, gpt_loss=0.875, lr=1.36e-6][A
Train step of epoch 0:   2%|▏         | 129/6250 [08:08<6:41:53,  3.94s/it, gpt_loss=0.875, lr=1.36e-6][A
Train step of epoch 0:   2%|▏         | 129/6250 [08:11<6:41:53,  3.94s/it, gpt_loss=0.732, lr=1.36e-6][A
Train step of epoch 0:   2%|▏         | 130/6250 [08:11<6:09:09,  3.62s/it, gpt_loss=0.732, lr=1.36e-6][A
Train step of epoch 0:   2%|▏         | 130/6250 [08:15<6:09:09,  3.62s/it, gpt_loss=0.86, lr=1.36e-6] [A
Train step of epoch 0:   2%|▏         | 131/6250 [08:15<6:31:21,  3.84s/it, gpt_loss=0.86, lr=1.36e-6][A[2025-04-24 00:00:59,163] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   2%|▏         | 131/6250 [08:20<6:31:21,  3.84s/it, gpt_loss=0.906, lr=1.4e-6][A
Train step of epoch 0:   2%|▏         | 132/6250 [08:20<6:49:26,  4.02s/it, gpt_loss=0.906, lr=1.4e-6][A
Train step of epoch 0:   2%|▏         | 132/6250 [08:23<6:49:26,  4.02s/it, gpt_loss=0.867, lr=1.4e-6][A
Train step of epoch 0:   2%|▏         | 133/6250 [08:23<6:31:30,  3.84s/it, gpt_loss=0.867, lr=1.4e-6][A
Train step of epoch 0:   2%|▏         | 133/6250 [08:27<6:31:30,  3.84s/it, gpt_loss=0.898, lr=1.4e-6][A
Train step of epoch 0:   2%|▏         | 134/6250 [08:27<6:26:09,  3.79s/it, gpt_loss=0.898, lr=1.4e-6][A
Train step of epoch 0:   2%|▏         | 134/6250 [08:30<6:26:09,  3.79s/it, gpt_loss=0.661, lr=1.4e-6][A
Train step of epoch 0:   2%|▏         | 135/6250 [08:30<6:09:23,  3.62s/it, gpt_loss=0.661, lr=1.4e-6][A[2025-04-24 00:01:14,060] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   2%|▏         | 135/6250 [08:35<6:09:23,  3.62s/it, gpt_loss=0.969, lr=1.45e-6][A
Train step of epoch 0:   2%|▏         | 136/6250 [08:35<6:37:50,  3.90s/it, gpt_loss=0.969, lr=1.45e-6][A
Train step of epoch 0:   2%|▏         | 136/6250 [08:38<6:37:50,  3.90s/it, gpt_loss=0.776, lr=1.45e-6][A
Train step of epoch 0:   2%|▏         | 137/6250 [08:38<6:24:45,  3.78s/it, gpt_loss=0.776, lr=1.45e-6][A
Train step of epoch 0:   2%|▏         | 137/6250 [08:42<6:24:45,  3.78s/it, gpt_loss=0.938, lr=1.45e-6][A
Train step of epoch 0:   2%|▏         | 138/6250 [08:42<6:12:20,  3.66s/it, gpt_loss=0.938, lr=1.45e-6][A
Train step of epoch 0:   2%|▏         | 138/6250 [08:45<6:12:20,  3.66s/it, gpt_loss=0.773, lr=1.45e-6][A
Train step of epoch 0:   2%|▏         | 139/6250 [08:45<5:59:22,  3.53s/it, gpt_loss=0.773, lr=1.45e-6][A[2025-04-24 00:01:27,921] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   2%|▏         | 139/6250 [08:49<5:59:22,  3.53s/it, gpt_loss=0.937, lr=1.49e-6][A
Train step of epoch 0:   2%|▏         | 140/6250 [08:49<6:06:55,  3.60s/it, gpt_loss=0.937, lr=1.49e-6][A
Train step of epoch 0:   2%|▏         | 140/6250 [08:52<6:06:55,  3.60s/it, gpt_loss=0.981, lr=1.49e-6][A
Train step of epoch 0:   2%|▏         | 141/6250 [08:52<6:11:26,  3.65s/it, gpt_loss=0.981, lr=1.49e-6][A
Train step of epoch 0:   2%|▏         | 141/6250 [08:55<6:11:26,  3.65s/it, gpt_loss=0.932, lr=1.49e-6][A
Train step of epoch 0:   2%|▏         | 142/6250 [08:55<5:51:39,  3.45s/it, gpt_loss=0.932, lr=1.49e-6][A
Train step of epoch 0:   2%|▏         | 142/6250 [09:00<5:51:39,  3.45s/it, gpt_loss=0.729, lr=1.49e-6][A
Train step of epoch 0:   2%|▏         | 143/6250 [09:00<6:17:59,  3.71s/it, gpt_loss=0.729, lr=1.49e-6][A[2025-04-24 00:01:43,274] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   2%|▏         | 143/6250 [09:04<6:17:59,  3.71s/it, gpt_loss=0.743, lr=1.53e-6][A
Train step of epoch 0:   2%|▏         | 144/6250 [09:04<6:35:10,  3.88s/it, gpt_loss=0.743, lr=1.53e-6][A
Train step of epoch 0:   2%|▏         | 144/6250 [09:08<6:35:10,  3.88s/it, gpt_loss=0.937, lr=1.53e-6][A
Train step of epoch 0:   2%|▏         | 145/6250 [09:08<6:52:42,  4.06s/it, gpt_loss=0.937, lr=1.53e-6][A
Train step of epoch 0:   2%|▏         | 145/6250 [09:12<6:52:42,  4.06s/it, gpt_loss=0.839, lr=1.53e-6][A
Train step of epoch 0:   2%|▏         | 146/6250 [09:12<6:30:58,  3.84s/it, gpt_loss=0.839, lr=1.53e-6][A
Train step of epoch 0:   2%|▏         | 146/6250 [09:16<6:30:58,  3.84s/it, gpt_loss=0.776, lr=1.53e-6][A
Train step of epoch 0:   2%|▏         | 147/6250 [09:16<6:43:58,  3.97s/it, gpt_loss=0.776, lr=1.53e-6][A[2025-04-24 00:01:59,169] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   2%|▏         | 147/6250 [09:20<6:43:58,  3.97s/it, gpt_loss=0.976, lr=1.57e-6][A
Train step of epoch 0:   2%|▏         | 148/6250 [09:20<6:39:13,  3.93s/it, gpt_loss=0.976, lr=1.57e-6][A
Train step of epoch 0:   2%|▏         | 148/6250 [09:23<6:39:13,  3.93s/it, gpt_loss=0.828, lr=1.57e-6][A
Train step of epoch 0:   2%|▏         | 149/6250 [09:23<6:15:01,  3.69s/it, gpt_loss=0.828, lr=1.57e-6][A
Train step of epoch 0:   2%|▏         | 149/6250 [09:27<6:15:01,  3.69s/it, gpt_loss=0.88, lr=1.57e-6] [A
Train step of epoch 0:   2%|▏         | 150/6250 [09:27<6:12:22,  3.66s/it, gpt_loss=0.88, lr=1.57e-6][A
Train step of epoch 0:   2%|▏         | 150/6250 [09:30<6:12:22,  3.66s/it, gpt_loss=0.967, lr=1.57e-6][A
Train step of epoch 0:   2%|▏         | 151/6250 [09:30<6:08:01,  3.62s/it, gpt_loss=0.967, lr=1.57e-6][A[2025-04-24 00:02:13,319] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   2%|▏         | 151/6250 [09:34<6:08:01,  3.62s/it, gpt_loss=0.694, lr=1.62e-6][A
Train step of epoch 0:   2%|▏         | 152/6250 [09:34<6:16:12,  3.70s/it, gpt_loss=0.694, lr=1.62e-6][A
Train step of epoch 0:   2%|▏         | 152/6250 [09:38<6:16:12,  3.70s/it, gpt_loss=0.743, lr=1.62e-6][A
Train step of epoch 0:   2%|▏         | 153/6250 [09:38<6:29:10,  3.83s/it, gpt_loss=0.743, lr=1.62e-6][A
Train step of epoch 0:   2%|▏         | 153/6250 [09:41<6:29:10,  3.83s/it, gpt_loss=0.829, lr=1.62e-6][A
Train step of epoch 0:   2%|▏         | 154/6250 [09:41<6:03:58,  3.58s/it, gpt_loss=0.829, lr=1.62e-6][A
Train step of epoch 0:   2%|▏         | 154/6250 [09:46<6:03:58,  3.58s/it, gpt_loss=0.773, lr=1.62e-6][A
Train step of epoch 0:   2%|▏         | 155/6250 [09:46<6:32:40,  3.87s/it, gpt_loss=0.773, lr=1.62e-6][A[2025-04-24 00:02:28,873] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   2%|▏         | 155/6250 [09:50<6:32:40,  3.87s/it, gpt_loss=0.848, lr=1.66e-6][A
Train step of epoch 0:   2%|▏         | 156/6250 [09:50<6:33:28,  3.87s/it, gpt_loss=0.848, lr=1.66e-6][A
Train step of epoch 0:   2%|▏         | 156/6250 [09:53<6:33:28,  3.87s/it, gpt_loss=0.996, lr=1.66e-6][A
Train step of epoch 0:   3%|▎         | 157/6250 [09:53<6:28:39,  3.83s/it, gpt_loss=0.996, lr=1.66e-6][A
Train step of epoch 0:   3%|▎         | 157/6250 [09:57<6:28:39,  3.83s/it, gpt_loss=0.853, lr=1.66e-6][A
Train step of epoch 0:   3%|▎         | 158/6250 [09:57<6:30:22,  3.84s/it, gpt_loss=0.853, lr=1.66e-6][A
Train step of epoch 0:   3%|▎         | 158/6250 [10:01<6:30:22,  3.84s/it, gpt_loss=0.811, lr=1.66e-6][A
Train step of epoch 0:   3%|▎         | 159/6250 [10:01<6:24:03,  3.78s/it, gpt_loss=0.811, lr=1.66e-6][A[2025-04-24 00:02:44,608] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   3%|▎         | 159/6250 [10:05<6:24:03,  3.78s/it, gpt_loss=0.917, lr=1.7e-6] [A
Train step of epoch 0:   3%|▎         | 160/6250 [10:05<6:45:32,  4.00s/it, gpt_loss=0.917, lr=1.7e-6][A
Train step of epoch 0:   3%|▎         | 160/6250 [10:09<6:45:32,  4.00s/it, gpt_loss=0.861, lr=1.7e-6][A
Train step of epoch 0:   3%|▎         | 161/6250 [10:09<6:48:42,  4.03s/it, gpt_loss=0.861, lr=1.7e-6][A
Train step of epoch 0:   3%|▎         | 161/6250 [10:12<6:48:42,  4.03s/it, gpt_loss=0.65, lr=1.7e-6] [A
Train step of epoch 0:   3%|▎         | 162/6250 [10:12<6:15:11,  3.70s/it, gpt_loss=0.65, lr=1.7e-6][A
Train step of epoch 0:   3%|▎         | 162/6250 [10:16<6:15:11,  3.70s/it, gpt_loss=0.814, lr=1.7e-6][A
Train step of epoch 0:   3%|▎         | 163/6250 [10:16<6:19:24,  3.74s/it, gpt_loss=0.814, lr=1.7e-6][A[2025-04-24 00:02:59,996] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   3%|▎         | 163/6250 [10:21<6:19:24,  3.74s/it, gpt_loss=0.732, lr=1.74e-6][A
Train step of epoch 0:   3%|▎         | 164/6250 [10:21<6:43:11,  3.97s/it, gpt_loss=0.732, lr=1.74e-6][A
Train step of epoch 0:   3%|▎         | 164/6250 [10:25<6:43:11,  3.97s/it, gpt_loss=0.834, lr=1.74e-6][A
Train step of epoch 0:   3%|▎         | 165/6250 [10:25<6:53:27,  4.08s/it, gpt_loss=0.834, lr=1.74e-6][A
Train step of epoch 0:   3%|▎         | 165/6250 [10:29<6:53:27,  4.08s/it, gpt_loss=1.02, lr=1.74e-6] [A
Train step of epoch 0:   3%|▎         | 166/6250 [10:29<6:45:45,  4.00s/it, gpt_loss=1.02, lr=1.74e-6][A
Train step of epoch 0:   3%|▎         | 166/6250 [10:33<6:45:45,  4.00s/it, gpt_loss=0.716, lr=1.74e-6][A
Train step of epoch 0:   3%|▎         | 167/6250 [10:33<6:51:06,  4.05s/it, gpt_loss=0.716, lr=1.74e-6][A[2025-04-24 00:03:16,497] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   3%|▎         | 167/6250 [10:37<6:51:06,  4.05s/it, gpt_loss=1.01, lr=1.79e-6] [A
Train step of epoch 0:   3%|▎         | 168/6250 [10:37<6:54:45,  4.09s/it, gpt_loss=1.01, lr=1.79e-6][A
Train step of epoch 0:   3%|▎         | 168/6250 [10:41<6:54:45,  4.09s/it, gpt_loss=0.707, lr=1.79e-6][A
Train step of epoch 0:   3%|▎         | 169/6250 [10:41<6:50:51,  4.05s/it, gpt_loss=0.707, lr=1.79e-6][A
Train step of epoch 0:   3%|▎         | 169/6250 [10:44<6:50:51,  4.05s/it, gpt_loss=0.79, lr=1.79e-6] [A
Train step of epoch 0:   3%|▎         | 170/6250 [10:44<6:16:56,  3.72s/it, gpt_loss=0.79, lr=1.79e-6][A
Train step of epoch 0:   3%|▎         | 170/6250 [10:48<6:16:56,  3.72s/it, gpt_loss=0.71, lr=1.79e-6][A
Train step of epoch 0:   3%|▎         | 171/6250 [10:48<6:17:54,  3.73s/it, gpt_loss=0.71, lr=1.79e-6][A[2025-04-24 00:03:30,644] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   3%|▎         | 171/6250 [10:51<6:17:54,  3.73s/it, gpt_loss=0.759, lr=1.83e-6][A
Train step of epoch 0:   3%|▎         | 172/6250 [10:51<6:10:29,  3.66s/it, gpt_loss=0.759, lr=1.83e-6][A
Train step of epoch 0:   3%|▎         | 172/6250 [10:55<6:10:29,  3.66s/it, gpt_loss=0.725, lr=1.83e-6][A
Train step of epoch 0:   3%|▎         | 173/6250 [10:55<6:10:32,  3.66s/it, gpt_loss=0.725, lr=1.83e-6][A
Train step of epoch 0:   3%|▎         | 173/6250 [10:59<6:10:32,  3.66s/it, gpt_loss=0.869, lr=1.83e-6][A
Train step of epoch 0:   3%|▎         | 174/6250 [10:59<6:09:50,  3.65s/it, gpt_loss=0.869, lr=1.83e-6][A
Train step of epoch 0:   3%|▎         | 174/6250 [11:02<6:09:50,  3.65s/it, gpt_loss=0.885, lr=1.83e-6][A
Train step of epoch 0:   3%|▎         | 175/6250 [11:02<6:13:47,  3.69s/it, gpt_loss=0.885, lr=1.83e-6][A[2025-04-24 00:03:46,193] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   3%|▎         | 175/6250 [11:07<6:13:47,  3.69s/it, gpt_loss=0.789, lr=1.87e-6][A
Train step of epoch 0:   3%|▎         | 176/6250 [11:07<6:37:14,  3.92s/it, gpt_loss=0.789, lr=1.87e-6][A
Train step of epoch 0:   3%|▎         | 176/6250 [11:11<6:37:14,  3.92s/it, gpt_loss=0.747, lr=1.87e-6][A
Train step of epoch 0:   3%|▎         | 177/6250 [11:11<6:37:38,  3.93s/it, gpt_loss=0.747, lr=1.87e-6][A
Train step of epoch 0:   3%|▎         | 177/6250 [11:14<6:37:38,  3.93s/it, gpt_loss=0.836, lr=1.87e-6][A
Train step of epoch 0:   3%|▎         | 178/6250 [11:14<6:04:17,  3.60s/it, gpt_loss=0.836, lr=1.87e-6][A
Train step of epoch 0:   3%|▎         | 178/6250 [11:17<6:04:17,  3.60s/it, gpt_loss=0.628, lr=1.87e-6][A
Train step of epoch 0:   3%|▎         | 179/6250 [11:17<6:04:26,  3.60s/it, gpt_loss=0.628, lr=1.87e-6][A[2025-04-24 00:04:00,948] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   3%|▎         | 179/6250 [11:22<6:04:26,  3.60s/it, gpt_loss=0.899, lr=1.91e-6][A
Train step of epoch 0:   3%|▎         | 180/6250 [11:22<6:27:55,  3.83s/it, gpt_loss=0.899, lr=1.91e-6][A
Train step of epoch 0:   3%|▎         | 180/6250 [11:26<6:27:55,  3.83s/it, gpt_loss=0.797, lr=1.91e-6][A
Train step of epoch 0:   3%|▎         | 181/6250 [11:26<6:36:46,  3.92s/it, gpt_loss=0.797, lr=1.91e-6][A
Train step of epoch 0:   3%|▎         | 181/6250 [11:29<6:36:46,  3.92s/it, gpt_loss=0.854, lr=1.91e-6][A
Train step of epoch 0:   3%|▎         | 182/6250 [11:29<6:04:55,  3.61s/it, gpt_loss=0.854, lr=1.91e-6][A
Train step of epoch 0:   3%|▎         | 182/6250 [11:33<6:04:55,  3.61s/it, gpt_loss=0.805, lr=1.91e-6][A
Train step of epoch 0:   3%|▎         | 183/6250 [11:33<6:13:40,  3.70s/it, gpt_loss=0.805, lr=1.91e-6][A[2025-04-24 00:04:15,884] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   3%|▎         | 183/6250 [11:37<6:13:40,  3.70s/it, gpt_loss=0.722, lr=1.96e-6][A
Train step of epoch 0:   3%|▎         | 184/6250 [11:37<6:23:51,  3.80s/it, gpt_loss=0.722, lr=1.96e-6][A
Train step of epoch 0:   3%|▎         | 184/6250 [11:40<6:23:51,  3.80s/it, gpt_loss=0.824, lr=1.96e-6][A
Train step of epoch 0:   3%|▎         | 185/6250 [11:40<6:25:19,  3.81s/it, gpt_loss=0.824, lr=1.96e-6][A
Train step of epoch 0:   3%|▎         | 185/6250 [11:44<6:25:19,  3.81s/it, gpt_loss=0.766, lr=1.96e-6][A
Train step of epoch 0:   3%|▎         | 186/6250 [11:44<6:06:22,  3.63s/it, gpt_loss=0.766, lr=1.96e-6][A
Train step of epoch 0:   3%|▎         | 186/6250 [11:47<6:06:22,  3.63s/it, gpt_loss=0.83, lr=1.96e-6] [A
Train step of epoch 0:   3%|▎         | 187/6250 [11:47<6:00:27,  3.57s/it, gpt_loss=0.83, lr=1.96e-6][A[2025-04-24 00:04:30,086] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   3%|▎         | 187/6250 [11:51<6:00:27,  3.57s/it, gpt_loss=0.716, lr=2e-6]  [A
Train step of epoch 0:   3%|▎         | 188/6250 [11:51<6:05:26,  3.62s/it, gpt_loss=0.716, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 188/6250 [11:55<6:05:26,  3.62s/it, gpt_loss=0.767, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 189/6250 [11:55<6:06:58,  3.63s/it, gpt_loss=0.767, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 189/6250 [11:58<6:06:58,  3.63s/it, gpt_loss=0.872, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 190/6250 [11:58<5:48:20,  3.45s/it, gpt_loss=0.872, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 190/6250 [12:01<5:48:20,  3.45s/it, gpt_loss=0.71, lr=2e-6] [A
Train step of epoch 0:   3%|▎         | 191/6250 [12:01<5:46:17,  3.43s/it, gpt_loss=0.71, lr=2e-6][A[2025-04-24 00:04:44,570] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   3%|▎         | 191/6250 [12:05<5:46:17,  3.43s/it, gpt_loss=0.876, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 192/6250 [12:05<6:16:00,  3.72s/it, gpt_loss=0.876, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 192/6250 [12:10<6:16:00,  3.72s/it, gpt_loss=0.903, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 193/6250 [12:10<6:46:21,  4.03s/it, gpt_loss=0.903, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 193/6250 [12:14<6:46:21,  4.03s/it, gpt_loss=0.812, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 194/6250 [12:14<6:42:29,  3.99s/it, gpt_loss=0.812, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 194/6250 [12:18<6:42:29,  3.99s/it, gpt_loss=0.62, lr=2e-6] [A
Train step of epoch 0:   3%|▎         | 195/6250 [12:18<6:37:32,  3.94s/it, gpt_loss=0.62, lr=2e-6][A[2025-04-24 00:05:01,575] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   3%|▎         | 195/6250 [12:22<6:37:32,  3.94s/it, gpt_loss=0.779, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 196/6250 [12:22<6:55:57,  4.12s/it, gpt_loss=0.779, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 196/6250 [12:26<6:55:57,  4.12s/it, gpt_loss=0.707, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 197/6250 [12:26<6:27:52,  3.84s/it, gpt_loss=0.707, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 197/6250 [12:29<6:27:52,  3.84s/it, gpt_loss=0.685, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 198/6250 [12:29<6:04:20,  3.61s/it, gpt_loss=0.685, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 198/6250 [12:33<6:04:20,  3.61s/it, gpt_loss=0.628, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 199/6250 [12:33<6:38:49,  3.95s/it, gpt_loss=0.628, lr=2e-6][A[2025-04-24 00:05:16,536] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   3%|▎         | 199/6250 [12:37<6:38:49,  3.95s/it, gpt_loss=0.694, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 200/6250 [12:37<6:38:20,  3.95s/it, gpt_loss=0.694, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 200/6250 [12:41<6:38:20,  3.95s/it, gpt_loss=1.09, lr=2e-6] [A
Train step of epoch 0:   3%|▎         | 201/6250 [12:41<6:27:39,  3.85s/it, gpt_loss=1.09, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 201/6250 [12:44<6:27:39,  3.85s/it, gpt_loss=0.894, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 202/6250 [12:44<6:11:16,  3.68s/it, gpt_loss=0.894, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 202/6250 [12:47<6:11:16,  3.68s/it, gpt_loss=0.766, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 203/6250 [12:47<5:52:55,  3.50s/it, gpt_loss=0.766, lr=2e-6][A[2025-04-24 00:05:31,240] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   3%|▎         | 203/6250 [12:52<5:52:55,  3.50s/it, gpt_loss=0.985, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 204/6250 [12:52<6:29:42,  3.87s/it, gpt_loss=0.985, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 204/6250 [12:57<6:29:42,  3.87s/it, gpt_loss=0.717, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 205/6250 [12:57<6:48:55,  4.06s/it, gpt_loss=0.717, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 205/6250 [12:59<6:48:55,  4.06s/it, gpt_loss=0.706, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 206/6250 [12:59<6:13:58,  3.71s/it, gpt_loss=0.706, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 206/6250 [13:04<6:13:58,  3.71s/it, gpt_loss=0.72, lr=2e-6] [A
Train step of epoch 0:   3%|▎         | 207/6250 [13:04<6:34:30,  3.92s/it, gpt_loss=0.72, lr=2e-6][A[2025-04-24 00:05:46,795] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   3%|▎         | 207/6250 [13:08<6:34:30,  3.92s/it, gpt_loss=0.801, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 208/6250 [13:08<6:29:25,  3.87s/it, gpt_loss=0.801, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 208/6250 [13:11<6:29:25,  3.87s/it, gpt_loss=0.936, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 209/6250 [13:11<6:07:24,  3.65s/it, gpt_loss=0.936, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 209/6250 [13:15<6:07:24,  3.65s/it, gpt_loss=0.699, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 210/6250 [13:15<6:17:04,  3.75s/it, gpt_loss=0.699, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 210/6250 [13:19<6:17:04,  3.75s/it, gpt_loss=0.77, lr=2e-6] [A
Train step of epoch 0:   3%|▎         | 211/6250 [13:19<6:19:56,  3.77s/it, gpt_loss=0.77, lr=2e-6][A[2025-04-24 00:06:01,469] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   3%|▎         | 211/6250 [13:22<6:19:56,  3.77s/it, gpt_loss=0.952, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 212/6250 [13:22<6:18:13,  3.76s/it, gpt_loss=0.952, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 212/6250 [13:25<6:18:13,  3.76s/it, gpt_loss=0.714, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 213/6250 [13:25<5:43:52,  3.42s/it, gpt_loss=0.714, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 213/6250 [13:29<5:43:52,  3.42s/it, gpt_loss=0.917, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 214/6250 [13:29<6:04:52,  3.63s/it, gpt_loss=0.917, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 214/6250 [13:34<6:04:52,  3.63s/it, gpt_loss=0.767, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 215/6250 [13:34<6:33:40,  3.91s/it, gpt_loss=0.767, lr=2e-6][A[2025-04-24 00:06:16,068] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   3%|▎         | 215/6250 [13:37<6:33:40,  3.91s/it, gpt_loss=0.877, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 216/6250 [13:37<6:14:23,  3.72s/it, gpt_loss=0.877, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 216/6250 [13:40<6:14:23,  3.72s/it, gpt_loss=0.733, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 217/6250 [13:40<5:54:48,  3.53s/it, gpt_loss=0.733, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 217/6250 [13:43<5:54:48,  3.53s/it, gpt_loss=0.74, lr=2e-6] [A
Train step of epoch 0:   3%|▎         | 218/6250 [13:43<5:49:55,  3.48s/it, gpt_loss=0.74, lr=2e-6][A
Train step of epoch 0:   3%|▎         | 218/6250 [13:46<5:49:55,  3.48s/it, gpt_loss=0.612, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 219/6250 [13:46<5:36:38,  3.35s/it, gpt_loss=0.612, lr=2e-6][A[2025-04-24 00:06:28,970] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   4%|▎         | 219/6250 [13:50<5:36:38,  3.35s/it, gpt_loss=0.852, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 220/6250 [13:50<5:38:35,  3.37s/it, gpt_loss=0.852, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 220/6250 [13:53<5:38:35,  3.37s/it, gpt_loss=0.741, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 221/6250 [13:53<5:49:32,  3.48s/it, gpt_loss=0.741, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 221/6250 [13:57<5:49:32,  3.48s/it, gpt_loss=0.627, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 222/6250 [13:57<5:40:51,  3.39s/it, gpt_loss=0.627, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 222/6250 [14:01<5:40:51,  3.39s/it, gpt_loss=0.679, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 223/6250 [14:01<6:14:58,  3.73s/it, gpt_loss=0.679, lr=2e-6][A[2025-04-24 00:06:44,620] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   4%|▎         | 223/6250 [14:05<6:14:58,  3.73s/it, gpt_loss=0.86, lr=2e-6] [A
Train step of epoch 0:   4%|▎         | 224/6250 [14:05<6:28:54,  3.87s/it, gpt_loss=0.86, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 224/6250 [14:09<6:28:54,  3.87s/it, gpt_loss=0.675, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 225/6250 [14:09<6:27:47,  3.86s/it, gpt_loss=0.675, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 225/6250 [14:12<6:27:47,  3.86s/it, gpt_loss=0.819, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 226/6250 [14:12<6:07:19,  3.66s/it, gpt_loss=0.819, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 226/6250 [14:15<6:07:19,  3.66s/it, gpt_loss=0.805, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 227/6250 [14:15<5:42:20,  3.41s/it, gpt_loss=0.805, lr=2e-6][A[2025-04-24 00:06:57,995] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   4%|▎         | 227/6250 [14:19<5:42:20,  3.41s/it, gpt_loss=0.819, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 228/6250 [14:19<5:45:37,  3.44s/it, gpt_loss=0.819, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 228/6250 [14:22<5:45:37,  3.44s/it, gpt_loss=0.917, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 229/6250 [14:22<5:52:04,  3.51s/it, gpt_loss=0.917, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 229/6250 [14:26<5:52:04,  3.51s/it, gpt_loss=0.693, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 230/6250 [14:26<6:05:45,  3.65s/it, gpt_loss=0.693, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 230/6250 [14:31<6:05:45,  3.65s/it, gpt_loss=0.795, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 231/6250 [14:31<6:27:08,  3.86s/it, gpt_loss=0.795, lr=2e-6][A[2025-04-24 00:07:14,716] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   4%|▎         | 231/6250 [14:35<6:27:08,  3.86s/it, gpt_loss=0.689, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 232/6250 [14:35<6:53:32,  4.12s/it, gpt_loss=0.689, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 232/6250 [14:40<6:53:32,  4.12s/it, gpt_loss=0.671, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 233/6250 [14:40<7:04:19,  4.23s/it, gpt_loss=0.671, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 233/6250 [14:43<7:04:19,  4.23s/it, gpt_loss=0.851, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 234/6250 [14:43<6:32:54,  3.92s/it, gpt_loss=0.851, lr=2e-6][A
Train step of epoch 0:   4%|▎         | 234/6250 [14:47<6:32:54,  3.92s/it, gpt_loss=0.716, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 235/6250 [14:47<6:16:23,  3.75s/it, gpt_loss=0.716, lr=2e-6][A[2025-04-24 00:07:30,025] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   4%|▍         | 235/6250 [14:51<6:16:23,  3.75s/it, gpt_loss=0.819, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 236/6250 [14:51<6:31:40,  3.91s/it, gpt_loss=0.819, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 236/6250 [14:54<6:31:40,  3.91s/it, gpt_loss=0.763, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 237/6250 [14:54<6:17:39,  3.77s/it, gpt_loss=0.763, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 237/6250 [14:58<6:17:39,  3.77s/it, gpt_loss=0.718, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 238/6250 [14:58<6:30:38,  3.90s/it, gpt_loss=0.718, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 238/6250 [15:02<6:30:38,  3.90s/it, gpt_loss=0.647, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 239/6250 [15:02<6:18:34,  3.78s/it, gpt_loss=0.647, lr=2e-6][A[2025-04-24 00:07:46,323] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   4%|▍         | 239/6250 [15:07<6:18:34,  3.78s/it, gpt_loss=0.864, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 240/6250 [15:07<6:59:46,  4.19s/it, gpt_loss=0.864, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 240/6250 [15:12<6:59:46,  4.19s/it, gpt_loss=0.938, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 241/6250 [15:12<7:08:15,  4.28s/it, gpt_loss=0.938, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 241/6250 [15:15<7:08:15,  4.28s/it, gpt_loss=0.685, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 242/6250 [15:15<6:35:01,  3.95s/it, gpt_loss=0.685, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 242/6250 [15:17<6:35:01,  3.95s/it, gpt_loss=0.653, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 243/6250 [15:17<5:54:44,  3.54s/it, gpt_loss=0.653, lr=2e-6][A[2025-04-24 00:07:59,017] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   4%|▍         | 243/6250 [15:20<5:54:44,  3.54s/it, gpt_loss=0.712, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 244/6250 [15:20<5:21:34,  3.21s/it, gpt_loss=0.712, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 244/6250 [15:24<5:21:34,  3.21s/it, gpt_loss=0.688, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 245/6250 [15:24<5:51:16,  3.51s/it, gpt_loss=0.688, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 245/6250 [15:27<5:51:16,  3.51s/it, gpt_loss=0.569, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 246/6250 [15:27<5:50:35,  3.50s/it, gpt_loss=0.569, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 246/6250 [15:31<5:50:35,  3.50s/it, gpt_loss=0.706, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 247/6250 [15:31<5:49:06,  3.49s/it, gpt_loss=0.706, lr=2e-6][A[2025-04-24 00:08:14,177] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   4%|▍         | 247/6250 [15:35<5:49:06,  3.49s/it, gpt_loss=0.705, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 248/6250 [15:35<6:04:42,  3.65s/it, gpt_loss=0.705, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 248/6250 [15:39<6:04:42,  3.65s/it, gpt_loss=0.759, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 249/6250 [15:39<6:20:43,  3.81s/it, gpt_loss=0.759, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 249/6250 [15:42<6:20:43,  3.81s/it, gpt_loss=0.763, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 250/6250 [15:42<5:54:18,  3.54s/it, gpt_loss=0.763, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 250/6250 [15:46<5:54:18,  3.54s/it, gpt_loss=0.697, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 251/6250 [15:46<5:54:03,  3.54s/it, gpt_loss=0.697, lr=2e-6][A[2025-04-24 00:08:28,224] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   4%|▍         | 251/6250 [15:49<5:54:03,  3.54s/it, gpt_loss=0.782, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 252/6250 [15:49<5:49:46,  3.50s/it, gpt_loss=0.782, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 252/6250 [15:53<5:49:46,  3.50s/it, gpt_loss=0.783, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 253/6250 [15:53<5:55:26,  3.56s/it, gpt_loss=0.783, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 253/6250 [15:56<5:55:26,  3.56s/it, gpt_loss=0.661, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 254/6250 [15:56<5:51:23,  3.52s/it, gpt_loss=0.661, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 254/6250 [15:59<5:51:23,  3.52s/it, gpt_loss=0.752, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 255/6250 [15:59<5:18:11,  3.18s/it, gpt_loss=0.752, lr=2e-6][A[2025-04-24 00:08:41,778] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   4%|▍         | 255/6250 [16:03<5:18:11,  3.18s/it, gpt_loss=0.778, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 256/6250 [16:03<5:43:30,  3.44s/it, gpt_loss=0.778, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 256/6250 [16:07<5:43:30,  3.44s/it, gpt_loss=0.667, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 257/6250 [16:07<6:05:10,  3.66s/it, gpt_loss=0.667, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 257/6250 [16:10<6:05:10,  3.66s/it, gpt_loss=0.64, lr=2e-6] [A
Train step of epoch 0:   4%|▍         | 258/6250 [16:10<6:00:06,  3.61s/it, gpt_loss=0.64, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 258/6250 [16:14<6:00:06,  3.61s/it, gpt_loss=0.806, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 259/6250 [16:14<6:06:41,  3.67s/it, gpt_loss=0.806, lr=2e-6][A[2025-04-24 00:08:58,471] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   4%|▍         | 259/6250 [16:19<6:06:41,  3.67s/it, gpt_loss=0.641, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 260/6250 [16:19<6:52:45,  4.13s/it, gpt_loss=0.641, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 260/6250 [16:23<6:52:45,  4.13s/it, gpt_loss=0.657, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 261/6250 [16:23<6:41:13,  4.02s/it, gpt_loss=0.657, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 261/6250 [16:26<6:41:13,  4.02s/it, gpt_loss=0.808, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 262/6250 [16:26<6:22:16,  3.83s/it, gpt_loss=0.808, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 262/6250 [16:29<6:22:16,  3.83s/it, gpt_loss=0.653, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 263/6250 [16:29<5:54:20,  3.55s/it, gpt_loss=0.653, lr=2e-6][A[2025-04-24 00:09:11,930] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   4%|▍         | 263/6250 [16:33<5:54:20,  3.55s/it, gpt_loss=0.76, lr=2e-6] [A
Train step of epoch 0:   4%|▍         | 264/6250 [16:33<5:50:18,  3.51s/it, gpt_loss=0.76, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 264/6250 [16:37<5:50:18,  3.51s/it, gpt_loss=0.739, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 265/6250 [16:37<6:04:55,  3.66s/it, gpt_loss=0.739, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 265/6250 [16:40<6:04:55,  3.66s/it, gpt_loss=0.853, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 266/6250 [16:40<6:05:45,  3.67s/it, gpt_loss=0.853, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 266/6250 [16:44<6:05:45,  3.67s/it, gpt_loss=0.805, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 267/6250 [16:44<5:57:06,  3.58s/it, gpt_loss=0.805, lr=2e-6][A[2025-04-24 00:09:26,639] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   4%|▍         | 267/6250 [16:47<5:57:06,  3.58s/it, gpt_loss=0.778, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 268/6250 [16:47<5:58:47,  3.60s/it, gpt_loss=0.778, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 268/6250 [16:51<5:58:47,  3.60s/it, gpt_loss=0.795, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 269/6250 [16:51<6:04:02,  3.65s/it, gpt_loss=0.795, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 269/6250 [16:54<6:04:02,  3.65s/it, gpt_loss=0.926, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 270/6250 [16:54<5:53:40,  3.55s/it, gpt_loss=0.926, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 270/6250 [16:58<5:53:40,  3.55s/it, gpt_loss=0.758, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 271/6250 [16:58<5:48:25,  3.50s/it, gpt_loss=0.758, lr=2e-6][A[2025-04-24 00:09:40,790] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   4%|▍         | 271/6250 [17:02<5:48:25,  3.50s/it, gpt_loss=0.758, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 272/6250 [17:02<5:54:12,  3.56s/it, gpt_loss=0.758, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 272/6250 [17:05<5:54:12,  3.56s/it, gpt_loss=0.672, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 273/6250 [17:05<5:47:03,  3.48s/it, gpt_loss=0.672, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 273/6250 [17:09<5:47:03,  3.48s/it, gpt_loss=0.7, lr=2e-6]  [A
Train step of epoch 0:   4%|▍         | 274/6250 [17:09<5:52:57,  3.54s/it, gpt_loss=0.7, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 274/6250 [17:11<5:52:57,  3.54s/it, gpt_loss=0.634, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 275/6250 [17:11<5:31:42,  3.33s/it, gpt_loss=0.634, lr=2e-6][A[2025-04-24 00:09:53,426] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   4%|▍         | 275/6250 [17:14<5:31:42,  3.33s/it, gpt_loss=0.703, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 276/6250 [17:14<5:15:49,  3.17s/it, gpt_loss=0.703, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 276/6250 [17:18<5:15:49,  3.17s/it, gpt_loss=0.586, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 277/6250 [17:18<5:48:07,  3.50s/it, gpt_loss=0.586, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 277/6250 [17:22<5:48:07,  3.50s/it, gpt_loss=0.76, lr=2e-6] [A
Train step of epoch 0:   4%|▍         | 278/6250 [17:22<5:39:53,  3.41s/it, gpt_loss=0.76, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 278/6250 [17:26<5:39:53,  3.41s/it, gpt_loss=0.731, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 279/6250 [17:26<6:07:16,  3.69s/it, gpt_loss=0.731, lr=2e-6][A[2025-04-24 00:10:08,433] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   4%|▍         | 279/6250 [17:29<6:07:16,  3.69s/it, gpt_loss=0.969, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 280/6250 [17:29<5:52:24,  3.54s/it, gpt_loss=0.969, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 280/6250 [17:33<5:52:24,  3.54s/it, gpt_loss=0.73, lr=2e-6] [A
Train step of epoch 0:   4%|▍         | 281/6250 [17:33<5:53:49,  3.56s/it, gpt_loss=0.73, lr=2e-6][A
Train step of epoch 0:   4%|▍         | 281/6250 [17:38<5:53:49,  3.56s/it, gpt_loss=0.767, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 282/6250 [17:38<6:30:41,  3.93s/it, gpt_loss=0.767, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 282/6250 [17:41<6:30:41,  3.93s/it, gpt_loss=0.772, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 283/6250 [17:41<6:05:05,  3.67s/it, gpt_loss=0.772, lr=2e-6][A[2025-04-24 00:10:23,479] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   5%|▍         | 283/6250 [17:44<6:05:05,  3.67s/it, gpt_loss=0.802, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 284/6250 [17:44<6:02:34,  3.65s/it, gpt_loss=0.802, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 284/6250 [17:48<6:02:34,  3.65s/it, gpt_loss=0.685, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 285/6250 [17:48<5:58:24,  3.61s/it, gpt_loss=0.685, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 285/6250 [17:52<5:58:24,  3.61s/it, gpt_loss=0.784, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 286/6250 [17:52<6:05:37,  3.68s/it, gpt_loss=0.784, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 286/6250 [17:55<6:05:37,  3.68s/it, gpt_loss=0.683, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 287/6250 [17:55<5:57:08,  3.59s/it, gpt_loss=0.683, lr=2e-6][A[2025-04-24 00:10:37,599] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   5%|▍         | 287/6250 [17:58<5:57:08,  3.59s/it, gpt_loss=0.773, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 288/6250 [17:58<5:50:17,  3.53s/it, gpt_loss=0.773, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 288/6250 [18:02<5:50:17,  3.53s/it, gpt_loss=0.839, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 289/6250 [18:02<5:58:21,  3.61s/it, gpt_loss=0.839, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 289/6250 [18:06<5:58:21,  3.61s/it, gpt_loss=0.612, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 290/6250 [18:06<6:03:14,  3.66s/it, gpt_loss=0.612, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 290/6250 [18:10<6:03:14,  3.66s/it, gpt_loss=0.923, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 291/6250 [18:10<6:01:56,  3.64s/it, gpt_loss=0.923, lr=2e-6][A[2025-04-24 00:10:51,845] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   5%|▍         | 291/6250 [18:13<6:01:56,  3.64s/it, gpt_loss=0.755, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 292/6250 [18:13<5:44:29,  3.47s/it, gpt_loss=0.755, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 292/6250 [18:16<5:44:29,  3.47s/it, gpt_loss=0.625, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 293/6250 [18:16<5:40:55,  3.43s/it, gpt_loss=0.625, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 293/6250 [18:20<5:40:55,  3.43s/it, gpt_loss=0.934, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 294/6250 [18:20<6:12:36,  3.75s/it, gpt_loss=0.934, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 294/6250 [18:23<6:12:36,  3.75s/it, gpt_loss=0.712, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 295/6250 [18:23<5:45:49,  3.48s/it, gpt_loss=0.712, lr=2e-6][A[2025-04-24 00:11:05,393] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   5%|▍         | 295/6250 [18:26<5:45:49,  3.48s/it, gpt_loss=0.558, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 296/6250 [18:26<5:26:37,  3.29s/it, gpt_loss=0.558, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 296/6250 [18:30<5:26:37,  3.29s/it, gpt_loss=0.67, lr=2e-6] [A
Train step of epoch 0:   5%|▍         | 297/6250 [18:30<5:48:33,  3.51s/it, gpt_loss=0.67, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 297/6250 [18:33<5:48:33,  3.51s/it, gpt_loss=0.557, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 298/6250 [18:33<5:41:17,  3.44s/it, gpt_loss=0.557, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 298/6250 [18:38<5:41:17,  3.44s/it, gpt_loss=0.821, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 299/6250 [18:38<6:06:21,  3.69s/it, gpt_loss=0.821, lr=2e-6][A[2025-04-24 00:11:21,358] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   5%|▍         | 299/6250 [18:42<6:06:21,  3.69s/it, gpt_loss=0.791, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 300/6250 [18:42<6:26:38,  3.90s/it, gpt_loss=0.791, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 300/6250 [18:46<6:26:38,  3.90s/it, gpt_loss=0.644, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 301/6250 [18:46<6:15:27,  3.79s/it, gpt_loss=0.644, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 301/6250 [18:49<6:15:27,  3.79s/it, gpt_loss=0.884, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 302/6250 [18:49<5:58:08,  3.61s/it, gpt_loss=0.884, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 302/6250 [18:53<5:58:08,  3.61s/it, gpt_loss=1.04, lr=2e-6] [A
Train step of epoch 0:   5%|▍         | 303/6250 [18:53<6:02:26,  3.66s/it, gpt_loss=1.04, lr=2e-6][A[2025-04-24 00:11:34,448] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   5%|▍         | 303/6250 [18:55<6:02:26,  3.66s/it, gpt_loss=0.612, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 304/6250 [18:55<5:30:57,  3.34s/it, gpt_loss=0.612, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 304/6250 [18:59<5:30:57,  3.34s/it, gpt_loss=0.508, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 305/6250 [18:59<5:33:14,  3.36s/it, gpt_loss=0.508, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 305/6250 [19:02<5:33:14,  3.36s/it, gpt_loss=0.777, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 306/6250 [19:02<5:23:16,  3.26s/it, gpt_loss=0.777, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 306/6250 [19:06<5:23:16,  3.26s/it, gpt_loss=0.636, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 307/6250 [19:06<5:56:05,  3.60s/it, gpt_loss=0.636, lr=2e-6][A[2025-04-24 00:11:49,209] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   5%|▍         | 307/6250 [19:10<5:56:05,  3.60s/it, gpt_loss=0.627, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 308/6250 [19:10<6:06:21,  3.70s/it, gpt_loss=0.627, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 308/6250 [19:14<6:06:21,  3.70s/it, gpt_loss=0.51, lr=2e-6] [A
Train step of epoch 0:   5%|▍         | 309/6250 [19:14<6:12:29,  3.76s/it, gpt_loss=0.51, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 309/6250 [19:17<6:12:29,  3.76s/it, gpt_loss=0.528, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 310/6250 [19:17<5:57:23,  3.61s/it, gpt_loss=0.528, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 310/6250 [19:21<5:57:23,  3.61s/it, gpt_loss=0.922, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 311/6250 [19:21<5:52:31,  3.56s/it, gpt_loss=0.922, lr=2e-6][A[2025-04-24 00:12:02,913] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   5%|▍         | 311/6250 [19:24<5:52:31,  3.56s/it, gpt_loss=0.645, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 312/6250 [19:24<5:38:32,  3.42s/it, gpt_loss=0.645, lr=2e-6][A
Train step of epoch 0:   5%|▍         | 312/6250 [19:28<5:38:32,  3.42s/it, gpt_loss=0.69, lr=2e-6] [A
Train step of epoch 0:   5%|▌         | 313/6250 [19:28<5:54:10,  3.58s/it, gpt_loss=0.69, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 313/6250 [19:31<5:54:10,  3.58s/it, gpt_loss=0.812, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 314/6250 [19:31<6:02:43,  3.67s/it, gpt_loss=0.812, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 314/6250 [19:36<6:02:43,  3.67s/it, gpt_loss=0.729, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 315/6250 [19:36<6:24:15,  3.88s/it, gpt_loss=0.729, lr=2e-6][A[2025-04-24 00:12:19,708] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   5%|▌         | 315/6250 [19:40<6:24:15,  3.88s/it, gpt_loss=0.712, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 316/6250 [19:40<6:44:53,  4.09s/it, gpt_loss=0.712, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 316/6250 [19:45<6:44:53,  4.09s/it, gpt_loss=0.717, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 317/6250 [19:45<6:50:41,  4.15s/it, gpt_loss=0.717, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 317/6250 [19:48<6:50:41,  4.15s/it, gpt_loss=0.56, lr=2e-6] [A
Train step of epoch 0:   5%|▌         | 318/6250 [19:48<6:17:41,  3.82s/it, gpt_loss=0.56, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 318/6250 [19:52<6:17:41,  3.82s/it, gpt_loss=0.806, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 319/6250 [19:52<6:28:11,  3.93s/it, gpt_loss=0.806, lr=2e-6][A[2025-04-24 00:12:35,215] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   5%|▌         | 319/6250 [19:56<6:28:11,  3.93s/it, gpt_loss=0.94, lr=2e-6] [A
Train step of epoch 0:   5%|▌         | 320/6250 [19:56<6:30:08,  3.95s/it, gpt_loss=0.94, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 320/6250 [20:00<6:30:08,  3.95s/it, gpt_loss=0.689, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 321/6250 [20:00<6:22:42,  3.87s/it, gpt_loss=0.689, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 321/6250 [20:03<6:22:42,  3.87s/it, gpt_loss=0.688, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 322/6250 [20:03<6:01:33,  3.66s/it, gpt_loss=0.688, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 322/6250 [20:08<6:01:33,  3.66s/it, gpt_loss=0.874, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 323/6250 [20:08<6:38:51,  4.04s/it, gpt_loss=0.874, lr=2e-6][A[2025-04-24 00:12:50,790] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   5%|▌         | 323/6250 [20:12<6:38:51,  4.04s/it, gpt_loss=0.719, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 324/6250 [20:12<6:31:34,  3.96s/it, gpt_loss=0.719, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 324/6250 [20:16<6:31:34,  3.96s/it, gpt_loss=0.871, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 325/6250 [20:16<6:44:45,  4.10s/it, gpt_loss=0.871, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 325/6250 [20:20<6:44:45,  4.10s/it, gpt_loss=0.779, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 326/6250 [20:20<6:31:42,  3.97s/it, gpt_loss=0.779, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 326/6250 [20:23<6:31:42,  3.97s/it, gpt_loss=0.626, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 327/6250 [20:23<6:04:36,  3.69s/it, gpt_loss=0.626, lr=2e-6][A[2025-04-24 00:13:06,507] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   5%|▌         | 327/6250 [20:27<6:04:36,  3.69s/it, gpt_loss=0.777, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 328/6250 [20:27<6:31:05,  3.96s/it, gpt_loss=0.777, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 328/6250 [20:32<6:31:05,  3.96s/it, gpt_loss=0.681, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 329/6250 [20:32<7:04:20,  4.30s/it, gpt_loss=0.681, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 329/6250 [20:37<7:04:20,  4.30s/it, gpt_loss=0.843, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 330/6250 [20:37<7:04:57,  4.31s/it, gpt_loss=0.843, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 330/6250 [20:40<7:04:57,  4.31s/it, gpt_loss=0.674, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 331/6250 [20:40<6:49:44,  4.15s/it, gpt_loss=0.674, lr=2e-6][A[2025-04-24 00:13:23,670] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   5%|▌         | 331/6250 [20:44<6:49:44,  4.15s/it, gpt_loss=0.831, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 332/6250 [20:44<6:43:51,  4.09s/it, gpt_loss=0.831, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 332/6250 [20:48<6:43:51,  4.09s/it, gpt_loss=0.645, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 333/6250 [20:48<6:18:52,  3.84s/it, gpt_loss=0.645, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 333/6250 [20:52<6:18:52,  3.84s/it, gpt_loss=0.736, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 334/6250 [20:52<6:34:10,  4.00s/it, gpt_loss=0.736, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 334/6250 [20:56<6:34:10,  4.00s/it, gpt_loss=0.629, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 335/6250 [20:56<6:19:23,  3.85s/it, gpt_loss=0.629, lr=2e-6][A[2025-04-24 00:13:39,210] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   5%|▌         | 335/6250 [21:00<6:19:23,  3.85s/it, gpt_loss=0.779, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 336/6250 [21:00<6:36:25,  4.02s/it, gpt_loss=0.779, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 336/6250 [21:05<6:36:25,  4.02s/it, gpt_loss=0.634, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 337/6250 [21:05<7:01:32,  4.28s/it, gpt_loss=0.634, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 337/6250 [21:09<7:01:32,  4.28s/it, gpt_loss=0.77, lr=2e-6] [A
Train step of epoch 0:   5%|▌         | 338/6250 [21:09<6:57:36,  4.24s/it, gpt_loss=0.77, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 338/6250 [21:12<6:57:36,  4.24s/it, gpt_loss=0.704, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 339/6250 [21:12<6:34:08,  4.00s/it, gpt_loss=0.704, lr=2e-6][A[2025-04-24 00:13:56,112] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   5%|▌         | 339/6250 [21:17<6:34:08,  4.00s/it, gpt_loss=0.744, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 340/6250 [21:17<6:46:55,  4.13s/it, gpt_loss=0.744, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 340/6250 [21:21<6:46:55,  4.13s/it, gpt_loss=0.784, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 341/6250 [21:21<6:57:23,  4.24s/it, gpt_loss=0.784, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 341/6250 [21:25<6:57:23,  4.24s/it, gpt_loss=0.764, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 342/6250 [21:25<6:28:33,  3.95s/it, gpt_loss=0.764, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 342/6250 [21:29<6:28:33,  3.95s/it, gpt_loss=0.871, lr=2e-6][A
Train step of epoch 0:   5%|▌         | 343/6250 [21:29<6:49:51,  4.16s/it, gpt_loss=0.871, lr=2e-6][A[2025-04-24 00:14:13,111] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   5%|▌         | 343/6250 [21:34<6:49:51,  4.16s/it, gpt_loss=0.732, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 344/6250 [21:34<7:01:59,  4.29s/it, gpt_loss=0.732, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 344/6250 [21:38<7:01:59,  4.29s/it, gpt_loss=0.753, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 345/6250 [21:38<6:55:53,  4.23s/it, gpt_loss=0.753, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 345/6250 [21:41<6:55:53,  4.23s/it, gpt_loss=0.675, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 346/6250 [21:41<6:31:03,  3.97s/it, gpt_loss=0.675, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 346/6250 [21:46<6:31:03,  3.97s/it, gpt_loss=0.838, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 347/6250 [21:46<6:38:16,  4.05s/it, gpt_loss=0.838, lr=2e-6][A[2025-04-24 00:14:28,972] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   6%|▌         | 347/6250 [21:50<6:38:16,  4.05s/it, gpt_loss=0.726, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 348/6250 [21:50<6:41:48,  4.08s/it, gpt_loss=0.726, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 348/6250 [21:54<6:41:48,  4.08s/it, gpt_loss=0.872, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 349/6250 [21:54<6:35:50,  4.02s/it, gpt_loss=0.872, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 349/6250 [21:57<6:35:50,  4.02s/it, gpt_loss=0.633, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 350/6250 [21:57<6:10:22,  3.77s/it, gpt_loss=0.633, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 350/6250 [22:01<6:10:22,  3.77s/it, gpt_loss=0.763, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 351/6250 [22:01<6:22:15,  3.89s/it, gpt_loss=0.763, lr=2e-6][A[2025-04-24 00:14:42,652] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   6%|▌         | 351/6250 [22:03<6:22:15,  3.89s/it, gpt_loss=0.653, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 352/6250 [22:03<5:40:03,  3.46s/it, gpt_loss=0.653, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 352/6250 [22:08<5:40:03,  3.46s/it, gpt_loss=0.712, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 353/6250 [22:08<6:11:50,  3.78s/it, gpt_loss=0.712, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 353/6250 [22:11<6:11:50,  3.78s/it, gpt_loss=0.722, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 354/6250 [22:11<6:00:02,  3.66s/it, gpt_loss=0.722, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 354/6250 [22:15<6:00:02,  3.66s/it, gpt_loss=0.732, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 355/6250 [22:15<6:02:21,  3.69s/it, gpt_loss=0.732, lr=2e-6][A[2025-04-24 00:14:58,095] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   6%|▌         | 355/6250 [22:19<6:02:21,  3.69s/it, gpt_loss=0.728, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 356/6250 [22:19<6:04:51,  3.71s/it, gpt_loss=0.728, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 356/6250 [22:22<6:04:51,  3.71s/it, gpt_loss=0.653, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 357/6250 [22:22<6:01:26,  3.68s/it, gpt_loss=0.653, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 357/6250 [22:28<6:01:26,  3.68s/it, gpt_loss=0.644, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 358/6250 [22:28<6:55:13,  4.23s/it, gpt_loss=0.644, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 358/6250 [22:31<6:55:13,  4.23s/it, gpt_loss=0.751, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 359/6250 [22:31<6:33:07,  4.00s/it, gpt_loss=0.751, lr=2e-6][A[2025-04-24 00:15:14,340] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   6%|▌         | 359/6250 [22:35<6:33:07,  4.00s/it, gpt_loss=0.676, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 360/6250 [22:35<6:22:48,  3.90s/it, gpt_loss=0.676, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 360/6250 [22:39<6:22:48,  3.90s/it, gpt_loss=0.744, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 361/6250 [22:39<6:23:35,  3.91s/it, gpt_loss=0.744, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 361/6250 [22:42<6:23:35,  3.91s/it, gpt_loss=0.449, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 362/6250 [22:42<6:00:39,  3.68s/it, gpt_loss=0.449, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 362/6250 [22:46<6:00:39,  3.68s/it, gpt_loss=0.757, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 363/6250 [22:46<6:17:34,  3.85s/it, gpt_loss=0.757, lr=2e-6][A[2025-04-24 00:15:29,100] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   6%|▌         | 363/6250 [22:50<6:17:34,  3.85s/it, gpt_loss=0.547, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 364/6250 [22:50<6:05:44,  3.73s/it, gpt_loss=0.547, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 364/6250 [22:54<6:05:44,  3.73s/it, gpt_loss=0.906, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 365/6250 [22:54<6:21:49,  3.89s/it, gpt_loss=0.906, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 365/6250 [22:57<6:21:49,  3.89s/it, gpt_loss=0.712, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 366/6250 [22:57<5:57:28,  3.65s/it, gpt_loss=0.712, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 366/6250 [23:01<5:57:28,  3.65s/it, gpt_loss=0.558, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 367/6250 [23:01<6:05:56,  3.73s/it, gpt_loss=0.558, lr=2e-6][A[2025-04-24 00:15:44,247] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   6%|▌         | 367/6250 [23:05<6:05:56,  3.73s/it, gpt_loss=0.698, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 368/6250 [23:05<6:09:52,  3.77s/it, gpt_loss=0.698, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 368/6250 [23:09<6:09:52,  3.77s/it, gpt_loss=0.617, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 369/6250 [23:09<6:22:16,  3.90s/it, gpt_loss=0.617, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 369/6250 [23:13<6:22:16,  3.90s/it, gpt_loss=0.663, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 370/6250 [23:13<6:23:01,  3.91s/it, gpt_loss=0.663, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 370/6250 [23:17<6:23:01,  3.91s/it, gpt_loss=0.73, lr=2e-6] [A
Train step of epoch 0:   6%|▌         | 371/6250 [23:17<6:18:52,  3.87s/it, gpt_loss=0.73, lr=2e-6][A[2025-04-24 00:15:59,283] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   6%|▌         | 371/6250 [23:20<6:18:52,  3.87s/it, gpt_loss=0.782, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 372/6250 [23:20<5:57:29,  3.65s/it, gpt_loss=0.782, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 372/6250 [23:24<5:57:29,  3.65s/it, gpt_loss=0.654, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 373/6250 [23:24<6:03:29,  3.71s/it, gpt_loss=0.654, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 373/6250 [23:27<6:03:29,  3.71s/it, gpt_loss=0.9, lr=2e-6]  [A
Train step of epoch 0:   6%|▌         | 374/6250 [23:27<5:54:48,  3.62s/it, gpt_loss=0.9, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 374/6250 [23:31<5:54:48,  3.62s/it, gpt_loss=0.73, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 375/6250 [23:31<6:06:07,  3.74s/it, gpt_loss=0.73, lr=2e-6][A[2025-04-24 00:16:13,720] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   6%|▌         | 375/6250 [23:34<6:06:07,  3.74s/it, gpt_loss=0.777, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 376/6250 [23:34<5:48:51,  3.56s/it, gpt_loss=0.777, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 376/6250 [23:38<5:48:51,  3.56s/it, gpt_loss=0.678, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 377/6250 [23:38<5:55:43,  3.63s/it, gpt_loss=0.678, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 377/6250 [23:42<5:55:43,  3.63s/it, gpt_loss=0.61, lr=2e-6] [A
Train step of epoch 0:   6%|▌         | 378/6250 [23:42<6:02:40,  3.71s/it, gpt_loss=0.61, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 378/6250 [23:45<6:02:40,  3.71s/it, gpt_loss=0.738, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 379/6250 [23:45<5:45:22,  3.53s/it, gpt_loss=0.738, lr=2e-6][A[2025-04-24 00:16:27,571] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   6%|▌         | 379/6250 [23:48<5:45:22,  3.53s/it, gpt_loss=0.653, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 380/6250 [23:48<5:31:32,  3.39s/it, gpt_loss=0.653, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 380/6250 [23:52<5:31:32,  3.39s/it, gpt_loss=0.732, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 381/6250 [23:52<5:43:36,  3.51s/it, gpt_loss=0.732, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 381/6250 [23:56<5:43:36,  3.51s/it, gpt_loss=0.814, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 382/6250 [23:56<5:51:01,  3.59s/it, gpt_loss=0.814, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 382/6250 [24:00<5:51:01,  3.59s/it, gpt_loss=0.66, lr=2e-6] [A
Train step of epoch 0:   6%|▌         | 383/6250 [24:00<5:51:28,  3.59s/it, gpt_loss=0.66, lr=2e-6][A[2025-04-24 00:16:43,271] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   6%|▌         | 383/6250 [24:04<5:51:28,  3.59s/it, gpt_loss=0.816, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 384/6250 [24:04<6:18:41,  3.87s/it, gpt_loss=0.816, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 384/6250 [24:09<6:18:41,  3.87s/it, gpt_loss=0.709, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 385/6250 [24:09<6:46:41,  4.16s/it, gpt_loss=0.709, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 385/6250 [24:13<6:46:41,  4.16s/it, gpt_loss=0.913, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 386/6250 [24:13<6:54:37,  4.24s/it, gpt_loss=0.913, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 386/6250 [24:16<6:54:37,  4.24s/it, gpt_loss=1.01, lr=2e-6] [A
Train step of epoch 0:   6%|▌         | 387/6250 [24:16<6:19:57,  3.89s/it, gpt_loss=1.01, lr=2e-6][A[2025-04-24 00:16:58,875] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   6%|▌         | 387/6250 [24:20<6:19:57,  3.89s/it, gpt_loss=0.683, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 388/6250 [24:20<6:02:00,  3.71s/it, gpt_loss=0.683, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 388/6250 [24:23<6:02:00,  3.71s/it, gpt_loss=0.689, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 389/6250 [24:23<5:56:13,  3.65s/it, gpt_loss=0.689, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 389/6250 [24:26<5:56:13,  3.65s/it, gpt_loss=0.582, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 390/6250 [24:26<5:35:12,  3.43s/it, gpt_loss=0.582, lr=2e-6][A
Train step of epoch 0:   6%|▌         | 390/6250 [24:30<5:35:12,  3.43s/it, gpt_loss=0.533, lr=2e-6][A
Train step of epoch 0:   6%|▋         | 391/6250 [24:30<5:40:36,  3.49s/it, gpt_loss=0.533, lr=2e-6][A[2025-04-24 00:17:13,961] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   6%|▋         | 391/6250 [24:35<5:40:36,  3.49s/it, gpt_loss=0.643, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 392/6250 [24:35<6:25:35,  3.95s/it, gpt_loss=0.643, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 392/6250 [24:38<6:25:35,  3.95s/it, gpt_loss=0.731, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 393/6250 [24:38<6:14:02,  3.83s/it, gpt_loss=0.731, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 393/6250 [24:43<6:14:02,  3.83s/it, gpt_loss=0.795, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 394/6250 [24:43<6:43:04,  4.13s/it, gpt_loss=0.795, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 394/6250 [24:46<6:43:04,  4.13s/it, gpt_loss=0.764, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 395/6250 [24:46<6:12:47,  3.82s/it, gpt_loss=0.764, lr=1.99e-6][A[2025-04-24 00:17:30,023] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   6%|▋         | 395/6250 [24:51<6:12:47,  3.82s/it, gpt_loss=0.71, lr=1.99e-6] [A
Train step of epoch 0:   6%|▋         | 396/6250 [24:51<6:35:00,  4.05s/it, gpt_loss=0.71, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 396/6250 [24:55<6:35:00,  4.05s/it, gpt_loss=0.785, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 397/6250 [24:55<6:33:08,  4.03s/it, gpt_loss=0.785, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 397/6250 [24:58<6:33:08,  4.03s/it, gpt_loss=0.553, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 398/6250 [24:58<6:08:54,  3.78s/it, gpt_loss=0.553, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 398/6250 [25:01<6:08:54,  3.78s/it, gpt_loss=0.659, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 399/6250 [25:01<5:57:55,  3.67s/it, gpt_loss=0.659, lr=1.99e-6][A[2025-04-24 00:17:43,859] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-04-24 00:17:43,860] [INFO] [logging.py:107:log_dist] [Rank 0] step=100, skipped=0, lr=[1.9945699786160696e-06, 1.9945699786160696e-06], mom=[(0.9, 0.95), (0.9, 0.95)]
[2025-04-24 00:17:43,861] [INFO] [timer.py:264:stop] epoch=0/micro_step=400/global_step=100, RunningAvgSamplesPerSec=2.215550212811186, CurrSamplesPerSec=2.40599489595815, MemAllocated=40.57GB, MaxMemAllocated=60.14GB

Train step of epoch 0:   6%|▋         | 399/6250 [25:05<5:57:55,  3.67s/it, gpt_loss=0.516, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 400/6250 [25:05<5:45:09,  3.54s/it, gpt_loss=0.516, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 400/6250 [25:09<5:45:09,  3.54s/it, gpt_loss=0.679, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 401/6250 [25:09<6:09:16,  3.79s/it, gpt_loss=0.679, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 401/6250 [25:14<6:09:16,  3.79s/it, gpt_loss=0.838, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 402/6250 [25:14<6:31:38,  4.02s/it, gpt_loss=0.838, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 402/6250 [25:17<6:31:38,  4.02s/it, gpt_loss=0.738, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 403/6250 [25:17<6:28:30,  3.99s/it, gpt_loss=0.738, lr=1.99e-6][A[2025-04-24 00:17:59,715] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   6%|▋         | 403/6250 [25:20<6:28:30,  3.99s/it, gpt_loss=0.592, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 404/6250 [25:20<6:00:10,  3.70s/it, gpt_loss=0.592, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 404/6250 [25:25<6:00:10,  3.70s/it, gpt_loss=0.777, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 405/6250 [25:25<6:11:20,  3.81s/it, gpt_loss=0.777, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 405/6250 [25:29<6:11:20,  3.81s/it, gpt_loss=0.709, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 406/6250 [25:29<6:23:22,  3.94s/it, gpt_loss=0.709, lr=1.99e-6][A
Train step of epoch 0:   6%|▋         | 406/6250 [25:32<6:23:22,  3.94s/it, gpt_loss=0.673, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 407/6250 [25:32<6:13:54,  3.84s/it, gpt_loss=0.673, lr=1.99e-6][A[2025-04-24 00:18:15,121] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   7%|▋         | 407/6250 [25:36<6:13:54,  3.84s/it, gpt_loss=0.617, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 408/6250 [25:36<6:03:29,  3.73s/it, gpt_loss=0.617, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 408/6250 [25:40<6:03:29,  3.73s/it, gpt_loss=0.625, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 409/6250 [25:40<6:24:42,  3.95s/it, gpt_loss=0.625, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 409/6250 [25:45<6:24:42,  3.95s/it, gpt_loss=0.728, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 410/6250 [25:45<6:30:52,  4.02s/it, gpt_loss=0.728, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 410/6250 [25:48<6:30:52,  4.02s/it, gpt_loss=0.698, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 411/6250 [25:48<6:05:37,  3.76s/it, gpt_loss=0.698, lr=1.99e-6][A[2025-04-24 00:18:30,114] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   7%|▋         | 411/6250 [25:51<6:05:37,  3.76s/it, gpt_loss=0.871, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 412/6250 [25:51<5:49:40,  3.59s/it, gpt_loss=0.871, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 412/6250 [25:54<5:49:40,  3.59s/it, gpt_loss=0.717, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 413/6250 [25:54<5:44:39,  3.54s/it, gpt_loss=0.717, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 413/6250 [25:58<5:44:39,  3.54s/it, gpt_loss=0.842, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 414/6250 [25:58<5:57:08,  3.67s/it, gpt_loss=0.842, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 414/6250 [26:02<5:57:08,  3.67s/it, gpt_loss=0.745, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 415/6250 [26:02<5:44:42,  3.54s/it, gpt_loss=0.745, lr=1.99e-6][A[2025-04-24 00:18:44,732] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   7%|▋         | 415/6250 [26:05<5:44:42,  3.54s/it, gpt_loss=0.8, lr=1.99e-6]  [A
Train step of epoch 0:   7%|▋         | 416/6250 [26:05<5:57:09,  3.67s/it, gpt_loss=0.8, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 416/6250 [26:10<5:57:09,  3.67s/it, gpt_loss=0.801, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 417/6250 [26:10<6:16:09,  3.87s/it, gpt_loss=0.801, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 417/6250 [26:13<6:16:09,  3.87s/it, gpt_loss=0.578, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 418/6250 [26:13<6:02:11,  3.73s/it, gpt_loss=0.578, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 418/6250 [26:17<6:02:11,  3.73s/it, gpt_loss=0.657, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 419/6250 [26:17<5:55:31,  3.66s/it, gpt_loss=0.657, lr=1.99e-6][A[2025-04-24 00:19:00,122] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   7%|▋         | 419/6250 [26:21<5:55:31,  3.66s/it, gpt_loss=0.572, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 420/6250 [26:21<6:10:24,  3.81s/it, gpt_loss=0.572, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 420/6250 [26:25<6:10:24,  3.81s/it, gpt_loss=0.553, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 421/6250 [26:25<6:23:10,  3.94s/it, gpt_loss=0.553, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 421/6250 [26:28<6:23:10,  3.94s/it, gpt_loss=0.978, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 422/6250 [26:28<5:57:22,  3.68s/it, gpt_loss=0.978, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 422/6250 [26:31<5:57:22,  3.68s/it, gpt_loss=0.913, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 423/6250 [26:31<5:44:01,  3.54s/it, gpt_loss=0.913, lr=1.99e-6][A[2025-04-24 00:19:14,323] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   7%|▋         | 423/6250 [26:35<5:44:01,  3.54s/it, gpt_loss=0.885, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 424/6250 [26:35<5:47:31,  3.58s/it, gpt_loss=0.885, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 424/6250 [26:38<5:47:31,  3.58s/it, gpt_loss=0.555, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 425/6250 [26:38<5:21:56,  3.32s/it, gpt_loss=0.555, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 425/6250 [26:42<5:21:56,  3.32s/it, gpt_loss=0.701, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 426/6250 [26:42<5:35:15,  3.45s/it, gpt_loss=0.701, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 426/6250 [26:45<5:35:15,  3.45s/it, gpt_loss=0.761, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 427/6250 [26:45<5:24:18,  3.34s/it, gpt_loss=0.761, lr=1.99e-6][A[2025-04-24 00:19:28,305] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   7%|▋         | 427/6250 [26:49<5:24:18,  3.34s/it, gpt_loss=0.916, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 428/6250 [26:49<5:55:50,  3.67s/it, gpt_loss=0.916, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 428/6250 [26:52<5:55:50,  3.67s/it, gpt_loss=0.66, lr=1.99e-6] [A
Train step of epoch 0:   7%|▋         | 429/6250 [26:52<5:44:17,  3.55s/it, gpt_loss=0.66, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 429/6250 [26:56<5:44:17,  3.55s/it, gpt_loss=0.827, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 430/6250 [26:56<5:50:14,  3.61s/it, gpt_loss=0.827, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 430/6250 [27:00<5:50:14,  3.61s/it, gpt_loss=0.626, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 431/6250 [27:00<5:50:32,  3.61s/it, gpt_loss=0.626, lr=1.99e-6][A[2025-04-24 00:19:42,843] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   7%|▋         | 431/6250 [27:04<5:50:32,  3.61s/it, gpt_loss=0.738, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 432/6250 [27:04<5:58:21,  3.70s/it, gpt_loss=0.738, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 432/6250 [27:07<5:58:21,  3.70s/it, gpt_loss=0.694, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 433/6250 [27:07<5:51:06,  3.62s/it, gpt_loss=0.694, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 433/6250 [27:11<5:51:06,  3.62s/it, gpt_loss=0.708, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 434/6250 [27:11<5:57:18,  3.69s/it, gpt_loss=0.708, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 434/6250 [27:14<5:57:18,  3.69s/it, gpt_loss=0.509, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 435/6250 [27:14<5:54:01,  3.65s/it, gpt_loss=0.509, lr=1.99e-6][A[2025-04-24 00:19:58,076] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   7%|▋         | 435/6250 [27:19<5:54:01,  3.65s/it, gpt_loss=0.688, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 436/6250 [27:19<6:14:51,  3.87s/it, gpt_loss=0.688, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 436/6250 [27:22<6:14:51,  3.87s/it, gpt_loss=0.594, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 437/6250 [27:22<5:40:44,  3.52s/it, gpt_loss=0.594, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 437/6250 [27:27<5:40:44,  3.52s/it, gpt_loss=0.71, lr=1.99e-6] [A
Train step of epoch 0:   7%|▋         | 438/6250 [27:27<6:27:21,  4.00s/it, gpt_loss=0.71, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 438/6250 [27:31<6:27:21,  4.00s/it, gpt_loss=0.674, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 439/6250 [27:31<6:26:29,  3.99s/it, gpt_loss=0.674, lr=1.99e-6][A[2025-04-24 00:20:13,037] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   7%|▋         | 439/6250 [27:34<6:26:29,  3.99s/it, gpt_loss=0.722, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 440/6250 [27:34<6:02:34,  3.74s/it, gpt_loss=0.722, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 440/6250 [27:39<6:02:34,  3.74s/it, gpt_loss=0.726, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 441/6250 [27:39<6:41:04,  4.14s/it, gpt_loss=0.726, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 441/6250 [27:42<6:41:04,  4.14s/it, gpt_loss=0.693, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 442/6250 [27:42<6:04:03,  3.76s/it, gpt_loss=0.693, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 442/6250 [27:46<6:04:03,  3.76s/it, gpt_loss=0.676, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 443/6250 [27:46<6:08:47,  3.81s/it, gpt_loss=0.676, lr=1.99e-6][A[2025-04-24 00:20:27,779] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   7%|▋         | 443/6250 [27:49<6:08:47,  3.81s/it, gpt_loss=0.65, lr=1.99e-6] [A
Train step of epoch 0:   7%|▋         | 444/6250 [27:49<5:41:32,  3.53s/it, gpt_loss=0.65, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 444/6250 [27:52<5:41:32,  3.53s/it, gpt_loss=0.823, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 445/6250 [27:52<5:51:57,  3.64s/it, gpt_loss=0.823, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 445/6250 [27:55<5:51:57,  3.64s/it, gpt_loss=0.609, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 446/6250 [27:55<5:08:44,  3.19s/it, gpt_loss=0.609, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 446/6250 [27:58<5:08:44,  3.19s/it, gpt_loss=0.584, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 447/6250 [27:58<5:09:38,  3.20s/it, gpt_loss=0.584, lr=1.99e-6][A[2025-04-24 00:20:41,653] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   7%|▋         | 447/6250 [28:02<5:09:38,  3.20s/it, gpt_loss=0.606, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 448/6250 [28:02<5:50:25,  3.62s/it, gpt_loss=0.606, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 448/6250 [28:06<5:50:25,  3.62s/it, gpt_loss=0.736, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 449/6250 [28:06<6:02:01,  3.74s/it, gpt_loss=0.736, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 449/6250 [28:10<6:02:01,  3.74s/it, gpt_loss=0.69, lr=1.99e-6] [A
Train step of epoch 0:   7%|▋         | 450/6250 [28:10<6:09:08,  3.82s/it, gpt_loss=0.69, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 450/6250 [28:14<6:09:08,  3.82s/it, gpt_loss=0.54, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 451/6250 [28:14<6:10:16,  3.83s/it, gpt_loss=0.54, lr=1.99e-6][A[2025-04-24 00:20:57,854] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   7%|▋         | 451/6250 [28:19<6:10:16,  3.83s/it, gpt_loss=0.794, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 452/6250 [28:19<6:24:27,  3.98s/it, gpt_loss=0.794, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 452/6250 [28:22<6:24:27,  3.98s/it, gpt_loss=0.67, lr=1.99e-6] [A
Train step of epoch 0:   7%|▋         | 453/6250 [28:22<6:13:31,  3.87s/it, gpt_loss=0.67, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 453/6250 [28:26<6:13:31,  3.87s/it, gpt_loss=0.868, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 454/6250 [28:26<5:57:10,  3.70s/it, gpt_loss=0.868, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 454/6250 [28:30<5:57:10,  3.70s/it, gpt_loss=0.706, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 455/6250 [28:30<6:08:24,  3.81s/it, gpt_loss=0.706, lr=1.99e-6][A[2025-04-24 00:21:12,752] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   7%|▋         | 455/6250 [28:34<6:08:24,  3.81s/it, gpt_loss=0.743, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 456/6250 [28:34<6:10:53,  3.84s/it, gpt_loss=0.743, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 456/6250 [28:37<6:10:53,  3.84s/it, gpt_loss=0.748, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 457/6250 [28:37<6:09:55,  3.83s/it, gpt_loss=0.748, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 457/6250 [28:41<6:09:55,  3.83s/it, gpt_loss=0.503, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 458/6250 [28:41<6:00:46,  3.74s/it, gpt_loss=0.503, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 458/6250 [28:45<6:00:46,  3.74s/it, gpt_loss=0.713, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 459/6250 [28:45<6:07:24,  3.81s/it, gpt_loss=0.713, lr=1.99e-6][A[2025-04-24 00:21:26,587] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   7%|▋         | 459/6250 [28:47<6:07:24,  3.81s/it, gpt_loss=0.626, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 460/6250 [28:47<5:30:39,  3.43s/it, gpt_loss=0.626, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 460/6250 [28:52<5:30:39,  3.43s/it, gpt_loss=0.631, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 461/6250 [28:52<5:55:04,  3.68s/it, gpt_loss=0.631, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 461/6250 [28:55<5:55:04,  3.68s/it, gpt_loss=0.825, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 462/6250 [28:55<5:59:57,  3.73s/it, gpt_loss=0.825, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 462/6250 [28:58<5:59:57,  3.73s/it, gpt_loss=0.637, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 463/6250 [28:58<5:18:30,  3.30s/it, gpt_loss=0.637, lr=1.99e-6][A[2025-04-24 00:21:41,121] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   7%|▋         | 463/6250 [29:02<5:18:30,  3.30s/it, gpt_loss=0.84, lr=1.99e-6] [A
Train step of epoch 0:   7%|▋         | 464/6250 [29:02<5:41:50,  3.54s/it, gpt_loss=0.84, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 464/6250 [29:06<5:41:50,  3.54s/it, gpt_loss=0.548, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 465/6250 [29:06<5:49:03,  3.62s/it, gpt_loss=0.548, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 465/6250 [29:09<5:49:03,  3.62s/it, gpt_loss=0.552, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 466/6250 [29:09<5:38:43,  3.51s/it, gpt_loss=0.552, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 466/6250 [29:12<5:38:43,  3.51s/it, gpt_loss=0.72, lr=1.99e-6] [A
Train step of epoch 0:   7%|▋         | 467/6250 [29:12<5:35:58,  3.49s/it, gpt_loss=0.72, lr=1.99e-6][A[2025-04-24 00:21:54,647] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   7%|▋         | 467/6250 [29:15<5:35:58,  3.49s/it, gpt_loss=0.671, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 468/6250 [29:15<5:23:06,  3.35s/it, gpt_loss=0.671, lr=1.99e-6][A
Train step of epoch 0:   7%|▋         | 468/6250 [29:19<5:23:06,  3.35s/it, gpt_loss=0.635, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 469/6250 [29:19<5:19:23,  3.31s/it, gpt_loss=0.635, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 469/6250 [29:22<5:19:23,  3.31s/it, gpt_loss=0.715, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 470/6250 [29:22<5:23:57,  3.36s/it, gpt_loss=0.715, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 470/6250 [29:26<5:23:57,  3.36s/it, gpt_loss=0.812, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 471/6250 [29:26<5:27:01,  3.40s/it, gpt_loss=0.812, lr=1.99e-6][A[2025-04-24 00:22:08,196] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   8%|▊         | 471/6250 [29:29<5:27:01,  3.40s/it, gpt_loss=0.738, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 472/6250 [29:29<5:26:26,  3.39s/it, gpt_loss=0.738, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 472/6250 [29:33<5:26:26,  3.39s/it, gpt_loss=0.67, lr=1.99e-6] [A
Train step of epoch 0:   8%|▊         | 473/6250 [29:33<5:34:10,  3.47s/it, gpt_loss=0.67, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 473/6250 [29:37<5:34:10,  3.47s/it, gpt_loss=0.64, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 474/6250 [29:37<5:53:08,  3.67s/it, gpt_loss=0.64, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 474/6250 [29:40<5:53:08,  3.67s/it, gpt_loss=0.566, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 475/6250 [29:40<5:51:31,  3.65s/it, gpt_loss=0.566, lr=1.99e-6][A[2025-04-24 00:22:22,861] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   8%|▊         | 475/6250 [29:44<5:51:31,  3.65s/it, gpt_loss=0.53, lr=1.99e-6] [A
Train step of epoch 0:   8%|▊         | 476/6250 [29:44<5:40:10,  3.53s/it, gpt_loss=0.53, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 476/6250 [29:48<5:40:10,  3.53s/it, gpt_loss=0.864, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 477/6250 [29:48<5:54:28,  3.68s/it, gpt_loss=0.864, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 477/6250 [29:51<5:54:28,  3.68s/it, gpt_loss=0.769, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 478/6250 [29:51<5:35:04,  3.48s/it, gpt_loss=0.769, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 478/6250 [29:53<5:35:04,  3.48s/it, gpt_loss=0.533, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 479/6250 [29:53<5:12:08,  3.25s/it, gpt_loss=0.533, lr=1.99e-6][A[2025-04-24 00:22:36,266] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   8%|▊         | 479/6250 [29:57<5:12:08,  3.25s/it, gpt_loss=0.822, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 480/6250 [29:57<5:24:18,  3.37s/it, gpt_loss=0.822, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 480/6250 [30:01<5:24:18,  3.37s/it, gpt_loss=0.732, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 481/6250 [30:01<5:28:36,  3.42s/it, gpt_loss=0.732, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 481/6250 [30:03<5:28:36,  3.42s/it, gpt_loss=0.614, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 482/6250 [30:03<5:06:15,  3.19s/it, gpt_loss=0.614, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 482/6250 [30:07<5:06:15,  3.19s/it, gpt_loss=0.507, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 483/6250 [30:07<5:25:59,  3.39s/it, gpt_loss=0.507, lr=1.99e-6][A[2025-04-24 00:22:50,504] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   8%|▊         | 483/6250 [30:11<5:25:59,  3.39s/it, gpt_loss=0.654, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 484/6250 [30:11<5:49:10,  3.63s/it, gpt_loss=0.654, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 484/6250 [30:15<5:49:10,  3.63s/it, gpt_loss=0.823, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 485/6250 [30:15<5:51:22,  3.66s/it, gpt_loss=0.823, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 485/6250 [30:18<5:51:22,  3.66s/it, gpt_loss=0.623, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 486/6250 [30:18<5:41:27,  3.55s/it, gpt_loss=0.623, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 486/6250 [30:20<5:41:27,  3.55s/it, gpt_loss=0.541, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 487/6250 [30:20<4:54:54,  3.07s/it, gpt_loss=0.541, lr=1.99e-6][A[2025-04-24 00:23:03,465] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   8%|▊         | 487/6250 [30:24<4:54:54,  3.07s/it, gpt_loss=0.764, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 488/6250 [30:24<5:21:28,  3.35s/it, gpt_loss=0.764, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 488/6250 [30:28<5:21:28,  3.35s/it, gpt_loss=0.556, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 489/6250 [30:28<5:20:19,  3.34s/it, gpt_loss=0.556, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 489/6250 [30:32<5:20:19,  3.34s/it, gpt_loss=0.775, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 490/6250 [30:32<5:49:25,  3.64s/it, gpt_loss=0.775, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 490/6250 [30:35<5:49:25,  3.64s/it, gpt_loss=0.75, lr=1.99e-6] [A
Train step of epoch 0:   8%|▊         | 491/6250 [30:35<5:48:24,  3.63s/it, gpt_loss=0.75, lr=1.99e-6][A[2025-04-24 00:23:19,704] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   8%|▊         | 491/6250 [30:40<5:48:24,  3.63s/it, gpt_loss=0.815, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 492/6250 [30:40<6:27:02,  4.03s/it, gpt_loss=0.815, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 492/6250 [30:45<6:27:02,  4.03s/it, gpt_loss=0.713, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 493/6250 [30:45<6:45:52,  4.23s/it, gpt_loss=0.713, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 493/6250 [30:49<6:45:52,  4.23s/it, gpt_loss=0.888, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 494/6250 [30:49<6:33:45,  4.10s/it, gpt_loss=0.888, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 494/6250 [30:52<6:33:45,  4.10s/it, gpt_loss=0.646, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 495/6250 [30:52<6:15:42,  3.92s/it, gpt_loss=0.646, lr=1.99e-6][A[2025-04-24 00:23:34,949] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   8%|▊         | 495/6250 [30:56<6:15:42,  3.92s/it, gpt_loss=0.778, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 496/6250 [30:56<5:56:50,  3.72s/it, gpt_loss=0.778, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 496/6250 [31:00<5:56:50,  3.72s/it, gpt_loss=0.85, lr=1.99e-6] [A
Train step of epoch 0:   8%|▊         | 497/6250 [31:00<6:05:31,  3.81s/it, gpt_loss=0.85, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 497/6250 [31:03<6:05:31,  3.81s/it, gpt_loss=0.716, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 498/6250 [31:03<6:01:06,  3.77s/it, gpt_loss=0.716, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 498/6250 [31:06<6:01:06,  3.77s/it, gpt_loss=0.754, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 499/6250 [31:06<5:39:19,  3.54s/it, gpt_loss=0.754, lr=1.99e-6][A[2025-04-24 00:23:51,285] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   8%|▊         | 499/6250 [31:12<5:39:19,  3.54s/it, gpt_loss=0.71, lr=1.99e-6] [A
Train step of epoch 0:   8%|▊         | 500/6250 [31:12<6:39:35,  4.17s/it, gpt_loss=0.71, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 500/6250 [31:16<6:39:35,  4.17s/it, gpt_loss=0.654, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 501/6250 [31:16<6:37:25,  4.15s/it, gpt_loss=0.654, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 501/6250 [31:20<6:37:25,  4.15s/it, gpt_loss=0.47, lr=1.99e-6] [A
Train step of epoch 0:   8%|▊         | 502/6250 [31:20<6:17:55,  3.94s/it, gpt_loss=0.47, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 502/6250 [31:23<6:17:55,  3.94s/it, gpt_loss=0.75, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 503/6250 [31:23<5:57:49,  3.74s/it, gpt_loss=0.75, lr=1.99e-6][A[2025-04-24 00:24:05,614] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   8%|▊         | 503/6250 [31:26<5:57:49,  3.74s/it, gpt_loss=0.617, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 504/6250 [31:26<5:51:22,  3.67s/it, gpt_loss=0.617, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 504/6250 [31:31<5:51:22,  3.67s/it, gpt_loss=0.544, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 505/6250 [31:31<6:15:09,  3.92s/it, gpt_loss=0.544, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 505/6250 [31:34<6:15:09,  3.92s/it, gpt_loss=0.693, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 506/6250 [31:34<5:55:01,  3.71s/it, gpt_loss=0.693, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 506/6250 [31:37<5:55:01,  3.71s/it, gpt_loss=0.594, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 507/6250 [31:37<5:37:35,  3.53s/it, gpt_loss=0.594, lr=1.99e-6][A[2025-04-24 00:24:21,081] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   8%|▊         | 507/6250 [31:42<5:37:35,  3.53s/it, gpt_loss=0.649, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 508/6250 [31:42<6:09:38,  3.86s/it, gpt_loss=0.649, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 508/6250 [31:46<6:09:38,  3.86s/it, gpt_loss=0.574, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 509/6250 [31:46<6:15:51,  3.93s/it, gpt_loss=0.574, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 509/6250 [31:50<6:15:51,  3.93s/it, gpt_loss=0.564, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 510/6250 [31:50<6:11:41,  3.89s/it, gpt_loss=0.564, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 510/6250 [31:54<6:11:41,  3.89s/it, gpt_loss=0.836, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 511/6250 [31:54<6:08:58,  3.86s/it, gpt_loss=0.836, lr=1.99e-6][A[2025-04-24 00:24:36,208] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   8%|▊         | 511/6250 [31:57<6:08:58,  3.86s/it, gpt_loss=0.668, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 512/6250 [31:57<5:57:42,  3.74s/it, gpt_loss=0.668, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 512/6250 [32:00<5:57:42,  3.74s/it, gpt_loss=0.575, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 513/6250 [32:00<5:45:29,  3.61s/it, gpt_loss=0.575, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 513/6250 [32:03<5:45:29,  3.61s/it, gpt_loss=0.606, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 514/6250 [32:03<5:24:51,  3.40s/it, gpt_loss=0.606, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 514/6250 [32:07<5:24:51,  3.40s/it, gpt_loss=0.561, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 515/6250 [32:07<5:27:22,  3.42s/it, gpt_loss=0.561, lr=1.99e-6][A[2025-04-24 00:24:50,104] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   8%|▊         | 515/6250 [32:11<5:27:22,  3.42s/it, gpt_loss=0.506, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 516/6250 [32:11<5:49:25,  3.66s/it, gpt_loss=0.506, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 516/6250 [32:14<5:49:25,  3.66s/it, gpt_loss=0.583, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 517/6250 [32:14<5:42:27,  3.58s/it, gpt_loss=0.583, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 517/6250 [32:17<5:42:27,  3.58s/it, gpt_loss=0.628, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 518/6250 [32:17<5:31:37,  3.47s/it, gpt_loss=0.628, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 518/6250 [32:21<5:31:37,  3.47s/it, gpt_loss=0.607, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 519/6250 [32:21<5:23:32,  3.39s/it, gpt_loss=0.607, lr=1.99e-6][A[2025-04-24 00:25:02,453] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   8%|▊         | 519/6250 [32:23<5:23:32,  3.39s/it, gpt_loss=0.569, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 520/6250 [32:23<4:59:01,  3.13s/it, gpt_loss=0.569, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 520/6250 [32:27<4:59:01,  3.13s/it, gpt_loss=0.745, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 521/6250 [32:27<5:19:16,  3.34s/it, gpt_loss=0.745, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 521/6250 [32:30<5:19:16,  3.34s/it, gpt_loss=0.677, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 522/6250 [32:30<5:07:27,  3.22s/it, gpt_loss=0.677, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 522/6250 [32:33<5:07:27,  3.22s/it, gpt_loss=0.783, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 523/6250 [32:33<5:03:16,  3.18s/it, gpt_loss=0.783, lr=1.99e-6][A[2025-04-24 00:25:16,801] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   8%|▊         | 523/6250 [32:38<5:03:16,  3.18s/it, gpt_loss=0.704, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 524/6250 [32:38<5:41:03,  3.57s/it, gpt_loss=0.704, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 524/6250 [32:42<5:41:03,  3.57s/it, gpt_loss=0.82, lr=1.99e-6] [A
Train step of epoch 0:   8%|▊         | 525/6250 [32:42<6:01:07,  3.78s/it, gpt_loss=0.82, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 525/6250 [32:45<6:01:07,  3.78s/it, gpt_loss=0.69, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 526/6250 [32:45<5:52:36,  3.70s/it, gpt_loss=0.69, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 526/6250 [32:48<5:52:36,  3.70s/it, gpt_loss=0.544, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 527/6250 [32:48<5:12:59,  3.28s/it, gpt_loss=0.544, lr=1.99e-6][A[2025-04-24 00:25:30,825] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   8%|▊         | 527/6250 [32:52<5:12:59,  3.28s/it, gpt_loss=0.575, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 528/6250 [32:52<5:31:53,  3.48s/it, gpt_loss=0.575, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 528/6250 [32:56<5:31:53,  3.48s/it, gpt_loss=0.774, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 529/6250 [32:56<5:54:32,  3.72s/it, gpt_loss=0.774, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 529/6250 [32:58<5:54:32,  3.72s/it, gpt_loss=0.628, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 530/6250 [32:58<5:20:03,  3.36s/it, gpt_loss=0.628, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 530/6250 [33:03<5:20:03,  3.36s/it, gpt_loss=0.603, lr=1.99e-6][A
Train step of epoch 0:   8%|▊         | 531/6250 [33:03<5:44:20,  3.61s/it, gpt_loss=0.603, lr=1.99e-6][A[2025-04-24 00:25:44,611] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   8%|▊         | 531/6250 [33:05<5:44:20,  3.61s/it, gpt_loss=0.889, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 532/6250 [33:05<5:20:43,  3.37s/it, gpt_loss=0.889, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 532/6250 [33:09<5:20:43,  3.37s/it, gpt_loss=0.707, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 533/6250 [33:09<5:36:05,  3.53s/it, gpt_loss=0.707, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 533/6250 [33:12<5:36:05,  3.53s/it, gpt_loss=0.663, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 534/6250 [33:12<5:26:28,  3.43s/it, gpt_loss=0.663, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 534/6250 [33:16<5:26:28,  3.43s/it, gpt_loss=0.692, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 535/6250 [33:16<5:15:17,  3.31s/it, gpt_loss=0.692, lr=1.99e-6][A[2025-04-24 00:25:58,502] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   9%|▊         | 535/6250 [33:19<5:15:17,  3.31s/it, gpt_loss=0.795, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 536/6250 [33:19<5:27:57,  3.44s/it, gpt_loss=0.795, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 536/6250 [33:23<5:27:57,  3.44s/it, gpt_loss=0.608, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 537/6250 [33:23<5:25:59,  3.42s/it, gpt_loss=0.608, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 537/6250 [33:26<5:25:59,  3.42s/it, gpt_loss=0.815, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 538/6250 [33:26<5:17:05,  3.33s/it, gpt_loss=0.815, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 538/6250 [33:30<5:17:05,  3.33s/it, gpt_loss=0.615, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 539/6250 [33:30<5:34:32,  3.51s/it, gpt_loss=0.615, lr=1.99e-6][A[2025-04-24 00:26:12,680] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   9%|▊         | 539/6250 [33:33<5:34:32,  3.51s/it, gpt_loss=0.591, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 540/6250 [33:33<5:41:00,  3.58s/it, gpt_loss=0.591, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 540/6250 [33:35<5:41:00,  3.58s/it, gpt_loss=0.565, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 541/6250 [33:35<4:39:54,  2.94s/it, gpt_loss=0.565, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 541/6250 [33:38<4:39:54,  2.94s/it, gpt_loss=0.608, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 542/6250 [33:38<4:58:00,  3.13s/it, gpt_loss=0.608, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 542/6250 [33:44<4:58:00,  3.13s/it, gpt_loss=0.751, lr=1.99e-6][A
Train step of epoch 0:   9%|▊         | 543/6250 [33:44<5:55:41,  3.74s/it, gpt_loss=0.751, lr=1.99e-6][A[2025-04-24 00:26:25,783] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   9%|▊         | 543/6250 [33:47<5:55:41,  3.74s/it, gpt_loss=0.693, lr=1.98e-6][A
Train step of epoch 0:   9%|▊         | 544/6250 [33:47<5:32:23,  3.50s/it, gpt_loss=0.693, lr=1.98e-6][A
Train step of epoch 0:   9%|▊         | 544/6250 [33:49<5:32:23,  3.50s/it, gpt_loss=0.6, lr=1.98e-6]  [A
Train step of epoch 0:   9%|▊         | 545/6250 [33:49<5:06:23,  3.22s/it, gpt_loss=0.6, lr=1.98e-6][A
Train step of epoch 0:   9%|▊         | 545/6250 [33:54<5:06:23,  3.22s/it, gpt_loss=0.87, lr=1.98e-6][A
Train step of epoch 0:   9%|▊         | 546/6250 [33:54<5:42:56,  3.61s/it, gpt_loss=0.87, lr=1.98e-6][A
Train step of epoch 0:   9%|▊         | 546/6250 [33:56<5:42:56,  3.61s/it, gpt_loss=0.714, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 547/6250 [33:56<5:18:21,  3.35s/it, gpt_loss=0.714, lr=1.98e-6][A[2025-04-24 00:26:39,424] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   9%|▉         | 547/6250 [34:00<5:18:21,  3.35s/it, gpt_loss=0.479, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 548/6250 [34:00<5:31:12,  3.49s/it, gpt_loss=0.479, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 548/6250 [34:04<5:31:12,  3.49s/it, gpt_loss=0.879, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 549/6250 [34:04<5:48:46,  3.67s/it, gpt_loss=0.879, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 549/6250 [34:08<5:48:46,  3.67s/it, gpt_loss=0.614, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 550/6250 [34:08<5:45:51,  3.64s/it, gpt_loss=0.614, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 550/6250 [34:13<5:45:51,  3.64s/it, gpt_loss=0.718, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 551/6250 [34:13<6:22:06,  4.02s/it, gpt_loss=0.718, lr=1.98e-6][A[2025-04-24 00:26:55,000] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   9%|▉         | 551/6250 [34:16<6:22:06,  4.02s/it, gpt_loss=0.525, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 552/6250 [34:16<5:52:32,  3.71s/it, gpt_loss=0.525, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 552/6250 [34:19<5:52:32,  3.71s/it, gpt_loss=0.651, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 553/6250 [34:19<5:34:07,  3.52s/it, gpt_loss=0.651, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 553/6250 [34:23<5:34:07,  3.52s/it, gpt_loss=0.828, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 554/6250 [34:23<5:39:46,  3.58s/it, gpt_loss=0.828, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 554/6250 [34:26<5:39:46,  3.58s/it, gpt_loss=0.759, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 555/6250 [34:26<5:34:50,  3.53s/it, gpt_loss=0.759, lr=1.98e-6][A[2025-04-24 00:27:09,869] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   9%|▉         | 555/6250 [34:31<5:34:50,  3.53s/it, gpt_loss=0.966, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 556/6250 [34:31<6:07:24,  3.87s/it, gpt_loss=0.966, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 556/6250 [34:34<6:07:24,  3.87s/it, gpt_loss=0.65, lr=1.98e-6] [A
Train step of epoch 0:   9%|▉         | 557/6250 [34:34<5:56:19,  3.76s/it, gpt_loss=0.65, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 557/6250 [34:38<5:56:19,  3.76s/it, gpt_loss=0.661, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 558/6250 [34:38<5:59:49,  3.79s/it, gpt_loss=0.661, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 558/6250 [34:42<5:59:49,  3.79s/it, gpt_loss=0.437, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 559/6250 [34:42<5:58:34,  3.78s/it, gpt_loss=0.437, lr=1.98e-6][A[2025-04-24 00:27:24,314] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   9%|▉         | 559/6250 [34:45<5:58:34,  3.78s/it, gpt_loss=0.704, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 560/6250 [34:45<5:45:38,  3.64s/it, gpt_loss=0.704, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 560/6250 [34:48<5:45:38,  3.64s/it, gpt_loss=0.594, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 561/6250 [34:48<5:36:36,  3.55s/it, gpt_loss=0.594, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 561/6250 [34:53<5:36:36,  3.55s/it, gpt_loss=0.71, lr=1.98e-6] [A
Train step of epoch 0:   9%|▉         | 562/6250 [34:53<6:06:20,  3.86s/it, gpt_loss=0.71, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 562/6250 [34:57<6:06:20,  3.86s/it, gpt_loss=0.669, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 563/6250 [34:57<6:06:07,  3.86s/it, gpt_loss=0.669, lr=1.98e-6][A[2025-04-24 00:27:40,406] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   9%|▉         | 563/6250 [35:01<6:06:07,  3.86s/it, gpt_loss=0.912, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 564/6250 [35:01<6:18:40,  4.00s/it, gpt_loss=0.912, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 564/6250 [35:04<6:18:40,  4.00s/it, gpt_loss=0.705, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 565/6250 [35:04<5:43:22,  3.62s/it, gpt_loss=0.705, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 565/6250 [35:08<5:43:22,  3.62s/it, gpt_loss=0.653, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 566/6250 [35:08<5:53:15,  3.73s/it, gpt_loss=0.653, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 566/6250 [35:12<5:53:15,  3.73s/it, gpt_loss=0.582, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 567/6250 [35:12<6:05:24,  3.86s/it, gpt_loss=0.582, lr=1.98e-6][A[2025-04-24 00:27:54,840] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   9%|▉         | 567/6250 [35:16<6:05:24,  3.86s/it, gpt_loss=0.801, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 568/6250 [35:16<5:56:27,  3.76s/it, gpt_loss=0.801, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 568/6250 [35:19<5:56:27,  3.76s/it, gpt_loss=0.603, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 569/6250 [35:19<5:49:00,  3.69s/it, gpt_loss=0.603, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 569/6250 [35:23<5:49:00,  3.69s/it, gpt_loss=0.767, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 570/6250 [35:23<5:41:08,  3.60s/it, gpt_loss=0.767, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 570/6250 [35:27<5:41:08,  3.60s/it, gpt_loss=0.834, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 571/6250 [35:27<5:58:11,  3.78s/it, gpt_loss=0.834, lr=1.98e-6][A[2025-04-24 00:28:09,453] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   9%|▉         | 571/6250 [35:30<5:58:11,  3.78s/it, gpt_loss=0.67, lr=1.98e-6] [A
Train step of epoch 0:   9%|▉         | 572/6250 [35:30<5:49:48,  3.70s/it, gpt_loss=0.67, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 572/6250 [35:33<5:49:48,  3.70s/it, gpt_loss=0.519, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 573/6250 [35:33<5:26:09,  3.45s/it, gpt_loss=0.519, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 573/6250 [35:38<5:26:09,  3.45s/it, gpt_loss=0.905, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 574/6250 [35:38<5:54:05,  3.74s/it, gpt_loss=0.905, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 574/6250 [35:41<5:54:05,  3.74s/it, gpt_loss=0.745, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 575/6250 [35:41<5:38:20,  3.58s/it, gpt_loss=0.745, lr=1.98e-6][A[2025-04-24 00:28:25,151] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   9%|▉         | 575/6250 [35:46<5:38:20,  3.58s/it, gpt_loss=0.554, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 576/6250 [35:46<6:24:34,  4.07s/it, gpt_loss=0.554, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 576/6250 [35:50<6:24:34,  4.07s/it, gpt_loss=0.501, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 577/6250 [35:50<6:12:02,  3.93s/it, gpt_loss=0.501, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 577/6250 [35:53<6:12:02,  3.93s/it, gpt_loss=0.742, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 578/6250 [35:53<6:09:10,  3.91s/it, gpt_loss=0.742, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 578/6250 [35:57<6:09:10,  3.91s/it, gpt_loss=0.785, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 579/6250 [35:57<6:11:08,  3.93s/it, gpt_loss=0.785, lr=1.98e-6][A[2025-04-24 00:28:40,207] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   9%|▉         | 579/6250 [36:01<6:11:08,  3.93s/it, gpt_loss=0.728, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 580/6250 [36:01<6:02:16,  3.83s/it, gpt_loss=0.728, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 580/6250 [36:04<6:02:16,  3.83s/it, gpt_loss=0.46, lr=1.98e-6] [A
Train step of epoch 0:   9%|▉         | 581/6250 [36:04<5:41:14,  3.61s/it, gpt_loss=0.46, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 581/6250 [36:09<5:41:14,  3.61s/it, gpt_loss=0.687, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 582/6250 [36:09<6:10:55,  3.93s/it, gpt_loss=0.687, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 582/6250 [36:12<6:10:55,  3.93s/it, gpt_loss=0.683, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 583/6250 [36:12<5:52:31,  3.73s/it, gpt_loss=0.683, lr=1.98e-6][A[2025-04-24 00:28:56,644] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   9%|▉         | 583/6250 [36:17<5:52:31,  3.73s/it, gpt_loss=0.609, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 584/6250 [36:17<6:39:45,  4.23s/it, gpt_loss=0.609, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 584/6250 [36:21<6:39:45,  4.23s/it, gpt_loss=0.725, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 585/6250 [36:21<6:13:52,  3.96s/it, gpt_loss=0.725, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 585/6250 [36:24<6:13:52,  3.96s/it, gpt_loss=0.597, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 586/6250 [36:24<5:50:25,  3.71s/it, gpt_loss=0.597, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 586/6250 [36:27<5:50:25,  3.71s/it, gpt_loss=0.696, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 587/6250 [36:27<5:27:01,  3.46s/it, gpt_loss=0.696, lr=1.98e-6][A[2025-04-24 00:29:08,479] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   9%|▉         | 587/6250 [36:29<5:27:01,  3.46s/it, gpt_loss=0.641, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 588/6250 [36:29<4:59:24,  3.17s/it, gpt_loss=0.641, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 588/6250 [36:33<4:59:24,  3.17s/it, gpt_loss=0.894, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 589/6250 [36:33<5:09:58,  3.29s/it, gpt_loss=0.894, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 589/6250 [36:37<5:09:58,  3.29s/it, gpt_loss=0.625, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 590/6250 [36:37<5:25:01,  3.45s/it, gpt_loss=0.625, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 590/6250 [36:40<5:25:01,  3.45s/it, gpt_loss=0.607, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 591/6250 [36:40<5:31:22,  3.51s/it, gpt_loss=0.607, lr=1.98e-6][A[2025-04-24 00:29:23,666] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:   9%|▉         | 591/6250 [36:44<5:31:22,  3.51s/it, gpt_loss=0.719, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 592/6250 [36:44<5:49:16,  3.70s/it, gpt_loss=0.719, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 592/6250 [36:48<5:49:16,  3.70s/it, gpt_loss=0.456, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 593/6250 [36:48<5:41:51,  3.63s/it, gpt_loss=0.456, lr=1.98e-6][A
Train step of epoch 0:   9%|▉         | 593/6250 [36:51<5:41:51,  3.63s/it, gpt_loss=0.894, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 594/6250 [36:51<5:29:12,  3.49s/it, gpt_loss=0.894, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 594/6250 [36:54<5:29:12,  3.49s/it, gpt_loss=0.894, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 595/6250 [36:54<5:20:05,  3.40s/it, gpt_loss=0.894, lr=1.98e-6][A[2025-04-24 00:29:36,702] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  10%|▉         | 595/6250 [36:57<5:20:05,  3.40s/it, gpt_loss=0.569, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 596/6250 [36:57<5:15:35,  3.35s/it, gpt_loss=0.569, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 596/6250 [37:01<5:15:35,  3.35s/it, gpt_loss=0.639, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 597/6250 [37:01<5:32:32,  3.53s/it, gpt_loss=0.639, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 597/6250 [37:05<5:32:32,  3.53s/it, gpt_loss=0.719, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 598/6250 [37:05<5:20:19,  3.40s/it, gpt_loss=0.719, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 598/6250 [37:08<5:20:19,  3.40s/it, gpt_loss=0.878, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 599/6250 [37:08<5:17:50,  3.37s/it, gpt_loss=0.878, lr=1.98e-6][A[2025-04-24 00:29:51,161] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  10%|▉         | 599/6250 [37:12<5:17:50,  3.37s/it, gpt_loss=0.552, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 600/6250 [37:12<5:38:08,  3.59s/it, gpt_loss=0.552, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 600/6250 [37:15<5:38:08,  3.59s/it, gpt_loss=0.652, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 601/6250 [37:15<5:36:27,  3.57s/it, gpt_loss=0.652, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 601/6250 [37:19<5:36:27,  3.57s/it, gpt_loss=0.843, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 602/6250 [37:19<5:37:36,  3.59s/it, gpt_loss=0.843, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 602/6250 [37:24<5:37:36,  3.59s/it, gpt_loss=0.635, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 603/6250 [37:24<6:11:54,  3.95s/it, gpt_loss=0.635, lr=1.98e-6][A[2025-04-24 00:30:08,230] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  10%|▉         | 603/6250 [37:29<6:11:54,  3.95s/it, gpt_loss=0.767, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 604/6250 [37:29<6:44:40,  4.30s/it, gpt_loss=0.767, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 604/6250 [37:33<6:44:40,  4.30s/it, gpt_loss=0.874, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 605/6250 [37:33<6:22:45,  4.07s/it, gpt_loss=0.874, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 605/6250 [37:35<6:22:45,  4.07s/it, gpt_loss=0.847, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 606/6250 [37:35<5:48:01,  3.70s/it, gpt_loss=0.847, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 606/6250 [37:39<5:48:01,  3.70s/it, gpt_loss=0.709, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 607/6250 [37:39<5:49:35,  3.72s/it, gpt_loss=0.709, lr=1.98e-6][A[2025-04-24 00:30:22,008] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  10%|▉         | 607/6250 [37:43<5:49:35,  3.72s/it, gpt_loss=0.581, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 608/6250 [37:43<5:47:46,  3.70s/it, gpt_loss=0.581, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 608/6250 [37:48<5:47:46,  3.70s/it, gpt_loss=0.774, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 609/6250 [37:48<6:27:16,  4.12s/it, gpt_loss=0.774, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 609/6250 [37:51<6:27:16,  4.12s/it, gpt_loss=0.489, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 610/6250 [37:51<6:03:31,  3.87s/it, gpt_loss=0.489, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 610/6250 [37:55<6:03:31,  3.87s/it, gpt_loss=0.753, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 611/6250 [37:55<6:10:05,  3.94s/it, gpt_loss=0.753, lr=1.98e-6][A[2025-04-24 00:30:37,934] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  10%|▉         | 611/6250 [37:59<6:10:05,  3.94s/it, gpt_loss=0.695, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 612/6250 [37:59<5:56:03,  3.79s/it, gpt_loss=0.695, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 612/6250 [38:02<5:56:03,  3.79s/it, gpt_loss=0.649, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 613/6250 [38:02<5:50:33,  3.73s/it, gpt_loss=0.649, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 613/6250 [38:06<5:50:33,  3.73s/it, gpt_loss=0.793, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 614/6250 [38:06<5:40:06,  3.62s/it, gpt_loss=0.793, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 614/6250 [38:08<5:40:06,  3.62s/it, gpt_loss=0.516, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 615/6250 [38:08<5:17:40,  3.38s/it, gpt_loss=0.516, lr=1.98e-6][A[2025-04-24 00:30:51,621] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  10%|▉         | 615/6250 [38:12<5:17:40,  3.38s/it, gpt_loss=0.609, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 616/6250 [38:12<5:32:14,  3.54s/it, gpt_loss=0.609, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 616/6250 [38:16<5:32:14,  3.54s/it, gpt_loss=0.609, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 617/6250 [38:16<5:36:04,  3.58s/it, gpt_loss=0.609, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 617/6250 [38:20<5:36:04,  3.58s/it, gpt_loss=0.863, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 618/6250 [38:20<6:00:12,  3.84s/it, gpt_loss=0.863, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 618/6250 [38:23<6:00:12,  3.84s/it, gpt_loss=0.648, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 619/6250 [38:23<5:32:53,  3.55s/it, gpt_loss=0.648, lr=1.98e-6][A[2025-04-24 00:31:05,885] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  10%|▉         | 619/6250 [38:27<5:32:53,  3.55s/it, gpt_loss=0.81, lr=1.98e-6] [A
Train step of epoch 0:  10%|▉         | 620/6250 [38:27<5:25:16,  3.47s/it, gpt_loss=0.81, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 620/6250 [38:31<5:25:16,  3.47s/it, gpt_loss=0.763, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 621/6250 [38:31<5:41:45,  3.64s/it, gpt_loss=0.763, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 621/6250 [38:34<5:41:45,  3.64s/it, gpt_loss=0.725, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 622/6250 [38:34<5:25:01,  3.47s/it, gpt_loss=0.725, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 622/6250 [38:38<5:25:01,  3.47s/it, gpt_loss=0.671, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 623/6250 [38:38<5:54:49,  3.78s/it, gpt_loss=0.671, lr=1.98e-6][A[2025-04-24 00:31:21,718] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  10%|▉         | 623/6250 [38:42<5:54:49,  3.78s/it, gpt_loss=0.662, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 624/6250 [38:42<6:06:31,  3.91s/it, gpt_loss=0.662, lr=1.98e-6][A
Train step of epoch 0:  10%|▉         | 624/6250 [38:46<6:06:31,  3.91s/it, gpt_loss=0.605, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 625/6250 [38:46<5:48:10,  3.71s/it, gpt_loss=0.605, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 625/6250 [38:49<5:48:10,  3.71s/it, gpt_loss=0.607, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 626/6250 [38:49<5:41:54,  3.65s/it, gpt_loss=0.607, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 626/6250 [38:53<5:41:54,  3.65s/it, gpt_loss=0.706, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 627/6250 [38:53<5:43:30,  3.67s/it, gpt_loss=0.706, lr=1.98e-6][A[2025-04-24 00:31:35,405] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  10%|█         | 627/6250 [38:56<5:43:30,  3.67s/it, gpt_loss=0.722, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 628/6250 [38:56<5:31:11,  3.53s/it, gpt_loss=0.722, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 628/6250 [39:00<5:31:11,  3.53s/it, gpt_loss=0.649, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 629/6250 [39:00<5:44:36,  3.68s/it, gpt_loss=0.649, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 629/6250 [39:04<5:44:36,  3.68s/it, gpt_loss=0.79, lr=1.98e-6] [A
Train step of epoch 0:  10%|█         | 630/6250 [39:04<5:40:17,  3.63s/it, gpt_loss=0.79, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 630/6250 [39:07<5:40:17,  3.63s/it, gpt_loss=0.689, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 631/6250 [39:07<5:40:44,  3.64s/it, gpt_loss=0.689, lr=1.98e-6][A[2025-04-24 00:31:49,473] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  10%|█         | 631/6250 [39:10<5:40:44,  3.64s/it, gpt_loss=0.582, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 632/6250 [39:10<5:19:14,  3.41s/it, gpt_loss=0.582, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 632/6250 [39:13<5:19:14,  3.41s/it, gpt_loss=0.535, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 633/6250 [39:13<5:09:40,  3.31s/it, gpt_loss=0.535, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 633/6250 [39:17<5:09:40,  3.31s/it, gpt_loss=0.604, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 634/6250 [39:17<5:24:11,  3.46s/it, gpt_loss=0.604, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 634/6250 [39:20<5:24:11,  3.46s/it, gpt_loss=0.768, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 635/6250 [39:20<5:13:39,  3.35s/it, gpt_loss=0.768, lr=1.98e-6][A[2025-04-24 00:32:03,137] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  10%|█         | 635/6250 [39:24<5:13:39,  3.35s/it, gpt_loss=0.702, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 636/6250 [39:24<5:22:42,  3.45s/it, gpt_loss=0.702, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 636/6250 [39:27<5:22:42,  3.45s/it, gpt_loss=0.561, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 637/6250 [39:27<5:20:27,  3.43s/it, gpt_loss=0.561, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 637/6250 [39:31<5:20:27,  3.43s/it, gpt_loss=0.822, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 638/6250 [39:31<5:24:53,  3.47s/it, gpt_loss=0.822, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 638/6250 [39:34<5:24:53,  3.47s/it, gpt_loss=0.749, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 639/6250 [39:34<5:20:56,  3.43s/it, gpt_loss=0.749, lr=1.98e-6][A[2025-04-24 00:32:17,372] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  10%|█         | 639/6250 [39:38<5:20:56,  3.43s/it, gpt_loss=0.73, lr=1.98e-6] [A
Train step of epoch 0:  10%|█         | 640/6250 [39:38<5:35:14,  3.59s/it, gpt_loss=0.73, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 640/6250 [39:43<5:35:14,  3.59s/it, gpt_loss=0.605, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 641/6250 [39:43<5:58:29,  3.83s/it, gpt_loss=0.605, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 641/6250 [39:46<5:58:29,  3.83s/it, gpt_loss=0.598, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 642/6250 [39:46<5:48:05,  3.72s/it, gpt_loss=0.598, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 642/6250 [39:49<5:48:05,  3.72s/it, gpt_loss=0.803, lr=1.98e-6][A
Train step of epoch 0:  10%|█         | 643/6250 [39:49<5:19:03,  3.41s/it, gpt_loss=0.803, lr=1.98e-6][A[2025-04-24 00:32:31,821] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  10%|█         | 643/6250 [39:53<5:19:03,  3.41s/it, gpt_loss=0.939, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 644/6250 [39:53<5:31:55,  3.55s/it, gpt_loss=0.939, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 644/6250 [39:56<5:31:55,  3.55s/it, gpt_loss=0.723, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 645/6250 [39:56<5:28:25,  3.52s/it, gpt_loss=0.723, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 645/6250 [39:59<5:28:25,  3.52s/it, gpt_loss=0.937, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 646/6250 [39:59<5:12:42,  3.35s/it, gpt_loss=0.937, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 646/6250 [40:02<5:12:42,  3.35s/it, gpt_loss=0.813, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 647/6250 [40:02<4:58:28,  3.20s/it, gpt_loss=0.813, lr=1.97e-6][A[2025-04-24 00:32:44,271] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  10%|█         | 647/6250 [40:05<4:58:28,  3.20s/it, gpt_loss=0.675, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 648/6250 [40:05<4:59:08,  3.20s/it, gpt_loss=0.675, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 648/6250 [40:09<4:59:08,  3.20s/it, gpt_loss=0.616, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 649/6250 [40:09<5:07:35,  3.29s/it, gpt_loss=0.616, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 649/6250 [40:12<5:07:35,  3.29s/it, gpt_loss=0.775, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 650/6250 [40:12<5:14:46,  3.37s/it, gpt_loss=0.775, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 650/6250 [40:16<5:14:46,  3.37s/it, gpt_loss=0.858, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 651/6250 [40:16<5:38:18,  3.63s/it, gpt_loss=0.858, lr=1.97e-6][A[2025-04-24 00:32:59,463] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  10%|█         | 651/6250 [40:20<5:38:18,  3.63s/it, gpt_loss=0.702, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 652/6250 [40:20<5:46:23,  3.71s/it, gpt_loss=0.702, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 652/6250 [40:24<5:46:23,  3.71s/it, gpt_loss=0.697, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 653/6250 [40:24<5:39:23,  3.64s/it, gpt_loss=0.697, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 653/6250 [40:27<5:39:23,  3.64s/it, gpt_loss=0.802, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 654/6250 [40:27<5:19:03,  3.42s/it, gpt_loss=0.802, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 654/6250 [40:30<5:19:03,  3.42s/it, gpt_loss=0.632, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 655/6250 [40:30<5:10:08,  3.33s/it, gpt_loss=0.632, lr=1.97e-6][A[2025-04-24 00:33:12,775] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  10%|█         | 655/6250 [40:34<5:10:08,  3.33s/it, gpt_loss=0.875, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 656/6250 [40:34<5:24:08,  3.48s/it, gpt_loss=0.875, lr=1.97e-6][A
Train step of epoch 0:  10%|█         | 656/6250 [40:37<5:24:08,  3.48s/it, gpt_loss=0.575, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 657/6250 [40:37<5:29:48,  3.54s/it, gpt_loss=0.575, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 657/6250 [40:41<5:29:48,  3.54s/it, gpt_loss=0.64, lr=1.97e-6] [A
Train step of epoch 0:  11%|█         | 658/6250 [40:41<5:40:48,  3.66s/it, gpt_loss=0.64, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 658/6250 [40:43<5:40:48,  3.66s/it, gpt_loss=0.552, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 659/6250 [40:43<4:56:42,  3.18s/it, gpt_loss=0.552, lr=1.97e-6][A[2025-04-24 00:33:26,380] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  11%|█         | 659/6250 [40:47<4:56:42,  3.18s/it, gpt_loss=0.664, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 660/6250 [40:47<5:16:54,  3.40s/it, gpt_loss=0.664, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 660/6250 [40:51<5:16:54,  3.40s/it, gpt_loss=0.801, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 661/6250 [40:51<5:28:02,  3.52s/it, gpt_loss=0.801, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 661/6250 [40:55<5:28:02,  3.52s/it, gpt_loss=0.705, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 662/6250 [40:55<5:43:13,  3.69s/it, gpt_loss=0.705, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 662/6250 [40:59<5:43:13,  3.69s/it, gpt_loss=0.819, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 663/6250 [40:59<5:45:20,  3.71s/it, gpt_loss=0.819, lr=1.97e-6][A[2025-04-24 00:33:41,710] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  11%|█         | 663/6250 [41:02<5:45:20,  3.71s/it, gpt_loss=0.591, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 664/6250 [41:02<5:44:56,  3.71s/it, gpt_loss=0.591, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 664/6250 [41:06<5:44:56,  3.71s/it, gpt_loss=0.687, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 665/6250 [41:06<5:51:49,  3.78s/it, gpt_loss=0.687, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 665/6250 [41:09<5:51:49,  3.78s/it, gpt_loss=0.414, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 666/6250 [41:09<5:10:35,  3.34s/it, gpt_loss=0.414, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 666/6250 [41:13<5:10:35,  3.34s/it, gpt_loss=0.536, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 667/6250 [41:13<5:33:21,  3.58s/it, gpt_loss=0.536, lr=1.97e-6][A[2025-04-24 00:33:57,347] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  11%|█         | 667/6250 [41:18<5:33:21,  3.58s/it, gpt_loss=0.774, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 668/6250 [41:18<6:19:05,  4.07s/it, gpt_loss=0.774, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 668/6250 [41:22<6:19:05,  4.07s/it, gpt_loss=0.471, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 669/6250 [41:22<6:11:30,  3.99s/it, gpt_loss=0.471, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 669/6250 [41:24<6:11:30,  3.99s/it, gpt_loss=0.541, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 670/6250 [41:24<5:31:43,  3.57s/it, gpt_loss=0.541, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 670/6250 [41:28<5:31:43,  3.57s/it, gpt_loss=0.816, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 671/6250 [41:28<5:20:00,  3.44s/it, gpt_loss=0.816, lr=1.97e-6][A[2025-04-24 00:34:09,824] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  11%|█         | 671/6250 [41:31<5:20:00,  3.44s/it, gpt_loss=0.706, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 672/6250 [41:31<5:06:17,  3.29s/it, gpt_loss=0.706, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 672/6250 [41:34<5:06:17,  3.29s/it, gpt_loss=0.849, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 673/6250 [41:34<5:12:51,  3.37s/it, gpt_loss=0.849, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 673/6250 [41:37<5:12:51,  3.37s/it, gpt_loss=0.599, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 674/6250 [41:37<5:01:49,  3.25s/it, gpt_loss=0.599, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 674/6250 [41:39<5:01:49,  3.25s/it, gpt_loss=0.547, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 675/6250 [41:39<4:29:27,  2.90s/it, gpt_loss=0.547, lr=1.97e-6][A[2025-04-24 00:34:23,874] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  11%|█         | 675/6250 [41:45<4:29:27,  2.90s/it, gpt_loss=0.644, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 676/6250 [41:45<5:40:40,  3.67s/it, gpt_loss=0.644, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 676/6250 [41:49<5:40:40,  3.67s/it, gpt_loss=0.568, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 677/6250 [41:49<5:59:22,  3.87s/it, gpt_loss=0.568, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 677/6250 [41:52<5:59:22,  3.87s/it, gpt_loss=0.701, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 678/6250 [41:52<5:46:19,  3.73s/it, gpt_loss=0.701, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 678/6250 [41:56<5:46:19,  3.73s/it, gpt_loss=0.654, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 679/6250 [41:56<5:36:40,  3.63s/it, gpt_loss=0.654, lr=1.97e-6][A[2025-04-24 00:34:38,620] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  11%|█         | 679/6250 [41:59<5:36:40,  3.63s/it, gpt_loss=0.483, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 680/6250 [41:59<5:36:23,  3.62s/it, gpt_loss=0.483, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 680/6250 [42:03<5:36:23,  3.62s/it, gpt_loss=0.679, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 681/6250 [42:03<5:42:15,  3.69s/it, gpt_loss=0.679, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 681/6250 [42:08<5:42:15,  3.69s/it, gpt_loss=0.607, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 682/6250 [42:08<5:58:48,  3.87s/it, gpt_loss=0.607, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 682/6250 [42:10<5:58:48,  3.87s/it, gpt_loss=0.752, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 683/6250 [42:10<5:31:34,  3.57s/it, gpt_loss=0.752, lr=1.97e-6][A[2025-04-24 00:34:54,592] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  11%|█         | 683/6250 [42:15<5:31:34,  3.57s/it, gpt_loss=0.567, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 684/6250 [42:15<6:10:06,  3.99s/it, gpt_loss=0.567, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 684/6250 [42:18<6:10:06,  3.99s/it, gpt_loss=0.73, lr=1.97e-6] [A
Train step of epoch 0:  11%|█         | 685/6250 [42:18<5:44:26,  3.71s/it, gpt_loss=0.73, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 685/6250 [42:23<5:44:26,  3.71s/it, gpt_loss=0.598, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 686/6250 [42:23<6:07:59,  3.97s/it, gpt_loss=0.598, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 686/6250 [42:26<6:07:59,  3.97s/it, gpt_loss=0.685, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 687/6250 [42:26<5:42:25,  3.69s/it, gpt_loss=0.685, lr=1.97e-6][A[2025-04-24 00:35:08,444] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  11%|█         | 687/6250 [42:29<5:42:25,  3.69s/it, gpt_loss=0.482, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 688/6250 [42:29<5:27:47,  3.54s/it, gpt_loss=0.482, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 688/6250 [42:33<5:27:47,  3.54s/it, gpt_loss=0.569, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 689/6250 [42:33<5:42:08,  3.69s/it, gpt_loss=0.569, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 689/6250 [42:37<5:42:08,  3.69s/it, gpt_loss=0.721, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 690/6250 [42:37<5:33:43,  3.60s/it, gpt_loss=0.721, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 690/6250 [42:40<5:33:43,  3.60s/it, gpt_loss=0.634, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 691/6250 [42:40<5:15:03,  3.40s/it, gpt_loss=0.634, lr=1.97e-6][A[2025-04-24 00:35:23,340] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  11%|█         | 691/6250 [42:44<5:15:03,  3.40s/it, gpt_loss=0.683, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 692/6250 [42:44<5:46:04,  3.74s/it, gpt_loss=0.683, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 692/6250 [42:49<5:46:04,  3.74s/it, gpt_loss=0.855, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 693/6250 [42:49<6:10:35,  4.00s/it, gpt_loss=0.855, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 693/6250 [42:52<6:10:35,  4.00s/it, gpt_loss=0.817, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 694/6250 [42:52<5:38:09,  3.65s/it, gpt_loss=0.817, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 694/6250 [42:56<5:38:09,  3.65s/it, gpt_loss=0.569, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 695/6250 [42:56<5:50:29,  3.79s/it, gpt_loss=0.569, lr=1.97e-6][A[2025-04-24 00:35:39,584] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  11%|█         | 695/6250 [43:00<5:50:29,  3.79s/it, gpt_loss=0.783, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 696/6250 [43:00<6:15:33,  4.06s/it, gpt_loss=0.783, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 696/6250 [43:04<6:15:33,  4.06s/it, gpt_loss=0.681, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 697/6250 [43:04<6:10:41,  4.01s/it, gpt_loss=0.681, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 697/6250 [43:08<6:10:41,  4.01s/it, gpt_loss=0.738, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 698/6250 [43:08<5:59:52,  3.89s/it, gpt_loss=0.738, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 698/6250 [43:11<5:59:52,  3.89s/it, gpt_loss=0.704, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 699/6250 [43:11<5:36:19,  3.64s/it, gpt_loss=0.704, lr=1.97e-6][A[2025-04-24 00:35:53,158] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  11%|█         | 699/6250 [43:14<5:36:19,  3.64s/it, gpt_loss=0.597, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 700/6250 [43:14<5:19:23,  3.45s/it, gpt_loss=0.597, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 700/6250 [43:19<5:19:23,  3.45s/it, gpt_loss=0.723, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 701/6250 [43:19<5:51:46,  3.80s/it, gpt_loss=0.723, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 701/6250 [43:22<5:51:46,  3.80s/it, gpt_loss=0.67, lr=1.97e-6] [A
Train step of epoch 0:  11%|█         | 702/6250 [43:22<5:53:08,  3.82s/it, gpt_loss=0.67, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 702/6250 [43:25<5:53:08,  3.82s/it, gpt_loss=0.691, lr=1.97e-6][A
Train step of epoch 0:  11%|█         | 703/6250 [43:25<5:24:30,  3.51s/it, gpt_loss=0.691, lr=1.97e-6][A[2025-04-24 00:36:08,290] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  11%|█         | 703/6250 [43:29<5:24:30,  3.51s/it, gpt_loss=0.844, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 704/6250 [43:29<5:34:19,  3.62s/it, gpt_loss=0.844, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 704/6250 [43:33<5:34:19,  3.62s/it, gpt_loss=0.693, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 705/6250 [43:33<5:41:07,  3.69s/it, gpt_loss=0.693, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 705/6250 [43:37<5:41:07,  3.69s/it, gpt_loss=0.648, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 706/6250 [43:37<5:56:49,  3.86s/it, gpt_loss=0.648, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 706/6250 [43:40<5:56:49,  3.86s/it, gpt_loss=0.663, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 707/6250 [43:40<5:31:30,  3.59s/it, gpt_loss=0.663, lr=1.97e-6][A[2025-04-24 00:36:24,114] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  11%|█▏        | 707/6250 [43:45<5:31:30,  3.59s/it, gpt_loss=0.56, lr=1.97e-6] [A
Train step of epoch 0:  11%|█▏        | 708/6250 [43:45<6:03:36,  3.94s/it, gpt_loss=0.56, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 708/6250 [43:49<6:03:36,  3.94s/it, gpt_loss=0.789, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 709/6250 [43:49<5:55:01,  3.84s/it, gpt_loss=0.789, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 709/6250 [43:52<5:55:01,  3.84s/it, gpt_loss=0.697, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 710/6250 [43:52<5:57:39,  3.87s/it, gpt_loss=0.697, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 710/6250 [43:56<5:57:39,  3.87s/it, gpt_loss=0.663, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 711/6250 [43:56<5:49:39,  3.79s/it, gpt_loss=0.663, lr=1.97e-6][A[2025-04-24 00:36:40,067] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  11%|█▏        | 711/6250 [44:01<5:49:39,  3.79s/it, gpt_loss=0.809, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 712/6250 [44:01<6:17:28,  4.09s/it, gpt_loss=0.809, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 712/6250 [44:03<6:17:28,  4.09s/it, gpt_loss=0.499, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 713/6250 [44:03<5:37:22,  3.66s/it, gpt_loss=0.499, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 713/6250 [44:06<5:37:22,  3.66s/it, gpt_loss=0.505, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 714/6250 [44:06<5:04:49,  3.30s/it, gpt_loss=0.505, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 714/6250 [44:10<5:04:49,  3.30s/it, gpt_loss=0.743, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 715/6250 [44:10<5:12:43,  3.39s/it, gpt_loss=0.743, lr=1.97e-6][A[2025-04-24 00:36:53,318] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  11%|█▏        | 715/6250 [44:14<5:12:43,  3.39s/it, gpt_loss=0.882, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 716/6250 [44:14<5:44:20,  3.73s/it, gpt_loss=0.882, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 716/6250 [44:18<5:44:20,  3.73s/it, gpt_loss=0.547, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 717/6250 [44:18<5:59:45,  3.90s/it, gpt_loss=0.547, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 717/6250 [44:22<5:59:45,  3.90s/it, gpt_loss=0.673, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 718/6250 [44:22<5:53:59,  3.84s/it, gpt_loss=0.673, lr=1.97e-6][A
Train step of epoch 0:  11%|█▏        | 718/6250 [44:25<5:53:59,  3.84s/it, gpt_loss=0.728, lr=1.97e-6][A
Train step of epoch 0:  12%|█▏        | 719/6250 [44:25<5:42:11,  3.71s/it, gpt_loss=0.728, lr=1.97e-6][A[2025-04-24 00:37:08,180] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  12%|█▏        | 719/6250 [44:29<5:42:11,  3.71s/it, gpt_loss=0.559, lr=1.97e-6][A
Train step of epoch 0:  12%|█▏        | 720/6250 [44:29<5:35:07,  3.64s/it, gpt_loss=0.559, lr=1.97e-6][A
Train step of epoch 0:  12%|█▏        | 720/6250 [44:33<5:35:07,  3.64s/it, gpt_loss=0.5, lr=1.97e-6]  [A
Train step of epoch 0:  12%|█▏        | 721/6250 [44:33<5:39:34,  3.69s/it, gpt_loss=0.5, lr=1.97e-6][A
Train step of epoch 0:  12%|█▏        | 721/6250 [44:36<5:39:34,  3.69s/it, gpt_loss=0.771, lr=1.97e-6][A
Train step of epoch 0:  12%|█▏        | 722/6250 [44:36<5:16:39,  3.44s/it, gpt_loss=0.771, lr=1.97e-6][A
Train step of epoch 0:  12%|█▏        | 722/6250 [44:39<5:16:39,  3.44s/it, gpt_loss=0.623, lr=1.97e-6][A
Train step of epoch 0:  12%|█▏        | 723/6250 [44:39<5:14:27,  3.41s/it, gpt_loss=0.623, lr=1.97e-6][A[2025-04-24 00:37:22,725] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  12%|█▏        | 723/6250 [44:43<5:14:27,  3.41s/it, gpt_loss=0.705, lr=1.97e-6][A
Train step of epoch 0:  12%|█▏        | 724/6250 [44:43<5:45:11,  3.75s/it, gpt_loss=0.705, lr=1.97e-6][A
Train step of epoch 0:  12%|█▏        | 724/6250 [44:48<5:45:11,  3.75s/it, gpt_loss=0.585, lr=1.97e-6][A
Train step of epoch 0:  12%|█▏        | 725/6250 [44:48<5:58:47,  3.90s/it, gpt_loss=0.585, lr=1.97e-6][A
Train step of epoch 0:  12%|█▏        | 725/6250 [44:52<5:58:47,  3.90s/it, gpt_loss=0.864, lr=1.97e-6][A
Train step of epoch 0:  12%|█▏        | 726/6250 [44:52<6:07:15,  3.99s/it, gpt_loss=0.864, lr=1.97e-6][A
Train step of epoch 0:  12%|█▏        | 726/6250 [44:56<6:07:15,  3.99s/it, gpt_loss=0.719, lr=1.97e-6][A
Train step of epoch 0:  12%|█▏        | 727/6250 [44:56<6:12:10,  4.04s/it, gpt_loss=0.719, lr=1.97e-6][A[2025-04-24 00:37:39,333] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  12%|█▏        | 727/6250 [45:00<6:12:10,  4.04s/it, gpt_loss=0.627, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 728/6250 [45:00<6:10:39,  4.03s/it, gpt_loss=0.627, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 728/6250 [45:05<6:10:39,  4.03s/it, gpt_loss=0.812, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 729/6250 [45:05<6:31:41,  4.26s/it, gpt_loss=0.812, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 729/6250 [45:09<6:31:41,  4.26s/it, gpt_loss=0.932, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 730/6250 [45:09<6:30:30,  4.24s/it, gpt_loss=0.932, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 730/6250 [45:14<6:30:30,  4.24s/it, gpt_loss=0.651, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 731/6250 [45:14<6:50:34,  4.46s/it, gpt_loss=0.651, lr=1.96e-6][A[2025-04-24 00:37:56,989] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  12%|█▏        | 731/6250 [45:18<6:50:34,  4.46s/it, gpt_loss=0.779, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 732/6250 [45:18<6:28:41,  4.23s/it, gpt_loss=0.779, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 732/6250 [45:22<6:28:41,  4.23s/it, gpt_loss=0.559, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 733/6250 [45:22<6:18:39,  4.12s/it, gpt_loss=0.559, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 733/6250 [45:26<6:18:39,  4.12s/it, gpt_loss=0.715, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 734/6250 [45:26<6:19:26,  4.13s/it, gpt_loss=0.715, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 734/6250 [45:28<6:19:26,  4.13s/it, gpt_loss=0.595, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 735/6250 [45:28<5:31:38,  3.61s/it, gpt_loss=0.595, lr=1.96e-6][A[2025-04-24 00:38:10,848] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  12%|█▏        | 735/6250 [45:32<5:31:38,  3.61s/it, gpt_loss=0.512, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 736/6250 [45:32<5:27:10,  3.56s/it, gpt_loss=0.512, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 736/6250 [45:36<5:27:10,  3.56s/it, gpt_loss=0.808, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 737/6250 [45:36<5:40:43,  3.71s/it, gpt_loss=0.808, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 737/6250 [45:38<5:40:43,  3.71s/it, gpt_loss=0.608, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 738/6250 [45:38<5:16:34,  3.45s/it, gpt_loss=0.608, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 738/6250 [45:41<5:16:34,  3.45s/it, gpt_loss=0.526, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 739/6250 [45:41<5:02:41,  3.30s/it, gpt_loss=0.526, lr=1.96e-6][A[2025-04-24 00:38:29,095] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  12%|█▏        | 739/6250 [45:50<5:02:41,  3.30s/it, gpt_loss=0.747, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 740/6250 [45:50<7:23:40,  4.83s/it, gpt_loss=0.747, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 740/6250 [45:54<7:23:40,  4.83s/it, gpt_loss=0.568, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 741/6250 [45:54<6:54:40,  4.52s/it, gpt_loss=0.568, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 741/6250 [45:58<6:54:40,  4.52s/it, gpt_loss=0.665, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 742/6250 [45:58<6:42:36,  4.39s/it, gpt_loss=0.665, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 742/6250 [46:01<6:42:36,  4.39s/it, gpt_loss=0.763, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 743/6250 [46:01<6:14:24,  4.08s/it, gpt_loss=0.763, lr=1.96e-6][A[2025-04-24 00:38:43,643] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  12%|█▏        | 743/6250 [46:04<6:14:24,  4.08s/it, gpt_loss=0.475, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 744/6250 [46:04<5:53:28,  3.85s/it, gpt_loss=0.475, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 744/6250 [46:09<5:53:28,  3.85s/it, gpt_loss=0.616, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 745/6250 [46:09<6:00:51,  3.93s/it, gpt_loss=0.616, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 745/6250 [46:14<6:00:51,  3.93s/it, gpt_loss=0.712, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 746/6250 [46:14<6:30:01,  4.25s/it, gpt_loss=0.712, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 746/6250 [46:16<6:30:01,  4.25s/it, gpt_loss=0.778, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 747/6250 [46:16<5:41:38,  3.72s/it, gpt_loss=0.778, lr=1.96e-6][A[2025-04-24 00:38:59,692] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  12%|█▏        | 747/6250 [46:20<5:41:38,  3.72s/it, gpt_loss=0.876, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 748/6250 [46:20<6:01:06,  3.94s/it, gpt_loss=0.876, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 748/6250 [46:24<6:01:06,  3.94s/it, gpt_loss=0.641, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 749/6250 [46:24<5:47:38,  3.79s/it, gpt_loss=0.641, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 749/6250 [46:28<5:47:38,  3.79s/it, gpt_loss=0.62, lr=1.96e-6] [A
Train step of epoch 0:  12%|█▏        | 750/6250 [46:28<5:47:00,  3.79s/it, gpt_loss=0.62, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 750/6250 [46:31<5:47:00,  3.79s/it, gpt_loss=0.562, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 751/6250 [46:31<5:32:46,  3.63s/it, gpt_loss=0.562, lr=1.96e-6][A[2025-04-24 00:39:13,409] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  12%|█▏        | 751/6250 [46:34<5:32:46,  3.63s/it, gpt_loss=0.621, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 752/6250 [46:34<5:21:34,  3.51s/it, gpt_loss=0.621, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 752/6250 [46:38<5:21:34,  3.51s/it, gpt_loss=0.662, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 753/6250 [46:38<5:19:14,  3.48s/it, gpt_loss=0.662, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 753/6250 [46:41<5:19:14,  3.48s/it, gpt_loss=0.816, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 754/6250 [46:41<5:28:52,  3.59s/it, gpt_loss=0.816, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 754/6250 [46:46<5:28:52,  3.59s/it, gpt_loss=0.597, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 755/6250 [46:46<5:42:44,  3.74s/it, gpt_loss=0.597, lr=1.96e-6][A[2025-04-24 00:39:28,398] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  12%|█▏        | 755/6250 [46:49<5:42:44,  3.74s/it, gpt_loss=0.615, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 756/6250 [46:49<5:39:32,  3.71s/it, gpt_loss=0.615, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 756/6250 [46:54<5:39:32,  3.71s/it, gpt_loss=0.629, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 757/6250 [46:54<5:57:24,  3.90s/it, gpt_loss=0.629, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 757/6250 [46:57<5:57:24,  3.90s/it, gpt_loss=0.589, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 758/6250 [46:57<5:45:32,  3.78s/it, gpt_loss=0.589, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 758/6250 [47:00<5:45:32,  3.78s/it, gpt_loss=0.516, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 759/6250 [47:00<5:38:02,  3.69s/it, gpt_loss=0.516, lr=1.96e-6][A[2025-04-24 00:39:43,144] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  12%|█▏        | 759/6250 [47:04<5:38:02,  3.69s/it, gpt_loss=0.755, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 760/6250 [47:04<5:30:05,  3.61s/it, gpt_loss=0.755, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 760/6250 [47:08<5:30:05,  3.61s/it, gpt_loss=0.692, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 761/6250 [47:08<5:40:38,  3.72s/it, gpt_loss=0.692, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 761/6250 [47:12<5:40:38,  3.72s/it, gpt_loss=0.751, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 762/6250 [47:12<5:50:58,  3.84s/it, gpt_loss=0.751, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 762/6250 [47:16<5:50:58,  3.84s/it, gpt_loss=0.607, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 763/6250 [47:16<6:08:50,  4.03s/it, gpt_loss=0.607, lr=1.96e-6][A[2025-04-24 00:39:59,748] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  12%|█▏        | 763/6250 [47:21<6:08:50,  4.03s/it, gpt_loss=0.706, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 764/6250 [47:21<6:08:19,  4.03s/it, gpt_loss=0.706, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 764/6250 [47:24<6:08:19,  4.03s/it, gpt_loss=0.606, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 765/6250 [47:24<5:59:23,  3.93s/it, gpt_loss=0.606, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 765/6250 [47:27<5:59:23,  3.93s/it, gpt_loss=0.884, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 766/6250 [47:27<5:26:09,  3.57s/it, gpt_loss=0.884, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 766/6250 [47:31<5:26:09,  3.57s/it, gpt_loss=0.547, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 767/6250 [47:31<5:33:43,  3.65s/it, gpt_loss=0.547, lr=1.96e-6][A[2025-04-24 00:40:13,528] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  12%|█▏        | 767/6250 [47:34<5:33:43,  3.65s/it, gpt_loss=0.516, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 768/6250 [47:34<5:29:40,  3.61s/it, gpt_loss=0.516, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 768/6250 [47:38<5:29:40,  3.61s/it, gpt_loss=0.467, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 769/6250 [47:38<5:43:12,  3.76s/it, gpt_loss=0.467, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 769/6250 [47:42<5:43:12,  3.76s/it, gpt_loss=0.66, lr=1.96e-6] [A
Train step of epoch 0:  12%|█▏        | 770/6250 [47:42<5:49:33,  3.83s/it, gpt_loss=0.66, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 770/6250 [47:46<5:49:33,  3.83s/it, gpt_loss=0.64, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 771/6250 [47:46<5:52:59,  3.87s/it, gpt_loss=0.64, lr=1.96e-6][A[2025-04-24 00:40:30,296] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  12%|█▏        | 771/6250 [47:51<5:52:59,  3.87s/it, gpt_loss=0.736, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 772/6250 [47:51<6:16:16,  4.12s/it, gpt_loss=0.736, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 772/6250 [47:55<6:16:16,  4.12s/it, gpt_loss=0.656, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 773/6250 [47:55<6:08:01,  4.03s/it, gpt_loss=0.656, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 773/6250 [47:58<6:08:01,  4.03s/it, gpt_loss=0.753, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 774/6250 [47:58<5:51:19,  3.85s/it, gpt_loss=0.753, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 774/6250 [48:02<5:51:19,  3.85s/it, gpt_loss=0.446, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 775/6250 [48:02<5:42:44,  3.76s/it, gpt_loss=0.446, lr=1.96e-6][A[2025-04-24 00:40:44,964] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  12%|█▏        | 775/6250 [48:06<5:42:44,  3.76s/it, gpt_loss=0.756, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 776/6250 [48:06<5:46:07,  3.79s/it, gpt_loss=0.756, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 776/6250 [48:10<5:46:07,  3.79s/it, gpt_loss=0.71, lr=1.96e-6] [A
Train step of epoch 0:  12%|█▏        | 777/6250 [48:10<6:11:05,  4.07s/it, gpt_loss=0.71, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 777/6250 [48:14<6:11:05,  4.07s/it, gpt_loss=0.551, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 778/6250 [48:14<6:08:34,  4.04s/it, gpt_loss=0.551, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 778/6250 [48:18<6:08:34,  4.04s/it, gpt_loss=0.661, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 779/6250 [48:18<6:00:12,  3.95s/it, gpt_loss=0.661, lr=1.96e-6][A[2025-04-24 00:41:01,938] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  12%|█▏        | 779/6250 [48:23<6:00:12,  3.95s/it, gpt_loss=0.668, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 780/6250 [48:23<6:16:30,  4.13s/it, gpt_loss=0.668, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 780/6250 [48:27<6:16:30,  4.13s/it, gpt_loss=0.587, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 781/6250 [48:27<6:24:38,  4.22s/it, gpt_loss=0.587, lr=1.96e-6][A
Train step of epoch 0:  12%|█▏        | 781/6250 [48:30<6:24:38,  4.22s/it, gpt_loss=0.445, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 782/6250 [48:30<5:57:28,  3.92s/it, gpt_loss=0.445, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 782/6250 [48:34<5:57:28,  3.92s/it, gpt_loss=0.577, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 783/6250 [48:34<6:02:21,  3.98s/it, gpt_loss=0.577, lr=1.96e-6][A[2025-04-24 00:41:17,217] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  13%|█▎        | 783/6250 [48:38<6:02:21,  3.98s/it, gpt_loss=0.81, lr=1.96e-6] [A
Train step of epoch 0:  13%|█▎        | 784/6250 [48:38<5:49:43,  3.84s/it, gpt_loss=0.81, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 784/6250 [48:42<5:49:43,  3.84s/it, gpt_loss=0.63, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 785/6250 [48:42<5:44:53,  3.79s/it, gpt_loss=0.63, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 785/6250 [48:46<5:44:53,  3.79s/it, gpt_loss=0.684, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 786/6250 [48:46<5:51:13,  3.86s/it, gpt_loss=0.684, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 786/6250 [48:49<5:51:13,  3.86s/it, gpt_loss=0.654, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 787/6250 [48:49<5:46:08,  3.80s/it, gpt_loss=0.654, lr=1.96e-6][A[2025-04-24 00:41:32,217] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  13%|█▎        | 787/6250 [48:53<5:46:08,  3.80s/it, gpt_loss=0.618, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 788/6250 [48:53<5:41:43,  3.75s/it, gpt_loss=0.618, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 788/6250 [48:57<5:41:43,  3.75s/it, gpt_loss=0.487, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 789/6250 [48:57<5:59:38,  3.95s/it, gpt_loss=0.487, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 789/6250 [49:01<5:59:38,  3.95s/it, gpt_loss=0.728, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 790/6250 [49:01<5:36:58,  3.70s/it, gpt_loss=0.728, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 790/6250 [49:05<5:36:58,  3.70s/it, gpt_loss=0.709, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 791/6250 [49:05<5:55:46,  3.91s/it, gpt_loss=0.709, lr=1.96e-6][A[2025-04-24 00:41:46,709] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  13%|█▎        | 791/6250 [49:07<5:55:46,  3.91s/it, gpt_loss=0.63, lr=1.96e-6] [A
Train step of epoch 0:  13%|█▎        | 792/6250 [49:07<5:18:53,  3.51s/it, gpt_loss=0.63, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 792/6250 [49:10<5:18:53,  3.51s/it, gpt_loss=0.547, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 793/6250 [49:10<4:58:15,  3.28s/it, gpt_loss=0.547, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 793/6250 [49:15<4:58:15,  3.28s/it, gpt_loss=0.644, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 794/6250 [49:15<5:26:28,  3.59s/it, gpt_loss=0.644, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 794/6250 [49:17<5:26:28,  3.59s/it, gpt_loss=0.593, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 795/6250 [49:17<5:07:16,  3.38s/it, gpt_loss=0.593, lr=1.96e-6][A[2025-04-24 00:42:00,567] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  13%|█▎        | 795/6250 [49:21<5:07:16,  3.38s/it, gpt_loss=0.699, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 796/6250 [49:21<5:21:30,  3.54s/it, gpt_loss=0.699, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 796/6250 [49:26<5:21:30,  3.54s/it, gpt_loss=0.755, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 797/6250 [49:26<5:46:20,  3.81s/it, gpt_loss=0.755, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 797/6250 [49:29<5:46:20,  3.81s/it, gpt_loss=0.631, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 798/6250 [49:29<5:16:55,  3.49s/it, gpt_loss=0.631, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 798/6250 [49:32<5:16:55,  3.49s/it, gpt_loss=0.629, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 799/6250 [49:32<5:27:38,  3.61s/it, gpt_loss=0.629, lr=1.96e-6][A[2025-04-24 00:42:15,136] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-04-24 00:42:15,136] [INFO] [logging.py:107:log_dist] [Rank 0] step=200, skipped=0, lr=[1.955081651119009e-06, 1.955081651119009e-06], mom=[(0.9, 0.95), (0.9, 0.95)]
[2025-04-24 00:42:15,136] [INFO] [timer.py:264:stop] epoch=0/micro_step=800/global_step=200, RunningAvgSamplesPerSec=2.238785910713148, CurrSamplesPerSec=2.27910006519304, MemAllocated=40.57GB, MaxMemAllocated=60.14GB

Train step of epoch 0:  13%|█▎        | 799/6250 [49:36<5:27:38,  3.61s/it, gpt_loss=0.731, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 800/6250 [49:36<5:24:42,  3.57s/it, gpt_loss=0.731, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 800/6250 [49:39<5:24:42,  3.57s/it, gpt_loss=0.623, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 801/6250 [49:39<5:00:35,  3.31s/it, gpt_loss=0.623, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 801/6250 [49:43<5:00:35,  3.31s/it, gpt_loss=0.64, lr=1.96e-6] [A
Train step of epoch 0:  13%|█▎        | 802/6250 [49:43<5:39:30,  3.74s/it, gpt_loss=0.64, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 802/6250 [49:47<5:39:30,  3.74s/it, gpt_loss=0.824, lr=1.96e-6][A
Train step of epoch 0:  13%|█▎        | 803/6250 [49:47<5:37:03,  3.71s/it, gpt_loss=0.824, lr=1.96e-6][A[2025-04-24 00:42:30,468] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  13%|█▎        | 803/6250 [49:51<5:37:03,  3.71s/it, gpt_loss=0.862, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 804/6250 [49:51<5:51:35,  3.87s/it, gpt_loss=0.862, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 804/6250 [49:55<5:51:35,  3.87s/it, gpt_loss=0.553, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 805/6250 [49:55<5:41:35,  3.76s/it, gpt_loss=0.553, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 805/6250 [49:58<5:41:35,  3.76s/it, gpt_loss=0.661, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 806/6250 [49:58<5:31:51,  3.66s/it, gpt_loss=0.661, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 806/6250 [50:01<5:31:51,  3.66s/it, gpt_loss=0.623, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 807/6250 [50:01<5:21:07,  3.54s/it, gpt_loss=0.623, lr=1.95e-6][A[2025-04-24 00:42:45,065] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  13%|█▎        | 807/6250 [50:06<5:21:07,  3.54s/it, gpt_loss=0.628, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 808/6250 [50:06<5:44:51,  3.80s/it, gpt_loss=0.628, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 808/6250 [50:10<5:44:51,  3.80s/it, gpt_loss=0.741, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 809/6250 [50:10<5:50:30,  3.87s/it, gpt_loss=0.741, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 809/6250 [50:13<5:50:30,  3.87s/it, gpt_loss=0.6, lr=1.95e-6]  [A
Train step of epoch 0:  13%|█▎        | 810/6250 [50:13<5:41:58,  3.77s/it, gpt_loss=0.6, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 810/6250 [50:18<5:41:58,  3.77s/it, gpt_loss=0.706, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 811/6250 [50:18<5:51:43,  3.88s/it, gpt_loss=0.706, lr=1.95e-6][A[2025-04-24 00:43:01,125] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  13%|█▎        | 811/6250 [50:22<5:51:43,  3.88s/it, gpt_loss=0.702, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 812/6250 [50:22<6:04:45,  4.02s/it, gpt_loss=0.702, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 812/6250 [50:26<6:04:45,  4.02s/it, gpt_loss=0.641, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 813/6250 [50:26<6:01:12,  3.99s/it, gpt_loss=0.641, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 813/6250 [50:29<6:01:12,  3.99s/it, gpt_loss=0.697, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 814/6250 [50:29<5:46:31,  3.82s/it, gpt_loss=0.697, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 814/6250 [50:32<5:46:31,  3.82s/it, gpt_loss=0.705, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 815/6250 [50:32<5:25:17,  3.59s/it, gpt_loss=0.705, lr=1.95e-6][A[2025-04-24 00:43:14,302] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  13%|█▎        | 815/6250 [50:35<5:25:17,  3.59s/it, gpt_loss=0.52, lr=1.95e-6] [A
Train step of epoch 0:  13%|█▎        | 816/6250 [50:35<5:03:21,  3.35s/it, gpt_loss=0.52, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 816/6250 [50:38<5:03:21,  3.35s/it, gpt_loss=0.838, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 817/6250 [50:38<5:03:26,  3.35s/it, gpt_loss=0.838, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 817/6250 [50:42<5:03:26,  3.35s/it, gpt_loss=0.851, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 818/6250 [50:42<5:00:48,  3.32s/it, gpt_loss=0.851, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 818/6250 [50:45<5:00:48,  3.32s/it, gpt_loss=0.813, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 819/6250 [50:45<5:01:47,  3.33s/it, gpt_loss=0.813, lr=1.95e-6][A[2025-04-24 00:43:28,417] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  13%|█▎        | 819/6250 [50:49<5:01:47,  3.33s/it, gpt_loss=0.754, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 820/6250 [50:49<5:23:44,  3.58s/it, gpt_loss=0.754, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 820/6250 [50:52<5:23:44,  3.58s/it, gpt_loss=0.626, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 821/6250 [50:52<5:14:22,  3.47s/it, gpt_loss=0.626, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 821/6250 [50:57<5:14:22,  3.47s/it, gpt_loss=0.708, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 822/6250 [50:57<5:46:03,  3.83s/it, gpt_loss=0.708, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 822/6250 [51:00<5:46:03,  3.83s/it, gpt_loss=0.803, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 823/6250 [51:00<5:31:47,  3.67s/it, gpt_loss=0.803, lr=1.95e-6][A[2025-04-24 00:43:42,865] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  13%|█▎        | 823/6250 [51:04<5:31:47,  3.67s/it, gpt_loss=0.668, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 824/6250 [51:04<5:20:50,  3.55s/it, gpt_loss=0.668, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 824/6250 [51:08<5:20:50,  3.55s/it, gpt_loss=0.54, lr=1.95e-6] [A
Train step of epoch 0:  13%|█▎        | 825/6250 [51:08<5:48:38,  3.86s/it, gpt_loss=0.54, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 825/6250 [51:11<5:48:38,  3.86s/it, gpt_loss=0.606, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 826/6250 [51:11<5:24:22,  3.59s/it, gpt_loss=0.606, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 826/6250 [51:15<5:24:22,  3.59s/it, gpt_loss=0.546, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 827/6250 [51:15<5:28:34,  3.64s/it, gpt_loss=0.546, lr=1.95e-6][A[2025-04-24 00:43:57,379] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  13%|█▎        | 827/6250 [51:18<5:28:34,  3.64s/it, gpt_loss=0.842, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 828/6250 [51:18<5:17:31,  3.51s/it, gpt_loss=0.842, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 828/6250 [51:22<5:17:31,  3.51s/it, gpt_loss=0.652, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 829/6250 [51:22<5:19:12,  3.53s/it, gpt_loss=0.652, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 829/6250 [51:25<5:19:12,  3.53s/it, gpt_loss=0.671, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 830/6250 [51:25<5:18:32,  3.53s/it, gpt_loss=0.671, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 830/6250 [51:29<5:18:32,  3.53s/it, gpt_loss=0.84, lr=1.95e-6] [A
Train step of epoch 0:  13%|█▎        | 831/6250 [51:29<5:14:36,  3.48s/it, gpt_loss=0.84, lr=1.95e-6][A[2025-04-24 00:44:11,813] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  13%|█▎        | 831/6250 [51:33<5:14:36,  3.48s/it, gpt_loss=0.658, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 832/6250 [51:33<5:27:31,  3.63s/it, gpt_loss=0.658, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 832/6250 [51:37<5:27:31,  3.63s/it, gpt_loss=0.598, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 833/6250 [51:37<5:49:28,  3.87s/it, gpt_loss=0.598, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 833/6250 [51:41<5:49:28,  3.87s/it, gpt_loss=0.597, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 834/6250 [51:41<5:43:43,  3.81s/it, gpt_loss=0.597, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 834/6250 [51:44<5:43:43,  3.81s/it, gpt_loss=0.721, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 835/6250 [51:44<5:42:09,  3.79s/it, gpt_loss=0.721, lr=1.95e-6][A[2025-04-24 00:44:26,856] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  13%|█▎        | 835/6250 [51:48<5:42:09,  3.79s/it, gpt_loss=0.612, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 836/6250 [51:48<5:25:48,  3.61s/it, gpt_loss=0.612, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 836/6250 [51:51<5:25:48,  3.61s/it, gpt_loss=0.556, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 837/6250 [51:51<5:24:08,  3.59s/it, gpt_loss=0.556, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 837/6250 [51:55<5:24:08,  3.59s/it, gpt_loss=0.548, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 838/6250 [51:55<5:20:38,  3.55s/it, gpt_loss=0.548, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 838/6250 [51:58<5:20:38,  3.55s/it, gpt_loss=0.761, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 839/6250 [51:58<5:10:12,  3.44s/it, gpt_loss=0.761, lr=1.95e-6][A[2025-04-24 00:44:40,285] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  13%|█▎        | 839/6250 [52:01<5:10:12,  3.44s/it, gpt_loss=0.689, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 840/6250 [52:01<5:04:45,  3.38s/it, gpt_loss=0.689, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 840/6250 [52:04<5:04:45,  3.38s/it, gpt_loss=0.602, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 841/6250 [52:04<4:56:00,  3.28s/it, gpt_loss=0.602, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 841/6250 [52:08<4:56:00,  3.28s/it, gpt_loss=0.587, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 842/6250 [52:08<5:08:54,  3.43s/it, gpt_loss=0.587, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 842/6250 [52:12<5:08:54,  3.43s/it, gpt_loss=0.749, lr=1.95e-6][A
Train step of epoch 0:  13%|█▎        | 843/6250 [52:12<5:41:20,  3.79s/it, gpt_loss=0.749, lr=1.95e-6][A[2025-04-24 00:44:55,307] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  13%|█▎        | 843/6250 [52:16<5:41:20,  3.79s/it, gpt_loss=0.477, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 844/6250 [52:16<5:35:27,  3.72s/it, gpt_loss=0.477, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 844/6250 [52:20<5:35:27,  3.72s/it, gpt_loss=0.536, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 845/6250 [52:20<5:47:51,  3.86s/it, gpt_loss=0.536, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 845/6250 [52:24<5:47:51,  3.86s/it, gpt_loss=0.609, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 846/6250 [52:24<5:46:14,  3.84s/it, gpt_loss=0.609, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 846/6250 [52:28<5:46:14,  3.84s/it, gpt_loss=0.683, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 847/6250 [52:28<5:49:12,  3.88s/it, gpt_loss=0.683, lr=1.95e-6][A[2025-04-24 00:45:10,605] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  14%|█▎        | 847/6250 [52:31<5:49:12,  3.88s/it, gpt_loss=0.564, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 848/6250 [52:31<5:34:57,  3.72s/it, gpt_loss=0.564, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 848/6250 [52:36<5:34:57,  3.72s/it, gpt_loss=0.625, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 849/6250 [52:36<6:00:10,  4.00s/it, gpt_loss=0.625, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 849/6250 [52:39<6:00:10,  4.00s/it, gpt_loss=0.456, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 850/6250 [52:39<5:44:42,  3.83s/it, gpt_loss=0.456, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 850/6250 [52:43<5:44:42,  3.83s/it, gpt_loss=0.622, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 851/6250 [52:43<5:32:17,  3.69s/it, gpt_loss=0.622, lr=1.95e-6][A[2025-04-24 00:45:26,640] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  14%|█▎        | 851/6250 [52:47<5:32:17,  3.69s/it, gpt_loss=0.75, lr=1.95e-6] [A
Train step of epoch 0:  14%|█▎        | 852/6250 [52:47<5:56:01,  3.96s/it, gpt_loss=0.75, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 852/6250 [52:52<5:56:01,  3.96s/it, gpt_loss=0.552, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 853/6250 [52:52<6:04:23,  4.05s/it, gpt_loss=0.552, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 853/6250 [52:55<6:04:23,  4.05s/it, gpt_loss=0.679, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 854/6250 [52:55<5:31:24,  3.69s/it, gpt_loss=0.679, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 854/6250 [52:57<5:31:24,  3.69s/it, gpt_loss=0.637, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 855/6250 [52:57<5:09:32,  3.44s/it, gpt_loss=0.637, lr=1.95e-6][A[2025-04-24 00:45:40,421] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  14%|█▎        | 855/6250 [53:01<5:09:32,  3.44s/it, gpt_loss=0.71, lr=1.95e-6] [A
Train step of epoch 0:  14%|█▎        | 856/6250 [53:01<5:19:14,  3.55s/it, gpt_loss=0.71, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 856/6250 [53:04<5:19:14,  3.55s/it, gpt_loss=0.71, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 857/6250 [53:04<5:11:36,  3.47s/it, gpt_loss=0.71, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 857/6250 [53:08<5:11:36,  3.47s/it, gpt_loss=0.632, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 858/6250 [53:08<5:25:23,  3.62s/it, gpt_loss=0.632, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 858/6250 [53:12<5:25:23,  3.62s/it, gpt_loss=0.596, lr=1.95e-6][A
Train step of epoch 0:  14%|█▎        | 859/6250 [53:12<5:19:49,  3.56s/it, gpt_loss=0.596, lr=1.95e-6][A[2025-04-24 00:45:55,408] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  14%|█▎        | 859/6250 [53:16<5:19:49,  3.56s/it, gpt_loss=0.536, lr=1.95e-6][A
Train step of epoch 0:  14%|█▍        | 860/6250 [53:16<5:40:15,  3.79s/it, gpt_loss=0.536, lr=1.95e-6][A
Train step of epoch 0:  14%|█▍        | 860/6250 [53:20<5:40:15,  3.79s/it, gpt_loss=0.726, lr=1.95e-6][A
Train step of epoch 0:  14%|█▍        | 861/6250 [53:20<5:52:59,  3.93s/it, gpt_loss=0.726, lr=1.95e-6][A
Train step of epoch 0:  14%|█▍        | 861/6250 [53:24<5:52:59,  3.93s/it, gpt_loss=0.717, lr=1.95e-6][A
Train step of epoch 0:  14%|█▍        | 862/6250 [53:24<5:46:08,  3.85s/it, gpt_loss=0.717, lr=1.95e-6][A
Train step of epoch 0:  14%|█▍        | 862/6250 [53:27<5:46:08,  3.85s/it, gpt_loss=0.678, lr=1.95e-6][A
Train step of epoch 0:  14%|█▍        | 863/6250 [53:27<5:12:22,  3.48s/it, gpt_loss=0.678, lr=1.95e-6][A[2025-04-24 00:46:10,058] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  14%|█▍        | 863/6250 [53:31<5:12:22,  3.48s/it, gpt_loss=0.466, lr=1.95e-6][A
Train step of epoch 0:  14%|█▍        | 864/6250 [53:31<5:29:11,  3.67s/it, gpt_loss=0.466, lr=1.95e-6][A
Train step of epoch 0:  14%|█▍        | 864/6250 [53:34<5:29:11,  3.67s/it, gpt_loss=0.623, lr=1.95e-6][A
Train step of epoch 0:  14%|█▍        | 865/6250 [53:34<5:23:08,  3.60s/it, gpt_loss=0.623, lr=1.95e-6][A
Train step of epoch 0:  14%|█▍        | 865/6250 [53:38<5:23:08,  3.60s/it, gpt_loss=0.677, lr=1.95e-6][A
Train step of epoch 0:  14%|█▍        | 866/6250 [53:38<5:37:32,  3.76s/it, gpt_loss=0.677, lr=1.95e-6][A
Train step of epoch 0:  14%|█▍        | 866/6250 [53:41<5:37:32,  3.76s/it, gpt_loss=0.758, lr=1.95e-6][A
Train step of epoch 0:  14%|█▍        | 867/6250 [53:41<5:18:39,  3.55s/it, gpt_loss=0.758, lr=1.95e-6][A[2025-04-24 00:46:24,895] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  14%|█▍        | 867/6250 [53:46<5:18:39,  3.55s/it, gpt_loss=0.732, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 868/6250 [53:46<5:35:49,  3.74s/it, gpt_loss=0.732, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 868/6250 [53:50<5:35:49,  3.74s/it, gpt_loss=0.479, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 869/6250 [53:50<6:03:30,  4.05s/it, gpt_loss=0.479, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 869/6250 [53:54<6:03:30,  4.05s/it, gpt_loss=0.72, lr=1.94e-6] [A
Train step of epoch 0:  14%|█▍        | 870/6250 [53:54<5:55:37,  3.97s/it, gpt_loss=0.72, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 870/6250 [53:58<5:55:37,  3.97s/it, gpt_loss=0.696, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 871/6250 [53:58<5:40:47,  3.80s/it, gpt_loss=0.696, lr=1.94e-6][A[2025-04-24 00:46:40,955] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  14%|█▍        | 871/6250 [54:02<5:40:47,  3.80s/it, gpt_loss=0.751, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 872/6250 [54:02<5:48:52,  3.89s/it, gpt_loss=0.751, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 872/6250 [54:05<5:48:52,  3.89s/it, gpt_loss=0.653, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 873/6250 [54:05<5:45:04,  3.85s/it, gpt_loss=0.653, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 873/6250 [54:09<5:45:04,  3.85s/it, gpt_loss=0.465, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 874/6250 [54:09<5:24:26,  3.62s/it, gpt_loss=0.465, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 874/6250 [54:12<5:24:26,  3.62s/it, gpt_loss=0.632, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 875/6250 [54:12<5:23:11,  3.61s/it, gpt_loss=0.632, lr=1.94e-6][A[2025-04-24 00:46:55,423] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  14%|█▍        | 875/6250 [54:16<5:23:11,  3.61s/it, gpt_loss=0.741, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 876/6250 [54:16<5:35:05,  3.74s/it, gpt_loss=0.741, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 876/6250 [54:20<5:35:05,  3.74s/it, gpt_loss=0.679, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 877/6250 [54:20<5:36:37,  3.76s/it, gpt_loss=0.679, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 877/6250 [54:24<5:36:37,  3.76s/it, gpt_loss=0.683, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 878/6250 [54:24<5:36:39,  3.76s/it, gpt_loss=0.683, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 878/6250 [54:28<5:36:39,  3.76s/it, gpt_loss=0.45, lr=1.94e-6] [A
Train step of epoch 0:  14%|█▍        | 879/6250 [54:28<5:42:31,  3.83s/it, gpt_loss=0.45, lr=1.94e-6][A[2025-04-24 00:47:10,864] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  14%|█▍        | 879/6250 [54:32<5:42:31,  3.83s/it, gpt_loss=0.729, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 880/6250 [54:32<5:44:21,  3.85s/it, gpt_loss=0.729, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 880/6250 [54:35<5:44:21,  3.85s/it, gpt_loss=0.582, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 881/6250 [54:35<5:36:53,  3.76s/it, gpt_loss=0.582, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 881/6250 [54:39<5:36:53,  3.76s/it, gpt_loss=0.668, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 882/6250 [54:39<5:40:37,  3.81s/it, gpt_loss=0.668, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 882/6250 [54:42<5:40:37,  3.81s/it, gpt_loss=0.666, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 883/6250 [54:42<5:28:54,  3.68s/it, gpt_loss=0.666, lr=1.94e-6][A[2025-04-24 00:47:25,790] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  14%|█▍        | 883/6250 [54:47<5:28:54,  3.68s/it, gpt_loss=0.708, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 884/6250 [54:47<5:39:30,  3.80s/it, gpt_loss=0.708, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 884/6250 [54:51<5:39:30,  3.80s/it, gpt_loss=0.826, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 885/6250 [54:51<5:47:07,  3.88s/it, gpt_loss=0.826, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 885/6250 [54:54<5:47:07,  3.88s/it, gpt_loss=0.631, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 886/6250 [54:54<5:28:21,  3.67s/it, gpt_loss=0.631, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 886/6250 [54:57<5:28:21,  3.67s/it, gpt_loss=0.667, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 887/6250 [54:57<5:17:50,  3.56s/it, gpt_loss=0.667, lr=1.94e-6][A[2025-04-24 00:47:41,129] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  14%|█▍        | 887/6250 [55:02<5:17:50,  3.56s/it, gpt_loss=0.552, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 888/6250 [55:02<5:50:51,  3.93s/it, gpt_loss=0.552, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 888/6250 [55:05<5:50:51,  3.93s/it, gpt_loss=0.446, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 889/6250 [55:05<5:20:13,  3.58s/it, gpt_loss=0.446, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 889/6250 [55:09<5:20:13,  3.58s/it, gpt_loss=0.69, lr=1.94e-6] [A
Train step of epoch 0:  14%|█▍        | 890/6250 [55:09<5:26:46,  3.66s/it, gpt_loss=0.69, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 890/6250 [55:12<5:26:46,  3.66s/it, gpt_loss=0.592, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 891/6250 [55:12<5:10:57,  3.48s/it, gpt_loss=0.592, lr=1.94e-6][A[2025-04-24 00:47:55,050] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  14%|█▍        | 891/6250 [55:16<5:10:57,  3.48s/it, gpt_loss=0.482, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 892/6250 [55:16<5:31:03,  3.71s/it, gpt_loss=0.482, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 892/6250 [55:21<5:31:03,  3.71s/it, gpt_loss=0.716, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 893/6250 [55:21<6:13:14,  4.18s/it, gpt_loss=0.716, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 893/6250 [55:24<6:13:14,  4.18s/it, gpt_loss=0.722, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 894/6250 [55:24<5:39:31,  3.80s/it, gpt_loss=0.722, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 894/6250 [55:27<5:39:31,  3.80s/it, gpt_loss=0.863, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 895/6250 [55:27<5:20:41,  3.59s/it, gpt_loss=0.863, lr=1.94e-6][A[2025-04-24 00:48:10,228] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  14%|█▍        | 895/6250 [55:31<5:20:41,  3.59s/it, gpt_loss=0.476, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 896/6250 [55:31<5:27:58,  3.68s/it, gpt_loss=0.476, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 896/6250 [55:35<5:27:58,  3.68s/it, gpt_loss=0.764, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 897/6250 [55:35<5:33:47,  3.74s/it, gpt_loss=0.764, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 897/6250 [55:38<5:33:47,  3.74s/it, gpt_loss=0.522, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 898/6250 [55:38<5:26:06,  3.66s/it, gpt_loss=0.522, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 898/6250 [55:42<5:26:06,  3.66s/it, gpt_loss=0.867, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 899/6250 [55:42<5:24:11,  3.64s/it, gpt_loss=0.867, lr=1.94e-6][A[2025-04-24 00:48:26,063] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  14%|█▍        | 899/6250 [55:47<5:24:11,  3.64s/it, gpt_loss=0.787, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 900/6250 [55:47<5:57:52,  4.01s/it, gpt_loss=0.787, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 900/6250 [55:51<5:57:52,  4.01s/it, gpt_loss=0.818, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 901/6250 [55:51<6:13:05,  4.18s/it, gpt_loss=0.818, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 901/6250 [55:54<6:13:05,  4.18s/it, gpt_loss=0.568, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 902/6250 [55:54<5:36:51,  3.78s/it, gpt_loss=0.568, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 902/6250 [55:57<5:36:51,  3.78s/it, gpt_loss=0.602, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 903/6250 [55:57<5:13:59,  3.52s/it, gpt_loss=0.602, lr=1.94e-6][A[2025-04-24 00:48:38,913] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  14%|█▍        | 903/6250 [56:00<5:13:59,  3.52s/it, gpt_loss=0.866, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 904/6250 [56:00<4:46:43,  3.22s/it, gpt_loss=0.866, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 904/6250 [56:04<4:46:43,  3.22s/it, gpt_loss=0.821, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 905/6250 [56:04<5:14:54,  3.53s/it, gpt_loss=0.821, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 905/6250 [56:09<5:14:54,  3.53s/it, gpt_loss=0.701, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 906/6250 [56:09<5:51:07,  3.94s/it, gpt_loss=0.701, lr=1.94e-6][A
Train step of epoch 0:  14%|█▍        | 906/6250 [56:11<5:51:07,  3.94s/it, gpt_loss=0.738, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 907/6250 [56:11<5:11:15,  3.50s/it, gpt_loss=0.738, lr=1.94e-6][A[2025-04-24 00:48:53,211] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  15%|█▍        | 907/6250 [56:14<5:11:15,  3.50s/it, gpt_loss=0.629, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 908/6250 [56:14<4:49:23,  3.25s/it, gpt_loss=0.629, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 908/6250 [56:18<4:49:23,  3.25s/it, gpt_loss=0.691, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 909/6250 [56:18<5:02:00,  3.39s/it, gpt_loss=0.691, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 909/6250 [56:21<5:02:00,  3.39s/it, gpt_loss=0.666, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 910/6250 [56:21<4:59:30,  3.37s/it, gpt_loss=0.666, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 910/6250 [56:24<4:59:30,  3.37s/it, gpt_loss=0.672, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 911/6250 [56:24<5:00:38,  3.38s/it, gpt_loss=0.672, lr=1.94e-6][A[2025-04-24 00:49:06,725] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  15%|█▍        | 911/6250 [56:27<5:00:38,  3.38s/it, gpt_loss=0.712, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 912/6250 [56:27<4:52:33,  3.29s/it, gpt_loss=0.712, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 912/6250 [56:31<4:52:33,  3.29s/it, gpt_loss=0.622, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 913/6250 [56:31<5:03:04,  3.41s/it, gpt_loss=0.622, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 913/6250 [56:35<5:03:04,  3.41s/it, gpt_loss=0.756, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 914/6250 [56:35<5:05:49,  3.44s/it, gpt_loss=0.756, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 914/6250 [56:38<5:05:49,  3.44s/it, gpt_loss=0.816, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 915/6250 [56:38<4:52:17,  3.29s/it, gpt_loss=0.816, lr=1.94e-6][A[2025-04-24 00:49:20,068] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  15%|█▍        | 915/6250 [56:41<4:52:17,  3.29s/it, gpt_loss=0.65, lr=1.94e-6] [A
Train step of epoch 0:  15%|█▍        | 916/6250 [56:41<4:50:15,  3.26s/it, gpt_loss=0.65, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 916/6250 [56:44<4:50:15,  3.26s/it, gpt_loss=0.576, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 917/6250 [56:44<5:00:31,  3.38s/it, gpt_loss=0.576, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 917/6250 [56:48<5:00:31,  3.38s/it, gpt_loss=0.798, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 918/6250 [56:48<5:03:47,  3.42s/it, gpt_loss=0.798, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 918/6250 [56:52<5:03:47,  3.42s/it, gpt_loss=0.681, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 919/6250 [56:52<5:16:42,  3.56s/it, gpt_loss=0.681, lr=1.94e-6][A[2025-04-24 00:49:35,333] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  15%|█▍        | 919/6250 [56:56<5:16:42,  3.56s/it, gpt_loss=0.601, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 920/6250 [56:56<5:33:38,  3.76s/it, gpt_loss=0.601, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 920/6250 [57:00<5:33:38,  3.76s/it, gpt_loss=0.743, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 921/6250 [57:00<5:29:56,  3.71s/it, gpt_loss=0.743, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 921/6250 [57:04<5:29:56,  3.71s/it, gpt_loss=0.53, lr=1.94e-6] [A
Train step of epoch 0:  15%|█▍        | 922/6250 [57:04<5:43:33,  3.87s/it, gpt_loss=0.53, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 922/6250 [57:07<5:43:33,  3.87s/it, gpt_loss=0.656, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 923/6250 [57:07<5:21:32,  3.62s/it, gpt_loss=0.656, lr=1.94e-6][A[2025-04-24 00:49:50,460] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  15%|█▍        | 923/6250 [57:11<5:21:32,  3.62s/it, gpt_loss=0.657, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 924/6250 [57:11<5:37:47,  3.81s/it, gpt_loss=0.657, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 924/6250 [57:16<5:37:47,  3.81s/it, gpt_loss=0.681, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 925/6250 [57:16<6:00:26,  4.06s/it, gpt_loss=0.681, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 925/6250 [57:19<6:00:26,  4.06s/it, gpt_loss=0.554, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 926/6250 [57:19<5:39:28,  3.83s/it, gpt_loss=0.554, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 926/6250 [57:23<5:39:28,  3.83s/it, gpt_loss=0.876, lr=1.94e-6][A
Train step of epoch 0:  15%|█▍        | 927/6250 [57:23<5:38:13,  3.81s/it, gpt_loss=0.876, lr=1.94e-6][A[2025-04-24 00:50:06,353] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  15%|█▍        | 927/6250 [57:27<5:38:13,  3.81s/it, gpt_loss=0.579, lr=1.93e-6][A
Train step of epoch 0:  15%|█▍        | 928/6250 [57:27<5:47:53,  3.92s/it, gpt_loss=0.579, lr=1.93e-6][A
Train step of epoch 0:  15%|█▍        | 928/6250 [57:31<5:47:53,  3.92s/it, gpt_loss=0.708, lr=1.93e-6][A
Train step of epoch 0:  15%|█▍        | 929/6250 [57:31<5:42:43,  3.86s/it, gpt_loss=0.708, lr=1.93e-6][A
Train step of epoch 0:  15%|█▍        | 929/6250 [57:33<5:42:43,  3.86s/it, gpt_loss=0.492, lr=1.93e-6][A
Train step of epoch 0:  15%|█▍        | 930/6250 [57:33<5:10:07,  3.50s/it, gpt_loss=0.492, lr=1.93e-6][A
Train step of epoch 0:  15%|█▍        | 930/6250 [57:37<5:10:07,  3.50s/it, gpt_loss=0.789, lr=1.93e-6][A
Train step of epoch 0:  15%|█▍        | 931/6250 [57:37<5:08:06,  3.48s/it, gpt_loss=0.789, lr=1.93e-6][A[2025-04-24 00:50:19,455] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  15%|█▍        | 931/6250 [57:40<5:08:06,  3.48s/it, gpt_loss=0.516, lr=1.93e-6][A
Train step of epoch 0:  15%|█▍        | 932/6250 [57:40<5:03:30,  3.42s/it, gpt_loss=0.516, lr=1.93e-6][A
Train step of epoch 0:  15%|█▍        | 932/6250 [57:44<5:03:30,  3.42s/it, gpt_loss=0.517, lr=1.93e-6][A
Train step of epoch 0:  15%|█▍        | 933/6250 [57:44<5:15:01,  3.55s/it, gpt_loss=0.517, lr=1.93e-6][A
Train step of epoch 0:  15%|█▍        | 933/6250 [57:48<5:15:01,  3.55s/it, gpt_loss=0.768, lr=1.93e-6][A
Train step of epoch 0:  15%|█▍        | 934/6250 [57:48<5:35:21,  3.79s/it, gpt_loss=0.768, lr=1.93e-6][A
Train step of epoch 0:  15%|█▍        | 934/6250 [57:52<5:35:21,  3.79s/it, gpt_loss=0.689, lr=1.93e-6][A
Train step of epoch 0:  15%|█▍        | 935/6250 [57:52<5:23:42,  3.65s/it, gpt_loss=0.689, lr=1.93e-6][A[2025-04-24 00:50:34,324] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  15%|█▍        | 935/6250 [57:55<5:23:42,  3.65s/it, gpt_loss=0.679, lr=1.93e-6][A
Train step of epoch 0:  15%|█▍        | 936/6250 [57:55<5:15:15,  3.56s/it, gpt_loss=0.679, lr=1.93e-6][A
Train step of epoch 0:  15%|█▍        | 936/6250 [58:00<5:15:15,  3.56s/it, gpt_loss=0.641, lr=1.93e-6][A
Train step of epoch 0:  15%|█▍        | 937/6250 [58:00<5:38:05,  3.82s/it, gpt_loss=0.641, lr=1.93e-6][A
Train step of epoch 0:  15%|█▍        | 937/6250 [58:03<5:38:05,  3.82s/it, gpt_loss=0.785, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 938/6250 [58:03<5:19:44,  3.61s/it, gpt_loss=0.785, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 938/6250 [58:06<5:19:44,  3.61s/it, gpt_loss=0.803, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 939/6250 [58:06<5:22:46,  3.65s/it, gpt_loss=0.803, lr=1.93e-6][A[2025-04-24 00:50:49,501] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  15%|█▌        | 939/6250 [58:10<5:22:46,  3.65s/it, gpt_loss=0.765, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 940/6250 [58:10<5:29:23,  3.72s/it, gpt_loss=0.765, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 940/6250 [58:13<5:29:23,  3.72s/it, gpt_loss=0.557, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 941/6250 [58:13<5:10:38,  3.51s/it, gpt_loss=0.557, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 941/6250 [58:18<5:10:38,  3.51s/it, gpt_loss=0.626, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 942/6250 [58:18<5:45:16,  3.90s/it, gpt_loss=0.626, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 942/6250 [58:22<5:45:16,  3.90s/it, gpt_loss=0.519, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 943/6250 [58:22<5:40:22,  3.85s/it, gpt_loss=0.519, lr=1.93e-6][A[2025-04-24 00:51:05,270] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  15%|█▌        | 943/6250 [58:26<5:40:22,  3.85s/it, gpt_loss=0.735, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 944/6250 [58:26<5:49:58,  3.96s/it, gpt_loss=0.735, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 944/6250 [58:30<5:49:58,  3.96s/it, gpt_loss=0.56, lr=1.93e-6] [A
Train step of epoch 0:  15%|█▌        | 945/6250 [58:30<5:38:02,  3.82s/it, gpt_loss=0.56, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 945/6250 [58:33<5:38:02,  3.82s/it, gpt_loss=0.64, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 946/6250 [58:33<5:17:52,  3.60s/it, gpt_loss=0.64, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 946/6250 [58:35<5:17:52,  3.60s/it, gpt_loss=0.517, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 947/6250 [58:35<4:45:52,  3.23s/it, gpt_loss=0.517, lr=1.93e-6][A[2025-04-24 00:51:16,113] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  15%|█▌        | 947/6250 [58:37<4:45:52,  3.23s/it, gpt_loss=0.496, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 948/6250 [58:37<4:09:47,  2.83s/it, gpt_loss=0.496, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 948/6250 [58:40<4:09:47,  2.83s/it, gpt_loss=0.833, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 949/6250 [58:40<4:23:50,  2.99s/it, gpt_loss=0.833, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 949/6250 [58:44<4:23:50,  2.99s/it, gpt_loss=0.674, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 950/6250 [58:44<4:49:56,  3.28s/it, gpt_loss=0.674, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 950/6250 [58:48<4:49:56,  3.28s/it, gpt_loss=0.856, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 951/6250 [58:48<5:12:23,  3.54s/it, gpt_loss=0.856, lr=1.93e-6][A[2025-04-24 00:51:31,978] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  15%|█▌        | 951/6250 [58:53<5:12:23,  3.54s/it, gpt_loss=0.816, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 952/6250 [58:53<5:35:16,  3.80s/it, gpt_loss=0.816, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 952/6250 [58:56<5:35:16,  3.80s/it, gpt_loss=0.506, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 953/6250 [58:56<5:25:41,  3.69s/it, gpt_loss=0.506, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 953/6250 [59:01<5:25:41,  3.69s/it, gpt_loss=0.509, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 954/6250 [59:01<5:47:00,  3.93s/it, gpt_loss=0.509, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 954/6250 [59:04<5:47:00,  3.93s/it, gpt_loss=0.704, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 955/6250 [59:04<5:25:50,  3.69s/it, gpt_loss=0.704, lr=1.93e-6][A[2025-04-24 00:51:47,292] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  15%|█▌        | 955/6250 [59:08<5:25:50,  3.69s/it, gpt_loss=0.582, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 956/6250 [59:08<5:40:24,  3.86s/it, gpt_loss=0.582, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 956/6250 [59:11<5:40:24,  3.86s/it, gpt_loss=0.705, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 957/6250 [59:11<5:19:25,  3.62s/it, gpt_loss=0.705, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 957/6250 [59:15<5:19:25,  3.62s/it, gpt_loss=0.626, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 958/6250 [59:15<5:27:08,  3.71s/it, gpt_loss=0.626, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 958/6250 [59:18<5:27:08,  3.71s/it, gpt_loss=0.621, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 959/6250 [59:18<5:15:17,  3.58s/it, gpt_loss=0.621, lr=1.93e-6][A[2025-04-24 00:52:02,216] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  15%|█▌        | 959/6250 [59:23<5:15:17,  3.58s/it, gpt_loss=0.541, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 960/6250 [59:23<5:44:24,  3.91s/it, gpt_loss=0.541, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 960/6250 [59:27<5:44:24,  3.91s/it, gpt_loss=0.774, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 961/6250 [59:27<5:34:14,  3.79s/it, gpt_loss=0.774, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 961/6250 [59:30<5:34:14,  3.79s/it, gpt_loss=0.683, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 962/6250 [59:30<5:18:22,  3.61s/it, gpt_loss=0.683, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 962/6250 [59:34<5:18:22,  3.61s/it, gpt_loss=0.658, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 963/6250 [59:34<5:28:03,  3.72s/it, gpt_loss=0.658, lr=1.93e-6][A[2025-04-24 00:52:16,157] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  15%|█▌        | 963/6250 [59:37<5:28:03,  3.72s/it, gpt_loss=0.505, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 964/6250 [59:37<5:15:15,  3.58s/it, gpt_loss=0.505, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 964/6250 [59:40<5:15:15,  3.58s/it, gpt_loss=0.59, lr=1.93e-6] [A
Train step of epoch 0:  15%|█▌        | 965/6250 [59:40<5:07:27,  3.49s/it, gpt_loss=0.59, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 965/6250 [59:43<5:07:27,  3.49s/it, gpt_loss=0.567, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 966/6250 [59:43<4:59:31,  3.40s/it, gpt_loss=0.567, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 966/6250 [59:47<4:59:31,  3.40s/it, gpt_loss=0.542, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 967/6250 [59:47<4:58:09,  3.39s/it, gpt_loss=0.542, lr=1.93e-6][A[2025-04-24 00:52:30,193] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  15%|█▌        | 967/6250 [59:51<4:58:09,  3.39s/it, gpt_loss=0.935, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 968/6250 [59:51<5:19:44,  3.63s/it, gpt_loss=0.935, lr=1.93e-6][A
Train step of epoch 0:  15%|█▌        | 968/6250 [59:54<5:19:44,  3.63s/it, gpt_loss=0.867, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 969/6250 [59:54<5:16:04,  3.59s/it, gpt_loss=0.867, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 969/6250 [59:58<5:16:04,  3.59s/it, gpt_loss=0.77, lr=1.93e-6] [A
Train step of epoch 0:  16%|█▌        | 970/6250 [59:58<5:22:41,  3.67s/it, gpt_loss=0.77, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 970/6250 [1:00:01<5:22:41,  3.67s/it, gpt_loss=0.724, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 971/6250 [1:00:01<5:07:49,  3.50s/it, gpt_loss=0.724, lr=1.93e-6][A[2025-04-24 00:52:43,960] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  16%|█▌        | 971/6250 [1:00:05<5:07:49,  3.50s/it, gpt_loss=0.409, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 972/6250 [1:00:05<5:03:06,  3.45s/it, gpt_loss=0.409, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 972/6250 [1:00:08<5:03:06,  3.45s/it, gpt_loss=0.609, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 973/6250 [1:00:08<4:51:20,  3.31s/it, gpt_loss=0.609, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 973/6250 [1:00:12<4:51:20,  3.31s/it, gpt_loss=0.771, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 974/6250 [1:00:12<5:04:20,  3.46s/it, gpt_loss=0.771, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 974/6250 [1:00:15<5:04:20,  3.46s/it, gpt_loss=0.606, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 975/6250 [1:00:15<4:57:07,  3.38s/it, gpt_loss=0.606, lr=1.93e-6][A[2025-04-24 00:52:57,685] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  16%|█▌        | 975/6250 [1:00:18<4:57:07,  3.38s/it, gpt_loss=0.843, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 976/6250 [1:00:18<5:06:11,  3.48s/it, gpt_loss=0.843, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 976/6250 [1:00:23<5:06:11,  3.48s/it, gpt_loss=0.773, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 977/6250 [1:00:23<5:36:20,  3.83s/it, gpt_loss=0.773, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 977/6250 [1:00:27<5:36:20,  3.83s/it, gpt_loss=0.588, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 978/6250 [1:00:27<5:40:56,  3.88s/it, gpt_loss=0.588, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 978/6250 [1:00:31<5:40:56,  3.88s/it, gpt_loss=0.61, lr=1.93e-6] [A
Train step of epoch 0:  16%|█▌        | 979/6250 [1:00:31<5:48:34,  3.97s/it, gpt_loss=0.61, lr=1.93e-6][A[2025-04-24 00:53:14,229] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  16%|█▌        | 979/6250 [1:00:35<5:48:34,  3.97s/it, gpt_loss=0.571, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 980/6250 [1:00:35<5:42:28,  3.90s/it, gpt_loss=0.571, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 980/6250 [1:00:38<5:42:28,  3.90s/it, gpt_loss=0.85, lr=1.93e-6] [A
Train step of epoch 0:  16%|█▌        | 981/6250 [1:00:38<5:16:01,  3.60s/it, gpt_loss=0.85, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 981/6250 [1:00:42<5:16:01,  3.60s/it, gpt_loss=0.671, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 982/6250 [1:00:42<5:23:24,  3.68s/it, gpt_loss=0.671, lr=1.93e-6][A
Train step of epoch 0:  16%|█▌        | 982/6250 [1:00:45<5:23:24,  3.68s/it, gpt_loss=0.54, lr=1.93e-6] [A
Train step of epoch 0:  16%|█▌        | 983/6250 [1:00:45<5:22:11,  3.67s/it, gpt_loss=0.54, lr=1.93e-6][A[2025-04-24 00:53:30,547] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  16%|█▌        | 983/6250 [1:00:51<5:22:11,  3.67s/it, gpt_loss=0.743, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 984/6250 [1:00:51<6:20:49,  4.34s/it, gpt_loss=0.743, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 984/6250 [1:00:55<6:20:49,  4.34s/it, gpt_loss=0.647, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 985/6250 [1:00:55<6:03:01,  4.14s/it, gpt_loss=0.647, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 985/6250 [1:00:58<6:03:01,  4.14s/it, gpt_loss=0.551, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 986/6250 [1:00:58<5:31:26,  3.78s/it, gpt_loss=0.551, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 986/6250 [1:01:02<5:31:26,  3.78s/it, gpt_loss=0.827, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 987/6250 [1:01:02<5:49:03,  3.98s/it, gpt_loss=0.827, lr=1.92e-6][A[2025-04-24 00:53:45,967] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  16%|█▌        | 987/6250 [1:01:07<5:49:03,  3.98s/it, gpt_loss=0.664, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 988/6250 [1:01:07<5:59:07,  4.09s/it, gpt_loss=0.664, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 988/6250 [1:01:11<5:59:07,  4.09s/it, gpt_loss=0.714, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 989/6250 [1:01:11<6:13:33,  4.26s/it, gpt_loss=0.714, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 989/6250 [1:01:15<6:13:33,  4.26s/it, gpt_loss=0.612, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 990/6250 [1:01:15<5:59:25,  4.10s/it, gpt_loss=0.612, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 990/6250 [1:01:20<5:59:25,  4.10s/it, gpt_loss=0.86, lr=1.92e-6] [A
Train step of epoch 0:  16%|█▌        | 991/6250 [1:01:20<6:18:05,  4.31s/it, gpt_loss=0.86, lr=1.92e-6][A[2025-04-24 00:54:02,370] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  16%|█▌        | 991/6250 [1:01:23<6:18:05,  4.31s/it, gpt_loss=0.604, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 992/6250 [1:01:23<5:49:13,  3.99s/it, gpt_loss=0.604, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 992/6250 [1:01:27<5:49:13,  3.99s/it, gpt_loss=0.708, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 993/6250 [1:01:27<5:42:48,  3.91s/it, gpt_loss=0.708, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 993/6250 [1:01:31<5:42:48,  3.91s/it, gpt_loss=0.746, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 994/6250 [1:01:31<5:39:08,  3.87s/it, gpt_loss=0.746, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 994/6250 [1:01:34<5:39:08,  3.87s/it, gpt_loss=0.6, lr=1.92e-6]  [A
Train step of epoch 0:  16%|█▌        | 995/6250 [1:01:34<5:12:44,  3.57s/it, gpt_loss=0.6, lr=1.92e-6][A[2025-04-24 00:54:16,687] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  16%|█▌        | 995/6250 [1:01:37<5:12:44,  3.57s/it, gpt_loss=0.493, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 996/6250 [1:01:37<5:22:07,  3.68s/it, gpt_loss=0.493, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 996/6250 [1:01:41<5:22:07,  3.68s/it, gpt_loss=0.624, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 997/6250 [1:01:41<5:20:36,  3.66s/it, gpt_loss=0.624, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 997/6250 [1:01:44<5:20:36,  3.66s/it, gpt_loss=0.641, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 998/6250 [1:01:44<5:02:17,  3.45s/it, gpt_loss=0.641, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 998/6250 [1:01:48<5:02:17,  3.45s/it, gpt_loss=0.705, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 999/6250 [1:01:48<5:02:39,  3.46s/it, gpt_loss=0.705, lr=1.92e-6][A[2025-04-24 00:54:30,561] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  16%|█▌        | 999/6250 [1:01:51<5:02:39,  3.46s/it, gpt_loss=0.607, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1000/6250 [1:01:51<5:11:54,  3.56s/it, gpt_loss=0.607, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1000/6250 [1:01:55<5:11:54,  3.56s/it, gpt_loss=0.709, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1001/6250 [1:01:55<5:24:48,  3.71s/it, gpt_loss=0.709, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1001/6250 [1:01:58<5:24:48,  3.71s/it, gpt_loss=0.658, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1002/6250 [1:01:58<4:53:11,  3.35s/it, gpt_loss=0.658, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1002/6250 [1:02:01<4:53:11,  3.35s/it, gpt_loss=0.58, lr=1.92e-6] [A
Train step of epoch 0:  16%|█▌        | 1003/6250 [1:02:01<4:58:18,  3.41s/it, gpt_loss=0.58, lr=1.92e-6][A[2025-04-24 00:54:45,054] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  16%|█▌        | 1003/6250 [1:02:06<4:58:18,  3.41s/it, gpt_loss=0.581, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1004/6250 [1:02:06<5:23:33,  3.70s/it, gpt_loss=0.581, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1004/6250 [1:02:09<5:23:33,  3.70s/it, gpt_loss=0.643, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1005/6250 [1:02:09<5:14:14,  3.59s/it, gpt_loss=0.643, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1005/6250 [1:02:13<5:14:14,  3.59s/it, gpt_loss=0.709, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1006/6250 [1:02:13<5:11:10,  3.56s/it, gpt_loss=0.709, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1006/6250 [1:02:16<5:11:10,  3.56s/it, gpt_loss=0.679, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1007/6250 [1:02:16<4:58:32,  3.42s/it, gpt_loss=0.679, lr=1.92e-6][A[2025-04-24 00:54:58,596] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  16%|█▌        | 1007/6250 [1:02:19<4:58:32,  3.42s/it, gpt_loss=0.523, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1008/6250 [1:02:19<5:04:09,  3.48s/it, gpt_loss=0.523, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1008/6250 [1:02:24<5:04:09,  3.48s/it, gpt_loss=0.584, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1009/6250 [1:02:24<5:44:24,  3.94s/it, gpt_loss=0.584, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1009/6250 [1:02:27<5:44:24,  3.94s/it, gpt_loss=0.47, lr=1.92e-6] [A
Train step of epoch 0:  16%|█▌        | 1010/6250 [1:02:27<5:12:44,  3.58s/it, gpt_loss=0.47, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1010/6250 [1:02:30<5:12:44,  3.58s/it, gpt_loss=0.497, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1011/6250 [1:02:30<5:07:10,  3.52s/it, gpt_loss=0.497, lr=1.92e-6][A[2025-04-24 00:55:13,575] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  16%|█▌        | 1011/6250 [1:02:34<5:07:10,  3.52s/it, gpt_loss=0.673, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1012/6250 [1:02:34<5:15:52,  3.62s/it, gpt_loss=0.673, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1012/6250 [1:02:38<5:15:52,  3.62s/it, gpt_loss=0.734, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1013/6250 [1:02:38<5:29:50,  3.78s/it, gpt_loss=0.734, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1013/6250 [1:02:42<5:29:50,  3.78s/it, gpt_loss=0.913, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1014/6250 [1:02:42<5:14:01,  3.60s/it, gpt_loss=0.913, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1014/6250 [1:02:45<5:14:01,  3.60s/it, gpt_loss=0.812, lr=1.92e-6][A
Train step of epoch 0:  16%|█▌        | 1015/6250 [1:02:45<5:10:45,  3.56s/it, gpt_loss=0.812, lr=1.92e-6][A[2025-04-24 00:55:29,229] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  16%|█▌        | 1015/6250 [1:02:50<5:10:45,  3.56s/it, gpt_loss=0.799, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1016/6250 [1:02:50<5:44:19,  3.95s/it, gpt_loss=0.799, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1016/6250 [1:02:54<5:44:19,  3.95s/it, gpt_loss=0.784, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1017/6250 [1:02:54<5:56:24,  4.09s/it, gpt_loss=0.784, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1017/6250 [1:02:58<5:56:24,  4.09s/it, gpt_loss=0.579, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1018/6250 [1:02:58<5:46:40,  3.98s/it, gpt_loss=0.579, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1018/6250 [1:03:02<5:46:40,  3.98s/it, gpt_loss=0.676, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1019/6250 [1:03:02<5:39:03,  3.89s/it, gpt_loss=0.676, lr=1.92e-6][A[2025-04-24 00:55:45,154] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  16%|█▋        | 1019/6250 [1:03:06<5:39:03,  3.89s/it, gpt_loss=0.54, lr=1.92e-6] [A
Train step of epoch 0:  16%|█▋        | 1020/6250 [1:03:06<5:44:45,  3.96s/it, gpt_loss=0.54, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1020/6250 [1:03:10<5:44:45,  3.96s/it, gpt_loss=0.64, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1021/6250 [1:03:10<5:36:17,  3.86s/it, gpt_loss=0.64, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1021/6250 [1:03:14<5:36:17,  3.86s/it, gpt_loss=0.723, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1022/6250 [1:03:14<5:42:36,  3.93s/it, gpt_loss=0.723, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1022/6250 [1:03:17<5:42:36,  3.93s/it, gpt_loss=0.657, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1023/6250 [1:03:17<5:33:48,  3.83s/it, gpt_loss=0.657, lr=1.92e-6][A[2025-04-24 00:56:01,025] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  16%|█▋        | 1023/6250 [1:03:22<5:33:48,  3.83s/it, gpt_loss=0.612, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1024/6250 [1:03:22<5:52:09,  4.04s/it, gpt_loss=0.612, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1024/6250 [1:03:26<5:52:09,  4.04s/it, gpt_loss=0.721, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1025/6250 [1:03:26<6:01:40,  4.15s/it, gpt_loss=0.721, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1025/6250 [1:03:30<6:01:40,  4.15s/it, gpt_loss=0.692, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1026/6250 [1:03:30<6:02:34,  4.16s/it, gpt_loss=0.692, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1026/6250 [1:03:34<6:02:34,  4.16s/it, gpt_loss=0.671, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1027/6250 [1:03:34<5:59:47,  4.13s/it, gpt_loss=0.671, lr=1.92e-6][A[2025-04-24 00:56:17,193] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  16%|█▋        | 1027/6250 [1:03:38<5:59:47,  4.13s/it, gpt_loss=0.559, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1028/6250 [1:03:38<5:43:23,  3.95s/it, gpt_loss=0.559, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1028/6250 [1:03:41<5:43:23,  3.95s/it, gpt_loss=0.586, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1029/6250 [1:03:41<5:21:05,  3.69s/it, gpt_loss=0.586, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1029/6250 [1:03:46<5:21:05,  3.69s/it, gpt_loss=0.662, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1030/6250 [1:03:46<5:48:48,  4.01s/it, gpt_loss=0.662, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1030/6250 [1:03:50<5:48:48,  4.01s/it, gpt_loss=0.624, lr=1.92e-6][A
Train step of epoch 0:  16%|█▋        | 1031/6250 [1:03:50<5:49:43,  4.02s/it, gpt_loss=0.624, lr=1.92e-6][A[2025-04-24 00:56:32,998] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  16%|█▋        | 1031/6250 [1:03:54<5:49:43,  4.02s/it, gpt_loss=0.747, lr=1.92e-6][A
Train step of epoch 0:  17%|█▋        | 1032/6250 [1:03:54<5:46:44,  3.99s/it, gpt_loss=0.747, lr=1.92e-6][A
Train step of epoch 0:  17%|█▋        | 1032/6250 [1:03:57<5:46:44,  3.99s/it, gpt_loss=0.567, lr=1.92e-6][A
Train step of epoch 0:  17%|█▋        | 1033/6250 [1:03:57<5:36:36,  3.87s/it, gpt_loss=0.567, lr=1.92e-6][A
Train step of epoch 0:  17%|█▋        | 1033/6250 [1:04:01<5:36:36,  3.87s/it, gpt_loss=0.646, lr=1.92e-6][A
Train step of epoch 0:  17%|█▋        | 1034/6250 [1:04:01<5:31:15,  3.81s/it, gpt_loss=0.646, lr=1.92e-6][A
Train step of epoch 0:  17%|█▋        | 1034/6250 [1:04:05<5:31:15,  3.81s/it, gpt_loss=0.734, lr=1.92e-6][A
Train step of epoch 0:  17%|█▋        | 1035/6250 [1:04:05<5:28:48,  3.78s/it, gpt_loss=0.734, lr=1.92e-6][A[2025-04-24 00:56:47,611] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  17%|█▋        | 1035/6250 [1:04:08<5:28:48,  3.78s/it, gpt_loss=0.63, lr=1.91e-6] [A
Train step of epoch 0:  17%|█▋        | 1036/6250 [1:04:08<5:24:37,  3.74s/it, gpt_loss=0.63, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1036/6250 [1:04:13<5:24:37,  3.74s/it, gpt_loss=0.634, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1037/6250 [1:04:13<5:41:54,  3.94s/it, gpt_loss=0.634, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1037/6250 [1:04:17<5:41:54,  3.94s/it, gpt_loss=0.665, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1038/6250 [1:04:17<5:47:16,  4.00s/it, gpt_loss=0.665, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1038/6250 [1:04:21<5:47:16,  4.00s/it, gpt_loss=0.702, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1039/6250 [1:04:21<5:52:50,  4.06s/it, gpt_loss=0.702, lr=1.91e-6][A[2025-04-24 00:57:04,047] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  17%|█▋        | 1039/6250 [1:04:25<5:52:50,  4.06s/it, gpt_loss=0.7, lr=1.91e-6]  [A
Train step of epoch 0:  17%|█▋        | 1040/6250 [1:04:25<5:42:43,  3.95s/it, gpt_loss=0.7, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1040/6250 [1:04:28<5:42:43,  3.95s/it, gpt_loss=0.717, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1041/6250 [1:04:28<5:22:04,  3.71s/it, gpt_loss=0.717, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1041/6250 [1:04:32<5:22:04,  3.71s/it, gpt_loss=0.619, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1042/6250 [1:04:32<5:25:23,  3.75s/it, gpt_loss=0.619, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1042/6250 [1:04:36<5:25:23,  3.75s/it, gpt_loss=0.699, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1043/6250 [1:04:36<5:44:00,  3.96s/it, gpt_loss=0.699, lr=1.91e-6][A[2025-04-24 00:57:19,041] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  17%|█▋        | 1043/6250 [1:04:40<5:44:00,  3.96s/it, gpt_loss=0.537, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1044/6250 [1:04:40<5:32:41,  3.83s/it, gpt_loss=0.537, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1044/6250 [1:04:43<5:32:41,  3.83s/it, gpt_loss=0.632, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1045/6250 [1:04:43<5:25:08,  3.75s/it, gpt_loss=0.632, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1045/6250 [1:04:48<5:25:08,  3.75s/it, gpt_loss=0.605, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1046/6250 [1:04:48<5:52:14,  4.06s/it, gpt_loss=0.605, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1046/6250 [1:04:52<5:52:14,  4.06s/it, gpt_loss=0.736, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1047/6250 [1:04:52<5:48:33,  4.02s/it, gpt_loss=0.736, lr=1.91e-6][A[2025-04-24 00:57:34,696] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  17%|█▋        | 1047/6250 [1:04:55<5:48:33,  4.02s/it, gpt_loss=0.754, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1048/6250 [1:04:55<5:32:13,  3.83s/it, gpt_loss=0.754, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1048/6250 [1:04:59<5:32:13,  3.83s/it, gpt_loss=0.709, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1049/6250 [1:04:59<5:23:46,  3.74s/it, gpt_loss=0.709, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1049/6250 [1:05:02<5:23:46,  3.74s/it, gpt_loss=0.56, lr=1.91e-6] [A
Train step of epoch 0:  17%|█▋        | 1050/6250 [1:05:02<5:04:01,  3.51s/it, gpt_loss=0.56, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1050/6250 [1:05:06<5:04:01,  3.51s/it, gpt_loss=0.533, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1051/6250 [1:05:06<5:08:49,  3.56s/it, gpt_loss=0.533, lr=1.91e-6][A[2025-04-24 00:57:48,477] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  17%|█▋        | 1051/6250 [1:05:09<5:08:49,  3.56s/it, gpt_loss=0.669, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1052/6250 [1:05:09<5:09:40,  3.57s/it, gpt_loss=0.669, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1052/6250 [1:05:13<5:09:40,  3.57s/it, gpt_loss=0.625, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1053/6250 [1:05:13<5:10:54,  3.59s/it, gpt_loss=0.625, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1053/6250 [1:05:17<5:10:54,  3.59s/it, gpt_loss=0.663, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1054/6250 [1:05:17<5:21:35,  3.71s/it, gpt_loss=0.663, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1054/6250 [1:05:20<5:21:35,  3.71s/it, gpt_loss=0.5, lr=1.91e-6]  [A
Train step of epoch 0:  17%|█▋        | 1055/6250 [1:05:20<5:11:52,  3.60s/it, gpt_loss=0.5, lr=1.91e-6][A[2025-04-24 00:58:03,067] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  17%|█▋        | 1055/6250 [1:05:24<5:11:52,  3.60s/it, gpt_loss=0.823, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1056/6250 [1:05:24<5:12:17,  3.61s/it, gpt_loss=0.823, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1056/6250 [1:05:27<5:12:17,  3.61s/it, gpt_loss=0.597, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1057/6250 [1:05:27<5:08:16,  3.56s/it, gpt_loss=0.597, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1057/6250 [1:05:30<5:08:16,  3.56s/it, gpt_loss=0.557, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1058/6250 [1:05:30<4:37:43,  3.21s/it, gpt_loss=0.557, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1058/6250 [1:05:33<4:37:43,  3.21s/it, gpt_loss=0.846, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1059/6250 [1:05:33<4:28:48,  3.11s/it, gpt_loss=0.846, lr=1.91e-6][A[2025-04-24 00:58:14,504] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  17%|█▋        | 1059/6250 [1:05:35<4:28:48,  3.11s/it, gpt_loss=0.611, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1060/6250 [1:05:35<4:18:54,  2.99s/it, gpt_loss=0.611, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1060/6250 [1:05:39<4:18:54,  2.99s/it, gpt_loss=0.737, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1061/6250 [1:05:39<4:45:06,  3.30s/it, gpt_loss=0.737, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1061/6250 [1:05:44<4:45:06,  3.30s/it, gpt_loss=0.673, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1062/6250 [1:05:44<5:11:31,  3.60s/it, gpt_loss=0.673, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1062/6250 [1:05:47<5:11:31,  3.60s/it, gpt_loss=0.672, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1063/6250 [1:05:47<5:19:00,  3.69s/it, gpt_loss=0.672, lr=1.91e-6][A[2025-04-24 00:58:30,283] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  17%|█▋        | 1063/6250 [1:05:51<5:19:00,  3.69s/it, gpt_loss=0.676, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1064/6250 [1:05:51<5:15:39,  3.65s/it, gpt_loss=0.676, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1064/6250 [1:05:55<5:15:39,  3.65s/it, gpt_loss=0.678, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1065/6250 [1:05:55<5:11:54,  3.61s/it, gpt_loss=0.678, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1065/6250 [1:05:59<5:11:54,  3.61s/it, gpt_loss=0.505, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1066/6250 [1:05:59<5:26:55,  3.78s/it, gpt_loss=0.505, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1066/6250 [1:06:02<5:26:55,  3.78s/it, gpt_loss=0.643, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1067/6250 [1:06:02<5:00:50,  3.48s/it, gpt_loss=0.643, lr=1.91e-6][A[2025-04-24 00:58:44,651] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  17%|█▋        | 1067/6250 [1:06:05<5:00:50,  3.48s/it, gpt_loss=0.767, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1068/6250 [1:06:05<5:11:18,  3.60s/it, gpt_loss=0.767, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1068/6250 [1:06:09<5:11:18,  3.60s/it, gpt_loss=0.713, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1069/6250 [1:06:09<5:18:54,  3.69s/it, gpt_loss=0.713, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1069/6250 [1:06:13<5:18:54,  3.69s/it, gpt_loss=0.752, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1070/6250 [1:06:13<5:26:44,  3.78s/it, gpt_loss=0.752, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1070/6250 [1:06:17<5:26:44,  3.78s/it, gpt_loss=0.564, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1071/6250 [1:06:17<5:19:11,  3.70s/it, gpt_loss=0.564, lr=1.91e-6][A[2025-04-24 00:59:00,814] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  17%|█▋        | 1071/6250 [1:06:22<5:19:11,  3.70s/it, gpt_loss=0.617, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1072/6250 [1:06:22<5:46:49,  4.02s/it, gpt_loss=0.617, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1072/6250 [1:06:25<5:46:49,  4.02s/it, gpt_loss=0.494, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1073/6250 [1:06:25<5:40:43,  3.95s/it, gpt_loss=0.494, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1073/6250 [1:06:29<5:40:43,  3.95s/it, gpt_loss=0.777, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1074/6250 [1:06:29<5:28:11,  3.80s/it, gpt_loss=0.777, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1074/6250 [1:06:33<5:28:11,  3.80s/it, gpt_loss=0.676, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1075/6250 [1:06:33<5:27:10,  3.79s/it, gpt_loss=0.676, lr=1.91e-6][A[2025-04-24 00:59:16,083] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  17%|█▋        | 1075/6250 [1:06:37<5:27:10,  3.79s/it, gpt_loss=0.536, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1076/6250 [1:06:37<5:38:52,  3.93s/it, gpt_loss=0.536, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1076/6250 [1:06:40<5:38:52,  3.93s/it, gpt_loss=0.677, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1077/6250 [1:06:40<5:21:06,  3.72s/it, gpt_loss=0.677, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1077/6250 [1:06:44<5:21:06,  3.72s/it, gpt_loss=0.689, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1078/6250 [1:06:44<5:26:18,  3.79s/it, gpt_loss=0.689, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1078/6250 [1:06:47<5:26:18,  3.79s/it, gpt_loss=0.514, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1079/6250 [1:06:47<5:12:33,  3.63s/it, gpt_loss=0.514, lr=1.91e-6][A[2025-04-24 00:59:30,034] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  17%|█▋        | 1079/6250 [1:06:51<5:12:33,  3.63s/it, gpt_loss=0.657, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1080/6250 [1:06:51<5:09:48,  3.60s/it, gpt_loss=0.657, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1080/6250 [1:06:55<5:09:48,  3.60s/it, gpt_loss=0.7, lr=1.91e-6]  [A
Train step of epoch 0:  17%|█▋        | 1081/6250 [1:06:55<5:24:49,  3.77s/it, gpt_loss=0.7, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1081/6250 [1:06:59<5:24:49,  3.77s/it, gpt_loss=0.849, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1082/6250 [1:06:59<5:20:43,  3.72s/it, gpt_loss=0.849, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1082/6250 [1:07:02<5:20:43,  3.72s/it, gpt_loss=0.717, lr=1.91e-6][A
Train step of epoch 0:  17%|█▋        | 1083/6250 [1:07:02<5:10:34,  3.61s/it, gpt_loss=0.717, lr=1.91e-6][A[2025-04-24 00:59:45,524] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  17%|█▋        | 1083/6250 [1:07:06<5:10:34,  3.61s/it, gpt_loss=0.59, lr=1.9e-6]  [A
Train step of epoch 0:  17%|█▋        | 1084/6250 [1:07:06<5:30:03,  3.83s/it, gpt_loss=0.59, lr=1.9e-6][A
Train step of epoch 0:  17%|█▋        | 1084/6250 [1:07:10<5:30:03,  3.83s/it, gpt_loss=0.514, lr=1.9e-6][A
Train step of epoch 0:  17%|█▋        | 1085/6250 [1:07:10<5:37:55,  3.93s/it, gpt_loss=0.514, lr=1.9e-6][A
Train step of epoch 0:  17%|█▋        | 1085/6250 [1:07:14<5:37:55,  3.93s/it, gpt_loss=0.558, lr=1.9e-6][A
Train step of epoch 0:  17%|█▋        | 1086/6250 [1:07:14<5:18:55,  3.71s/it, gpt_loss=0.558, lr=1.9e-6][A
Train step of epoch 0:  17%|█▋        | 1086/6250 [1:07:18<5:18:55,  3.71s/it, gpt_loss=0.711, lr=1.9e-6][A
Train step of epoch 0:  17%|█▋        | 1087/6250 [1:07:18<5:24:26,  3.77s/it, gpt_loss=0.711, lr=1.9e-6][A[2025-04-24 01:00:00,993] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  17%|█▋        | 1087/6250 [1:07:22<5:24:26,  3.77s/it, gpt_loss=0.713, lr=1.9e-6][A
Train step of epoch 0:  17%|█▋        | 1088/6250 [1:07:22<5:35:50,  3.90s/it, gpt_loss=0.713, lr=1.9e-6][A
Train step of epoch 0:  17%|█▋        | 1088/6250 [1:07:27<5:35:50,  3.90s/it, gpt_loss=0.694, lr=1.9e-6][A
Train step of epoch 0:  17%|█▋        | 1089/6250 [1:07:27<6:10:06,  4.30s/it, gpt_loss=0.694, lr=1.9e-6][A
Train step of epoch 0:  17%|█▋        | 1089/6250 [1:07:30<6:10:06,  4.30s/it, gpt_loss=0.487, lr=1.9e-6][A
Train step of epoch 0:  17%|█▋        | 1090/6250 [1:07:30<5:42:14,  3.98s/it, gpt_loss=0.487, lr=1.9e-6][A
Train step of epoch 0:  17%|█▋        | 1090/6250 [1:07:35<5:42:14,  3.98s/it, gpt_loss=0.763, lr=1.9e-6][A
Train step of epoch 0:  17%|█▋        | 1091/6250 [1:07:35<5:53:36,  4.11s/it, gpt_loss=0.763, lr=1.9e-6][A[2025-04-24 01:00:17,861] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  17%|█▋        | 1091/6250 [1:07:39<5:53:36,  4.11s/it, gpt_loss=0.491, lr=1.9e-6][A
Train step of epoch 0:  17%|█▋        | 1092/6250 [1:07:39<5:50:16,  4.07s/it, gpt_loss=0.491, lr=1.9e-6][A
Train step of epoch 0:  17%|█▋        | 1092/6250 [1:07:43<5:50:16,  4.07s/it, gpt_loss=0.599, lr=1.9e-6][A
Train step of epoch 0:  17%|█▋        | 1093/6250 [1:07:43<6:02:24,  4.22s/it, gpt_loss=0.599, lr=1.9e-6][A
Train step of epoch 0:  17%|█▋        | 1093/6250 [1:07:47<6:02:24,  4.22s/it, gpt_loss=0.707, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1094/6250 [1:07:47<5:43:53,  4.00s/it, gpt_loss=0.707, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1094/6250 [1:07:50<5:43:53,  4.00s/it, gpt_loss=0.731, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1095/6250 [1:07:50<5:28:46,  3.83s/it, gpt_loss=0.731, lr=1.9e-6][A[2025-04-24 01:00:32,432] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  18%|█▊        | 1095/6250 [1:07:53<5:28:46,  3.83s/it, gpt_loss=0.615, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1096/6250 [1:07:53<5:10:05,  3.61s/it, gpt_loss=0.615, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1096/6250 [1:07:58<5:10:05,  3.61s/it, gpt_loss=0.62, lr=1.9e-6] [A
Train step of epoch 0:  18%|█▊        | 1097/6250 [1:07:58<5:29:51,  3.84s/it, gpt_loss=0.62, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1097/6250 [1:08:01<5:29:51,  3.84s/it, gpt_loss=0.611, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1098/6250 [1:08:01<5:16:32,  3.69s/it, gpt_loss=0.611, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1098/6250 [1:08:04<5:16:32,  3.69s/it, gpt_loss=0.759, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1099/6250 [1:08:04<5:14:08,  3.66s/it, gpt_loss=0.759, lr=1.9e-6][A[2025-04-24 01:00:46,582] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  18%|█▊        | 1099/6250 [1:08:07<5:14:08,  3.66s/it, gpt_loss=0.663, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1100/6250 [1:08:07<4:53:12,  3.42s/it, gpt_loss=0.663, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1100/6250 [1:08:12<4:53:12,  3.42s/it, gpt_loss=0.546, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1101/6250 [1:08:12<5:16:43,  3.69s/it, gpt_loss=0.546, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1101/6250 [1:08:16<5:16:43,  3.69s/it, gpt_loss=0.591, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1102/6250 [1:08:16<5:20:59,  3.74s/it, gpt_loss=0.591, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1102/6250 [1:08:19<5:20:59,  3.74s/it, gpt_loss=0.674, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1103/6250 [1:08:19<5:01:45,  3.52s/it, gpt_loss=0.674, lr=1.9e-6][A[2025-04-24 01:01:02,371] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  18%|█▊        | 1103/6250 [1:08:23<5:01:45,  3.52s/it, gpt_loss=0.546, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1104/6250 [1:08:23<5:29:36,  3.84s/it, gpt_loss=0.546, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1104/6250 [1:08:27<5:29:36,  3.84s/it, gpt_loss=0.766, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1105/6250 [1:08:27<5:40:16,  3.97s/it, gpt_loss=0.766, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1105/6250 [1:08:32<5:40:16,  3.97s/it, gpt_loss=0.608, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1106/6250 [1:08:32<5:58:45,  4.18s/it, gpt_loss=0.608, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1106/6250 [1:08:36<5:58:45,  4.18s/it, gpt_loss=0.537, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1107/6250 [1:08:36<5:47:39,  4.06s/it, gpt_loss=0.537, lr=1.9e-6][A[2025-04-24 01:01:19,358] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  18%|█▊        | 1107/6250 [1:08:40<5:47:39,  4.06s/it, gpt_loss=0.747, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1108/6250 [1:08:40<5:53:22,  4.12s/it, gpt_loss=0.747, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1108/6250 [1:08:44<5:53:22,  4.12s/it, gpt_loss=0.474, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1109/6250 [1:08:44<5:44:57,  4.03s/it, gpt_loss=0.474, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1109/6250 [1:08:48<5:44:57,  4.03s/it, gpt_loss=0.768, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1110/6250 [1:08:48<5:52:30,  4.11s/it, gpt_loss=0.768, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1110/6250 [1:08:51<5:52:30,  4.11s/it, gpt_loss=0.635, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1111/6250 [1:08:51<5:16:27,  3.69s/it, gpt_loss=0.635, lr=1.9e-6][A[2025-04-24 01:01:33,380] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  18%|█▊        | 1111/6250 [1:08:54<5:16:27,  3.69s/it, gpt_loss=0.473, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1112/6250 [1:08:54<5:03:23,  3.54s/it, gpt_loss=0.473, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1112/6250 [1:08:59<5:03:23,  3.54s/it, gpt_loss=0.599, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1113/6250 [1:08:59<5:29:24,  3.85s/it, gpt_loss=0.599, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1113/6250 [1:09:02<5:29:24,  3.85s/it, gpt_loss=0.456, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1114/6250 [1:09:02<5:10:44,  3.63s/it, gpt_loss=0.456, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1114/6250 [1:09:06<5:10:44,  3.63s/it, gpt_loss=0.865, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1115/6250 [1:09:06<5:21:08,  3.75s/it, gpt_loss=0.865, lr=1.9e-6][A[2025-04-24 01:01:49,155] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  18%|█▊        | 1115/6250 [1:09:10<5:21:08,  3.75s/it, gpt_loss=0.627, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1116/6250 [1:09:10<5:28:49,  3.84s/it, gpt_loss=0.627, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1116/6250 [1:09:14<5:28:49,  3.84s/it, gpt_loss=0.633, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1117/6250 [1:09:14<5:32:27,  3.89s/it, gpt_loss=0.633, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1117/6250 [1:09:16<5:32:27,  3.89s/it, gpt_loss=0.588, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1118/6250 [1:09:16<4:41:56,  3.30s/it, gpt_loss=0.588, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1118/6250 [1:09:19<4:41:56,  3.30s/it, gpt_loss=0.544, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1119/6250 [1:09:19<4:48:35,  3.37s/it, gpt_loss=0.544, lr=1.9e-6][A[2025-04-24 01:02:03,192] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  18%|█▊        | 1119/6250 [1:09:24<4:48:35,  3.37s/it, gpt_loss=0.623, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1120/6250 [1:09:24<5:19:15,  3.73s/it, gpt_loss=0.623, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1120/6250 [1:09:29<5:19:15,  3.73s/it, gpt_loss=0.6, lr=1.9e-6]  [A
Train step of epoch 0:  18%|█▊        | 1121/6250 [1:09:29<5:40:19,  3.98s/it, gpt_loss=0.6, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1121/6250 [1:09:33<5:40:19,  3.98s/it, gpt_loss=0.676, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1122/6250 [1:09:33<5:50:01,  4.10s/it, gpt_loss=0.676, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1122/6250 [1:09:37<5:50:01,  4.10s/it, gpt_loss=0.702, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1123/6250 [1:09:37<5:47:45,  4.07s/it, gpt_loss=0.702, lr=1.9e-6][A[2025-04-24 01:02:19,398] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  18%|█▊        | 1123/6250 [1:09:40<5:47:45,  4.07s/it, gpt_loss=0.639, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1124/6250 [1:09:40<5:27:21,  3.83s/it, gpt_loss=0.639, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1124/6250 [1:09:45<5:27:21,  3.83s/it, gpt_loss=0.649, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1125/6250 [1:09:45<5:50:35,  4.10s/it, gpt_loss=0.649, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1125/6250 [1:09:48<5:50:35,  4.10s/it, gpt_loss=0.763, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1126/6250 [1:09:48<5:28:44,  3.85s/it, gpt_loss=0.763, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1126/6250 [1:09:52<5:28:44,  3.85s/it, gpt_loss=0.534, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1127/6250 [1:09:52<5:26:13,  3.82s/it, gpt_loss=0.534, lr=1.9e-6][A[2025-04-24 01:02:34,980] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  18%|█▊        | 1127/6250 [1:09:56<5:26:13,  3.82s/it, gpt_loss=0.717, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1128/6250 [1:09:56<5:26:28,  3.82s/it, gpt_loss=0.717, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1128/6250 [1:10:00<5:26:28,  3.82s/it, gpt_loss=0.691, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1129/6250 [1:10:00<5:28:53,  3.85s/it, gpt_loss=0.691, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1129/6250 [1:10:03<5:28:53,  3.85s/it, gpt_loss=0.625, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1130/6250 [1:10:03<5:11:09,  3.65s/it, gpt_loss=0.625, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1130/6250 [1:10:07<5:11:09,  3.65s/it, gpt_loss=0.636, lr=1.9e-6][A
Train step of epoch 0:  18%|█▊        | 1131/6250 [1:10:07<5:13:33,  3.68s/it, gpt_loss=0.636, lr=1.9e-6][A[2025-04-24 01:02:49,336] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  18%|█▊        | 1131/6250 [1:10:10<5:13:33,  3.68s/it, gpt_loss=0.624, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1132/6250 [1:10:10<5:09:44,  3.63s/it, gpt_loss=0.624, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1132/6250 [1:10:14<5:09:44,  3.63s/it, gpt_loss=0.902, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1133/6250 [1:10:14<5:09:16,  3.63s/it, gpt_loss=0.902, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1133/6250 [1:10:18<5:09:16,  3.63s/it, gpt_loss=0.61, lr=1.89e-6] [A
Train step of epoch 0:  18%|█▊        | 1134/6250 [1:10:18<5:30:35,  3.88s/it, gpt_loss=0.61, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1134/6250 [1:10:21<5:30:35,  3.88s/it, gpt_loss=0.728, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1135/6250 [1:10:21<5:12:50,  3.67s/it, gpt_loss=0.728, lr=1.89e-6][A[2025-04-24 01:03:04,597] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  18%|█▊        | 1135/6250 [1:10:25<5:12:50,  3.67s/it, gpt_loss=0.646, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1136/6250 [1:10:25<5:21:11,  3.77s/it, gpt_loss=0.646, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1136/6250 [1:10:29<5:21:11,  3.77s/it, gpt_loss=0.615, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1137/6250 [1:10:29<5:21:51,  3.78s/it, gpt_loss=0.615, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1137/6250 [1:10:32<5:21:51,  3.78s/it, gpt_loss=0.695, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1138/6250 [1:10:32<5:06:53,  3.60s/it, gpt_loss=0.695, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1138/6250 [1:10:36<5:06:53,  3.60s/it, gpt_loss=0.691, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1139/6250 [1:10:36<4:58:01,  3.50s/it, gpt_loss=0.691, lr=1.89e-6][A[2025-04-24 01:03:17,876] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  18%|█▊        | 1139/6250 [1:10:39<4:58:01,  3.50s/it, gpt_loss=0.63, lr=1.89e-6] [A
Train step of epoch 0:  18%|█▊        | 1140/6250 [1:10:39<4:46:00,  3.36s/it, gpt_loss=0.63, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1140/6250 [1:10:43<4:46:00,  3.36s/it, gpt_loss=0.667, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1141/6250 [1:10:43<5:08:48,  3.63s/it, gpt_loss=0.667, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1141/6250 [1:10:47<5:08:48,  3.63s/it, gpt_loss=0.75, lr=1.89e-6] [A
Train step of epoch 0:  18%|█▊        | 1142/6250 [1:10:47<5:14:55,  3.70s/it, gpt_loss=0.75, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1142/6250 [1:10:50<5:14:55,  3.70s/it, gpt_loss=0.435, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1143/6250 [1:10:50<4:54:12,  3.46s/it, gpt_loss=0.435, lr=1.89e-6][A[2025-04-24 01:03:33,251] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  18%|█▊        | 1143/6250 [1:10:54<4:54:12,  3.46s/it, gpt_loss=0.704, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1144/6250 [1:10:54<5:17:17,  3.73s/it, gpt_loss=0.704, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1144/6250 [1:10:58<5:17:17,  3.73s/it, gpt_loss=0.716, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1145/6250 [1:10:58<5:13:25,  3.68s/it, gpt_loss=0.716, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1145/6250 [1:11:02<5:13:25,  3.68s/it, gpt_loss=0.678, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1146/6250 [1:11:02<5:32:09,  3.90s/it, gpt_loss=0.678, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1146/6250 [1:11:05<5:32:09,  3.90s/it, gpt_loss=0.821, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1147/6250 [1:11:05<5:12:23,  3.67s/it, gpt_loss=0.821, lr=1.89e-6][A[2025-04-24 01:03:48,112] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  18%|█▊        | 1147/6250 [1:11:09<5:12:23,  3.67s/it, gpt_loss=0.622, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1148/6250 [1:11:09<5:13:44,  3.69s/it, gpt_loss=0.622, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1148/6250 [1:11:12<5:13:44,  3.69s/it, gpt_loss=0.832, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1149/6250 [1:11:12<5:09:24,  3.64s/it, gpt_loss=0.832, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1149/6250 [1:11:15<5:09:24,  3.64s/it, gpt_loss=0.531, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1150/6250 [1:11:15<4:49:01,  3.40s/it, gpt_loss=0.531, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1150/6250 [1:11:19<4:49:01,  3.40s/it, gpt_loss=0.671, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1151/6250 [1:11:19<4:46:29,  3.37s/it, gpt_loss=0.671, lr=1.89e-6][A[2025-04-24 01:04:01,562] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  18%|█▊        | 1151/6250 [1:11:22<4:46:29,  3.37s/it, gpt_loss=0.73, lr=1.89e-6] [A
Train step of epoch 0:  18%|█▊        | 1152/6250 [1:11:22<4:56:56,  3.49s/it, gpt_loss=0.73, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1152/6250 [1:11:26<4:56:56,  3.49s/it, gpt_loss=0.713, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1153/6250 [1:11:26<5:08:45,  3.63s/it, gpt_loss=0.713, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1153/6250 [1:11:31<5:08:45,  3.63s/it, gpt_loss=0.789, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1154/6250 [1:11:31<5:30:11,  3.89s/it, gpt_loss=0.789, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1154/6250 [1:11:35<5:30:11,  3.89s/it, gpt_loss=0.658, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1155/6250 [1:11:35<5:29:03,  3.88s/it, gpt_loss=0.658, lr=1.89e-6][A[2025-04-24 01:04:17,676] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  18%|█▊        | 1155/6250 [1:11:38<5:29:03,  3.88s/it, gpt_loss=0.508, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1156/6250 [1:11:38<5:27:48,  3.86s/it, gpt_loss=0.508, lr=1.89e-6][A
Train step of epoch 0:  18%|█▊        | 1156/6250 [1:11:41<5:27:48,  3.86s/it, gpt_loss=0.654, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1157/6250 [1:11:41<5:06:32,  3.61s/it, gpt_loss=0.654, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1157/6250 [1:11:46<5:06:32,  3.61s/it, gpt_loss=0.501, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1158/6250 [1:11:46<5:25:52,  3.84s/it, gpt_loss=0.501, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1158/6250 [1:11:49<5:25:52,  3.84s/it, gpt_loss=0.666, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1159/6250 [1:11:49<5:19:56,  3.77s/it, gpt_loss=0.666, lr=1.89e-6][A[2025-04-24 01:04:33,049] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  19%|█▊        | 1159/6250 [1:11:54<5:19:56,  3.77s/it, gpt_loss=0.614, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1160/6250 [1:11:54<5:34:56,  3.95s/it, gpt_loss=0.614, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1160/6250 [1:11:58<5:34:56,  3.95s/it, gpt_loss=0.699, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1161/6250 [1:11:58<5:45:54,  4.08s/it, gpt_loss=0.699, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1161/6250 [1:12:02<5:45:54,  4.08s/it, gpt_loss=0.723, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1162/6250 [1:12:02<5:39:40,  4.01s/it, gpt_loss=0.723, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1162/6250 [1:12:05<5:39:40,  4.01s/it, gpt_loss=0.654, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1163/6250 [1:12:05<5:13:58,  3.70s/it, gpt_loss=0.654, lr=1.89e-6][A[2025-04-24 01:04:47,351] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  19%|█▊        | 1163/6250 [1:12:08<5:13:58,  3.70s/it, gpt_loss=0.7, lr=1.89e-6]  [A
Train step of epoch 0:  19%|█▊        | 1164/6250 [1:12:08<4:58:13,  3.52s/it, gpt_loss=0.7, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1164/6250 [1:12:12<4:58:13,  3.52s/it, gpt_loss=0.687, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1165/6250 [1:12:12<5:17:30,  3.75s/it, gpt_loss=0.687, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1165/6250 [1:12:15<5:17:30,  3.75s/it, gpt_loss=0.534, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1166/6250 [1:12:15<4:50:18,  3.43s/it, gpt_loss=0.534, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1166/6250 [1:12:19<4:50:18,  3.43s/it, gpt_loss=0.698, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1167/6250 [1:12:19<5:08:16,  3.64s/it, gpt_loss=0.698, lr=1.89e-6][A[2025-04-24 01:05:01,842] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  19%|█▊        | 1167/6250 [1:12:23<5:08:16,  3.64s/it, gpt_loss=0.902, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1168/6250 [1:12:23<5:02:06,  3.57s/it, gpt_loss=0.902, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1168/6250 [1:12:27<5:02:06,  3.57s/it, gpt_loss=0.517, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1169/6250 [1:12:27<5:15:29,  3.73s/it, gpt_loss=0.517, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1169/6250 [1:12:31<5:15:29,  3.73s/it, gpt_loss=0.619, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1170/6250 [1:12:31<5:41:36,  4.03s/it, gpt_loss=0.619, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1170/6250 [1:12:35<5:41:36,  4.03s/it, gpt_loss=0.572, lr=1.89e-6][A
Train step of epoch 0:  19%|█▊        | 1171/6250 [1:12:35<5:20:21,  3.78s/it, gpt_loss=0.572, lr=1.89e-6][A[2025-04-24 01:05:17,252] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  19%|█▊        | 1171/6250 [1:12:38<5:20:21,  3.78s/it, gpt_loss=0.52, lr=1.89e-6] [A
Train step of epoch 0:  19%|█▉        | 1172/6250 [1:12:38<5:09:25,  3.66s/it, gpt_loss=0.52, lr=1.89e-6][A
Train step of epoch 0:  19%|█▉        | 1172/6250 [1:12:42<5:09:25,  3.66s/it, gpt_loss=0.654, lr=1.89e-6][A
Train step of epoch 0:  19%|█▉        | 1173/6250 [1:12:42<5:18:06,  3.76s/it, gpt_loss=0.654, lr=1.89e-6][A
Train step of epoch 0:  19%|█▉        | 1173/6250 [1:12:46<5:18:06,  3.76s/it, gpt_loss=0.585, lr=1.89e-6][A
Train step of epoch 0:  19%|█▉        | 1174/6250 [1:12:46<5:28:55,  3.89s/it, gpt_loss=0.585, lr=1.89e-6][A
Train step of epoch 0:  19%|█▉        | 1174/6250 [1:12:51<5:28:55,  3.89s/it, gpt_loss=0.554, lr=1.89e-6][A
Train step of epoch 0:  19%|█▉        | 1175/6250 [1:12:51<5:54:11,  4.19s/it, gpt_loss=0.554, lr=1.89e-6][A[2025-04-24 01:05:33,647] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  19%|█▉        | 1175/6250 [1:12:54<5:54:11,  4.19s/it, gpt_loss=0.779, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1176/6250 [1:12:54<5:32:07,  3.93s/it, gpt_loss=0.779, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1176/6250 [1:12:59<5:32:07,  3.93s/it, gpt_loss=0.694, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1177/6250 [1:12:59<5:39:53,  4.02s/it, gpt_loss=0.694, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1177/6250 [1:13:02<5:39:53,  4.02s/it, gpt_loss=0.715, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1178/6250 [1:13:02<5:35:21,  3.97s/it, gpt_loss=0.715, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1178/6250 [1:13:05<5:35:21,  3.97s/it, gpt_loss=0.613, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1179/6250 [1:13:05<5:03:25,  3.59s/it, gpt_loss=0.613, lr=1.88e-6][A[2025-04-24 01:05:48,676] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  19%|█▉        | 1179/6250 [1:13:09<5:03:25,  3.59s/it, gpt_loss=0.802, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1180/6250 [1:13:09<5:19:48,  3.78s/it, gpt_loss=0.802, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1180/6250 [1:13:14<5:19:48,  3.78s/it, gpt_loss=0.637, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1181/6250 [1:13:14<5:32:23,  3.93s/it, gpt_loss=0.637, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1181/6250 [1:13:17<5:32:23,  3.93s/it, gpt_loss=0.71, lr=1.88e-6] [A
Train step of epoch 0:  19%|█▉        | 1182/6250 [1:13:17<5:11:05,  3.68s/it, gpt_loss=0.71, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1182/6250 [1:13:20<5:11:05,  3.68s/it, gpt_loss=0.697, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1183/6250 [1:13:20<5:10:40,  3.68s/it, gpt_loss=0.697, lr=1.88e-6][A[2025-04-24 01:06:03,394] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  19%|█▉        | 1183/6250 [1:13:24<5:10:40,  3.68s/it, gpt_loss=0.536, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1184/6250 [1:13:24<5:10:21,  3.68s/it, gpt_loss=0.536, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1184/6250 [1:13:28<5:10:21,  3.68s/it, gpt_loss=0.498, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1185/6250 [1:13:28<5:02:29,  3.58s/it, gpt_loss=0.498, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1185/6250 [1:13:31<5:02:29,  3.58s/it, gpt_loss=0.649, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1186/6250 [1:13:31<4:48:58,  3.42s/it, gpt_loss=0.649, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1186/6250 [1:13:34<4:48:58,  3.42s/it, gpt_loss=0.624, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1187/6250 [1:13:34<4:40:38,  3.33s/it, gpt_loss=0.624, lr=1.88e-6][A[2025-04-24 01:06:16,894] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  19%|█▉        | 1187/6250 [1:13:38<4:40:38,  3.33s/it, gpt_loss=0.568, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1188/6250 [1:13:38<4:57:14,  3.52s/it, gpt_loss=0.568, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1188/6250 [1:13:41<4:57:14,  3.52s/it, gpt_loss=0.534, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1189/6250 [1:13:41<4:57:14,  3.52s/it, gpt_loss=0.534, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1189/6250 [1:13:44<4:57:14,  3.52s/it, gpt_loss=0.521, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1190/6250 [1:13:44<4:46:00,  3.39s/it, gpt_loss=0.521, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1190/6250 [1:13:48<4:46:00,  3.39s/it, gpt_loss=0.61, lr=1.88e-6] [A
Train step of epoch 0:  19%|█▉        | 1191/6250 [1:13:48<4:56:20,  3.51s/it, gpt_loss=0.61, lr=1.88e-6][A[2025-04-24 01:06:31,505] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  19%|█▉        | 1191/6250 [1:13:52<4:56:20,  3.51s/it, gpt_loss=0.508, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1192/6250 [1:13:52<5:13:38,  3.72s/it, gpt_loss=0.508, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1192/6250 [1:13:56<5:13:38,  3.72s/it, gpt_loss=0.486, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1193/6250 [1:13:56<5:09:17,  3.67s/it, gpt_loss=0.486, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1193/6250 [1:14:01<5:09:17,  3.67s/it, gpt_loss=0.756, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1194/6250 [1:14:01<5:37:49,  4.01s/it, gpt_loss=0.756, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1194/6250 [1:14:03<5:37:49,  4.01s/it, gpt_loss=0.468, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1195/6250 [1:14:03<5:06:24,  3.64s/it, gpt_loss=0.468, lr=1.88e-6][A[2025-04-24 01:06:46,697] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  19%|█▉        | 1195/6250 [1:14:07<5:06:24,  3.64s/it, gpt_loss=0.758, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1196/6250 [1:14:07<5:17:19,  3.77s/it, gpt_loss=0.758, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1196/6250 [1:14:11<5:17:19,  3.77s/it, gpt_loss=0.628, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1197/6250 [1:14:11<5:09:39,  3.68s/it, gpt_loss=0.628, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1197/6250 [1:14:15<5:09:39,  3.68s/it, gpt_loss=0.606, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1198/6250 [1:14:15<5:11:53,  3.70s/it, gpt_loss=0.606, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1198/6250 [1:14:18<5:11:53,  3.70s/it, gpt_loss=0.604, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1199/6250 [1:14:18<4:52:34,  3.48s/it, gpt_loss=0.604, lr=1.88e-6][A[2025-04-24 01:07:00,827] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-04-24 01:07:00,827] [INFO] [logging.py:107:log_dist] [Rank 0] step=300, skipped=0, lr=[1.8789558713776529e-06, 1.8789558713776529e-06], mom=[(0.9, 0.95), (0.9, 0.95)]
[2025-04-24 01:07:00,828] [INFO] [timer.py:264:stop] epoch=0/micro_step=1200/global_step=300, RunningAvgSamplesPerSec=2.239171479875637, CurrSamplesPerSec=2.3568120271524022, MemAllocated=35.57GB, MaxMemAllocated=60.14GB

Train step of epoch 0:  19%|█▉        | 1199/6250 [1:14:22<4:52:34,  3.48s/it, gpt_loss=0.543, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1200/6250 [1:14:22<5:04:36,  3.62s/it, gpt_loss=0.543, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1200/6250 [1:14:26<5:04:36,  3.62s/it, gpt_loss=0.804, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1201/6250 [1:14:26<5:14:07,  3.73s/it, gpt_loss=0.804, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1201/6250 [1:14:29<5:14:07,  3.73s/it, gpt_loss=0.674, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1202/6250 [1:14:29<5:10:03,  3.69s/it, gpt_loss=0.674, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1202/6250 [1:14:32<5:10:03,  3.69s/it, gpt_loss=0.636, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1203/6250 [1:14:32<4:59:11,  3.56s/it, gpt_loss=0.636, lr=1.88e-6][A[2025-04-24 01:07:15,811] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  19%|█▉        | 1203/6250 [1:14:37<4:59:11,  3.56s/it, gpt_loss=0.666, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1204/6250 [1:14:37<5:14:13,  3.74s/it, gpt_loss=0.666, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1204/6250 [1:14:40<5:14:13,  3.74s/it, gpt_loss=0.813, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1205/6250 [1:14:40<5:14:54,  3.75s/it, gpt_loss=0.813, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1205/6250 [1:14:43<5:14:54,  3.75s/it, gpt_loss=0.651, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1206/6250 [1:14:43<4:49:08,  3.44s/it, gpt_loss=0.651, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1206/6250 [1:14:48<4:49:08,  3.44s/it, gpt_loss=0.464, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1207/6250 [1:14:48<5:14:17,  3.74s/it, gpt_loss=0.464, lr=1.88e-6][A[2025-04-24 01:07:30,881] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  19%|█▉        | 1207/6250 [1:14:52<5:14:17,  3.74s/it, gpt_loss=0.595, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1208/6250 [1:14:52<5:24:17,  3.86s/it, gpt_loss=0.595, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1208/6250 [1:14:55<5:24:17,  3.86s/it, gpt_loss=0.639, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1209/6250 [1:14:55<5:17:26,  3.78s/it, gpt_loss=0.639, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1209/6250 [1:14:59<5:17:26,  3.78s/it, gpt_loss=0.582, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1210/6250 [1:14:59<5:23:47,  3.85s/it, gpt_loss=0.582, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1210/6250 [1:15:02<5:23:47,  3.85s/it, gpt_loss=0.665, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1211/6250 [1:15:02<5:03:20,  3.61s/it, gpt_loss=0.665, lr=1.88e-6][A[2025-04-24 01:07:45,454] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  19%|█▉        | 1211/6250 [1:15:06<5:03:20,  3.61s/it, gpt_loss=0.629, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1212/6250 [1:15:06<5:10:39,  3.70s/it, gpt_loss=0.629, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1212/6250 [1:15:11<5:10:39,  3.70s/it, gpt_loss=0.679, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1213/6250 [1:15:11<5:31:43,  3.95s/it, gpt_loss=0.679, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1213/6250 [1:15:14<5:31:43,  3.95s/it, gpt_loss=0.508, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1214/6250 [1:15:14<5:19:14,  3.80s/it, gpt_loss=0.508, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1214/6250 [1:15:18<5:19:14,  3.80s/it, gpt_loss=0.803, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1215/6250 [1:15:18<5:17:05,  3.78s/it, gpt_loss=0.803, lr=1.88e-6][A[2025-04-24 01:08:00,909] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  19%|█▉        | 1215/6250 [1:15:22<5:17:05,  3.78s/it, gpt_loss=0.678, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1216/6250 [1:15:22<5:16:00,  3.77s/it, gpt_loss=0.678, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1216/6250 [1:15:26<5:16:00,  3.77s/it, gpt_loss=0.588, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1217/6250 [1:15:26<5:23:28,  3.86s/it, gpt_loss=0.588, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1217/6250 [1:15:30<5:23:28,  3.86s/it, gpt_loss=0.527, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1218/6250 [1:15:30<5:25:48,  3.88s/it, gpt_loss=0.527, lr=1.88e-6][A
Train step of epoch 0:  19%|█▉        | 1218/6250 [1:15:33<5:25:48,  3.88s/it, gpt_loss=0.83, lr=1.88e-6] [A
Train step of epoch 0:  20%|█▉        | 1219/6250 [1:15:33<5:02:07,  3.60s/it, gpt_loss=0.83, lr=1.88e-6][A[2025-04-24 01:08:15,301] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  20%|█▉        | 1219/6250 [1:15:36<5:02:07,  3.60s/it, gpt_loss=0.625, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1220/6250 [1:15:36<4:57:39,  3.55s/it, gpt_loss=0.625, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1220/6250 [1:15:40<4:57:39,  3.55s/it, gpt_loss=0.62, lr=1.87e-6] [A
Train step of epoch 0:  20%|█▉        | 1221/6250 [1:15:40<5:18:03,  3.79s/it, gpt_loss=0.62, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1221/6250 [1:15:44<5:18:03,  3.79s/it, gpt_loss=0.646, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1222/6250 [1:15:44<5:13:24,  3.74s/it, gpt_loss=0.646, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1222/6250 [1:15:47<5:13:24,  3.74s/it, gpt_loss=0.785, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1223/6250 [1:15:47<5:03:43,  3.63s/it, gpt_loss=0.785, lr=1.87e-6][A[2025-04-24 01:08:31,378] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  20%|█▉        | 1223/6250 [1:15:52<5:03:43,  3.63s/it, gpt_loss=0.722, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1224/6250 [1:15:52<5:31:45,  3.96s/it, gpt_loss=0.722, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1224/6250 [1:15:56<5:31:45,  3.96s/it, gpt_loss=0.693, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1225/6250 [1:15:56<5:24:15,  3.87s/it, gpt_loss=0.693, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1225/6250 [1:15:59<5:24:15,  3.87s/it, gpt_loss=0.538, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1226/6250 [1:15:59<5:04:38,  3.64s/it, gpt_loss=0.538, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1226/6250 [1:16:03<5:04:38,  3.64s/it, gpt_loss=0.558, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1227/6250 [1:16:03<5:11:33,  3.72s/it, gpt_loss=0.558, lr=1.87e-6][A[2025-04-24 01:08:46,121] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  20%|█▉        | 1227/6250 [1:16:07<5:11:33,  3.72s/it, gpt_loss=0.755, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1228/6250 [1:16:07<5:20:12,  3.83s/it, gpt_loss=0.755, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1228/6250 [1:16:10<5:20:12,  3.83s/it, gpt_loss=0.559, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1229/6250 [1:16:10<5:11:40,  3.72s/it, gpt_loss=0.559, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1229/6250 [1:16:15<5:11:40,  3.72s/it, gpt_loss=0.772, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1230/6250 [1:16:15<5:38:57,  4.05s/it, gpt_loss=0.772, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1230/6250 [1:16:20<5:38:57,  4.05s/it, gpt_loss=0.604, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1231/6250 [1:16:20<5:45:34,  4.13s/it, gpt_loss=0.604, lr=1.87e-6][A[2025-04-24 01:09:03,481] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  20%|█▉        | 1231/6250 [1:16:24<5:45:34,  4.13s/it, gpt_loss=0.86, lr=1.87e-6] [A
Train step of epoch 0:  20%|█▉        | 1232/6250 [1:16:24<6:00:48,  4.31s/it, gpt_loss=0.86, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1232/6250 [1:16:28<6:00:48,  4.31s/it, gpt_loss=0.59, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1233/6250 [1:16:28<5:42:53,  4.10s/it, gpt_loss=0.59, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1233/6250 [1:16:32<5:42:53,  4.10s/it, gpt_loss=0.644, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1234/6250 [1:16:32<5:33:20,  3.99s/it, gpt_loss=0.644, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1234/6250 [1:16:35<5:33:20,  3.99s/it, gpt_loss=0.487, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1235/6250 [1:16:35<5:30:41,  3.96s/it, gpt_loss=0.487, lr=1.87e-6][A[2025-04-24 01:09:17,986] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  20%|█▉        | 1235/6250 [1:16:39<5:30:41,  3.96s/it, gpt_loss=0.718, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1236/6250 [1:16:39<5:14:02,  3.76s/it, gpt_loss=0.718, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1236/6250 [1:16:42<5:14:02,  3.76s/it, gpt_loss=0.519, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1237/6250 [1:16:42<5:11:28,  3.73s/it, gpt_loss=0.519, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1237/6250 [1:16:46<5:11:28,  3.73s/it, gpt_loss=0.833, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1238/6250 [1:16:46<5:00:24,  3.60s/it, gpt_loss=0.833, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1238/6250 [1:16:50<5:00:24,  3.60s/it, gpt_loss=0.671, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1239/6250 [1:16:50<5:08:37,  3.70s/it, gpt_loss=0.671, lr=1.87e-6][A[2025-04-24 01:09:32,977] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  20%|█▉        | 1239/6250 [1:16:54<5:08:37,  3.70s/it, gpt_loss=0.82, lr=1.87e-6] [A
Train step of epoch 0:  20%|█▉        | 1240/6250 [1:16:54<5:19:07,  3.82s/it, gpt_loss=0.82, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1240/6250 [1:16:58<5:19:07,  3.82s/it, gpt_loss=0.619, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1241/6250 [1:16:58<5:30:46,  3.96s/it, gpt_loss=0.619, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1241/6250 [1:17:00<5:30:46,  3.96s/it, gpt_loss=0.712, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1242/6250 [1:17:00<4:46:34,  3.43s/it, gpt_loss=0.712, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1242/6250 [1:17:04<4:46:34,  3.43s/it, gpt_loss=0.457, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1243/6250 [1:17:04<4:45:39,  3.42s/it, gpt_loss=0.457, lr=1.87e-6][A[2025-04-24 01:09:46,522] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  20%|█▉        | 1243/6250 [1:17:07<4:45:39,  3.42s/it, gpt_loss=0.592, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1244/6250 [1:17:07<4:51:27,  3.49s/it, gpt_loss=0.592, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1244/6250 [1:17:11<4:51:27,  3.49s/it, gpt_loss=0.536, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1245/6250 [1:17:11<4:54:01,  3.52s/it, gpt_loss=0.536, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1245/6250 [1:17:15<4:54:01,  3.52s/it, gpt_loss=0.64, lr=1.87e-6] [A
Train step of epoch 0:  20%|█▉        | 1246/6250 [1:17:15<5:16:47,  3.80s/it, gpt_loss=0.64, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1246/6250 [1:17:19<5:16:47,  3.80s/it, gpt_loss=0.777, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1247/6250 [1:17:19<5:03:50,  3.64s/it, gpt_loss=0.777, lr=1.87e-6][A[2025-04-24 01:10:00,999] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  20%|█▉        | 1247/6250 [1:17:22<5:03:50,  3.64s/it, gpt_loss=0.662, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1248/6250 [1:17:22<4:51:38,  3.50s/it, gpt_loss=0.662, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1248/6250 [1:17:26<4:51:38,  3.50s/it, gpt_loss=0.692, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1249/6250 [1:17:26<5:19:49,  3.84s/it, gpt_loss=0.692, lr=1.87e-6][A
Train step of epoch 0:  20%|█▉        | 1249/6250 [1:17:30<5:19:49,  3.84s/it, gpt_loss=0.594, lr=1.87e-6][A
Train step of epoch 0:  20%|██        | 1250/6250 [1:17:30<5:11:26,  3.74s/it, gpt_loss=0.594, lr=1.87e-6][A
Train step of epoch 0:  20%|██        | 1250/6250 [1:17:33<5:11:26,  3.74s/it, gpt_loss=0.711, lr=1.87e-6][A
Train step of epoch 0:  20%|██        | 1251/6250 [1:17:33<5:03:34,  3.64s/it, gpt_loss=0.711, lr=1.87e-6][A[2025-04-24 01:10:15,409] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  20%|██        | 1251/6250 [1:17:36<5:03:34,  3.64s/it, gpt_loss=0.587, lr=1.87e-6][A
Train step of epoch 0:  20%|██        | 1252/6250 [1:17:36<4:43:44,  3.41s/it, gpt_loss=0.587, lr=1.87e-6][A
Train step of epoch 0:  20%|██        | 1252/6250 [1:17:40<4:43:44,  3.41s/it, gpt_loss=0.641, lr=1.87e-6][A
Train step of epoch 0:  20%|██        | 1253/6250 [1:17:40<4:51:35,  3.50s/it, gpt_loss=0.641, lr=1.87e-6][A
Train step of epoch 0:  20%|██        | 1253/6250 [1:17:44<4:51:35,  3.50s/it, gpt_loss=0.664, lr=1.87e-6][A
Train step of epoch 0:  20%|██        | 1254/6250 [1:17:44<5:04:39,  3.66s/it, gpt_loss=0.664, lr=1.87e-6][A
Train step of epoch 0:  20%|██        | 1254/6250 [1:17:47<5:04:39,  3.66s/it, gpt_loss=0.645, lr=1.87e-6][A
Train step of epoch 0:  20%|██        | 1255/6250 [1:17:47<4:50:37,  3.49s/it, gpt_loss=0.645, lr=1.87e-6][A[2025-04-24 01:10:29,784] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  20%|██        | 1255/6250 [1:17:51<4:50:37,  3.49s/it, gpt_loss=0.66, lr=1.87e-6] [A
Train step of epoch 0:  20%|██        | 1256/6250 [1:17:51<4:51:27,  3.50s/it, gpt_loss=0.66, lr=1.87e-6][A
Train step of epoch 0:  20%|██        | 1256/6250 [1:17:55<4:51:27,  3.50s/it, gpt_loss=0.839, lr=1.87e-6][A
Train step of epoch 0:  20%|██        | 1257/6250 [1:17:55<5:16:44,  3.81s/it, gpt_loss=0.839, lr=1.87e-6][A
Train step of epoch 0:  20%|██        | 1257/6250 [1:17:59<5:16:44,  3.81s/it, gpt_loss=0.664, lr=1.87e-6][A
Train step of epoch 0:  20%|██        | 1258/6250 [1:17:59<5:11:15,  3.74s/it, gpt_loss=0.664, lr=1.87e-6][A
Train step of epoch 0:  20%|██        | 1258/6250 [1:18:02<5:11:15,  3.74s/it, gpt_loss=0.671, lr=1.87e-6][A
Train step of epoch 0:  20%|██        | 1259/6250 [1:18:02<5:00:12,  3.61s/it, gpt_loss=0.671, lr=1.87e-6][A[2025-04-24 01:10:44,782] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  20%|██        | 1259/6250 [1:18:06<5:00:12,  3.61s/it, gpt_loss=0.643, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1260/6250 [1:18:06<4:59:42,  3.60s/it, gpt_loss=0.643, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1260/6250 [1:18:09<4:59:42,  3.60s/it, gpt_loss=0.7, lr=1.86e-6]  [A
Train step of epoch 0:  20%|██        | 1261/6250 [1:18:09<4:56:11,  3.56s/it, gpt_loss=0.7, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1261/6250 [1:18:13<4:56:11,  3.56s/it, gpt_loss=0.76, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1262/6250 [1:18:13<5:04:40,  3.66s/it, gpt_loss=0.76, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1262/6250 [1:18:18<5:04:40,  3.66s/it, gpt_loss=0.773, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1263/6250 [1:18:18<5:28:31,  3.95s/it, gpt_loss=0.773, lr=1.86e-6][A[2025-04-24 01:11:00,373] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  20%|██        | 1263/6250 [1:18:21<5:28:31,  3.95s/it, gpt_loss=0.464, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1264/6250 [1:18:21<5:19:35,  3.85s/it, gpt_loss=0.464, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1264/6250 [1:18:25<5:19:35,  3.85s/it, gpt_loss=0.519, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1265/6250 [1:18:25<5:17:13,  3.82s/it, gpt_loss=0.519, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1265/6250 [1:18:29<5:17:13,  3.82s/it, gpt_loss=0.718, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1266/6250 [1:18:29<5:24:56,  3.91s/it, gpt_loss=0.718, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1266/6250 [1:18:32<5:24:56,  3.91s/it, gpt_loss=0.708, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1267/6250 [1:18:32<5:13:00,  3.77s/it, gpt_loss=0.708, lr=1.86e-6][A[2025-04-24 01:11:15,677] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  20%|██        | 1267/6250 [1:18:36<5:13:00,  3.77s/it, gpt_loss=0.565, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1268/6250 [1:18:36<5:18:19,  3.83s/it, gpt_loss=0.565, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1268/6250 [1:18:41<5:18:19,  3.83s/it, gpt_loss=0.664, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1269/6250 [1:18:41<5:30:12,  3.98s/it, gpt_loss=0.664, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1269/6250 [1:18:43<5:30:12,  3.98s/it, gpt_loss=0.573, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1270/6250 [1:18:43<4:59:29,  3.61s/it, gpt_loss=0.573, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1270/6250 [1:18:48<4:59:29,  3.61s/it, gpt_loss=0.663, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1271/6250 [1:18:48<5:12:20,  3.76s/it, gpt_loss=0.663, lr=1.86e-6][A[2025-04-24 01:11:29,407] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  20%|██        | 1271/6250 [1:18:50<5:12:20,  3.76s/it, gpt_loss=0.764, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1272/6250 [1:18:50<4:41:52,  3.40s/it, gpt_loss=0.764, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1272/6250 [1:18:54<4:41:52,  3.40s/it, gpt_loss=0.731, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1273/6250 [1:18:54<4:54:55,  3.56s/it, gpt_loss=0.731, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1273/6250 [1:18:58<4:54:55,  3.56s/it, gpt_loss=0.782, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1274/6250 [1:18:58<5:04:03,  3.67s/it, gpt_loss=0.782, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1274/6250 [1:19:02<5:04:03,  3.67s/it, gpt_loss=0.516, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1275/6250 [1:19:02<5:05:29,  3.68s/it, gpt_loss=0.516, lr=1.86e-6][A[2025-04-24 01:11:45,045] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  20%|██        | 1275/6250 [1:19:06<5:05:29,  3.68s/it, gpt_loss=0.869, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1276/6250 [1:19:06<5:14:51,  3.80s/it, gpt_loss=0.869, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1276/6250 [1:19:09<5:14:51,  3.80s/it, gpt_loss=0.571, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1277/6250 [1:19:09<5:00:04,  3.62s/it, gpt_loss=0.571, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1277/6250 [1:19:13<5:00:04,  3.62s/it, gpt_loss=0.54, lr=1.86e-6] [A
Train step of epoch 0:  20%|██        | 1278/6250 [1:19:13<5:16:18,  3.82s/it, gpt_loss=0.54, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1278/6250 [1:19:16<5:16:18,  3.82s/it, gpt_loss=0.565, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1279/6250 [1:19:16<4:48:54,  3.49s/it, gpt_loss=0.565, lr=1.86e-6][A[2025-04-24 01:11:59,015] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  20%|██        | 1279/6250 [1:19:20<4:48:54,  3.49s/it, gpt_loss=0.885, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1280/6250 [1:19:20<4:55:53,  3.57s/it, gpt_loss=0.885, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1280/6250 [1:19:23<4:55:53,  3.57s/it, gpt_loss=0.591, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1281/6250 [1:19:23<4:46:33,  3.46s/it, gpt_loss=0.591, lr=1.86e-6][A
Train step of epoch 0:  20%|██        | 1281/6250 [1:19:27<4:46:33,  3.46s/it, gpt_loss=0.629, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1282/6250 [1:19:27<5:04:59,  3.68s/it, gpt_loss=0.629, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1282/6250 [1:19:31<5:04:59,  3.68s/it, gpt_loss=0.492, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1283/6250 [1:19:31<5:20:08,  3.87s/it, gpt_loss=0.492, lr=1.86e-6][A[2025-04-24 01:12:14,083] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  21%|██        | 1283/6250 [1:19:35<5:20:08,  3.87s/it, gpt_loss=0.62, lr=1.86e-6] [A
Train step of epoch 0:  21%|██        | 1284/6250 [1:19:35<5:07:42,  3.72s/it, gpt_loss=0.62, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1284/6250 [1:19:38<5:07:42,  3.72s/it, gpt_loss=0.531, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1285/6250 [1:19:38<5:05:04,  3.69s/it, gpt_loss=0.531, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1285/6250 [1:19:42<5:05:04,  3.69s/it, gpt_loss=0.703, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1286/6250 [1:19:42<5:13:32,  3.79s/it, gpt_loss=0.703, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1286/6250 [1:19:46<5:13:32,  3.79s/it, gpt_loss=0.627, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1287/6250 [1:19:46<5:04:20,  3.68s/it, gpt_loss=0.627, lr=1.86e-6][A[2025-04-24 01:12:28,792] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  21%|██        | 1287/6250 [1:19:50<5:04:20,  3.68s/it, gpt_loss=0.725, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1288/6250 [1:19:50<5:03:22,  3.67s/it, gpt_loss=0.725, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1288/6250 [1:19:53<5:03:22,  3.67s/it, gpt_loss=0.707, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1289/6250 [1:19:53<5:02:34,  3.66s/it, gpt_loss=0.707, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1289/6250 [1:19:56<5:02:34,  3.66s/it, gpt_loss=0.574, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1290/6250 [1:19:56<4:52:08,  3.53s/it, gpt_loss=0.574, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1290/6250 [1:20:01<4:52:08,  3.53s/it, gpt_loss=0.725, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1291/6250 [1:20:01<5:12:20,  3.78s/it, gpt_loss=0.725, lr=1.86e-6][A[2025-04-24 01:12:43,975] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  21%|██        | 1291/6250 [1:20:05<5:12:20,  3.78s/it, gpt_loss=0.543, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1292/6250 [1:20:05<5:16:35,  3.83s/it, gpt_loss=0.543, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1292/6250 [1:20:09<5:16:35,  3.83s/it, gpt_loss=0.584, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1293/6250 [1:20:09<5:27:51,  3.97s/it, gpt_loss=0.584, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1293/6250 [1:20:13<5:27:51,  3.97s/it, gpt_loss=0.719, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1294/6250 [1:20:13<5:17:15,  3.84s/it, gpt_loss=0.719, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1294/6250 [1:20:16<5:17:15,  3.84s/it, gpt_loss=0.773, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1295/6250 [1:20:16<5:00:48,  3.64s/it, gpt_loss=0.773, lr=1.86e-6][A[2025-04-24 01:12:58,276] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  21%|██        | 1295/6250 [1:20:19<5:00:48,  3.64s/it, gpt_loss=0.675, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1296/6250 [1:20:19<4:52:00,  3.54s/it, gpt_loss=0.675, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1296/6250 [1:20:23<4:52:00,  3.54s/it, gpt_loss=0.651, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1297/6250 [1:20:23<5:09:50,  3.75s/it, gpt_loss=0.651, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1297/6250 [1:20:26<5:09:50,  3.75s/it, gpt_loss=0.583, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1298/6250 [1:20:26<4:52:09,  3.54s/it, gpt_loss=0.583, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1298/6250 [1:20:30<4:52:09,  3.54s/it, gpt_loss=0.658, lr=1.86e-6][A
Train step of epoch 0:  21%|██        | 1299/6250 [1:20:30<4:57:36,  3.61s/it, gpt_loss=0.658, lr=1.86e-6][A[2025-04-24 01:13:12,629] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  21%|██        | 1299/6250 [1:20:33<4:57:36,  3.61s/it, gpt_loss=0.564, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1300/6250 [1:20:33<4:49:43,  3.51s/it, gpt_loss=0.564, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1300/6250 [1:20:37<4:49:43,  3.51s/it, gpt_loss=0.617, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1301/6250 [1:20:37<4:55:46,  3.59s/it, gpt_loss=0.617, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1301/6250 [1:20:40<4:55:46,  3.59s/it, gpt_loss=0.533, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1302/6250 [1:20:40<4:44:14,  3.45s/it, gpt_loss=0.533, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1302/6250 [1:20:45<4:44:14,  3.45s/it, gpt_loss=0.707, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1303/6250 [1:20:45<5:08:46,  3.74s/it, gpt_loss=0.707, lr=1.85e-6][A[2025-04-24 01:13:27,081] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  21%|██        | 1303/6250 [1:20:48<5:08:46,  3.74s/it, gpt_loss=0.629, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1304/6250 [1:20:48<4:53:28,  3.56s/it, gpt_loss=0.629, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1304/6250 [1:20:52<4:53:28,  3.56s/it, gpt_loss=0.68, lr=1.85e-6] [A
Train step of epoch 0:  21%|██        | 1305/6250 [1:20:52<5:01:25,  3.66s/it, gpt_loss=0.68, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1305/6250 [1:20:56<5:01:25,  3.66s/it, gpt_loss=0.668, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1306/6250 [1:20:56<5:14:43,  3.82s/it, gpt_loss=0.668, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1306/6250 [1:21:01<5:14:43,  3.82s/it, gpt_loss=0.834, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1307/6250 [1:21:01<5:33:55,  4.05s/it, gpt_loss=0.834, lr=1.85e-6][A[2025-04-24 01:13:43,907] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  21%|██        | 1307/6250 [1:21:05<5:33:55,  4.05s/it, gpt_loss=0.634, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1308/6250 [1:21:05<5:36:07,  4.08s/it, gpt_loss=0.634, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1308/6250 [1:21:08<5:36:07,  4.08s/it, gpt_loss=0.527, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1309/6250 [1:21:08<5:13:11,  3.80s/it, gpt_loss=0.527, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1309/6250 [1:21:11<5:13:11,  3.80s/it, gpt_loss=0.833, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1310/6250 [1:21:11<5:05:24,  3.71s/it, gpt_loss=0.833, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1310/6250 [1:21:14<5:05:24,  3.71s/it, gpt_loss=0.667, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1311/6250 [1:21:14<4:52:02,  3.55s/it, gpt_loss=0.667, lr=1.85e-6][A[2025-04-24 01:13:56,801] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  21%|██        | 1311/6250 [1:21:18<4:52:02,  3.55s/it, gpt_loss=0.531, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1312/6250 [1:21:18<4:40:22,  3.41s/it, gpt_loss=0.531, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1312/6250 [1:21:22<4:40:22,  3.41s/it, gpt_loss=0.483, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1313/6250 [1:21:22<5:00:07,  3.65s/it, gpt_loss=0.483, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1313/6250 [1:21:25<5:00:07,  3.65s/it, gpt_loss=0.647, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1314/6250 [1:21:25<4:55:01,  3.59s/it, gpt_loss=0.647, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1314/6250 [1:21:29<4:55:01,  3.59s/it, gpt_loss=0.532, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1315/6250 [1:21:29<5:05:34,  3.72s/it, gpt_loss=0.532, lr=1.85e-6][A[2025-04-24 01:14:13,200] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  21%|██        | 1315/6250 [1:21:34<5:05:34,  3.72s/it, gpt_loss=0.609, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1316/6250 [1:21:34<5:30:32,  4.02s/it, gpt_loss=0.609, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1316/6250 [1:21:39<5:30:32,  4.02s/it, gpt_loss=0.688, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1317/6250 [1:21:39<5:47:05,  4.22s/it, gpt_loss=0.688, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1317/6250 [1:21:43<5:47:05,  4.22s/it, gpt_loss=0.682, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1318/6250 [1:21:43<5:39:57,  4.14s/it, gpt_loss=0.682, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1318/6250 [1:21:47<5:39:57,  4.14s/it, gpt_loss=0.668, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1319/6250 [1:21:47<5:43:06,  4.17s/it, gpt_loss=0.668, lr=1.85e-6][A[2025-04-24 01:14:30,191] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  21%|██        | 1319/6250 [1:21:51<5:43:06,  4.17s/it, gpt_loss=0.701, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1320/6250 [1:21:51<5:41:05,  4.15s/it, gpt_loss=0.701, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1320/6250 [1:21:55<5:41:05,  4.15s/it, gpt_loss=0.667, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1321/6250 [1:21:55<5:31:01,  4.03s/it, gpt_loss=0.667, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1321/6250 [1:21:59<5:31:01,  4.03s/it, gpt_loss=0.744, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1322/6250 [1:21:59<5:34:04,  4.07s/it, gpt_loss=0.744, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1322/6250 [1:22:02<5:34:04,  4.07s/it, gpt_loss=0.72, lr=1.85e-6] [A
Train step of epoch 0:  21%|██        | 1323/6250 [1:22:02<5:17:58,  3.87s/it, gpt_loss=0.72, lr=1.85e-6][A[2025-04-24 01:14:45,352] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  21%|██        | 1323/6250 [1:22:06<5:17:58,  3.87s/it, gpt_loss=0.541, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1324/6250 [1:22:06<5:17:11,  3.86s/it, gpt_loss=0.541, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1324/6250 [1:22:10<5:17:11,  3.86s/it, gpt_loss=0.718, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1325/6250 [1:22:10<5:17:14,  3.86s/it, gpt_loss=0.718, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1325/6250 [1:22:13<5:17:14,  3.86s/it, gpt_loss=0.684, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1326/6250 [1:22:13<5:00:59,  3.67s/it, gpt_loss=0.684, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1326/6250 [1:22:17<5:00:59,  3.67s/it, gpt_loss=0.622, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1327/6250 [1:22:17<5:04:15,  3.71s/it, gpt_loss=0.622, lr=1.85e-6][A[2025-04-24 01:15:00,669] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  21%|██        | 1327/6250 [1:22:21<5:04:15,  3.71s/it, gpt_loss=0.631, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1328/6250 [1:22:21<5:22:10,  3.93s/it, gpt_loss=0.631, lr=1.85e-6][A
Train step of epoch 0:  21%|██        | 1328/6250 [1:22:28<5:22:10,  3.93s/it, gpt_loss=0.681, lr=1.85e-6][A
Train step of epoch 0:  21%|██▏       | 1329/6250 [1:22:28<6:20:47,  4.64s/it, gpt_loss=0.681, lr=1.85e-6][A
Train step of epoch 0:  21%|██▏       | 1329/6250 [1:22:32<6:20:47,  4.64s/it, gpt_loss=0.785, lr=1.85e-6][A
Train step of epoch 0:  21%|██▏       | 1330/6250 [1:22:32<6:03:14,  4.43s/it, gpt_loss=0.785, lr=1.85e-6][A
Train step of epoch 0:  21%|██▏       | 1330/6250 [1:22:36<6:03:14,  4.43s/it, gpt_loss=0.753, lr=1.85e-6][A
Train step of epoch 0:  21%|██▏       | 1331/6250 [1:22:36<6:04:34,  4.45s/it, gpt_loss=0.753, lr=1.85e-6][A[2025-04-24 01:15:19,787] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  21%|██▏       | 1331/6250 [1:22:41<6:04:34,  4.45s/it, gpt_loss=0.473, lr=1.85e-6][A
Train step of epoch 0:  21%|██▏       | 1332/6250 [1:22:41<6:03:00,  4.43s/it, gpt_loss=0.473, lr=1.85e-6][A
Train step of epoch 0:  21%|██▏       | 1332/6250 [1:22:45<6:03:00,  4.43s/it, gpt_loss=0.866, lr=1.85e-6][A
Train step of epoch 0:  21%|██▏       | 1333/6250 [1:22:45<5:51:44,  4.29s/it, gpt_loss=0.866, lr=1.85e-6][A
Train step of epoch 0:  21%|██▏       | 1333/6250 [1:22:47<5:51:44,  4.29s/it, gpt_loss=0.596, lr=1.85e-6][A
Train step of epoch 0:  21%|██▏       | 1334/6250 [1:22:47<5:12:20,  3.81s/it, gpt_loss=0.596, lr=1.85e-6][A
Train step of epoch 0:  21%|██▏       | 1334/6250 [1:22:52<5:12:20,  3.81s/it, gpt_loss=0.538, lr=1.85e-6][A
Train step of epoch 0:  21%|██▏       | 1335/6250 [1:22:52<5:30:37,  4.04s/it, gpt_loss=0.538, lr=1.85e-6][A[2025-04-24 01:15:34,779] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  21%|██▏       | 1335/6250 [1:22:56<5:30:37,  4.04s/it, gpt_loss=0.701, lr=1.85e-6][A
Train step of epoch 0:  21%|██▏       | 1336/6250 [1:22:56<5:23:56,  3.96s/it, gpt_loss=0.701, lr=1.85e-6][A
Train step of epoch 0:  21%|██▏       | 1336/6250 [1:23:00<5:23:56,  3.96s/it, gpt_loss=0.666, lr=1.85e-6][A
Train step of epoch 0:  21%|██▏       | 1337/6250 [1:23:00<5:34:15,  4.08s/it, gpt_loss=0.666, lr=1.85e-6][A
Train step of epoch 0:  21%|██▏       | 1337/6250 [1:23:04<5:34:15,  4.08s/it, gpt_loss=0.875, lr=1.85e-6][A
Train step of epoch 0:  21%|██▏       | 1338/6250 [1:23:04<5:41:08,  4.17s/it, gpt_loss=0.875, lr=1.85e-6][A
Train step of epoch 0:  21%|██▏       | 1338/6250 [1:23:08<5:41:08,  4.17s/it, gpt_loss=0.701, lr=1.85e-6][A
Train step of epoch 0:  21%|██▏       | 1339/6250 [1:23:08<5:38:38,  4.14s/it, gpt_loss=0.701, lr=1.85e-6][A[2025-04-24 01:15:51,080] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  21%|██▏       | 1339/6250 [1:23:12<5:38:38,  4.14s/it, gpt_loss=0.565, lr=1.84e-6][A
Train step of epoch 0:  21%|██▏       | 1340/6250 [1:23:12<5:22:42,  3.94s/it, gpt_loss=0.565, lr=1.84e-6][A
Train step of epoch 0:  21%|██▏       | 1340/6250 [1:23:15<5:22:42,  3.94s/it, gpt_loss=0.604, lr=1.84e-6][A
Train step of epoch 0:  21%|██▏       | 1341/6250 [1:23:15<5:13:06,  3.83s/it, gpt_loss=0.604, lr=1.84e-6][A
Train step of epoch 0:  21%|██▏       | 1341/6250 [1:23:19<5:13:06,  3.83s/it, gpt_loss=0.52, lr=1.84e-6] [A
Train step of epoch 0:  21%|██▏       | 1342/6250 [1:23:19<5:05:47,  3.74s/it, gpt_loss=0.52, lr=1.84e-6][A
Train step of epoch 0:  21%|██▏       | 1342/6250 [1:23:22<5:05:47,  3.74s/it, gpt_loss=0.377, lr=1.84e-6][A
Train step of epoch 0:  21%|██▏       | 1343/6250 [1:23:22<4:48:15,  3.52s/it, gpt_loss=0.377, lr=1.84e-6][A[2025-04-24 01:16:04,938] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  21%|██▏       | 1343/6250 [1:23:26<4:48:15,  3.52s/it, gpt_loss=0.663, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1344/6250 [1:23:26<4:53:35,  3.59s/it, gpt_loss=0.663, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1344/6250 [1:23:30<4:53:35,  3.59s/it, gpt_loss=0.655, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1345/6250 [1:23:30<5:12:09,  3.82s/it, gpt_loss=0.655, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1345/6250 [1:23:33<5:12:09,  3.82s/it, gpt_loss=0.716, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1346/6250 [1:23:33<5:01:11,  3.69s/it, gpt_loss=0.716, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1346/6250 [1:23:37<5:01:11,  3.69s/it, gpt_loss=0.545, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1347/6250 [1:23:37<4:53:07,  3.59s/it, gpt_loss=0.545, lr=1.84e-6][A[2025-04-24 01:16:19,110] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  22%|██▏       | 1347/6250 [1:23:40<4:53:07,  3.59s/it, gpt_loss=0.703, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1348/6250 [1:23:40<4:40:53,  3.44s/it, gpt_loss=0.703, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1348/6250 [1:23:44<4:40:53,  3.44s/it, gpt_loss=0.83, lr=1.84e-6] [A
Train step of epoch 0:  22%|██▏       | 1349/6250 [1:23:44<5:00:01,  3.67s/it, gpt_loss=0.83, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1349/6250 [1:23:47<5:00:01,  3.67s/it, gpt_loss=0.59, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1350/6250 [1:23:47<4:48:52,  3.54s/it, gpt_loss=0.59, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1350/6250 [1:23:51<4:48:52,  3.54s/it, gpt_loss=0.611, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1351/6250 [1:23:51<4:48:45,  3.54s/it, gpt_loss=0.611, lr=1.84e-6][A[2025-04-24 01:16:34,755] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  22%|██▏       | 1351/6250 [1:23:56<4:48:45,  3.54s/it, gpt_loss=0.641, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1352/6250 [1:23:56<5:16:24,  3.88s/it, gpt_loss=0.641, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1352/6250 [1:24:00<5:16:24,  3.88s/it, gpt_loss=0.558, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1353/6250 [1:24:00<5:28:03,  4.02s/it, gpt_loss=0.558, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1353/6250 [1:24:04<5:28:03,  4.02s/it, gpt_loss=0.521, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1354/6250 [1:24:04<5:22:47,  3.96s/it, gpt_loss=0.521, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1354/6250 [1:24:07<5:22:47,  3.96s/it, gpt_loss=0.576, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1355/6250 [1:24:07<5:16:17,  3.88s/it, gpt_loss=0.576, lr=1.84e-6][A[2025-04-24 01:16:50,106] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  22%|██▏       | 1355/6250 [1:24:11<5:16:17,  3.88s/it, gpt_loss=0.65, lr=1.84e-6] [A
Train step of epoch 0:  22%|██▏       | 1356/6250 [1:24:11<5:06:55,  3.76s/it, gpt_loss=0.65, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1356/6250 [1:24:15<5:06:55,  3.76s/it, gpt_loss=0.615, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1357/6250 [1:24:15<5:13:02,  3.84s/it, gpt_loss=0.615, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1357/6250 [1:24:20<5:13:02,  3.84s/it, gpt_loss=0.586, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1358/6250 [1:24:20<5:39:45,  4.17s/it, gpt_loss=0.586, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1358/6250 [1:24:23<5:39:45,  4.17s/it, gpt_loss=0.477, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1359/6250 [1:24:23<5:08:15,  3.78s/it, gpt_loss=0.477, lr=1.84e-6][A[2025-04-24 01:17:07,179] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  22%|██▏       | 1359/6250 [1:24:28<5:08:15,  3.78s/it, gpt_loss=0.639, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1360/6250 [1:24:28<5:43:54,  4.22s/it, gpt_loss=0.639, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1360/6250 [1:24:32<5:43:54,  4.22s/it, gpt_loss=0.792, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1361/6250 [1:24:32<5:33:21,  4.09s/it, gpt_loss=0.792, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1361/6250 [1:24:35<5:33:21,  4.09s/it, gpt_loss=0.596, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1362/6250 [1:24:35<5:01:24,  3.70s/it, gpt_loss=0.596, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1362/6250 [1:24:38<5:01:24,  3.70s/it, gpt_loss=0.65, lr=1.84e-6] [A
Train step of epoch 0:  22%|██▏       | 1363/6250 [1:24:38<4:55:23,  3.63s/it, gpt_loss=0.65, lr=1.84e-6][A[2025-04-24 01:17:19,619] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  22%|██▏       | 1363/6250 [1:24:40<4:55:23,  3.63s/it, gpt_loss=0.471, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1364/6250 [1:24:40<4:25:30,  3.26s/it, gpt_loss=0.471, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1364/6250 [1:24:42<4:25:30,  3.26s/it, gpt_loss=0.709, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1365/6250 [1:24:42<3:51:34,  2.84s/it, gpt_loss=0.709, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1365/6250 [1:24:45<3:51:34,  2.84s/it, gpt_loss=0.652, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1366/6250 [1:24:45<3:53:22,  2.87s/it, gpt_loss=0.652, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1366/6250 [1:24:49<3:53:22,  2.87s/it, gpt_loss=0.57, lr=1.84e-6] [A
Train step of epoch 0:  22%|██▏       | 1367/6250 [1:24:49<4:07:39,  3.04s/it, gpt_loss=0.57, lr=1.84e-6][A[2025-04-24 01:17:31,725] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  22%|██▏       | 1367/6250 [1:24:52<4:07:39,  3.04s/it, gpt_loss=0.542, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1368/6250 [1:24:52<4:27:30,  3.29s/it, gpt_loss=0.542, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1368/6250 [1:24:57<4:27:30,  3.29s/it, gpt_loss=0.662, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1369/6250 [1:24:57<4:57:20,  3.66s/it, gpt_loss=0.662, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1369/6250 [1:25:00<4:57:20,  3.66s/it, gpt_loss=0.575, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1370/6250 [1:25:00<4:53:16,  3.61s/it, gpt_loss=0.575, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1370/6250 [1:25:04<4:53:16,  3.61s/it, gpt_loss=0.834, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1371/6250 [1:25:04<4:46:27,  3.52s/it, gpt_loss=0.834, lr=1.84e-6][A[2025-04-24 01:17:47,065] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  22%|██▏       | 1371/6250 [1:25:08<4:46:27,  3.52s/it, gpt_loss=0.688, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1372/6250 [1:25:08<4:58:14,  3.67s/it, gpt_loss=0.688, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1372/6250 [1:25:11<4:58:14,  3.67s/it, gpt_loss=0.48, lr=1.84e-6] [A
Train step of epoch 0:  22%|██▏       | 1373/6250 [1:25:11<4:50:04,  3.57s/it, gpt_loss=0.48, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1373/6250 [1:25:15<4:50:04,  3.57s/it, gpt_loss=0.534, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1374/6250 [1:25:15<4:59:18,  3.68s/it, gpt_loss=0.534, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1374/6250 [1:25:19<4:59:18,  3.68s/it, gpt_loss=0.642, lr=1.84e-6][A
Train step of epoch 0:  22%|██▏       | 1375/6250 [1:25:19<5:06:13,  3.77s/it, gpt_loss=0.642, lr=1.84e-6][A[2025-04-24 01:18:02,941] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  22%|██▏       | 1375/6250 [1:25:24<5:06:13,  3.77s/it, gpt_loss=0.489, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1376/6250 [1:25:24<5:26:55,  4.02s/it, gpt_loss=0.489, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1376/6250 [1:25:28<5:26:55,  4.02s/it, gpt_loss=0.537, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1377/6250 [1:25:28<5:33:33,  4.11s/it, gpt_loss=0.537, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1377/6250 [1:25:33<5:33:33,  4.11s/it, gpt_loss=0.756, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1378/6250 [1:25:33<5:47:59,  4.29s/it, gpt_loss=0.756, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1378/6250 [1:25:37<5:47:59,  4.29s/it, gpt_loss=0.709, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1379/6250 [1:25:37<5:55:45,  4.38s/it, gpt_loss=0.709, lr=1.83e-6][A[2025-04-24 01:18:19,700] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  22%|██▏       | 1379/6250 [1:25:40<5:55:45,  4.38s/it, gpt_loss=0.6, lr=1.83e-6]  [A
Train step of epoch 0:  22%|██▏       | 1380/6250 [1:25:40<5:25:41,  4.01s/it, gpt_loss=0.6, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1380/6250 [1:25:44<5:25:41,  4.01s/it, gpt_loss=0.766, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1381/6250 [1:25:44<5:16:25,  3.90s/it, gpt_loss=0.766, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1381/6250 [1:25:48<5:16:25,  3.90s/it, gpt_loss=0.617, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1382/6250 [1:25:48<5:15:47,  3.89s/it, gpt_loss=0.617, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1382/6250 [1:25:52<5:15:47,  3.89s/it, gpt_loss=0.589, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1383/6250 [1:25:52<5:24:11,  4.00s/it, gpt_loss=0.589, lr=1.83e-6][A[2025-04-24 01:18:36,168] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  22%|██▏       | 1383/6250 [1:25:57<5:24:11,  4.00s/it, gpt_loss=0.657, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1384/6250 [1:25:57<5:41:38,  4.21s/it, gpt_loss=0.657, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1384/6250 [1:26:01<5:41:38,  4.21s/it, gpt_loss=0.617, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1385/6250 [1:26:01<5:46:51,  4.28s/it, gpt_loss=0.617, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1385/6250 [1:26:04<5:46:51,  4.28s/it, gpt_loss=0.712, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1386/6250 [1:26:04<5:12:57,  3.86s/it, gpt_loss=0.712, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1386/6250 [1:26:08<5:12:57,  3.86s/it, gpt_loss=0.639, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1387/6250 [1:26:08<5:04:32,  3.76s/it, gpt_loss=0.639, lr=1.83e-6][A[2025-04-24 01:18:50,416] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  22%|██▏       | 1387/6250 [1:26:11<5:04:32,  3.76s/it, gpt_loss=0.555, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1388/6250 [1:26:11<4:56:08,  3.65s/it, gpt_loss=0.555, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1388/6250 [1:26:15<4:56:08,  3.65s/it, gpt_loss=0.694, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1389/6250 [1:26:15<4:53:39,  3.62s/it, gpt_loss=0.694, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1389/6250 [1:26:19<4:53:39,  3.62s/it, gpt_loss=0.696, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1390/6250 [1:26:19<5:15:01,  3.89s/it, gpt_loss=0.696, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1390/6250 [1:26:22<5:15:01,  3.89s/it, gpt_loss=0.64, lr=1.83e-6] [A
Train step of epoch 0:  22%|██▏       | 1391/6250 [1:26:22<4:38:05,  3.43s/it, gpt_loss=0.64, lr=1.83e-6][A[2025-04-24 01:19:03,531] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  22%|██▏       | 1391/6250 [1:26:24<4:38:05,  3.43s/it, gpt_loss=0.825, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1392/6250 [1:26:24<4:19:45,  3.21s/it, gpt_loss=0.825, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1392/6250 [1:26:27<4:19:45,  3.21s/it, gpt_loss=0.656, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1393/6250 [1:26:27<4:01:36,  2.98s/it, gpt_loss=0.656, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1393/6250 [1:26:30<4:01:36,  2.98s/it, gpt_loss=0.683, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1394/6250 [1:26:30<4:16:05,  3.16s/it, gpt_loss=0.683, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1394/6250 [1:26:33<4:16:05,  3.16s/it, gpt_loss=0.575, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1395/6250 [1:26:33<4:04:06,  3.02s/it, gpt_loss=0.575, lr=1.83e-6][A[2025-04-24 01:19:16,937] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  22%|██▏       | 1395/6250 [1:26:38<4:04:06,  3.02s/it, gpt_loss=0.634, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1396/6250 [1:26:38<4:44:36,  3.52s/it, gpt_loss=0.634, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1396/6250 [1:26:41<4:44:36,  3.52s/it, gpt_loss=0.671, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1397/6250 [1:26:41<4:41:16,  3.48s/it, gpt_loss=0.671, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1397/6250 [1:26:44<4:41:16,  3.48s/it, gpt_loss=0.847, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1398/6250 [1:26:44<4:38:11,  3.44s/it, gpt_loss=0.847, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1398/6250 [1:26:48<4:38:11,  3.44s/it, gpt_loss=0.631, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1399/6250 [1:26:48<4:45:38,  3.53s/it, gpt_loss=0.631, lr=1.83e-6][A[2025-04-24 01:19:32,266] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  22%|██▏       | 1399/6250 [1:26:53<4:45:38,  3.53s/it, gpt_loss=0.704, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1400/6250 [1:26:53<5:17:20,  3.93s/it, gpt_loss=0.704, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1400/6250 [1:26:56<5:17:20,  3.93s/it, gpt_loss=0.626, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1401/6250 [1:26:56<5:05:04,  3.77s/it, gpt_loss=0.626, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1401/6250 [1:27:01<5:05:04,  3.77s/it, gpt_loss=0.77, lr=1.83e-6] [A
Train step of epoch 0:  22%|██▏       | 1402/6250 [1:27:01<5:15:31,  3.91s/it, gpt_loss=0.77, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1402/6250 [1:27:04<5:15:31,  3.91s/it, gpt_loss=0.684, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1403/6250 [1:27:04<5:12:11,  3.86s/it, gpt_loss=0.684, lr=1.83e-6][A[2025-04-24 01:19:47,324] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  22%|██▏       | 1403/6250 [1:27:08<5:12:11,  3.86s/it, gpt_loss=0.544, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1404/6250 [1:27:08<5:07:06,  3.80s/it, gpt_loss=0.544, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1404/6250 [1:27:12<5:07:06,  3.80s/it, gpt_loss=0.559, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1405/6250 [1:27:12<5:17:42,  3.93s/it, gpt_loss=0.559, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1405/6250 [1:27:15<5:17:42,  3.93s/it, gpt_loss=0.631, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1406/6250 [1:27:15<4:55:20,  3.66s/it, gpt_loss=0.631, lr=1.83e-6][A
Train step of epoch 0:  22%|██▏       | 1406/6250 [1:27:19<4:55:20,  3.66s/it, gpt_loss=0.726, lr=1.83e-6][A
Train step of epoch 0:  23%|██▎       | 1407/6250 [1:27:19<4:56:15,  3.67s/it, gpt_loss=0.726, lr=1.83e-6][A[2025-04-24 01:20:02,050] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  23%|██▎       | 1407/6250 [1:27:23<4:56:15,  3.67s/it, gpt_loss=0.739, lr=1.83e-6][A
Train step of epoch 0:  23%|██▎       | 1408/6250 [1:27:23<4:58:37,  3.70s/it, gpt_loss=0.739, lr=1.83e-6][A
Train step of epoch 0:  23%|██▎       | 1408/6250 [1:27:27<4:58:37,  3.70s/it, gpt_loss=0.782, lr=1.83e-6][A
Train step of epoch 0:  23%|██▎       | 1409/6250 [1:27:27<5:04:23,  3.77s/it, gpt_loss=0.782, lr=1.83e-6][A
Train step of epoch 0:  23%|██▎       | 1409/6250 [1:27:31<5:04:23,  3.77s/it, gpt_loss=0.703, lr=1.83e-6][A
Train step of epoch 0:  23%|██▎       | 1410/6250 [1:27:31<5:06:10,  3.80s/it, gpt_loss=0.703, lr=1.83e-6][A
Train step of epoch 0:  23%|██▎       | 1410/6250 [1:27:34<5:06:10,  3.80s/it, gpt_loss=0.772, lr=1.83e-6][A
Train step of epoch 0:  23%|██▎       | 1411/6250 [1:27:34<4:50:52,  3.61s/it, gpt_loss=0.772, lr=1.83e-6][A[2025-04-24 01:20:16,887] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  23%|██▎       | 1411/6250 [1:27:38<4:50:52,  3.61s/it, gpt_loss=0.859, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1412/6250 [1:27:38<4:57:27,  3.69s/it, gpt_loss=0.859, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1412/6250 [1:27:41<4:57:27,  3.69s/it, gpt_loss=0.647, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1413/6250 [1:27:41<4:59:15,  3.71s/it, gpt_loss=0.647, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1413/6250 [1:27:44<4:59:15,  3.71s/it, gpt_loss=0.57, lr=1.82e-6] [A
Train step of epoch 0:  23%|██▎       | 1414/6250 [1:27:44<4:32:46,  3.38s/it, gpt_loss=0.57, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1414/6250 [1:27:48<4:32:46,  3.38s/it, gpt_loss=0.781, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1415/6250 [1:27:48<4:58:26,  3.70s/it, gpt_loss=0.781, lr=1.82e-6][A[2025-04-24 01:20:31,768] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  23%|██▎       | 1415/6250 [1:27:53<4:58:26,  3.70s/it, gpt_loss=0.745, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1416/6250 [1:27:53<5:06:41,  3.81s/it, gpt_loss=0.745, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1416/6250 [1:27:57<5:06:41,  3.81s/it, gpt_loss=0.683, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1417/6250 [1:27:57<5:16:26,  3.93s/it, gpt_loss=0.683, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1417/6250 [1:28:00<5:16:26,  3.93s/it, gpt_loss=0.517, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1418/6250 [1:28:00<5:03:58,  3.77s/it, gpt_loss=0.517, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1418/6250 [1:28:04<5:03:58,  3.77s/it, gpt_loss=0.674, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1419/6250 [1:28:04<4:57:12,  3.69s/it, gpt_loss=0.674, lr=1.82e-6][A[2025-04-24 01:20:46,193] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  23%|██▎       | 1419/6250 [1:28:07<4:57:12,  3.69s/it, gpt_loss=0.721, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1420/6250 [1:28:07<4:47:41,  3.57s/it, gpt_loss=0.721, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1420/6250 [1:28:11<4:47:41,  3.57s/it, gpt_loss=0.665, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1421/6250 [1:28:11<4:53:11,  3.64s/it, gpt_loss=0.665, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1421/6250 [1:28:15<4:53:11,  3.64s/it, gpt_loss=0.842, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1422/6250 [1:28:15<5:06:01,  3.80s/it, gpt_loss=0.842, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1422/6250 [1:28:19<5:06:01,  3.80s/it, gpt_loss=0.753, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1423/6250 [1:28:19<5:06:48,  3.81s/it, gpt_loss=0.753, lr=1.82e-6][A[2025-04-24 01:21:01,575] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  23%|██▎       | 1423/6250 [1:28:22<5:06:48,  3.81s/it, gpt_loss=0.55, lr=1.82e-6] [A
Train step of epoch 0:  23%|██▎       | 1424/6250 [1:28:22<5:00:41,  3.74s/it, gpt_loss=0.55, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1424/6250 [1:28:26<5:00:41,  3.74s/it, gpt_loss=0.813, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1425/6250 [1:28:26<5:07:08,  3.82s/it, gpt_loss=0.813, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1425/6250 [1:28:31<5:07:08,  3.82s/it, gpt_loss=0.503, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1426/6250 [1:28:31<5:30:48,  4.11s/it, gpt_loss=0.503, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1426/6250 [1:28:35<5:30:48,  4.11s/it, gpt_loss=0.726, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1427/6250 [1:28:35<5:30:42,  4.11s/it, gpt_loss=0.726, lr=1.82e-6][A[2025-04-24 01:21:18,044] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  23%|██▎       | 1427/6250 [1:28:39<5:30:42,  4.11s/it, gpt_loss=0.639, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1428/6250 [1:28:39<5:16:55,  3.94s/it, gpt_loss=0.639, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1428/6250 [1:28:44<5:16:55,  3.94s/it, gpt_loss=0.519, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1429/6250 [1:28:44<5:41:56,  4.26s/it, gpt_loss=0.519, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1429/6250 [1:28:47<5:41:56,  4.26s/it, gpt_loss=0.634, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1430/6250 [1:28:47<5:23:40,  4.03s/it, gpt_loss=0.634, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1430/6250 [1:28:51<5:23:40,  4.03s/it, gpt_loss=0.577, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1431/6250 [1:28:51<5:06:38,  3.82s/it, gpt_loss=0.577, lr=1.82e-6][A[2025-04-24 01:21:33,115] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  23%|██▎       | 1431/6250 [1:28:54<5:06:38,  3.82s/it, gpt_loss=0.632, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1432/6250 [1:28:54<4:53:09,  3.65s/it, gpt_loss=0.632, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1432/6250 [1:28:58<4:53:09,  3.65s/it, gpt_loss=0.6, lr=1.82e-6]  [A
Train step of epoch 0:  23%|██▎       | 1433/6250 [1:28:58<4:57:06,  3.70s/it, gpt_loss=0.6, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1433/6250 [1:29:01<4:57:06,  3.70s/it, gpt_loss=0.671, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1434/6250 [1:29:01<4:56:11,  3.69s/it, gpt_loss=0.671, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1434/6250 [1:29:06<4:56:11,  3.69s/it, gpt_loss=0.688, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1435/6250 [1:29:06<5:07:14,  3.83s/it, gpt_loss=0.688, lr=1.82e-6][A[2025-04-24 01:21:48,132] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  23%|██▎       | 1435/6250 [1:29:09<5:07:14,  3.83s/it, gpt_loss=0.736, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1436/6250 [1:29:09<4:56:26,  3.69s/it, gpt_loss=0.736, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1436/6250 [1:29:12<4:56:26,  3.69s/it, gpt_loss=0.771, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1437/6250 [1:29:12<4:53:05,  3.65s/it, gpt_loss=0.771, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1437/6250 [1:29:17<4:53:05,  3.65s/it, gpt_loss=0.671, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1438/6250 [1:29:17<5:05:27,  3.81s/it, gpt_loss=0.671, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1438/6250 [1:29:20<5:05:27,  3.81s/it, gpt_loss=0.547, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1439/6250 [1:29:20<5:03:48,  3.79s/it, gpt_loss=0.547, lr=1.82e-6][A[2025-04-24 01:22:02,455] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  23%|██▎       | 1439/6250 [1:29:23<5:03:48,  3.79s/it, gpt_loss=0.531, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1440/6250 [1:29:23<4:41:12,  3.51s/it, gpt_loss=0.531, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1440/6250 [1:29:26<4:41:12,  3.51s/it, gpt_loss=0.519, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1441/6250 [1:29:26<4:13:24,  3.16s/it, gpt_loss=0.519, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1441/6250 [1:29:31<4:13:24,  3.16s/it, gpt_loss=0.618, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1442/6250 [1:29:31<4:56:29,  3.70s/it, gpt_loss=0.618, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1442/6250 [1:29:34<4:56:29,  3.70s/it, gpt_loss=0.546, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1443/6250 [1:29:34<5:01:40,  3.77s/it, gpt_loss=0.546, lr=1.82e-6][A[2025-04-24 01:22:16,071] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  23%|██▎       | 1443/6250 [1:29:37<5:01:40,  3.77s/it, gpt_loss=0.539, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1444/6250 [1:29:37<4:28:30,  3.35s/it, gpt_loss=0.539, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1444/6250 [1:29:41<4:28:30,  3.35s/it, gpt_loss=0.748, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1445/6250 [1:29:41<4:51:02,  3.63s/it, gpt_loss=0.748, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1445/6250 [1:29:45<4:51:02,  3.63s/it, gpt_loss=0.742, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1446/6250 [1:29:45<4:54:23,  3.68s/it, gpt_loss=0.742, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1446/6250 [1:29:49<4:54:23,  3.68s/it, gpt_loss=0.563, lr=1.82e-6][A
Train step of epoch 0:  23%|██▎       | 1447/6250 [1:29:49<5:09:42,  3.87s/it, gpt_loss=0.563, lr=1.82e-6][A[2025-04-24 01:22:33,528] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  23%|██▎       | 1447/6250 [1:29:54<5:09:42,  3.87s/it, gpt_loss=0.81, lr=1.81e-6] [A
Train step of epoch 0:  23%|██▎       | 1448/6250 [1:29:54<5:38:31,  4.23s/it, gpt_loss=0.81, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1448/6250 [1:29:58<5:38:31,  4.23s/it, gpt_loss=0.67, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1449/6250 [1:29:58<5:22:57,  4.04s/it, gpt_loss=0.67, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1449/6250 [1:30:01<5:22:57,  4.04s/it, gpt_loss=0.725, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1450/6250 [1:30:01<5:11:07,  3.89s/it, gpt_loss=0.725, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1450/6250 [1:30:06<5:11:07,  3.89s/it, gpt_loss=0.627, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1451/6250 [1:30:06<5:19:03,  3.99s/it, gpt_loss=0.627, lr=1.81e-6][A[2025-04-24 01:22:48,765] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  23%|██▎       | 1451/6250 [1:30:10<5:19:03,  3.99s/it, gpt_loss=0.543, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1452/6250 [1:30:10<5:16:29,  3.96s/it, gpt_loss=0.543, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1452/6250 [1:30:13<5:16:29,  3.96s/it, gpt_loss=0.601, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1453/6250 [1:30:13<5:05:14,  3.82s/it, gpt_loss=0.601, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1453/6250 [1:30:16<5:05:14,  3.82s/it, gpt_loss=0.645, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1454/6250 [1:30:16<4:52:05,  3.65s/it, gpt_loss=0.645, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1454/6250 [1:30:19<4:52:05,  3.65s/it, gpt_loss=0.628, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1455/6250 [1:30:19<4:35:07,  3.44s/it, gpt_loss=0.628, lr=1.81e-6][A[2025-04-24 01:23:02,972] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  23%|██▎       | 1455/6250 [1:30:24<4:35:07,  3.44s/it, gpt_loss=0.573, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1456/6250 [1:30:24<5:00:14,  3.76s/it, gpt_loss=0.573, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1456/6250 [1:30:27<5:00:14,  3.76s/it, gpt_loss=0.555, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1457/6250 [1:30:27<4:52:06,  3.66s/it, gpt_loss=0.555, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1457/6250 [1:30:30<4:52:06,  3.66s/it, gpt_loss=0.557, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1458/6250 [1:30:30<4:36:03,  3.46s/it, gpt_loss=0.557, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1458/6250 [1:30:33<4:36:03,  3.46s/it, gpt_loss=0.611, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1459/6250 [1:30:33<4:29:36,  3.38s/it, gpt_loss=0.611, lr=1.81e-6][A[2025-04-24 01:23:16,103] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  23%|██▎       | 1459/6250 [1:30:37<4:29:36,  3.38s/it, gpt_loss=0.607, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1460/6250 [1:30:37<4:33:17,  3.42s/it, gpt_loss=0.607, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1460/6250 [1:30:40<4:33:17,  3.42s/it, gpt_loss=0.531, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1461/6250 [1:30:40<4:29:17,  3.37s/it, gpt_loss=0.531, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1461/6250 [1:30:44<4:29:17,  3.37s/it, gpt_loss=0.521, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1462/6250 [1:30:44<4:43:53,  3.56s/it, gpt_loss=0.521, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1462/6250 [1:30:48<4:43:53,  3.56s/it, gpt_loss=0.649, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1463/6250 [1:30:48<4:43:30,  3.55s/it, gpt_loss=0.649, lr=1.81e-6][A[2025-04-24 01:23:31,410] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  23%|██▎       | 1463/6250 [1:30:52<4:43:30,  3.55s/it, gpt_loss=0.536, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1464/6250 [1:30:52<5:06:31,  3.84s/it, gpt_loss=0.536, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1464/6250 [1:30:56<5:06:31,  3.84s/it, gpt_loss=0.571, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1465/6250 [1:30:56<4:55:45,  3.71s/it, gpt_loss=0.571, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1465/6250 [1:31:00<4:55:45,  3.71s/it, gpt_loss=0.639, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1466/6250 [1:31:00<5:08:44,  3.87s/it, gpt_loss=0.639, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1466/6250 [1:31:04<5:08:44,  3.87s/it, gpt_loss=0.681, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1467/6250 [1:31:04<5:08:12,  3.87s/it, gpt_loss=0.681, lr=1.81e-6][A[2025-04-24 01:23:46,437] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  23%|██▎       | 1467/6250 [1:31:07<5:08:12,  3.87s/it, gpt_loss=0.583, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1468/6250 [1:31:07<4:59:59,  3.76s/it, gpt_loss=0.583, lr=1.81e-6][A
Train step of epoch 0:  23%|██▎       | 1468/6250 [1:31:11<4:59:59,  3.76s/it, gpt_loss=0.479, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1469/6250 [1:31:11<4:56:31,  3.72s/it, gpt_loss=0.479, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1469/6250 [1:31:14<4:56:31,  3.72s/it, gpt_loss=0.798, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1470/6250 [1:31:14<4:45:35,  3.58s/it, gpt_loss=0.798, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1470/6250 [1:31:18<4:45:35,  3.58s/it, gpt_loss=0.686, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1471/6250 [1:31:18<4:46:42,  3.60s/it, gpt_loss=0.686, lr=1.81e-6][A[2025-04-24 01:24:00,831] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  24%|██▎       | 1471/6250 [1:31:22<4:46:42,  3.60s/it, gpt_loss=0.655, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1472/6250 [1:31:22<4:53:09,  3.68s/it, gpt_loss=0.655, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1472/6250 [1:31:26<4:53:09,  3.68s/it, gpt_loss=0.644, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1473/6250 [1:31:26<5:00:07,  3.77s/it, gpt_loss=0.644, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1473/6250 [1:31:29<5:00:07,  3.77s/it, gpt_loss=0.763, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1474/6250 [1:31:29<4:53:20,  3.69s/it, gpt_loss=0.763, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1474/6250 [1:31:33<4:53:20,  3.69s/it, gpt_loss=0.528, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1475/6250 [1:31:33<4:51:14,  3.66s/it, gpt_loss=0.528, lr=1.81e-6][A[2025-04-24 01:24:16,559] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  24%|██▎       | 1475/6250 [1:31:37<4:51:14,  3.66s/it, gpt_loss=0.791, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1476/6250 [1:31:37<5:15:09,  3.96s/it, gpt_loss=0.791, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1476/6250 [1:31:41<5:15:09,  3.96s/it, gpt_loss=0.832, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1477/6250 [1:31:41<5:08:36,  3.88s/it, gpt_loss=0.832, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1477/6250 [1:31:44<5:08:36,  3.88s/it, gpt_loss=0.627, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1478/6250 [1:31:44<4:51:36,  3.67s/it, gpt_loss=0.627, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1478/6250 [1:31:48<4:51:36,  3.67s/it, gpt_loss=0.541, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1479/6250 [1:31:48<5:01:01,  3.79s/it, gpt_loss=0.541, lr=1.81e-6][A[2025-04-24 01:24:30,959] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  24%|██▎       | 1479/6250 [1:31:52<5:01:01,  3.79s/it, gpt_loss=0.523, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1480/6250 [1:31:52<4:53:35,  3.69s/it, gpt_loss=0.523, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1480/6250 [1:31:56<4:53:35,  3.69s/it, gpt_loss=0.566, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1481/6250 [1:31:56<5:09:02,  3.89s/it, gpt_loss=0.566, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1481/6250 [1:31:59<5:09:02,  3.89s/it, gpt_loss=0.646, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1482/6250 [1:31:59<4:44:58,  3.59s/it, gpt_loss=0.646, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1482/6250 [1:32:03<4:44:58,  3.59s/it, gpt_loss=0.531, lr=1.81e-6][A
Train step of epoch 0:  24%|██▎       | 1483/6250 [1:32:03<5:03:39,  3.82s/it, gpt_loss=0.531, lr=1.81e-6][A[2025-04-24 01:24:46,675] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  24%|██▎       | 1483/6250 [1:32:07<5:03:39,  3.82s/it, gpt_loss=0.62, lr=1.8e-6]  [A
Train step of epoch 0:  24%|██▎       | 1484/6250 [1:32:07<5:10:40,  3.91s/it, gpt_loss=0.62, lr=1.8e-6][A
Train step of epoch 0:  24%|██▎       | 1484/6250 [1:32:11<5:10:40,  3.91s/it, gpt_loss=0.545, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1485/6250 [1:32:11<5:11:38,  3.92s/it, gpt_loss=0.545, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1485/6250 [1:32:15<5:11:38,  3.92s/it, gpt_loss=0.636, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1486/6250 [1:32:15<4:53:43,  3.70s/it, gpt_loss=0.636, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1486/6250 [1:32:19<4:53:43,  3.70s/it, gpt_loss=0.638, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1487/6250 [1:32:19<5:12:59,  3.94s/it, gpt_loss=0.638, lr=1.8e-6][A[2025-04-24 01:25:01,921] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  24%|██▍       | 1487/6250 [1:32:23<5:12:59,  3.94s/it, gpt_loss=0.716, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1488/6250 [1:32:23<5:04:54,  3.84s/it, gpt_loss=0.716, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1488/6250 [1:32:27<5:04:54,  3.84s/it, gpt_loss=0.69, lr=1.8e-6] [A
Train step of epoch 0:  24%|██▍       | 1489/6250 [1:32:27<5:16:22,  3.99s/it, gpt_loss=0.69, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1489/6250 [1:32:30<5:16:22,  3.99s/it, gpt_loss=0.582, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1490/6250 [1:32:30<4:44:09,  3.58s/it, gpt_loss=0.582, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1490/6250 [1:32:34<4:44:09,  3.58s/it, gpt_loss=0.812, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1491/6250 [1:32:34<4:55:13,  3.72s/it, gpt_loss=0.812, lr=1.8e-6][A[2025-04-24 01:25:16,068] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  24%|██▍       | 1491/6250 [1:32:37<4:55:13,  3.72s/it, gpt_loss=0.613, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1492/6250 [1:32:37<4:41:12,  3.55s/it, gpt_loss=0.613, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1492/6250 [1:32:41<4:41:12,  3.55s/it, gpt_loss=0.552, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1493/6250 [1:32:41<4:53:06,  3.70s/it, gpt_loss=0.552, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1493/6250 [1:32:45<4:53:06,  3.70s/it, gpt_loss=0.494, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1494/6250 [1:32:45<4:52:31,  3.69s/it, gpt_loss=0.494, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1494/6250 [1:32:47<4:52:31,  3.69s/it, gpt_loss=0.554, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1495/6250 [1:32:47<4:33:34,  3.45s/it, gpt_loss=0.554, lr=1.8e-6][A[2025-04-24 01:25:31,369] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  24%|██▍       | 1495/6250 [1:32:52<4:33:34,  3.45s/it, gpt_loss=0.51, lr=1.8e-6] [A
Train step of epoch 0:  24%|██▍       | 1496/6250 [1:32:52<5:02:44,  3.82s/it, gpt_loss=0.51, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1496/6250 [1:32:56<5:02:44,  3.82s/it, gpt_loss=0.668, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1497/6250 [1:32:56<5:10:07,  3.91s/it, gpt_loss=0.668, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1497/6250 [1:32:59<5:10:07,  3.91s/it, gpt_loss=0.553, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1498/6250 [1:32:59<4:47:18,  3.63s/it, gpt_loss=0.553, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1498/6250 [1:33:03<4:47:18,  3.63s/it, gpt_loss=0.474, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1499/6250 [1:33:03<4:59:57,  3.79s/it, gpt_loss=0.474, lr=1.8e-6][A[2025-04-24 01:25:46,010] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  24%|██▍       | 1499/6250 [1:33:07<4:59:57,  3.79s/it, gpt_loss=0.667, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1500/6250 [1:33:07<4:50:21,  3.67s/it, gpt_loss=0.667, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1500/6250 [1:33:10<4:50:21,  3.67s/it, gpt_loss=0.429, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1501/6250 [1:33:10<4:46:31,  3.62s/it, gpt_loss=0.429, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1501/6250 [1:33:14<4:46:31,  3.62s/it, gpt_loss=0.681, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1502/6250 [1:33:14<4:39:58,  3.54s/it, gpt_loss=0.681, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1502/6250 [1:33:18<4:39:58,  3.54s/it, gpt_loss=0.715, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1503/6250 [1:33:18<4:50:59,  3.68s/it, gpt_loss=0.715, lr=1.8e-6][A[2025-04-24 01:26:00,488] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  24%|██▍       | 1503/6250 [1:33:21<4:50:59,  3.68s/it, gpt_loss=0.668, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1504/6250 [1:33:21<4:49:29,  3.66s/it, gpt_loss=0.668, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1504/6250 [1:33:25<4:49:29,  3.66s/it, gpt_loss=0.753, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1505/6250 [1:33:25<4:47:33,  3.64s/it, gpt_loss=0.753, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1505/6250 [1:33:28<4:47:33,  3.64s/it, gpt_loss=0.565, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1506/6250 [1:33:28<4:28:43,  3.40s/it, gpt_loss=0.565, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1506/6250 [1:33:32<4:28:43,  3.40s/it, gpt_loss=0.641, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1507/6250 [1:33:32<4:47:06,  3.63s/it, gpt_loss=0.641, lr=1.8e-6][A[2025-04-24 01:26:14,204] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  24%|██▍       | 1507/6250 [1:33:35<4:47:06,  3.63s/it, gpt_loss=0.513, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1508/6250 [1:33:35<4:34:47,  3.48s/it, gpt_loss=0.513, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1508/6250 [1:33:38<4:34:47,  3.48s/it, gpt_loss=0.742, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1509/6250 [1:33:38<4:30:35,  3.42s/it, gpt_loss=0.742, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1509/6250 [1:33:42<4:30:35,  3.42s/it, gpt_loss=0.661, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1510/6250 [1:33:42<4:31:27,  3.44s/it, gpt_loss=0.661, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1510/6250 [1:33:45<4:31:27,  3.44s/it, gpt_loss=0.593, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1511/6250 [1:33:45<4:19:03,  3.28s/it, gpt_loss=0.593, lr=1.8e-6][A[2025-04-24 01:26:28,453] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  24%|██▍       | 1511/6250 [1:33:49<4:19:03,  3.28s/it, gpt_loss=0.59, lr=1.8e-6] [A
Train step of epoch 0:  24%|██▍       | 1512/6250 [1:33:49<4:49:30,  3.67s/it, gpt_loss=0.59, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1512/6250 [1:33:53<4:49:30,  3.67s/it, gpt_loss=0.678, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1513/6250 [1:33:53<4:49:35,  3.67s/it, gpt_loss=0.678, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1513/6250 [1:33:56<4:49:35,  3.67s/it, gpt_loss=0.669, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1514/6250 [1:33:56<4:37:57,  3.52s/it, gpt_loss=0.669, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1514/6250 [1:34:00<4:37:57,  3.52s/it, gpt_loss=0.749, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1515/6250 [1:34:00<4:57:38,  3.77s/it, gpt_loss=0.749, lr=1.8e-6][A[2025-04-24 01:26:42,454] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  24%|██▍       | 1515/6250 [1:34:03<4:57:38,  3.77s/it, gpt_loss=0.571, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1516/6250 [1:34:03<4:34:26,  3.48s/it, gpt_loss=0.571, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1516/6250 [1:34:07<4:34:26,  3.48s/it, gpt_loss=0.529, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1517/6250 [1:34:07<4:39:00,  3.54s/it, gpt_loss=0.529, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1517/6250 [1:34:11<4:39:00,  3.54s/it, gpt_loss=0.803, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1518/6250 [1:34:11<4:41:18,  3.57s/it, gpt_loss=0.803, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1518/6250 [1:34:14<4:41:18,  3.57s/it, gpt_loss=0.622, lr=1.8e-6][A
Train step of epoch 0:  24%|██▍       | 1519/6250 [1:34:14<4:40:06,  3.55s/it, gpt_loss=0.622, lr=1.8e-6][A[2025-04-24 01:26:56,485] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  24%|██▍       | 1519/6250 [1:34:17<4:40:06,  3.55s/it, gpt_loss=0.522, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1520/6250 [1:34:17<4:31:45,  3.45s/it, gpt_loss=0.522, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1520/6250 [1:34:21<4:31:45,  3.45s/it, gpt_loss=0.747, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1521/6250 [1:34:21<4:46:55,  3.64s/it, gpt_loss=0.747, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1521/6250 [1:34:25<4:46:55,  3.64s/it, gpt_loss=0.503, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1522/6250 [1:34:25<4:48:51,  3.67s/it, gpt_loss=0.503, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1522/6250 [1:34:29<4:48:51,  3.67s/it, gpt_loss=0.702, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1523/6250 [1:34:29<4:58:53,  3.79s/it, gpt_loss=0.702, lr=1.79e-6][A[2025-04-24 01:27:12,422] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  24%|██▍       | 1523/6250 [1:34:33<4:58:53,  3.79s/it, gpt_loss=0.615, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1524/6250 [1:34:33<5:04:22,  3.86s/it, gpt_loss=0.615, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1524/6250 [1:34:37<5:04:22,  3.86s/it, gpt_loss=0.924, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1525/6250 [1:34:37<5:03:55,  3.86s/it, gpt_loss=0.924, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1525/6250 [1:34:40<5:03:55,  3.86s/it, gpt_loss=0.604, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1526/6250 [1:34:40<4:44:54,  3.62s/it, gpt_loss=0.604, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1526/6250 [1:34:43<4:44:54,  3.62s/it, gpt_loss=0.477, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1527/6250 [1:34:43<4:24:31,  3.36s/it, gpt_loss=0.477, lr=1.79e-6][A[2025-04-24 01:27:26,804] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  24%|██▍       | 1527/6250 [1:34:48<4:24:31,  3.36s/it, gpt_loss=0.648, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1528/6250 [1:34:48<4:56:33,  3.77s/it, gpt_loss=0.648, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1528/6250 [1:34:52<4:56:33,  3.77s/it, gpt_loss=0.643, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1529/6250 [1:34:52<5:07:04,  3.90s/it, gpt_loss=0.643, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1529/6250 [1:34:56<5:07:04,  3.90s/it, gpt_loss=0.721, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1530/6250 [1:34:56<5:07:16,  3.91s/it, gpt_loss=0.721, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1530/6250 [1:34:59<5:07:16,  3.91s/it, gpt_loss=0.614, lr=1.79e-6][A
Train step of epoch 0:  24%|██▍       | 1531/6250 [1:34:59<4:42:23,  3.59s/it, gpt_loss=0.614, lr=1.79e-6][A[2025-04-24 01:27:42,321] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  24%|██▍       | 1531/6250 [1:35:03<4:42:23,  3.59s/it, gpt_loss=0.647, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1532/6250 [1:35:03<5:04:32,  3.87s/it, gpt_loss=0.647, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1532/6250 [1:35:07<5:04:32,  3.87s/it, gpt_loss=0.621, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1533/6250 [1:35:07<5:06:42,  3.90s/it, gpt_loss=0.621, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1533/6250 [1:35:10<5:06:42,  3.90s/it, gpt_loss=0.729, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1534/6250 [1:35:10<4:52:17,  3.72s/it, gpt_loss=0.729, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1534/6250 [1:35:14<4:52:17,  3.72s/it, gpt_loss=0.548, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1535/6250 [1:35:14<4:55:44,  3.76s/it, gpt_loss=0.548, lr=1.79e-6][A[2025-04-24 01:27:56,889] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  25%|██▍       | 1535/6250 [1:35:18<4:55:44,  3.76s/it, gpt_loss=0.596, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1536/6250 [1:35:18<4:48:03,  3.67s/it, gpt_loss=0.596, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1536/6250 [1:35:21<4:48:03,  3.67s/it, gpt_loss=0.659, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1537/6250 [1:35:21<4:45:27,  3.63s/it, gpt_loss=0.659, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1537/6250 [1:35:24<4:45:27,  3.63s/it, gpt_loss=0.507, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1538/6250 [1:35:24<4:30:58,  3.45s/it, gpt_loss=0.507, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1538/6250 [1:35:29<4:30:58,  3.45s/it, gpt_loss=0.661, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1539/6250 [1:35:29<4:58:02,  3.80s/it, gpt_loss=0.661, lr=1.79e-6][A[2025-04-24 01:28:11,314] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  25%|██▍       | 1539/6250 [1:35:32<4:58:02,  3.80s/it, gpt_loss=0.639, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1540/6250 [1:35:32<4:44:55,  3.63s/it, gpt_loss=0.639, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1540/6250 [1:35:35<4:44:55,  3.63s/it, gpt_loss=0.633, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1541/6250 [1:35:35<4:24:35,  3.37s/it, gpt_loss=0.633, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1541/6250 [1:35:39<4:24:35,  3.37s/it, gpt_loss=0.541, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1542/6250 [1:35:39<4:42:20,  3.60s/it, gpt_loss=0.541, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1542/6250 [1:35:43<4:42:20,  3.60s/it, gpt_loss=0.577, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1543/6250 [1:35:43<4:41:49,  3.59s/it, gpt_loss=0.577, lr=1.79e-6][A[2025-04-24 01:28:26,446] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  25%|██▍       | 1543/6250 [1:35:47<4:41:49,  3.59s/it, gpt_loss=0.73, lr=1.79e-6] [A
Train step of epoch 0:  25%|██▍       | 1544/6250 [1:35:47<5:06:50,  3.91s/it, gpt_loss=0.73, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1544/6250 [1:35:52<5:06:50,  3.91s/it, gpt_loss=0.744, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1545/6250 [1:35:52<5:22:35,  4.11s/it, gpt_loss=0.744, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1545/6250 [1:35:56<5:22:35,  4.11s/it, gpt_loss=0.533, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1546/6250 [1:35:56<5:25:49,  4.16s/it, gpt_loss=0.533, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1546/6250 [1:36:01<5:25:49,  4.16s/it, gpt_loss=0.641, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1547/6250 [1:36:01<5:44:37,  4.40s/it, gpt_loss=0.641, lr=1.79e-6][A[2025-04-24 01:28:44,928] [WARNING] [stage3.py:2139:step] 8 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  25%|██▍       | 1547/6250 [1:36:06<5:44:37,  4.40s/it, gpt_loss=0.534, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1548/6250 [1:36:06<5:51:18,  4.48s/it, gpt_loss=0.534, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1548/6250 [1:36:10<5:51:18,  4.48s/it, gpt_loss=0.616, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1549/6250 [1:36:10<5:40:48,  4.35s/it, gpt_loss=0.616, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1549/6250 [1:36:13<5:40:48,  4.35s/it, gpt_loss=0.721, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1550/6250 [1:36:13<5:26:59,  4.17s/it, gpt_loss=0.721, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1550/6250 [1:36:16<5:26:59,  4.17s/it, gpt_loss=0.657, lr=1.79e-6][A
Train step of epoch 0:  25%|██▍       | 1551/6250 [1:36:16<4:55:08,  3.77s/it, gpt_loss=0.657, lr=1.79e-6][A[2025-04-24 01:28:59,505] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  25%|██▍       | 1551/6250 [1:36:20<4:55:08,  3.77s/it, gpt_loss=0.627, lr=1.78e-6][A
Train step of epoch 0:  25%|██▍       | 1552/6250 [1:36:20<4:59:23,  3.82s/it, gpt_loss=0.627, lr=1.78e-6][A
Train step of epoch 0:  25%|██▍       | 1552/6250 [1:36:25<4:59:23,  3.82s/it, gpt_loss=0.677, lr=1.78e-6][A
Train step of epoch 0:  25%|██▍       | 1553/6250 [1:36:25<5:09:09,  3.95s/it, gpt_loss=0.677, lr=1.78e-6][A
Train step of epoch 0:  25%|██▍       | 1553/6250 [1:36:29<5:09:09,  3.95s/it, gpt_loss=0.705, lr=1.78e-6][A
Train step of epoch 0:  25%|██▍       | 1554/6250 [1:36:29<5:13:06,  4.00s/it, gpt_loss=0.705, lr=1.78e-6][A
Train step of epoch 0:  25%|██▍       | 1554/6250 [1:36:32<5:13:06,  4.00s/it, gpt_loss=0.725, lr=1.78e-6][A
Train step of epoch 0:  25%|██▍       | 1555/6250 [1:36:32<4:55:34,  3.78s/it, gpt_loss=0.725, lr=1.78e-6][A[2025-04-24 01:29:14,606] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  25%|██▍       | 1555/6250 [1:36:35<4:55:34,  3.78s/it, gpt_loss=0.46, lr=1.78e-6] [A
Train step of epoch 0:  25%|██▍       | 1556/6250 [1:36:35<4:48:33,  3.69s/it, gpt_loss=0.46, lr=1.78e-6][A
Train step of epoch 0:  25%|██▍       | 1556/6250 [1:36:39<4:48:33,  3.69s/it, gpt_loss=0.548, lr=1.78e-6][A
Train step of epoch 0:  25%|██▍       | 1557/6250 [1:36:39<4:49:03,  3.70s/it, gpt_loss=0.548, lr=1.78e-6][A
Train step of epoch 0:  25%|██▍       | 1557/6250 [1:36:43<4:49:03,  3.70s/it, gpt_loss=0.744, lr=1.78e-6][A
Train step of epoch 0:  25%|██▍       | 1558/6250 [1:36:43<4:54:51,  3.77s/it, gpt_loss=0.744, lr=1.78e-6][A
Train step of epoch 0:  25%|██▍       | 1558/6250 [1:36:46<4:54:51,  3.77s/it, gpt_loss=0.772, lr=1.78e-6][A
Train step of epoch 0:  25%|██▍       | 1559/6250 [1:36:46<4:47:39,  3.68s/it, gpt_loss=0.772, lr=1.78e-6][A[2025-04-24 01:29:29,282] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  25%|██▍       | 1559/6250 [1:36:50<4:47:39,  3.68s/it, gpt_loss=0.697, lr=1.78e-6][A
Train step of epoch 0:  25%|██▍       | 1560/6250 [1:36:50<4:44:35,  3.64s/it, gpt_loss=0.697, lr=1.78e-6][A
Train step of epoch 0:  25%|██▍       | 1560/6250 [1:36:54<4:44:35,  3.64s/it, gpt_loss=0.731, lr=1.78e-6][A
Train step of epoch 0:  25%|██▍       | 1561/6250 [1:36:54<4:41:23,  3.60s/it, gpt_loss=0.731, lr=1.78e-6][A
Train step of epoch 0:  25%|██▍       | 1561/6250 [1:36:57<4:41:23,  3.60s/it, gpt_loss=0.712, lr=1.78e-6][A
Train step of epoch 0:  25%|██▍       | 1562/6250 [1:36:57<4:37:29,  3.55s/it, gpt_loss=0.712, lr=1.78e-6][A
Train step of epoch 0:  25%|██▍       | 1562/6250 [1:37:01<4:37:29,  3.55s/it, gpt_loss=0.454, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1563/6250 [1:37:01<4:51:55,  3.74s/it, gpt_loss=0.454, lr=1.78e-6][A[2025-04-24 01:29:44,063] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  25%|██▌       | 1563/6250 [1:37:05<4:51:55,  3.74s/it, gpt_loss=0.486, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1564/6250 [1:37:05<4:50:13,  3.72s/it, gpt_loss=0.486, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1564/6250 [1:37:09<4:50:13,  3.72s/it, gpt_loss=0.557, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1565/6250 [1:37:09<4:58:01,  3.82s/it, gpt_loss=0.557, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1565/6250 [1:37:12<4:58:01,  3.82s/it, gpt_loss=0.738, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1566/6250 [1:37:12<4:37:36,  3.56s/it, gpt_loss=0.738, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1566/6250 [1:37:16<4:37:36,  3.56s/it, gpt_loss=0.553, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1567/6250 [1:37:16<4:52:43,  3.75s/it, gpt_loss=0.553, lr=1.78e-6][A[2025-04-24 01:29:58,695] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  25%|██▌       | 1567/6250 [1:37:19<4:52:43,  3.75s/it, gpt_loss=0.572, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1568/6250 [1:37:19<4:45:08,  3.65s/it, gpt_loss=0.572, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1568/6250 [1:37:24<4:45:08,  3.65s/it, gpt_loss=0.608, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1569/6250 [1:37:24<5:00:53,  3.86s/it, gpt_loss=0.608, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1569/6250 [1:37:29<5:00:53,  3.86s/it, gpt_loss=0.821, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1570/6250 [1:37:29<5:23:35,  4.15s/it, gpt_loss=0.821, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1570/6250 [1:37:32<5:23:35,  4.15s/it, gpt_loss=0.58, lr=1.78e-6] [A
Train step of epoch 0:  25%|██▌       | 1571/6250 [1:37:32<5:04:47,  3.91s/it, gpt_loss=0.58, lr=1.78e-6][A[2025-04-24 01:30:14,913] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  25%|██▌       | 1571/6250 [1:37:36<5:04:47,  3.91s/it, gpt_loss=0.526, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1572/6250 [1:37:36<5:00:07,  3.85s/it, gpt_loss=0.526, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1572/6250 [1:37:40<5:00:07,  3.85s/it, gpt_loss=0.62, lr=1.78e-6] [A
Train step of epoch 0:  25%|██▌       | 1573/6250 [1:37:40<5:15:40,  4.05s/it, gpt_loss=0.62, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1573/6250 [1:37:44<5:15:40,  4.05s/it, gpt_loss=0.601, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1574/6250 [1:37:44<5:07:16,  3.94s/it, gpt_loss=0.601, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1574/6250 [1:37:48<5:07:16,  3.94s/it, gpt_loss=0.717, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1575/6250 [1:37:48<5:06:20,  3.93s/it, gpt_loss=0.717, lr=1.78e-6][A[2025-04-24 01:30:30,967] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  25%|██▌       | 1575/6250 [1:37:52<5:06:20,  3.93s/it, gpt_loss=0.653, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1576/6250 [1:37:52<5:06:23,  3.93s/it, gpt_loss=0.653, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1576/6250 [1:37:56<5:06:23,  3.93s/it, gpt_loss=0.78, lr=1.78e-6] [A
Train step of epoch 0:  25%|██▌       | 1577/6250 [1:37:56<5:04:24,  3.91s/it, gpt_loss=0.78, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1577/6250 [1:38:01<5:04:24,  3.91s/it, gpt_loss=0.719, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1578/6250 [1:38:01<5:30:33,  4.25s/it, gpt_loss=0.719, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1578/6250 [1:38:03<5:30:33,  4.25s/it, gpt_loss=0.492, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1579/6250 [1:38:03<4:54:50,  3.79s/it, gpt_loss=0.492, lr=1.78e-6][A[2025-04-24 01:30:46,393] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  25%|██▌       | 1579/6250 [1:38:07<4:54:50,  3.79s/it, gpt_loss=0.774, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1580/6250 [1:38:07<4:55:40,  3.80s/it, gpt_loss=0.774, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1580/6250 [1:38:11<4:55:40,  3.80s/it, gpt_loss=0.567, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1581/6250 [1:38:11<5:00:55,  3.87s/it, gpt_loss=0.567, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1581/6250 [1:38:14<5:00:55,  3.87s/it, gpt_loss=0.475, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1582/6250 [1:38:14<4:35:47,  3.54s/it, gpt_loss=0.475, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1582/6250 [1:38:18<4:35:47,  3.54s/it, gpt_loss=0.826, lr=1.78e-6][A
Train step of epoch 0:  25%|██▌       | 1583/6250 [1:38:18<4:55:50,  3.80s/it, gpt_loss=0.826, lr=1.78e-6][A[2025-04-24 01:31:00,865] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  25%|██▌       | 1583/6250 [1:38:22<4:55:50,  3.80s/it, gpt_loss=0.455, lr=1.77e-6][A
Train step of epoch 0:  25%|██▌       | 1584/6250 [1:38:22<4:42:48,  3.64s/it, gpt_loss=0.455, lr=1.77e-6][A
Train step of epoch 0:  25%|██▌       | 1584/6250 [1:38:25<4:42:48,  3.64s/it, gpt_loss=0.615, lr=1.77e-6][A
Train step of epoch 0:  25%|██▌       | 1585/6250 [1:38:25<4:39:01,  3.59s/it, gpt_loss=0.615, lr=1.77e-6][A
Train step of epoch 0:  25%|██▌       | 1585/6250 [1:38:29<4:39:01,  3.59s/it, gpt_loss=0.513, lr=1.77e-6][A
Train step of epoch 0:  25%|██▌       | 1586/6250 [1:38:29<4:46:18,  3.68s/it, gpt_loss=0.513, lr=1.77e-6][A
Train step of epoch 0:  25%|██▌       | 1586/6250 [1:38:33<4:46:18,  3.68s/it, gpt_loss=0.61, lr=1.77e-6] [A
Train step of epoch 0:  25%|██▌       | 1587/6250 [1:38:33<4:44:17,  3.66s/it, gpt_loss=0.61, lr=1.77e-6][A[2025-04-24 01:31:16,267] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  25%|██▌       | 1587/6250 [1:38:37<4:44:17,  3.66s/it, gpt_loss=0.744, lr=1.77e-6][A
Train step of epoch 0:  25%|██▌       | 1588/6250 [1:38:37<5:02:00,  3.89s/it, gpt_loss=0.744, lr=1.77e-6][A
Train step of epoch 0:  25%|██▌       | 1588/6250 [1:38:41<5:02:00,  3.89s/it, gpt_loss=0.581, lr=1.77e-6][A
Train step of epoch 0:  25%|██▌       | 1589/6250 [1:38:41<5:07:55,  3.96s/it, gpt_loss=0.581, lr=1.77e-6][A
Train step of epoch 0:  25%|██▌       | 1589/6250 [1:38:46<5:07:55,  3.96s/it, gpt_loss=0.619, lr=1.77e-6][A
Train step of epoch 0:  25%|██▌       | 1590/6250 [1:38:46<5:21:03,  4.13s/it, gpt_loss=0.619, lr=1.77e-6][A
Train step of epoch 0:  25%|██▌       | 1590/6250 [1:38:48<5:21:03,  4.13s/it, gpt_loss=0.61, lr=1.77e-6] [A
Train step of epoch 0:  25%|██▌       | 1591/6250 [1:38:48<4:47:15,  3.70s/it, gpt_loss=0.61, lr=1.77e-6][A[2025-04-24 01:31:30,964] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  25%|██▌       | 1591/6250 [1:38:52<4:47:15,  3.70s/it, gpt_loss=0.538, lr=1.77e-6][A
Train step of epoch 0:  25%|██▌       | 1592/6250 [1:38:52<4:38:45,  3.59s/it, gpt_loss=0.538, lr=1.77e-6][A
Train step of epoch 0:  25%|██▌       | 1592/6250 [1:38:55<4:38:45,  3.59s/it, gpt_loss=0.586, lr=1.77e-6][A
Train step of epoch 0:  25%|██▌       | 1593/6250 [1:38:55<4:41:32,  3.63s/it, gpt_loss=0.586, lr=1.77e-6][A
Train step of epoch 0:  25%|██▌       | 1593/6250 [1:38:59<4:41:32,  3.63s/it, gpt_loss=0.563, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1594/6250 [1:38:59<4:37:38,  3.58s/it, gpt_loss=0.563, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1594/6250 [1:39:03<4:37:38,  3.58s/it, gpt_loss=0.61, lr=1.77e-6] [A
Train step of epoch 0:  26%|██▌       | 1595/6250 [1:39:03<4:58:19,  3.85s/it, gpt_loss=0.61, lr=1.77e-6][A[2025-04-24 01:31:45,851] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  26%|██▌       | 1595/6250 [1:39:07<4:58:19,  3.85s/it, gpt_loss=0.682, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1596/6250 [1:39:07<4:44:14,  3.66s/it, gpt_loss=0.682, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1596/6250 [1:39:10<4:44:14,  3.66s/it, gpt_loss=0.735, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1597/6250 [1:39:10<4:27:34,  3.45s/it, gpt_loss=0.735, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1597/6250 [1:39:14<4:27:34,  3.45s/it, gpt_loss=0.7, lr=1.77e-6]  [A
Train step of epoch 0:  26%|██▌       | 1598/6250 [1:39:14<4:52:49,  3.78s/it, gpt_loss=0.7, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1598/6250 [1:39:18<4:52:49,  3.78s/it, gpt_loss=0.695, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1599/6250 [1:39:18<4:52:51,  3.78s/it, gpt_loss=0.695, lr=1.77e-6][A[2025-04-24 01:32:00,537] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-04-24 01:32:00,538] [INFO] [logging.py:107:log_dist] [Rank 0] step=400, skipped=0, lr=[1.7694543800879727e-06, 1.7694543800879727e-06], mom=[(0.9, 0.95), (0.9, 0.95)]
[2025-04-24 01:32:00,538] [INFO] [timer.py:264:stop] epoch=0/micro_step=1600/global_step=400, RunningAvgSamplesPerSec=2.2341758447354363, CurrSamplesPerSec=2.259827779096132, MemAllocated=37.57GB, MaxMemAllocated=60.14GB

Train step of epoch 0:  26%|██▌       | 1599/6250 [1:39:21<4:52:51,  3.78s/it, gpt_loss=0.446, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1600/6250 [1:39:21<4:44:23,  3.67s/it, gpt_loss=0.446, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1600/6250 [1:39:26<4:44:23,  3.67s/it, gpt_loss=0.626, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1601/6250 [1:39:26<5:11:36,  4.02s/it, gpt_loss=0.626, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1601/6250 [1:39:31<5:11:36,  4.02s/it, gpt_loss=0.712, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1602/6250 [1:39:31<5:28:24,  4.24s/it, gpt_loss=0.712, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1602/6250 [1:39:34<5:28:24,  4.24s/it, gpt_loss=0.575, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1603/6250 [1:39:34<5:02:13,  3.90s/it, gpt_loss=0.575, lr=1.77e-6][A[2025-04-24 01:32:16,925] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  26%|██▌       | 1603/6250 [1:39:38<5:02:13,  3.90s/it, gpt_loss=0.499, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1604/6250 [1:39:38<4:57:01,  3.84s/it, gpt_loss=0.499, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1604/6250 [1:39:42<4:57:01,  3.84s/it, gpt_loss=0.52, lr=1.77e-6] [A
Train step of epoch 0:  26%|██▌       | 1605/6250 [1:39:42<4:57:09,  3.84s/it, gpt_loss=0.52, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1605/6250 [1:39:45<4:57:09,  3.84s/it, gpt_loss=0.807, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1606/6250 [1:39:45<4:42:25,  3.65s/it, gpt_loss=0.807, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1606/6250 [1:39:49<4:42:25,  3.65s/it, gpt_loss=0.651, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1607/6250 [1:39:49<4:52:02,  3.77s/it, gpt_loss=0.651, lr=1.77e-6][A[2025-04-24 01:32:32,238] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  26%|██▌       | 1607/6250 [1:39:53<4:52:02,  3.77s/it, gpt_loss=0.72, lr=1.77e-6] [A
Train step of epoch 0:  26%|██▌       | 1608/6250 [1:39:53<5:01:47,  3.90s/it, gpt_loss=0.72, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1608/6250 [1:39:57<5:01:47,  3.90s/it, gpt_loss=0.548, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1609/6250 [1:39:57<5:13:27,  4.05s/it, gpt_loss=0.548, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1609/6250 [1:40:01<5:13:27,  4.05s/it, gpt_loss=0.631, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1610/6250 [1:40:01<5:07:27,  3.98s/it, gpt_loss=0.631, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1610/6250 [1:40:05<5:07:27,  3.98s/it, gpt_loss=0.527, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1611/6250 [1:40:05<5:06:54,  3.97s/it, gpt_loss=0.527, lr=1.77e-6][A[2025-04-24 01:32:48,218] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  26%|██▌       | 1611/6250 [1:40:09<5:06:54,  3.97s/it, gpt_loss=0.731, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1612/6250 [1:40:09<5:03:24,  3.93s/it, gpt_loss=0.731, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1612/6250 [1:40:12<5:03:24,  3.93s/it, gpt_loss=0.58, lr=1.77e-6] [A
Train step of epoch 0:  26%|██▌       | 1613/6250 [1:40:12<4:50:45,  3.76s/it, gpt_loss=0.58, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1613/6250 [1:40:17<4:50:45,  3.76s/it, gpt_loss=0.543, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1614/6250 [1:40:17<5:04:07,  3.94s/it, gpt_loss=0.543, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1614/6250 [1:40:21<5:04:07,  3.94s/it, gpt_loss=0.482, lr=1.77e-6][A
Train step of epoch 0:  26%|██▌       | 1615/6250 [1:40:21<5:11:42,  4.04s/it, gpt_loss=0.482, lr=1.77e-6][A[2025-04-24 01:33:03,866] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  26%|██▌       | 1615/6250 [1:40:25<5:11:42,  4.04s/it, gpt_loss=0.689, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1616/6250 [1:40:25<5:02:54,  3.92s/it, gpt_loss=0.689, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1616/6250 [1:40:28<5:02:54,  3.92s/it, gpt_loss=0.658, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1617/6250 [1:40:28<4:56:46,  3.84s/it, gpt_loss=0.658, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1617/6250 [1:40:31<4:56:46,  3.84s/it, gpt_loss=0.551, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1618/6250 [1:40:31<4:37:50,  3.60s/it, gpt_loss=0.551, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1618/6250 [1:40:36<4:37:50,  3.60s/it, gpt_loss=0.638, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1619/6250 [1:40:36<4:56:12,  3.84s/it, gpt_loss=0.638, lr=1.76e-6][A[2025-04-24 01:33:18,575] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  26%|██▌       | 1619/6250 [1:40:39<4:56:12,  3.84s/it, gpt_loss=0.554, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1620/6250 [1:40:39<4:51:14,  3.77s/it, gpt_loss=0.554, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1620/6250 [1:40:42<4:51:14,  3.77s/it, gpt_loss=0.48, lr=1.76e-6] [A
Train step of epoch 0:  26%|██▌       | 1621/6250 [1:40:42<4:33:54,  3.55s/it, gpt_loss=0.48, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1621/6250 [1:40:45<4:33:54,  3.55s/it, gpt_loss=0.612, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1622/6250 [1:40:45<4:23:27,  3.42s/it, gpt_loss=0.612, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1622/6250 [1:40:50<4:23:27,  3.42s/it, gpt_loss=0.755, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1623/6250 [1:40:50<4:38:51,  3.62s/it, gpt_loss=0.755, lr=1.76e-6][A[2025-04-24 01:33:32,768] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  26%|██▌       | 1623/6250 [1:40:54<4:38:51,  3.62s/it, gpt_loss=0.575, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1624/6250 [1:40:54<4:47:13,  3.73s/it, gpt_loss=0.575, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1624/6250 [1:40:57<4:47:13,  3.73s/it, gpt_loss=0.589, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1625/6250 [1:40:57<4:36:28,  3.59s/it, gpt_loss=0.589, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1625/6250 [1:41:01<4:36:28,  3.59s/it, gpt_loss=0.485, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1626/6250 [1:41:01<4:42:25,  3.66s/it, gpt_loss=0.485, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1626/6250 [1:41:05<4:42:25,  3.66s/it, gpt_loss=0.819, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1627/6250 [1:41:05<4:49:21,  3.76s/it, gpt_loss=0.819, lr=1.76e-6][A[2025-04-24 01:33:47,344] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  26%|██▌       | 1627/6250 [1:41:08<4:49:21,  3.76s/it, gpt_loss=0.65, lr=1.76e-6] [A
Train step of epoch 0:  26%|██▌       | 1628/6250 [1:41:08<4:43:21,  3.68s/it, gpt_loss=0.65, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1628/6250 [1:41:12<4:43:21,  3.68s/it, gpt_loss=0.694, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1629/6250 [1:41:12<4:56:11,  3.85s/it, gpt_loss=0.694, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1629/6250 [1:41:16<4:56:11,  3.85s/it, gpt_loss=0.787, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1630/6250 [1:41:16<4:58:47,  3.88s/it, gpt_loss=0.787, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1630/6250 [1:41:19<4:58:47,  3.88s/it, gpt_loss=0.561, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1631/6250 [1:41:19<4:40:48,  3.65s/it, gpt_loss=0.561, lr=1.76e-6][A[2025-04-24 01:34:02,793] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  26%|██▌       | 1631/6250 [1:41:24<4:40:48,  3.65s/it, gpt_loss=0.692, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1632/6250 [1:41:24<4:52:16,  3.80s/it, gpt_loss=0.692, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1632/6250 [1:41:27<4:52:16,  3.80s/it, gpt_loss=0.496, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1633/6250 [1:41:27<4:38:41,  3.62s/it, gpt_loss=0.496, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1633/6250 [1:41:31<4:38:41,  3.62s/it, gpt_loss=0.721, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1634/6250 [1:41:31<4:59:47,  3.90s/it, gpt_loss=0.721, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1634/6250 [1:41:35<4:59:47,  3.90s/it, gpt_loss=0.495, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1635/6250 [1:41:35<4:47:35,  3.74s/it, gpt_loss=0.495, lr=1.76e-6][A[2025-04-24 01:34:17,542] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  26%|██▌       | 1635/6250 [1:41:38<4:47:35,  3.74s/it, gpt_loss=0.482, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1636/6250 [1:41:38<4:44:57,  3.71s/it, gpt_loss=0.482, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1636/6250 [1:41:42<4:44:57,  3.71s/it, gpt_loss=0.628, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1637/6250 [1:41:42<4:45:09,  3.71s/it, gpt_loss=0.628, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1637/6250 [1:41:44<4:45:09,  3.71s/it, gpt_loss=0.553, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1638/6250 [1:41:44<4:10:36,  3.26s/it, gpt_loss=0.553, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1638/6250 [1:41:49<4:10:36,  3.26s/it, gpt_loss=0.777, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1639/6250 [1:41:49<4:37:42,  3.61s/it, gpt_loss=0.777, lr=1.76e-6][A[2025-04-24 01:34:31,551] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  26%|██▌       | 1639/6250 [1:41:52<4:37:42,  3.61s/it, gpt_loss=0.808, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1640/6250 [1:41:52<4:38:15,  3.62s/it, gpt_loss=0.808, lr=1.76e-6][A
Train step of epoch 0:  26%|██▌       | 1640/6250 [1:41:57<4:38:15,  3.62s/it, gpt_loss=0.702, lr=1.76e-6][A
Train step of epoch 0:  26%|██▋       | 1641/6250 [1:41:57<4:56:58,  3.87s/it, gpt_loss=0.702, lr=1.76e-6][A
Train step of epoch 0:  26%|██▋       | 1641/6250 [1:42:01<4:56:58,  3.87s/it, gpt_loss=0.7, lr=1.76e-6]  [A
Train step of epoch 0:  26%|██▋       | 1642/6250 [1:42:01<5:00:01,  3.91s/it, gpt_loss=0.7, lr=1.76e-6][A
Train step of epoch 0:  26%|██▋       | 1642/6250 [1:42:05<5:00:01,  3.91s/it, gpt_loss=0.578, lr=1.76e-6][A
Train step of epoch 0:  26%|██▋       | 1643/6250 [1:42:05<4:56:52,  3.87s/it, gpt_loss=0.578, lr=1.76e-6][A[2025-04-24 01:34:47,907] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  26%|██▋       | 1643/6250 [1:42:09<4:56:52,  3.87s/it, gpt_loss=0.716, lr=1.76e-6][A
Train step of epoch 0:  26%|██▋       | 1644/6250 [1:42:09<5:03:16,  3.95s/it, gpt_loss=0.716, lr=1.76e-6][A
Train step of epoch 0:  26%|██▋       | 1644/6250 [1:42:12<5:03:16,  3.95s/it, gpt_loss=0.797, lr=1.76e-6][A
Train step of epoch 0:  26%|██▋       | 1645/6250 [1:42:12<4:54:44,  3.84s/it, gpt_loss=0.797, lr=1.76e-6][A
Train step of epoch 0:  26%|██▋       | 1645/6250 [1:42:15<4:54:44,  3.84s/it, gpt_loss=0.648, lr=1.76e-6][A
Train step of epoch 0:  26%|██▋       | 1646/6250 [1:42:15<4:33:17,  3.56s/it, gpt_loss=0.648, lr=1.76e-6][A
Train step of epoch 0:  26%|██▋       | 1646/6250 [1:42:19<4:33:17,  3.56s/it, gpt_loss=0.636, lr=1.76e-6][A
Train step of epoch 0:  26%|██▋       | 1647/6250 [1:42:19<4:44:23,  3.71s/it, gpt_loss=0.636, lr=1.76e-6][A[2025-04-24 01:35:02,106] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  26%|██▋       | 1647/6250 [1:42:23<4:44:23,  3.71s/it, gpt_loss=0.614, lr=1.75e-6][A
Train step of epoch 0:  26%|██▋       | 1648/6250 [1:42:23<4:43:12,  3.69s/it, gpt_loss=0.614, lr=1.75e-6][A
Train step of epoch 0:  26%|██▋       | 1648/6250 [1:42:27<4:43:12,  3.69s/it, gpt_loss=0.756, lr=1.75e-6][A
Train step of epoch 0:  26%|██▋       | 1649/6250 [1:42:27<4:55:08,  3.85s/it, gpt_loss=0.756, lr=1.75e-6][A
Train step of epoch 0:  26%|██▋       | 1649/6250 [1:42:32<4:55:08,  3.85s/it, gpt_loss=0.632, lr=1.75e-6][A
Train step of epoch 0:  26%|██▋       | 1650/6250 [1:42:32<5:10:36,  4.05s/it, gpt_loss=0.632, lr=1.75e-6][A
Train step of epoch 0:  26%|██▋       | 1650/6250 [1:42:35<5:10:36,  4.05s/it, gpt_loss=0.667, lr=1.75e-6][A
Train step of epoch 0:  26%|██▋       | 1651/6250 [1:42:35<5:06:16,  4.00s/it, gpt_loss=0.667, lr=1.75e-6][A[2025-04-24 01:35:18,413] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  26%|██▋       | 1651/6250 [1:42:39<5:06:16,  4.00s/it, gpt_loss=0.621, lr=1.75e-6][A
Train step of epoch 0:  26%|██▋       | 1652/6250 [1:42:39<4:59:27,  3.91s/it, gpt_loss=0.621, lr=1.75e-6][A
Train step of epoch 0:  26%|██▋       | 1652/6250 [1:42:42<4:59:27,  3.91s/it, gpt_loss=0.573, lr=1.75e-6][A
Train step of epoch 0:  26%|██▋       | 1653/6250 [1:42:42<4:42:46,  3.69s/it, gpt_loss=0.573, lr=1.75e-6][A
Train step of epoch 0:  26%|██▋       | 1653/6250 [1:42:46<4:42:46,  3.69s/it, gpt_loss=0.76, lr=1.75e-6] [A
Train step of epoch 0:  26%|██▋       | 1654/6250 [1:42:46<4:52:37,  3.82s/it, gpt_loss=0.76, lr=1.75e-6][A
Train step of epoch 0:  26%|██▋       | 1654/6250 [1:42:49<4:52:37,  3.82s/it, gpt_loss=0.699, lr=1.75e-6][A
Train step of epoch 0:  26%|██▋       | 1655/6250 [1:42:49<4:32:35,  3.56s/it, gpt_loss=0.699, lr=1.75e-6][A[2025-04-24 01:35:31,608] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  26%|██▋       | 1655/6250 [1:42:52<4:32:35,  3.56s/it, gpt_loss=0.613, lr=1.75e-6][A
Train step of epoch 0:  26%|██▋       | 1656/6250 [1:42:52<4:18:15,  3.37s/it, gpt_loss=0.613, lr=1.75e-6][A
Train step of epoch 0:  26%|██▋       | 1656/6250 [1:42:57<4:18:15,  3.37s/it, gpt_loss=0.595, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1657/6250 [1:42:57<4:54:45,  3.85s/it, gpt_loss=0.595, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1657/6250 [1:43:02<4:54:45,  3.85s/it, gpt_loss=0.498, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1658/6250 [1:43:02<5:09:19,  4.04s/it, gpt_loss=0.498, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1658/6250 [1:43:06<5:09:19,  4.04s/it, gpt_loss=0.566, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1659/6250 [1:43:06<5:16:03,  4.13s/it, gpt_loss=0.566, lr=1.75e-6][A[2025-04-24 01:35:48,449] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  27%|██▋       | 1659/6250 [1:43:09<5:16:03,  4.13s/it, gpt_loss=0.724, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1660/6250 [1:43:09<4:51:11,  3.81s/it, gpt_loss=0.724, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1660/6250 [1:43:13<4:51:11,  3.81s/it, gpt_loss=0.734, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1661/6250 [1:43:13<4:48:14,  3.77s/it, gpt_loss=0.734, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1661/6250 [1:43:16<4:48:14,  3.77s/it, gpt_loss=0.813, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1662/6250 [1:43:16<4:33:50,  3.58s/it, gpt_loss=0.813, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1662/6250 [1:43:19<4:33:50,  3.58s/it, gpt_loss=0.639, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1663/6250 [1:43:19<4:24:05,  3.45s/it, gpt_loss=0.639, lr=1.75e-6][A[2025-04-24 01:36:02,924] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  27%|██▋       | 1663/6250 [1:43:24<4:24:05,  3.45s/it, gpt_loss=0.587, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1664/6250 [1:43:24<4:47:49,  3.77s/it, gpt_loss=0.587, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1664/6250 [1:43:27<4:47:49,  3.77s/it, gpt_loss=0.502, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1665/6250 [1:43:27<4:33:52,  3.58s/it, gpt_loss=0.502, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1665/6250 [1:43:32<4:33:52,  3.58s/it, gpt_loss=0.704, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1666/6250 [1:43:32<5:06:19,  4.01s/it, gpt_loss=0.704, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1666/6250 [1:43:36<5:06:19,  4.01s/it, gpt_loss=0.799, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1667/6250 [1:43:36<5:02:14,  3.96s/it, gpt_loss=0.799, lr=1.75e-6][A[2025-04-24 01:36:18,368] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  27%|██▋       | 1667/6250 [1:43:39<5:02:14,  3.96s/it, gpt_loss=0.831, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1668/6250 [1:43:39<4:50:30,  3.80s/it, gpt_loss=0.831, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1668/6250 [1:43:43<4:50:30,  3.80s/it, gpt_loss=0.566, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1669/6250 [1:43:43<4:51:35,  3.82s/it, gpt_loss=0.566, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1669/6250 [1:43:46<4:51:35,  3.82s/it, gpt_loss=0.677, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1670/6250 [1:43:46<4:44:17,  3.72s/it, gpt_loss=0.677, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1670/6250 [1:43:50<4:44:17,  3.72s/it, gpt_loss=0.632, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1671/6250 [1:43:50<4:38:39,  3.65s/it, gpt_loss=0.632, lr=1.75e-6][A[2025-04-24 01:36:32,664] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  27%|██▋       | 1671/6250 [1:43:53<4:38:39,  3.65s/it, gpt_loss=0.627, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1672/6250 [1:43:53<4:34:09,  3.59s/it, gpt_loss=0.627, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1672/6250 [1:43:57<4:34:09,  3.59s/it, gpt_loss=0.624, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1673/6250 [1:43:57<4:37:27,  3.64s/it, gpt_loss=0.624, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1673/6250 [1:44:01<4:37:27,  3.64s/it, gpt_loss=0.638, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1674/6250 [1:44:01<4:48:56,  3.79s/it, gpt_loss=0.638, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1674/6250 [1:44:05<4:48:56,  3.79s/it, gpt_loss=0.513, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1675/6250 [1:44:05<4:42:08,  3.70s/it, gpt_loss=0.513, lr=1.75e-6][A[2025-04-24 01:36:47,828] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  27%|██▋       | 1675/6250 [1:44:09<4:42:08,  3.70s/it, gpt_loss=0.655, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1676/6250 [1:44:09<4:44:05,  3.73s/it, gpt_loss=0.655, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1676/6250 [1:44:13<4:44:05,  3.73s/it, gpt_loss=0.557, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1677/6250 [1:44:13<5:02:01,  3.96s/it, gpt_loss=0.557, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1677/6250 [1:44:16<5:02:01,  3.96s/it, gpt_loss=0.537, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1678/6250 [1:44:16<4:47:30,  3.77s/it, gpt_loss=0.537, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1678/6250 [1:44:19<4:47:30,  3.77s/it, gpt_loss=0.603, lr=1.75e-6][A
Train step of epoch 0:  27%|██▋       | 1679/6250 [1:44:19<4:22:02,  3.44s/it, gpt_loss=0.603, lr=1.75e-6][A[2025-04-24 01:37:02,428] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  27%|██▋       | 1679/6250 [1:44:23<4:22:02,  3.44s/it, gpt_loss=0.588, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1680/6250 [1:44:23<4:36:57,  3.64s/it, gpt_loss=0.588, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1680/6250 [1:44:27<4:36:57,  3.64s/it, gpt_loss=0.717, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1681/6250 [1:44:27<4:52:00,  3.83s/it, gpt_loss=0.717, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1681/6250 [1:44:32<4:52:00,  3.83s/it, gpt_loss=0.77, lr=1.74e-6] [A
Train step of epoch 0:  27%|██▋       | 1682/6250 [1:44:32<5:11:16,  4.09s/it, gpt_loss=0.77, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1682/6250 [1:44:37<5:11:16,  4.09s/it, gpt_loss=0.813, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1683/6250 [1:44:37<5:26:13,  4.29s/it, gpt_loss=0.813, lr=1.74e-6][A[2025-04-24 01:37:19,492] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  27%|██▋       | 1683/6250 [1:44:40<5:26:13,  4.29s/it, gpt_loss=0.681, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1684/6250 [1:44:40<5:04:31,  4.00s/it, gpt_loss=0.681, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1684/6250 [1:44:44<5:04:31,  4.00s/it, gpt_loss=0.701, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1685/6250 [1:44:44<5:03:50,  3.99s/it, gpt_loss=0.701, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1685/6250 [1:44:48<5:03:50,  3.99s/it, gpt_loss=0.795, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1686/6250 [1:44:48<5:04:47,  4.01s/it, gpt_loss=0.795, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1686/6250 [1:44:52<5:04:47,  4.01s/it, gpt_loss=0.844, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1687/6250 [1:44:52<5:05:09,  4.01s/it, gpt_loss=0.844, lr=1.74e-6][A[2025-04-24 01:37:35,315] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  27%|██▋       | 1687/6250 [1:44:56<5:05:09,  4.01s/it, gpt_loss=0.532, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1688/6250 [1:44:56<4:59:52,  3.94s/it, gpt_loss=0.532, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1688/6250 [1:44:59<4:59:52,  3.94s/it, gpt_loss=0.672, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1689/6250 [1:44:59<4:46:59,  3.78s/it, gpt_loss=0.672, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1689/6250 [1:45:04<4:46:59,  3.78s/it, gpt_loss=0.597, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1690/6250 [1:45:04<4:59:12,  3.94s/it, gpt_loss=0.597, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1690/6250 [1:45:08<4:59:12,  3.94s/it, gpt_loss=0.619, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1691/6250 [1:45:08<5:09:23,  4.07s/it, gpt_loss=0.619, lr=1.74e-6][A[2025-04-24 01:37:50,902] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  27%|██▋       | 1691/6250 [1:45:12<5:09:23,  4.07s/it, gpt_loss=0.498, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1692/6250 [1:45:12<4:56:24,  3.90s/it, gpt_loss=0.498, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1692/6250 [1:45:15<4:56:24,  3.90s/it, gpt_loss=0.509, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1693/6250 [1:45:15<4:46:33,  3.77s/it, gpt_loss=0.509, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1693/6250 [1:45:20<4:46:33,  3.77s/it, gpt_loss=0.63, lr=1.74e-6] [A
Train step of epoch 0:  27%|██▋       | 1694/6250 [1:45:20<5:08:25,  4.06s/it, gpt_loss=0.63, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1694/6250 [1:45:23<5:08:25,  4.06s/it, gpt_loss=0.567, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1695/6250 [1:45:23<4:54:14,  3.88s/it, gpt_loss=0.567, lr=1.74e-6][A[2025-04-24 01:38:06,320] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  27%|██▋       | 1695/6250 [1:45:27<4:54:14,  3.88s/it, gpt_loss=0.607, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1696/6250 [1:45:27<4:51:43,  3.84s/it, gpt_loss=0.607, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1696/6250 [1:45:31<4:51:43,  3.84s/it, gpt_loss=0.611, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1697/6250 [1:45:31<5:02:44,  3.99s/it, gpt_loss=0.611, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1697/6250 [1:45:35<5:02:44,  3.99s/it, gpt_loss=0.633, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1698/6250 [1:45:35<4:45:27,  3.76s/it, gpt_loss=0.633, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1698/6250 [1:45:39<4:45:27,  3.76s/it, gpt_loss=0.572, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1699/6250 [1:45:39<4:51:16,  3.84s/it, gpt_loss=0.572, lr=1.74e-6][A[2025-04-24 01:38:21,712] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  27%|██▋       | 1699/6250 [1:45:42<4:51:16,  3.84s/it, gpt_loss=0.512, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1700/6250 [1:45:42<4:50:28,  3.83s/it, gpt_loss=0.512, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1700/6250 [1:45:46<4:50:28,  3.83s/it, gpt_loss=0.496, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1701/6250 [1:45:46<4:38:04,  3.67s/it, gpt_loss=0.496, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1701/6250 [1:45:50<4:38:04,  3.67s/it, gpt_loss=0.536, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1702/6250 [1:45:50<4:48:51,  3.81s/it, gpt_loss=0.536, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1702/6250 [1:45:54<4:48:51,  3.81s/it, gpt_loss=0.704, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1703/6250 [1:45:54<4:52:12,  3.86s/it, gpt_loss=0.704, lr=1.74e-6][A[2025-04-24 01:38:38,178] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  27%|██▋       | 1703/6250 [1:45:59<4:52:12,  3.86s/it, gpt_loss=0.747, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1704/6250 [1:45:59<5:19:47,  4.22s/it, gpt_loss=0.747, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1704/6250 [1:46:02<5:19:47,  4.22s/it, gpt_loss=0.647, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1705/6250 [1:46:02<4:55:53,  3.91s/it, gpt_loss=0.647, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1705/6250 [1:46:08<4:55:53,  3.91s/it, gpt_loss=0.595, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1706/6250 [1:46:08<5:50:24,  4.63s/it, gpt_loss=0.595, lr=1.74e-6][A
Train step of epoch 0:  27%|██▋       | 1706/6250 [1:46:13<5:50:24,  4.63s/it, gpt_loss=0.76, lr=1.74e-6] [A
Train step of epoch 0:  27%|██▋       | 1707/6250 [1:46:13<5:48:43,  4.61s/it, gpt_loss=0.76, lr=1.74e-6][A[2025-04-24 01:38:55,270] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  27%|██▋       | 1707/6250 [1:46:16<5:48:43,  4.61s/it, gpt_loss=0.789, lr=1.73e-6][A
Train step of epoch 0:  27%|██▋       | 1708/6250 [1:46:16<5:13:25,  4.14s/it, gpt_loss=0.789, lr=1.73e-6][A
Train step of epoch 0:  27%|██▋       | 1708/6250 [1:46:19<5:13:25,  4.14s/it, gpt_loss=0.421, lr=1.73e-6][A
Train step of epoch 0:  27%|██▋       | 1709/6250 [1:46:19<4:55:52,  3.91s/it, gpt_loss=0.421, lr=1.73e-6][A
Train step of epoch 0:  27%|██▋       | 1709/6250 [1:46:23<4:55:52,  3.91s/it, gpt_loss=0.642, lr=1.73e-6][A
Train step of epoch 0:  27%|██▋       | 1710/6250 [1:46:23<4:48:20,  3.81s/it, gpt_loss=0.642, lr=1.73e-6][A
Train step of epoch 0:  27%|██▋       | 1710/6250 [1:46:27<4:48:20,  3.81s/it, gpt_loss=0.676, lr=1.73e-6][A
Train step of epoch 0:  27%|██▋       | 1711/6250 [1:46:27<4:48:30,  3.81s/it, gpt_loss=0.676, lr=1.73e-6][A[2025-04-24 01:39:09,564] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  27%|██▋       | 1711/6250 [1:46:30<4:48:30,  3.81s/it, gpt_loss=0.64, lr=1.73e-6] [A
Train step of epoch 0:  27%|██▋       | 1712/6250 [1:46:30<4:41:51,  3.73s/it, gpt_loss=0.64, lr=1.73e-6][A
Train step of epoch 0:  27%|██▋       | 1712/6250 [1:46:34<4:41:51,  3.73s/it, gpt_loss=0.68, lr=1.73e-6][A
Train step of epoch 0:  27%|██▋       | 1713/6250 [1:46:34<4:49:43,  3.83s/it, gpt_loss=0.68, lr=1.73e-6][A
Train step of epoch 0:  27%|██▋       | 1713/6250 [1:46:38<4:49:43,  3.83s/it, gpt_loss=0.584, lr=1.73e-6][A
Train step of epoch 0:  27%|██▋       | 1714/6250 [1:46:38<4:48:55,  3.82s/it, gpt_loss=0.584, lr=1.73e-6][A
Train step of epoch 0:  27%|██▋       | 1714/6250 [1:46:43<4:48:55,  3.82s/it, gpt_loss=0.823, lr=1.73e-6][A
Train step of epoch 0:  27%|██▋       | 1715/6250 [1:46:43<5:04:06,  4.02s/it, gpt_loss=0.823, lr=1.73e-6][A[2025-04-24 01:39:25,307] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  27%|██▋       | 1715/6250 [1:46:46<5:04:06,  4.02s/it, gpt_loss=0.516, lr=1.73e-6][A
Train step of epoch 0:  27%|██▋       | 1716/6250 [1:46:46<4:49:17,  3.83s/it, gpt_loss=0.516, lr=1.73e-6][A
Train step of epoch 0:  27%|██▋       | 1716/6250 [1:46:50<4:49:17,  3.83s/it, gpt_loss=0.716, lr=1.73e-6][A
Train step of epoch 0:  27%|██▋       | 1717/6250 [1:46:50<4:43:43,  3.76s/it, gpt_loss=0.716, lr=1.73e-6][A
Train step of epoch 0:  27%|██▋       | 1717/6250 [1:46:53<4:43:43,  3.76s/it, gpt_loss=0.666, lr=1.73e-6][A
Train step of epoch 0:  27%|██▋       | 1718/6250 [1:46:53<4:44:05,  3.76s/it, gpt_loss=0.666, lr=1.73e-6][A
Train step of epoch 0:  27%|██▋       | 1718/6250 [1:46:58<4:44:05,  3.76s/it, gpt_loss=0.74, lr=1.73e-6] [A
Train step of epoch 0:  28%|██▊       | 1719/6250 [1:46:58<4:55:34,  3.91s/it, gpt_loss=0.74, lr=1.73e-6][A[2025-04-24 01:39:41,362] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  28%|██▊       | 1719/6250 [1:47:02<4:55:34,  3.91s/it, gpt_loss=0.484, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1720/6250 [1:47:02<5:07:04,  4.07s/it, gpt_loss=0.484, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1720/6250 [1:47:06<5:07:04,  4.07s/it, gpt_loss=0.602, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1721/6250 [1:47:06<5:00:27,  3.98s/it, gpt_loss=0.602, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1721/6250 [1:47:10<5:00:27,  3.98s/it, gpt_loss=0.583, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1722/6250 [1:47:10<5:11:00,  4.12s/it, gpt_loss=0.583, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1722/6250 [1:47:15<5:11:00,  4.12s/it, gpt_loss=0.667, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1723/6250 [1:47:15<5:12:24,  4.14s/it, gpt_loss=0.667, lr=1.73e-6][A[2025-04-24 01:39:57,786] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  28%|██▊       | 1723/6250 [1:47:19<5:12:24,  4.14s/it, gpt_loss=0.633, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1724/6250 [1:47:19<5:09:24,  4.10s/it, gpt_loss=0.633, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1724/6250 [1:47:22<5:09:24,  4.10s/it, gpt_loss=0.626, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1725/6250 [1:47:22<5:03:18,  4.02s/it, gpt_loss=0.626, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1725/6250 [1:47:25<5:03:18,  4.02s/it, gpt_loss=0.51, lr=1.73e-6] [A
Train step of epoch 0:  28%|██▊       | 1726/6250 [1:47:25<4:37:12,  3.68s/it, gpt_loss=0.51, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1726/6250 [1:47:29<4:37:12,  3.68s/it, gpt_loss=0.705, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1727/6250 [1:47:29<4:28:13,  3.56s/it, gpt_loss=0.705, lr=1.73e-6][A[2025-04-24 01:40:12,301] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  28%|██▊       | 1727/6250 [1:47:33<4:28:13,  3.56s/it, gpt_loss=0.497, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1728/6250 [1:47:33<4:50:04,  3.85s/it, gpt_loss=0.497, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1728/6250 [1:47:37<4:50:04,  3.85s/it, gpt_loss=0.58, lr=1.73e-6] [A
Train step of epoch 0:  28%|██▊       | 1729/6250 [1:47:37<4:49:29,  3.84s/it, gpt_loss=0.58, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1729/6250 [1:47:42<4:49:29,  3.84s/it, gpt_loss=0.655, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1730/6250 [1:47:42<5:10:02,  4.12s/it, gpt_loss=0.655, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1730/6250 [1:47:45<5:10:02,  4.12s/it, gpt_loss=0.611, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1731/6250 [1:47:45<4:45:41,  3.79s/it, gpt_loss=0.611, lr=1.73e-6][A[2025-04-24 01:40:27,068] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  28%|██▊       | 1731/6250 [1:47:48<4:45:41,  3.79s/it, gpt_loss=0.498, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1732/6250 [1:47:48<4:31:00,  3.60s/it, gpt_loss=0.498, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1732/6250 [1:47:52<4:31:00,  3.60s/it, gpt_loss=0.658, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1733/6250 [1:47:52<4:48:23,  3.83s/it, gpt_loss=0.658, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1733/6250 [1:47:56<4:48:23,  3.83s/it, gpt_loss=0.726, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1734/6250 [1:47:56<4:45:38,  3.80s/it, gpt_loss=0.726, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1734/6250 [1:48:00<4:45:38,  3.80s/it, gpt_loss=0.49, lr=1.73e-6] [A
Train step of epoch 0:  28%|██▊       | 1735/6250 [1:48:00<4:45:27,  3.79s/it, gpt_loss=0.49, lr=1.73e-6][A[2025-04-24 01:40:42,115] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  28%|██▊       | 1735/6250 [1:48:03<4:45:27,  3.79s/it, gpt_loss=0.424, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1736/6250 [1:48:03<4:31:24,  3.61s/it, gpt_loss=0.424, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1736/6250 [1:48:07<4:31:24,  3.61s/it, gpt_loss=0.656, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1737/6250 [1:48:07<4:37:52,  3.69s/it, gpt_loss=0.656, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1737/6250 [1:48:10<4:37:52,  3.69s/it, gpt_loss=0.699, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1738/6250 [1:48:10<4:30:54,  3.60s/it, gpt_loss=0.699, lr=1.73e-6][A
Train step of epoch 0:  28%|██▊       | 1738/6250 [1:48:13<4:30:54,  3.60s/it, gpt_loss=0.76, lr=1.73e-6] [A
Train step of epoch 0:  28%|██▊       | 1739/6250 [1:48:13<4:24:28,  3.52s/it, gpt_loss=0.76, lr=1.73e-6][A[2025-04-24 01:40:56,581] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  28%|██▊       | 1739/6250 [1:48:17<4:24:28,  3.52s/it, gpt_loss=0.673, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1740/6250 [1:48:17<4:32:08,  3.62s/it, gpt_loss=0.673, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1740/6250 [1:48:21<4:32:08,  3.62s/it, gpt_loss=0.547, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1741/6250 [1:48:21<4:23:29,  3.51s/it, gpt_loss=0.547, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1741/6250 [1:48:25<4:23:29,  3.51s/it, gpt_loss=0.695, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1742/6250 [1:48:25<4:51:05,  3.87s/it, gpt_loss=0.695, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1742/6250 [1:48:28<4:51:05,  3.87s/it, gpt_loss=0.528, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1743/6250 [1:48:28<4:19:17,  3.45s/it, gpt_loss=0.528, lr=1.72e-6][A[2025-04-24 01:41:11,540] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  28%|██▊       | 1743/6250 [1:48:32<4:19:17,  3.45s/it, gpt_loss=0.499, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1744/6250 [1:48:32<4:43:17,  3.77s/it, gpt_loss=0.499, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1744/6250 [1:48:36<4:43:17,  3.77s/it, gpt_loss=0.476, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1745/6250 [1:48:36<4:41:12,  3.75s/it, gpt_loss=0.476, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1745/6250 [1:48:39<4:41:12,  3.75s/it, gpt_loss=0.682, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1746/6250 [1:48:39<4:25:45,  3.54s/it, gpt_loss=0.682, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1746/6250 [1:48:43<4:25:45,  3.54s/it, gpt_loss=0.622, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1747/6250 [1:48:43<4:37:45,  3.70s/it, gpt_loss=0.622, lr=1.72e-6][A[2025-04-24 01:41:26,929] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  28%|██▊       | 1747/6250 [1:48:48<4:37:45,  3.70s/it, gpt_loss=0.657, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1748/6250 [1:48:48<4:57:14,  3.96s/it, gpt_loss=0.657, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1748/6250 [1:48:51<4:57:14,  3.96s/it, gpt_loss=0.579, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1749/6250 [1:48:51<4:44:34,  3.79s/it, gpt_loss=0.579, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1749/6250 [1:48:55<4:44:34,  3.79s/it, gpt_loss=0.724, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1750/6250 [1:48:55<4:52:08,  3.90s/it, gpt_loss=0.724, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1750/6250 [1:49:00<4:52:08,  3.90s/it, gpt_loss=0.574, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1751/6250 [1:49:00<5:00:54,  4.01s/it, gpt_loss=0.574, lr=1.72e-6][A[2025-04-24 01:41:43,304] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  28%|██▊       | 1751/6250 [1:49:04<5:00:54,  4.01s/it, gpt_loss=0.74, lr=1.72e-6] [A
Train step of epoch 0:  28%|██▊       | 1752/6250 [1:49:04<5:12:59,  4.18s/it, gpt_loss=0.74, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1752/6250 [1:49:08<5:12:59,  4.18s/it, gpt_loss=0.574, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1753/6250 [1:49:08<5:06:56,  4.10s/it, gpt_loss=0.574, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1753/6250 [1:49:12<5:06:56,  4.10s/it, gpt_loss=0.756, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1754/6250 [1:49:12<4:57:25,  3.97s/it, gpt_loss=0.756, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1754/6250 [1:49:15<4:57:25,  3.97s/it, gpt_loss=0.595, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1755/6250 [1:49:15<4:52:56,  3.91s/it, gpt_loss=0.595, lr=1.72e-6][A[2025-04-24 01:41:57,922] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  28%|██▊       | 1755/6250 [1:49:19<4:52:56,  3.91s/it, gpt_loss=0.754, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1756/6250 [1:49:19<4:38:16,  3.72s/it, gpt_loss=0.754, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1756/6250 [1:49:23<4:38:16,  3.72s/it, gpt_loss=0.464, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1757/6250 [1:49:23<4:49:42,  3.87s/it, gpt_loss=0.464, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1757/6250 [1:49:26<4:49:42,  3.87s/it, gpt_loss=0.683, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1758/6250 [1:49:26<4:40:39,  3.75s/it, gpt_loss=0.683, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1758/6250 [1:49:30<4:40:39,  3.75s/it, gpt_loss=0.672, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1759/6250 [1:49:30<4:29:19,  3.60s/it, gpt_loss=0.672, lr=1.72e-6][A[2025-04-24 01:42:12,773] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  28%|██▊       | 1759/6250 [1:49:34<4:29:19,  3.60s/it, gpt_loss=0.567, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1760/6250 [1:49:34<4:36:14,  3.69s/it, gpt_loss=0.567, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1760/6250 [1:49:37<4:36:14,  3.69s/it, gpt_loss=0.705, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1761/6250 [1:49:37<4:39:25,  3.73s/it, gpt_loss=0.705, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1761/6250 [1:49:41<4:39:25,  3.73s/it, gpt_loss=0.557, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1762/6250 [1:49:41<4:36:04,  3.69s/it, gpt_loss=0.557, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1762/6250 [1:49:45<4:36:04,  3.69s/it, gpt_loss=0.755, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1763/6250 [1:49:45<4:46:38,  3.83s/it, gpt_loss=0.755, lr=1.72e-6][A[2025-04-24 01:42:28,153] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  28%|██▊       | 1763/6250 [1:49:49<4:46:38,  3.83s/it, gpt_loss=0.786, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1764/6250 [1:49:49<4:45:38,  3.82s/it, gpt_loss=0.786, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1764/6250 [1:49:53<4:45:38,  3.82s/it, gpt_loss=0.788, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1765/6250 [1:49:53<4:48:14,  3.86s/it, gpt_loss=0.788, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1765/6250 [1:49:56<4:48:14,  3.86s/it, gpt_loss=0.788, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1766/6250 [1:49:56<4:31:03,  3.63s/it, gpt_loss=0.788, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1766/6250 [1:50:00<4:31:03,  3.63s/it, gpt_loss=0.918, lr=1.72e-6][A
Train step of epoch 0:  28%|██▊       | 1767/6250 [1:50:00<4:51:36,  3.90s/it, gpt_loss=0.918, lr=1.72e-6][A[2025-04-24 01:42:44,267] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  28%|██▊       | 1767/6250 [1:50:05<4:51:36,  3.90s/it, gpt_loss=0.551, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1768/6250 [1:50:05<5:05:43,  4.09s/it, gpt_loss=0.551, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1768/6250 [1:50:09<5:05:43,  4.09s/it, gpt_loss=0.6, lr=1.71e-6]  [A
Train step of epoch 0:  28%|██▊       | 1769/6250 [1:50:09<5:08:34,  4.13s/it, gpt_loss=0.6, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1769/6250 [1:50:12<5:08:34,  4.13s/it, gpt_loss=0.535, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1770/6250 [1:50:12<4:32:42,  3.65s/it, gpt_loss=0.535, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1770/6250 [1:50:15<4:32:42,  3.65s/it, gpt_loss=0.565, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1771/6250 [1:50:15<4:31:37,  3.64s/it, gpt_loss=0.565, lr=1.71e-6][A[2025-04-24 01:42:57,699] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  28%|██▊       | 1771/6250 [1:50:18<4:31:37,  3.64s/it, gpt_loss=0.612, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1772/6250 [1:50:18<4:18:48,  3.47s/it, gpt_loss=0.612, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1772/6250 [1:50:22<4:18:48,  3.47s/it, gpt_loss=0.646, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1773/6250 [1:50:22<4:20:29,  3.49s/it, gpt_loss=0.646, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1773/6250 [1:50:25<4:20:29,  3.49s/it, gpt_loss=0.688, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1774/6250 [1:50:25<4:20:17,  3.49s/it, gpt_loss=0.688, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1774/6250 [1:50:29<4:20:17,  3.49s/it, gpt_loss=0.633, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1775/6250 [1:50:29<4:21:56,  3.51s/it, gpt_loss=0.633, lr=1.71e-6][A[2025-04-24 01:43:13,020] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  28%|██▊       | 1775/6250 [1:50:34<4:21:56,  3.51s/it, gpt_loss=0.677, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1776/6250 [1:50:34<4:49:00,  3.88s/it, gpt_loss=0.677, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1776/6250 [1:50:37<4:49:00,  3.88s/it, gpt_loss=0.648, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1777/6250 [1:50:37<4:43:42,  3.81s/it, gpt_loss=0.648, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1777/6250 [1:50:42<4:43:42,  3.81s/it, gpt_loss=0.867, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1778/6250 [1:50:42<5:07:49,  4.13s/it, gpt_loss=0.867, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1778/6250 [1:50:45<5:07:49,  4.13s/it, gpt_loss=0.645, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1779/6250 [1:50:45<4:44:37,  3.82s/it, gpt_loss=0.645, lr=1.71e-6][A[2025-04-24 01:43:28,317] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  28%|██▊       | 1779/6250 [1:50:49<4:44:37,  3.82s/it, gpt_loss=0.705, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1780/6250 [1:50:49<4:41:16,  3.78s/it, gpt_loss=0.705, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1780/6250 [1:50:53<4:41:16,  3.78s/it, gpt_loss=0.567, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1781/6250 [1:50:53<4:38:40,  3.74s/it, gpt_loss=0.567, lr=1.71e-6][A
Train step of epoch 0:  28%|██▊       | 1781/6250 [1:50:56<4:38:40,  3.74s/it, gpt_loss=0.589, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1782/6250 [1:50:56<4:31:08,  3.64s/it, gpt_loss=0.589, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1782/6250 [1:51:00<4:31:08,  3.64s/it, gpt_loss=0.654, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1783/6250 [1:51:00<4:44:13,  3.82s/it, gpt_loss=0.654, lr=1.71e-6][A[2025-04-24 01:43:44,423] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  29%|██▊       | 1783/6250 [1:51:05<4:44:13,  3.82s/it, gpt_loss=0.479, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1784/6250 [1:51:05<5:06:15,  4.11s/it, gpt_loss=0.479, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1784/6250 [1:51:10<5:06:15,  4.11s/it, gpt_loss=0.538, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1785/6250 [1:51:10<5:11:08,  4.18s/it, gpt_loss=0.538, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1785/6250 [1:51:13<5:11:08,  4.18s/it, gpt_loss=0.431, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1786/6250 [1:51:13<4:51:00,  3.91s/it, gpt_loss=0.431, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1786/6250 [1:51:17<4:51:00,  3.91s/it, gpt_loss=0.59, lr=1.71e-6] [A
Train step of epoch 0:  29%|██▊       | 1787/6250 [1:51:17<4:47:45,  3.87s/it, gpt_loss=0.59, lr=1.71e-6][A[2025-04-24 01:43:59,709] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  29%|██▊       | 1787/6250 [1:51:20<4:47:45,  3.87s/it, gpt_loss=0.622, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1788/6250 [1:51:20<4:48:24,  3.88s/it, gpt_loss=0.622, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1788/6250 [1:51:24<4:48:24,  3.88s/it, gpt_loss=0.602, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1789/6250 [1:51:24<4:43:34,  3.81s/it, gpt_loss=0.602, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1789/6250 [1:51:26<4:43:34,  3.81s/it, gpt_loss=0.536, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1790/6250 [1:51:26<4:03:52,  3.28s/it, gpt_loss=0.536, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1790/6250 [1:51:31<4:03:52,  3.28s/it, gpt_loss=0.833, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1791/6250 [1:51:31<4:31:15,  3.65s/it, gpt_loss=0.833, lr=1.71e-6][A[2025-04-24 01:44:14,391] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  29%|██▊       | 1791/6250 [1:51:35<4:31:15,  3.65s/it, gpt_loss=0.713, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1792/6250 [1:51:35<4:49:26,  3.90s/it, gpt_loss=0.713, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1792/6250 [1:51:39<4:49:26,  3.90s/it, gpt_loss=0.665, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1793/6250 [1:51:39<4:58:00,  4.01s/it, gpt_loss=0.665, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1793/6250 [1:51:43<4:58:00,  4.01s/it, gpt_loss=0.522, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1794/6250 [1:51:43<4:51:55,  3.93s/it, gpt_loss=0.522, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1794/6250 [1:51:47<4:51:55,  3.93s/it, gpt_loss=0.674, lr=1.71e-6][A
Train step of epoch 0:  29%|██▊       | 1795/6250 [1:51:47<4:47:03,  3.87s/it, gpt_loss=0.674, lr=1.71e-6][A[2025-04-24 01:44:30,193] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  29%|██▊       | 1795/6250 [1:51:51<4:47:03,  3.87s/it, gpt_loss=0.654, lr=1.7e-6] [A
Train step of epoch 0:  29%|██▊       | 1796/6250 [1:51:51<4:51:21,  3.92s/it, gpt_loss=0.654, lr=1.7e-6][A
Train step of epoch 0:  29%|██▊       | 1796/6250 [1:51:55<4:51:21,  3.92s/it, gpt_loss=0.525, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1797/6250 [1:51:55<5:01:40,  4.06s/it, gpt_loss=0.525, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1797/6250 [1:52:00<5:01:40,  4.06s/it, gpt_loss=0.679, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1798/6250 [1:52:00<5:16:18,  4.26s/it, gpt_loss=0.679, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1798/6250 [1:52:03<5:16:18,  4.26s/it, gpt_loss=0.424, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1799/6250 [1:52:03<4:57:19,  4.01s/it, gpt_loss=0.424, lr=1.7e-6][A[2025-04-24 01:44:46,759] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  29%|██▉       | 1799/6250 [1:52:08<4:57:19,  4.01s/it, gpt_loss=0.543, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1800/6250 [1:52:08<4:57:54,  4.02s/it, gpt_loss=0.543, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1800/6250 [1:52:11<4:57:54,  4.02s/it, gpt_loss=0.491, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1801/6250 [1:52:11<4:53:05,  3.95s/it, gpt_loss=0.491, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1801/6250 [1:52:15<4:53:05,  3.95s/it, gpt_loss=0.63, lr=1.7e-6] [A
Train step of epoch 0:  29%|██▉       | 1802/6250 [1:52:15<4:41:01,  3.79s/it, gpt_loss=0.63, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1802/6250 [1:52:18<4:41:01,  3.79s/it, gpt_loss=0.634, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1803/6250 [1:52:18<4:38:23,  3.76s/it, gpt_loss=0.634, lr=1.7e-6][A[2025-04-24 01:45:01,145] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  29%|██▉       | 1803/6250 [1:52:22<4:38:23,  3.76s/it, gpt_loss=0.487, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1804/6250 [1:52:22<4:32:29,  3.68s/it, gpt_loss=0.487, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1804/6250 [1:52:28<4:32:29,  3.68s/it, gpt_loss=0.704, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1805/6250 [1:52:28<5:22:46,  4.36s/it, gpt_loss=0.704, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1805/6250 [1:52:32<5:22:46,  4.36s/it, gpt_loss=0.809, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1806/6250 [1:52:32<5:11:47,  4.21s/it, gpt_loss=0.809, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1806/6250 [1:52:35<5:11:47,  4.21s/it, gpt_loss=0.579, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1807/6250 [1:52:35<4:51:46,  3.94s/it, gpt_loss=0.579, lr=1.7e-6][A[2025-04-24 01:45:17,805] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  29%|██▉       | 1807/6250 [1:52:39<4:51:46,  3.94s/it, gpt_loss=0.885, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1808/6250 [1:52:39<4:42:51,  3.82s/it, gpt_loss=0.885, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1808/6250 [1:52:41<4:42:51,  3.82s/it, gpt_loss=0.444, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1809/6250 [1:52:41<4:21:57,  3.54s/it, gpt_loss=0.444, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1809/6250 [1:52:45<4:21:57,  3.54s/it, gpt_loss=0.748, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1810/6250 [1:52:45<4:25:13,  3.58s/it, gpt_loss=0.748, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1810/6250 [1:52:48<4:25:13,  3.58s/it, gpt_loss=0.705, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1811/6250 [1:52:48<4:15:13,  3.45s/it, gpt_loss=0.705, lr=1.7e-6][A[2025-04-24 01:45:31,641] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  29%|██▉       | 1811/6250 [1:52:52<4:15:13,  3.45s/it, gpt_loss=0.73, lr=1.7e-6] [A
Train step of epoch 0:  29%|██▉       | 1812/6250 [1:52:52<4:30:11,  3.65s/it, gpt_loss=0.73, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1812/6250 [1:52:56<4:30:11,  3.65s/it, gpt_loss=0.625, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1813/6250 [1:52:56<4:34:05,  3.71s/it, gpt_loss=0.625, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1813/6250 [1:52:59<4:34:05,  3.71s/it, gpt_loss=0.58, lr=1.7e-6] [A
Train step of epoch 0:  29%|██▉       | 1814/6250 [1:52:59<4:09:06,  3.37s/it, gpt_loss=0.58, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1814/6250 [1:53:03<4:09:06,  3.37s/it, gpt_loss=0.734, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1815/6250 [1:53:03<4:21:15,  3.53s/it, gpt_loss=0.734, lr=1.7e-6][A[2025-04-24 01:45:45,896] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  29%|██▉       | 1815/6250 [1:53:07<4:21:15,  3.53s/it, gpt_loss=0.874, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1816/6250 [1:53:07<4:29:45,  3.65s/it, gpt_loss=0.874, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1816/6250 [1:53:10<4:29:45,  3.65s/it, gpt_loss=0.627, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1817/6250 [1:53:10<4:30:29,  3.66s/it, gpt_loss=0.627, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1817/6250 [1:53:14<4:30:29,  3.66s/it, gpt_loss=0.529, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1818/6250 [1:53:14<4:21:46,  3.54s/it, gpt_loss=0.529, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1818/6250 [1:53:18<4:21:46,  3.54s/it, gpt_loss=0.514, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1819/6250 [1:53:18<4:32:23,  3.69s/it, gpt_loss=0.514, lr=1.7e-6][A[2025-04-24 01:46:00,796] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  29%|██▉       | 1819/6250 [1:53:22<4:32:23,  3.69s/it, gpt_loss=0.564, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1820/6250 [1:53:22<4:37:25,  3.76s/it, gpt_loss=0.564, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1820/6250 [1:53:25<4:37:25,  3.76s/it, gpt_loss=0.615, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1821/6250 [1:53:25<4:21:25,  3.54s/it, gpt_loss=0.615, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1821/6250 [1:53:28<4:21:25,  3.54s/it, gpt_loss=0.664, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1822/6250 [1:53:28<4:28:52,  3.64s/it, gpt_loss=0.664, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1822/6250 [1:53:33<4:28:52,  3.64s/it, gpt_loss=0.631, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1823/6250 [1:53:33<4:57:50,  4.04s/it, gpt_loss=0.631, lr=1.7e-6][A[2025-04-24 01:46:17,217] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  29%|██▉       | 1823/6250 [1:53:38<4:57:50,  4.04s/it, gpt_loss=0.743, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1824/6250 [1:53:38<5:09:04,  4.19s/it, gpt_loss=0.743, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1824/6250 [1:53:42<5:09:04,  4.19s/it, gpt_loss=0.562, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1825/6250 [1:53:42<5:08:35,  4.18s/it, gpt_loss=0.562, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1825/6250 [1:53:46<5:08:35,  4.18s/it, gpt_loss=0.764, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1826/6250 [1:53:46<5:05:08,  4.14s/it, gpt_loss=0.764, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1826/6250 [1:53:50<5:05:08,  4.14s/it, gpt_loss=0.721, lr=1.7e-6][A
Train step of epoch 0:  29%|██▉       | 1827/6250 [1:53:50<5:03:04,  4.11s/it, gpt_loss=0.721, lr=1.7e-6][A[2025-04-24 01:46:32,018] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  29%|██▉       | 1827/6250 [1:53:53<5:03:04,  4.11s/it, gpt_loss=0.721, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1828/6250 [1:53:53<4:28:29,  3.64s/it, gpt_loss=0.721, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1828/6250 [1:53:56<4:28:29,  3.64s/it, gpt_loss=0.569, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1829/6250 [1:53:56<4:26:54,  3.62s/it, gpt_loss=0.569, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1829/6250 [1:54:00<4:26:54,  3.62s/it, gpt_loss=0.491, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1830/6250 [1:54:00<4:24:40,  3.59s/it, gpt_loss=0.491, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1830/6250 [1:54:03<4:24:40,  3.59s/it, gpt_loss=0.447, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1831/6250 [1:54:03<4:20:39,  3.54s/it, gpt_loss=0.447, lr=1.69e-6][A[2025-04-24 01:46:45,096] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  29%|██▉       | 1831/6250 [1:54:06<4:20:39,  3.54s/it, gpt_loss=0.467, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1832/6250 [1:54:06<3:59:06,  3.25s/it, gpt_loss=0.467, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1832/6250 [1:54:10<3:59:06,  3.25s/it, gpt_loss=0.654, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1833/6250 [1:54:10<4:08:02,  3.37s/it, gpt_loss=0.654, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1833/6250 [1:54:14<4:08:02,  3.37s/it, gpt_loss=0.825, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1834/6250 [1:54:14<4:22:48,  3.57s/it, gpt_loss=0.825, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1834/6250 [1:54:18<4:22:48,  3.57s/it, gpt_loss=0.574, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1835/6250 [1:54:18<4:34:19,  3.73s/it, gpt_loss=0.574, lr=1.69e-6][A[2025-04-24 01:47:01,524] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  29%|██▉       | 1835/6250 [1:54:22<4:34:19,  3.73s/it, gpt_loss=0.672, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1836/6250 [1:54:22<4:54:20,  4.00s/it, gpt_loss=0.672, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1836/6250 [1:54:26<4:54:20,  4.00s/it, gpt_loss=0.49, lr=1.69e-6] [A
Train step of epoch 0:  29%|██▉       | 1837/6250 [1:54:26<4:50:00,  3.94s/it, gpt_loss=0.49, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1837/6250 [1:54:30<4:50:00,  3.94s/it, gpt_loss=0.694, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1838/6250 [1:54:30<4:39:39,  3.80s/it, gpt_loss=0.694, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1838/6250 [1:54:34<4:39:39,  3.80s/it, gpt_loss=0.635, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1839/6250 [1:54:34<4:48:43,  3.93s/it, gpt_loss=0.635, lr=1.69e-6][A[2025-04-24 01:47:16,660] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  29%|██▉       | 1839/6250 [1:54:37<4:48:43,  3.93s/it, gpt_loss=0.731, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1840/6250 [1:54:37<4:42:12,  3.84s/it, gpt_loss=0.731, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1840/6250 [1:54:41<4:42:12,  3.84s/it, gpt_loss=0.591, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1841/6250 [1:54:41<4:31:59,  3.70s/it, gpt_loss=0.591, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1841/6250 [1:54:45<4:31:59,  3.70s/it, gpt_loss=0.73, lr=1.69e-6] [A
Train step of epoch 0:  29%|██▉       | 1842/6250 [1:54:45<4:34:07,  3.73s/it, gpt_loss=0.73, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1842/6250 [1:54:48<4:34:07,  3.73s/it, gpt_loss=0.655, lr=1.69e-6][A
Train step of epoch 0:  29%|██▉       | 1843/6250 [1:54:48<4:35:32,  3.75s/it, gpt_loss=0.655, lr=1.69e-6][A[2025-04-24 01:47:31,172] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  29%|██▉       | 1843/6250 [1:54:52<4:35:32,  3.75s/it, gpt_loss=0.617, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1844/6250 [1:54:52<4:30:40,  3.69s/it, gpt_loss=0.617, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1844/6250 [1:54:56<4:30:40,  3.69s/it, gpt_loss=0.67, lr=1.69e-6] [A
Train step of epoch 0:  30%|██▉       | 1845/6250 [1:54:56<4:41:31,  3.83s/it, gpt_loss=0.67, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1845/6250 [1:55:00<4:41:31,  3.83s/it, gpt_loss=0.666, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1846/6250 [1:55:00<4:40:16,  3.82s/it, gpt_loss=0.666, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1846/6250 [1:55:04<4:40:16,  3.82s/it, gpt_loss=0.601, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1847/6250 [1:55:04<4:42:40,  3.85s/it, gpt_loss=0.601, lr=1.69e-6][A[2025-04-24 01:47:46,773] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  30%|██▉       | 1847/6250 [1:55:08<4:42:40,  3.85s/it, gpt_loss=0.749, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1848/6250 [1:55:08<4:39:26,  3.81s/it, gpt_loss=0.749, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1848/6250 [1:55:12<4:39:26,  3.81s/it, gpt_loss=0.805, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1849/6250 [1:55:12<4:50:00,  3.95s/it, gpt_loss=0.805, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1849/6250 [1:55:16<4:50:00,  3.95s/it, gpt_loss=0.652, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1850/6250 [1:55:16<4:48:07,  3.93s/it, gpt_loss=0.652, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1850/6250 [1:55:19<4:48:07,  3.93s/it, gpt_loss=0.682, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1851/6250 [1:55:19<4:41:14,  3.84s/it, gpt_loss=0.682, lr=1.69e-6][A[2025-04-24 01:48:02,097] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  30%|██▉       | 1851/6250 [1:55:23<4:41:14,  3.84s/it, gpt_loss=0.606, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1852/6250 [1:55:23<4:34:42,  3.75s/it, gpt_loss=0.606, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1852/6250 [1:55:27<4:34:42,  3.75s/it, gpt_loss=0.789, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1853/6250 [1:55:27<4:50:52,  3.97s/it, gpt_loss=0.789, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1853/6250 [1:55:33<4:50:52,  3.97s/it, gpt_loss=0.489, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1854/6250 [1:55:33<5:17:57,  4.34s/it, gpt_loss=0.489, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1854/6250 [1:55:36<5:17:57,  4.34s/it, gpt_loss=0.399, lr=1.69e-6][A
Train step of epoch 0:  30%|██▉       | 1855/6250 [1:55:36<4:49:01,  3.95s/it, gpt_loss=0.399, lr=1.69e-6][A[2025-04-24 01:48:19,680] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  30%|██▉       | 1855/6250 [1:55:40<4:49:01,  3.95s/it, gpt_loss=0.816, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1856/6250 [1:55:40<5:09:11,  4.22s/it, gpt_loss=0.816, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1856/6250 [1:55:44<5:09:11,  4.22s/it, gpt_loss=0.726, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1857/6250 [1:55:44<5:00:37,  4.11s/it, gpt_loss=0.726, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1857/6250 [1:55:49<5:00:37,  4.11s/it, gpt_loss=0.644, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1858/6250 [1:55:49<5:15:47,  4.31s/it, gpt_loss=0.644, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1858/6250 [1:55:52<5:15:47,  4.31s/it, gpt_loss=0.587, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1859/6250 [1:55:52<4:45:13,  3.90s/it, gpt_loss=0.587, lr=1.68e-6][A[2025-04-24 01:48:35,330] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  30%|██▉       | 1859/6250 [1:55:56<4:45:13,  3.90s/it, gpt_loss=0.581, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1860/6250 [1:55:56<4:49:23,  3.96s/it, gpt_loss=0.581, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1860/6250 [1:56:00<4:49:23,  3.96s/it, gpt_loss=0.441, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1861/6250 [1:56:00<4:52:03,  3.99s/it, gpt_loss=0.441, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1861/6250 [1:56:04<4:52:03,  3.99s/it, gpt_loss=0.602, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1862/6250 [1:56:04<4:56:44,  4.06s/it, gpt_loss=0.602, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1862/6250 [1:56:09<4:56:44,  4.06s/it, gpt_loss=0.59, lr=1.68e-6] [A
Train step of epoch 0:  30%|██▉       | 1863/6250 [1:56:09<4:59:13,  4.09s/it, gpt_loss=0.59, lr=1.68e-6][A[2025-04-24 01:48:51,741] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  30%|██▉       | 1863/6250 [1:56:13<4:59:13,  4.09s/it, gpt_loss=0.722, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1864/6250 [1:56:13<4:56:00,  4.05s/it, gpt_loss=0.722, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1864/6250 [1:56:16<4:56:00,  4.05s/it, gpt_loss=0.568, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1865/6250 [1:56:16<4:52:49,  4.01s/it, gpt_loss=0.568, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1865/6250 [1:56:20<4:52:49,  4.01s/it, gpt_loss=0.516, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1866/6250 [1:56:20<4:49:24,  3.96s/it, gpt_loss=0.516, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1866/6250 [1:56:23<4:49:24,  3.96s/it, gpt_loss=0.616, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1867/6250 [1:56:23<4:24:47,  3.62s/it, gpt_loss=0.616, lr=1.68e-6][A[2025-04-24 01:49:06,441] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  30%|██▉       | 1867/6250 [1:56:27<4:24:47,  3.62s/it, gpt_loss=0.537, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1868/6250 [1:56:27<4:35:05,  3.77s/it, gpt_loss=0.537, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1868/6250 [1:56:30<4:35:05,  3.77s/it, gpt_loss=0.518, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1869/6250 [1:56:30<4:17:49,  3.53s/it, gpt_loss=0.518, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1869/6250 [1:56:35<4:17:49,  3.53s/it, gpt_loss=0.643, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1870/6250 [1:56:35<4:42:17,  3.87s/it, gpt_loss=0.643, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1870/6250 [1:56:38<4:42:17,  3.87s/it, gpt_loss=0.551, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1871/6250 [1:56:38<4:31:04,  3.71s/it, gpt_loss=0.551, lr=1.68e-6][A[2025-04-24 01:49:21,461] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  30%|██▉       | 1871/6250 [1:56:42<4:31:04,  3.71s/it, gpt_loss=0.704, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1872/6250 [1:56:42<4:37:55,  3.81s/it, gpt_loss=0.704, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1872/6250 [1:56:47<4:37:55,  3.81s/it, gpt_loss=0.691, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1873/6250 [1:56:47<5:00:26,  4.12s/it, gpt_loss=0.691, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1873/6250 [1:56:51<5:00:26,  4.12s/it, gpt_loss=0.777, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1874/6250 [1:56:51<5:02:03,  4.14s/it, gpt_loss=0.777, lr=1.68e-6][A
Train step of epoch 0:  30%|██▉       | 1874/6250 [1:56:55<5:02:03,  4.14s/it, gpt_loss=0.489, lr=1.68e-6][A
Train step of epoch 0:  30%|███       | 1875/6250 [1:56:55<4:51:29,  4.00s/it, gpt_loss=0.489, lr=1.68e-6][A[2025-04-24 01:49:38,045] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  30%|███       | 1875/6250 [1:56:59<4:51:29,  4.00s/it, gpt_loss=0.671, lr=1.68e-6][A
Train step of epoch 0:  30%|███       | 1876/6250 [1:56:59<4:49:00,  3.96s/it, gpt_loss=0.671, lr=1.68e-6][A
Train step of epoch 0:  30%|███       | 1876/6250 [1:57:03<4:49:00,  3.96s/it, gpt_loss=0.523, lr=1.68e-6][A
Train step of epoch 0:  30%|███       | 1877/6250 [1:57:03<4:49:09,  3.97s/it, gpt_loss=0.523, lr=1.68e-6][A
Train step of epoch 0:  30%|███       | 1877/6250 [1:57:06<4:49:09,  3.97s/it, gpt_loss=0.78, lr=1.68e-6] [A
Train step of epoch 0:  30%|███       | 1878/6250 [1:57:06<4:34:53,  3.77s/it, gpt_loss=0.78, lr=1.68e-6][A
Train step of epoch 0:  30%|███       | 1878/6250 [1:57:09<4:34:53,  3.77s/it, gpt_loss=0.741, lr=1.68e-6][A
Train step of epoch 0:  30%|███       | 1879/6250 [1:57:09<4:15:12,  3.50s/it, gpt_loss=0.741, lr=1.68e-6][A[2025-04-24 01:49:51,928] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  30%|███       | 1879/6250 [1:57:13<4:15:12,  3.50s/it, gpt_loss=0.62, lr=1.68e-6] [A
Train step of epoch 0:  30%|███       | 1880/6250 [1:57:13<4:19:46,  3.57s/it, gpt_loss=0.62, lr=1.68e-6][A
Train step of epoch 0:  30%|███       | 1880/6250 [1:57:17<4:19:46,  3.57s/it, gpt_loss=0.653, lr=1.68e-6][A
Train step of epoch 0:  30%|███       | 1881/6250 [1:57:17<4:43:36,  3.89s/it, gpt_loss=0.653, lr=1.68e-6][A
Train step of epoch 0:  30%|███       | 1881/6250 [1:57:21<4:43:36,  3.89s/it, gpt_loss=0.61, lr=1.68e-6] [A
Train step of epoch 0:  30%|███       | 1882/6250 [1:57:21<4:44:40,  3.91s/it, gpt_loss=0.61, lr=1.68e-6][A
Train step of epoch 0:  30%|███       | 1882/6250 [1:57:25<4:44:40,  3.91s/it, gpt_loss=0.668, lr=1.68e-6][A
Train step of epoch 0:  30%|███       | 1883/6250 [1:57:25<4:49:54,  3.98s/it, gpt_loss=0.668, lr=1.68e-6][A[2025-04-24 01:50:09,256] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  30%|███       | 1883/6250 [1:57:30<4:49:54,  3.98s/it, gpt_loss=0.546, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1884/6250 [1:57:30<5:02:37,  4.16s/it, gpt_loss=0.546, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1884/6250 [1:57:34<5:02:37,  4.16s/it, gpt_loss=0.661, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1885/6250 [1:57:34<5:07:29,  4.23s/it, gpt_loss=0.661, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1885/6250 [1:57:38<5:07:29,  4.23s/it, gpt_loss=0.655, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1886/6250 [1:57:38<5:02:03,  4.15s/it, gpt_loss=0.655, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1886/6250 [1:57:42<5:02:03,  4.15s/it, gpt_loss=0.692, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1887/6250 [1:57:42<4:52:46,  4.03s/it, gpt_loss=0.692, lr=1.67e-6][A[2025-04-24 01:50:25,313] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  30%|███       | 1887/6250 [1:57:46<4:52:46,  4.03s/it, gpt_loss=0.613, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1888/6250 [1:57:46<4:51:16,  4.01s/it, gpt_loss=0.613, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1888/6250 [1:57:49<4:51:16,  4.01s/it, gpt_loss=0.502, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1889/6250 [1:57:49<4:33:35,  3.76s/it, gpt_loss=0.502, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1889/6250 [1:57:53<4:33:35,  3.76s/it, gpt_loss=0.651, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1890/6250 [1:57:53<4:41:17,  3.87s/it, gpt_loss=0.651, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1890/6250 [1:57:57<4:41:17,  3.87s/it, gpt_loss=0.523, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1891/6250 [1:57:57<4:33:27,  3.76s/it, gpt_loss=0.523, lr=1.67e-6][A[2025-04-24 01:50:41,317] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  30%|███       | 1891/6250 [1:58:02<4:33:27,  3.76s/it, gpt_loss=0.714, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1892/6250 [1:58:02<5:04:02,  4.19s/it, gpt_loss=0.714, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1892/6250 [1:58:06<5:04:02,  4.19s/it, gpt_loss=0.584, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1893/6250 [1:58:06<5:04:35,  4.19s/it, gpt_loss=0.584, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1893/6250 [1:58:10<5:04:35,  4.19s/it, gpt_loss=0.519, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1894/6250 [1:58:10<4:56:59,  4.09s/it, gpt_loss=0.519, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1894/6250 [1:58:13<4:56:59,  4.09s/it, gpt_loss=0.543, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1895/6250 [1:58:13<4:24:28,  3.64s/it, gpt_loss=0.543, lr=1.67e-6][A[2025-04-24 01:50:56,584] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  30%|███       | 1895/6250 [1:58:17<4:24:28,  3.64s/it, gpt_loss=0.581, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1896/6250 [1:58:17<4:45:18,  3.93s/it, gpt_loss=0.581, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1896/6250 [1:58:21<4:45:18,  3.93s/it, gpt_loss=0.628, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1897/6250 [1:58:21<4:39:13,  3.85s/it, gpt_loss=0.628, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1897/6250 [1:58:24<4:39:13,  3.85s/it, gpt_loss=0.607, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1898/6250 [1:58:24<4:16:29,  3.54s/it, gpt_loss=0.607, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1898/6250 [1:58:28<4:16:29,  3.54s/it, gpt_loss=0.753, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1899/6250 [1:58:28<4:31:12,  3.74s/it, gpt_loss=0.753, lr=1.67e-6][A[2025-04-24 01:51:11,217] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  30%|███       | 1899/6250 [1:58:32<4:31:12,  3.74s/it, gpt_loss=0.686, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1900/6250 [1:58:32<4:35:49,  3.80s/it, gpt_loss=0.686, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1900/6250 [1:58:36<4:35:49,  3.80s/it, gpt_loss=0.531, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1901/6250 [1:58:36<4:45:25,  3.94s/it, gpt_loss=0.531, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1901/6250 [1:58:40<4:45:25,  3.94s/it, gpt_loss=0.635, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1902/6250 [1:58:40<4:35:16,  3.80s/it, gpt_loss=0.635, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1902/6250 [1:58:43<4:35:16,  3.80s/it, gpt_loss=0.558, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1903/6250 [1:58:43<4:21:34,  3.61s/it, gpt_loss=0.558, lr=1.67e-6][A[2025-04-24 01:51:25,412] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  30%|███       | 1903/6250 [1:58:46<4:21:34,  3.61s/it, gpt_loss=0.608, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1904/6250 [1:58:46<4:14:49,  3.52s/it, gpt_loss=0.608, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1904/6250 [1:58:50<4:14:49,  3.52s/it, gpt_loss=0.621, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1905/6250 [1:58:50<4:23:48,  3.64s/it, gpt_loss=0.621, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1905/6250 [1:58:54<4:23:48,  3.64s/it, gpt_loss=0.722, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1906/6250 [1:58:54<4:20:57,  3.60s/it, gpt_loss=0.722, lr=1.67e-6][A
Train step of epoch 0:  30%|███       | 1906/6250 [1:58:58<4:20:57,  3.60s/it, gpt_loss=0.846, lr=1.67e-6][A
Train step of epoch 0:  31%|███       | 1907/6250 [1:58:58<4:32:17,  3.76s/it, gpt_loss=0.846, lr=1.67e-6][A[2025-04-24 01:51:41,377] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  31%|███       | 1907/6250 [1:59:02<4:32:17,  3.76s/it, gpt_loss=0.697, lr=1.67e-6][A
Train step of epoch 0:  31%|███       | 1908/6250 [1:59:02<4:45:46,  3.95s/it, gpt_loss=0.697, lr=1.67e-6][A
Train step of epoch 0:  31%|███       | 1908/6250 [1:59:06<4:45:46,  3.95s/it, gpt_loss=0.744, lr=1.67e-6][A
Train step of epoch 0:  31%|███       | 1909/6250 [1:59:06<4:38:16,  3.85s/it, gpt_loss=0.744, lr=1.67e-6][A
Train step of epoch 0:  31%|███       | 1909/6250 [1:59:10<4:38:16,  3.85s/it, gpt_loss=0.65, lr=1.67e-6] [A
Train step of epoch 0:  31%|███       | 1910/6250 [1:59:10<4:46:14,  3.96s/it, gpt_loss=0.65, lr=1.67e-6][A
Train step of epoch 0:  31%|███       | 1910/6250 [1:59:14<4:46:14,  3.96s/it, gpt_loss=0.573, lr=1.67e-6][A
Train step of epoch 0:  31%|███       | 1911/6250 [1:59:14<4:39:04,  3.86s/it, gpt_loss=0.573, lr=1.67e-6][A[2025-04-24 01:51:56,433] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  31%|███       | 1911/6250 [1:59:17<4:39:04,  3.86s/it, gpt_loss=0.579, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1912/6250 [1:59:17<4:33:27,  3.78s/it, gpt_loss=0.579, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1912/6250 [1:59:21<4:33:27,  3.78s/it, gpt_loss=0.605, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1913/6250 [1:59:21<4:31:23,  3.75s/it, gpt_loss=0.605, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1913/6250 [1:59:25<4:31:23,  3.75s/it, gpt_loss=0.605, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1914/6250 [1:59:25<4:33:25,  3.78s/it, gpt_loss=0.605, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1914/6250 [1:59:28<4:33:25,  3.78s/it, gpt_loss=0.504, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1915/6250 [1:59:28<4:25:46,  3.68s/it, gpt_loss=0.504, lr=1.66e-6][A[2025-04-24 01:52:12,010] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  31%|███       | 1915/6250 [1:59:33<4:25:46,  3.68s/it, gpt_loss=0.548, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1916/6250 [1:59:33<4:45:44,  3.96s/it, gpt_loss=0.548, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1916/6250 [1:59:37<4:45:44,  3.96s/it, gpt_loss=0.808, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1917/6250 [1:59:37<4:53:34,  4.07s/it, gpt_loss=0.808, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1917/6250 [1:59:40<4:53:34,  4.07s/it, gpt_loss=0.884, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1918/6250 [1:59:40<4:35:06,  3.81s/it, gpt_loss=0.884, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1918/6250 [1:59:44<4:35:06,  3.81s/it, gpt_loss=0.612, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1919/6250 [1:59:44<4:41:37,  3.90s/it, gpt_loss=0.612, lr=1.66e-6][A[2025-04-24 01:52:27,805] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  31%|███       | 1919/6250 [1:59:49<4:41:37,  3.90s/it, gpt_loss=0.708, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1920/6250 [1:59:49<4:46:48,  3.97s/it, gpt_loss=0.708, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1920/6250 [1:59:53<4:46:48,  3.97s/it, gpt_loss=0.774, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1921/6250 [1:59:53<4:46:55,  3.98s/it, gpt_loss=0.774, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1921/6250 [1:59:57<4:46:55,  3.98s/it, gpt_loss=0.631, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1922/6250 [1:59:57<5:04:46,  4.23s/it, gpt_loss=0.631, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1922/6250 [2:00:01<5:04:46,  4.23s/it, gpt_loss=0.776, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1923/6250 [2:00:01<4:55:48,  4.10s/it, gpt_loss=0.776, lr=1.66e-6][A[2025-04-24 01:52:44,881] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  31%|███       | 1923/6250 [2:00:06<4:55:48,  4.10s/it, gpt_loss=0.619, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1924/6250 [2:00:06<5:03:48,  4.21s/it, gpt_loss=0.619, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1924/6250 [2:00:10<5:03:48,  4.21s/it, gpt_loss=0.606, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1925/6250 [2:00:10<4:57:44,  4.13s/it, gpt_loss=0.606, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1925/6250 [2:00:13<4:57:44,  4.13s/it, gpt_loss=0.6, lr=1.66e-6]  [A
Train step of epoch 0:  31%|███       | 1926/6250 [2:00:13<4:41:41,  3.91s/it, gpt_loss=0.6, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1926/6250 [2:00:16<4:41:41,  3.91s/it, gpt_loss=0.54, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1927/6250 [2:00:16<4:33:15,  3.79s/it, gpt_loss=0.54, lr=1.66e-6][A[2025-04-24 01:52:59,467] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  31%|███       | 1927/6250 [2:00:20<4:33:15,  3.79s/it, gpt_loss=0.618, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1928/6250 [2:00:20<4:31:59,  3.78s/it, gpt_loss=0.618, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1928/6250 [2:00:25<4:31:59,  3.78s/it, gpt_loss=0.55, lr=1.66e-6] [A
Train step of epoch 0:  31%|███       | 1929/6250 [2:00:25<4:52:18,  4.06s/it, gpt_loss=0.55, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1929/6250 [2:00:29<4:52:18,  4.06s/it, gpt_loss=0.647, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1930/6250 [2:00:29<4:48:11,  4.00s/it, gpt_loss=0.647, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1930/6250 [2:00:33<4:48:11,  4.00s/it, gpt_loss=0.579, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1931/6250 [2:00:33<5:01:33,  4.19s/it, gpt_loss=0.579, lr=1.66e-6][A[2025-04-24 01:53:16,089] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  31%|███       | 1931/6250 [2:00:37<5:01:33,  4.19s/it, gpt_loss=0.491, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1932/6250 [2:00:37<4:44:35,  3.95s/it, gpt_loss=0.491, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1932/6250 [2:00:41<4:44:35,  3.95s/it, gpt_loss=0.674, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1933/6250 [2:00:41<4:58:34,  4.15s/it, gpt_loss=0.674, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1933/6250 [2:00:46<4:58:34,  4.15s/it, gpt_loss=0.736, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1934/6250 [2:00:46<5:01:20,  4.19s/it, gpt_loss=0.736, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1934/6250 [2:00:49<5:01:20,  4.19s/it, gpt_loss=0.501, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1935/6250 [2:00:49<4:35:18,  3.83s/it, gpt_loss=0.501, lr=1.66e-6][A[2025-04-24 01:53:31,693] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  31%|███       | 1935/6250 [2:00:52<4:35:18,  3.83s/it, gpt_loss=0.75, lr=1.66e-6] [A
Train step of epoch 0:  31%|███       | 1936/6250 [2:00:52<4:33:10,  3.80s/it, gpt_loss=0.75, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1936/6250 [2:00:56<4:33:10,  3.80s/it, gpt_loss=0.611, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1937/6250 [2:00:56<4:27:03,  3.72s/it, gpt_loss=0.611, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1937/6250 [2:01:00<4:27:03,  3.72s/it, gpt_loss=0.646, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1938/6250 [2:01:00<4:29:26,  3.75s/it, gpt_loss=0.646, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1938/6250 [2:01:04<4:29:26,  3.75s/it, gpt_loss=0.727, lr=1.66e-6][A
Train step of epoch 0:  31%|███       | 1939/6250 [2:01:04<4:37:17,  3.86s/it, gpt_loss=0.727, lr=1.66e-6][A[2025-04-24 01:53:47,149] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  31%|███       | 1939/6250 [2:01:08<4:37:17,  3.86s/it, gpt_loss=0.61, lr=1.65e-6] [A
Train step of epoch 0:  31%|███       | 1940/6250 [2:01:08<4:40:06,  3.90s/it, gpt_loss=0.61, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1940/6250 [2:01:11<4:40:06,  3.90s/it, gpt_loss=0.716, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1941/6250 [2:01:11<4:26:12,  3.71s/it, gpt_loss=0.716, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1941/6250 [2:01:15<4:26:12,  3.71s/it, gpt_loss=0.832, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1942/6250 [2:01:15<4:26:47,  3.72s/it, gpt_loss=0.832, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1942/6250 [2:01:18<4:26:47,  3.72s/it, gpt_loss=0.537, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1943/6250 [2:01:18<4:06:33,  3.43s/it, gpt_loss=0.537, lr=1.65e-6][A[2025-04-24 01:54:00,236] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  31%|███       | 1943/6250 [2:01:21<4:06:33,  3.43s/it, gpt_loss=0.569, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1944/6250 [2:01:21<4:03:53,  3.40s/it, gpt_loss=0.569, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1944/6250 [2:01:24<4:03:53,  3.40s/it, gpt_loss=0.478, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1945/6250 [2:01:24<4:01:11,  3.36s/it, gpt_loss=0.478, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1945/6250 [2:01:28<4:01:11,  3.36s/it, gpt_loss=0.647, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1946/6250 [2:01:28<4:06:19,  3.43s/it, gpt_loss=0.647, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1946/6250 [2:01:31<4:06:19,  3.43s/it, gpt_loss=0.798, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1947/6250 [2:01:31<4:03:45,  3.40s/it, gpt_loss=0.798, lr=1.65e-6][A[2025-04-24 01:54:14,717] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  31%|███       | 1947/6250 [2:01:35<4:03:45,  3.40s/it, gpt_loss=0.695, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1948/6250 [2:01:35<4:22:46,  3.66s/it, gpt_loss=0.695, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1948/6250 [2:01:39<4:22:46,  3.66s/it, gpt_loss=0.574, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1949/6250 [2:01:39<4:25:34,  3.70s/it, gpt_loss=0.574, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1949/6250 [2:01:42<4:25:34,  3.70s/it, gpt_loss=0.849, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1950/6250 [2:01:42<4:11:19,  3.51s/it, gpt_loss=0.849, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1950/6250 [2:01:46<4:11:19,  3.51s/it, gpt_loss=0.583, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1951/6250 [2:01:46<4:08:22,  3.47s/it, gpt_loss=0.583, lr=1.65e-6][A[2025-04-24 01:54:28,286] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  31%|███       | 1951/6250 [2:01:49<4:08:22,  3.47s/it, gpt_loss=0.599, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1952/6250 [2:01:49<4:05:53,  3.43s/it, gpt_loss=0.599, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1952/6250 [2:01:53<4:05:53,  3.43s/it, gpt_loss=0.785, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1953/6250 [2:01:53<4:09:35,  3.49s/it, gpt_loss=0.785, lr=1.65e-6][A
Train step of epoch 0:  31%|███       | 1953/6250 [2:01:56<4:09:35,  3.49s/it, gpt_loss=0.714, lr=1.65e-6][A
Train step of epoch 0:  31%|███▏      | 1954/6250 [2:01:56<4:17:01,  3.59s/it, gpt_loss=0.714, lr=1.65e-6][A
Train step of epoch 0:  31%|███▏      | 1954/6250 [2:02:00<4:17:01,  3.59s/it, gpt_loss=0.58, lr=1.65e-6] [A
Train step of epoch 0:  31%|███▏      | 1955/6250 [2:02:00<4:22:01,  3.66s/it, gpt_loss=0.58, lr=1.65e-6][A[2025-04-24 01:54:44,106] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  31%|███▏      | 1955/6250 [2:02:05<4:22:01,  3.66s/it, gpt_loss=0.806, lr=1.65e-6][A
Train step of epoch 0:  31%|███▏      | 1956/6250 [2:02:05<4:41:07,  3.93s/it, gpt_loss=0.806, lr=1.65e-6][A
Train step of epoch 0:  31%|███▏      | 1956/6250 [2:02:09<4:41:07,  3.93s/it, gpt_loss=0.664, lr=1.65e-6][A
Train step of epoch 0:  31%|███▏      | 1957/6250 [2:02:09<4:36:30,  3.86s/it, gpt_loss=0.664, lr=1.65e-6][A
Train step of epoch 0:  31%|███▏      | 1957/6250 [2:02:12<4:36:30,  3.86s/it, gpt_loss=0.623, lr=1.65e-6][A
Train step of epoch 0:  31%|███▏      | 1958/6250 [2:02:12<4:30:00,  3.77s/it, gpt_loss=0.623, lr=1.65e-6][A
Train step of epoch 0:  31%|███▏      | 1958/6250 [2:02:16<4:30:00,  3.77s/it, gpt_loss=0.688, lr=1.65e-6][A
Train step of epoch 0:  31%|███▏      | 1959/6250 [2:02:16<4:28:25,  3.75s/it, gpt_loss=0.688, lr=1.65e-6][A[2025-04-24 01:54:58,968] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  31%|███▏      | 1959/6250 [2:02:20<4:28:25,  3.75s/it, gpt_loss=0.702, lr=1.65e-6][A
Train step of epoch 0:  31%|███▏      | 1960/6250 [2:02:20<4:31:02,  3.79s/it, gpt_loss=0.702, lr=1.65e-6][A
Train step of epoch 0:  31%|███▏      | 1960/6250 [2:02:23<4:31:02,  3.79s/it, gpt_loss=0.529, lr=1.65e-6][A
Train step of epoch 0:  31%|███▏      | 1961/6250 [2:02:23<4:22:30,  3.67s/it, gpt_loss=0.529, lr=1.65e-6][A
Train step of epoch 0:  31%|███▏      | 1961/6250 [2:02:26<4:22:30,  3.67s/it, gpt_loss=0.682, lr=1.65e-6][A
Train step of epoch 0:  31%|███▏      | 1962/6250 [2:02:26<4:09:59,  3.50s/it, gpt_loss=0.682, lr=1.65e-6][A
Train step of epoch 0:  31%|███▏      | 1962/6250 [2:02:31<4:09:59,  3.50s/it, gpt_loss=0.701, lr=1.65e-6][A
Train step of epoch 0:  31%|███▏      | 1963/6250 [2:02:31<4:32:04,  3.81s/it, gpt_loss=0.701, lr=1.65e-6][A[2025-04-24 01:55:13,437] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  31%|███▏      | 1963/6250 [2:02:34<4:32:04,  3.81s/it, gpt_loss=0.499, lr=1.64e-6][A
Train step of epoch 0:  31%|███▏      | 1964/6250 [2:02:34<4:24:20,  3.70s/it, gpt_loss=0.499, lr=1.64e-6][A
Train step of epoch 0:  31%|███▏      | 1964/6250 [2:02:37<4:24:20,  3.70s/it, gpt_loss=0.68, lr=1.64e-6] [A
Train step of epoch 0:  31%|███▏      | 1965/6250 [2:02:37<4:11:36,  3.52s/it, gpt_loss=0.68, lr=1.64e-6][A
Train step of epoch 0:  31%|███▏      | 1965/6250 [2:02:41<4:11:36,  3.52s/it, gpt_loss=0.652, lr=1.64e-6][A
Train step of epoch 0:  31%|███▏      | 1966/6250 [2:02:41<4:23:49,  3.70s/it, gpt_loss=0.652, lr=1.64e-6][A
Train step of epoch 0:  31%|███▏      | 1966/6250 [2:02:44<4:23:49,  3.70s/it, gpt_loss=0.521, lr=1.64e-6][A
Train step of epoch 0:  31%|███▏      | 1967/6250 [2:02:44<4:05:59,  3.45s/it, gpt_loss=0.521, lr=1.64e-6][A[2025-04-24 01:55:26,578] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  31%|███▏      | 1967/6250 [2:02:47<4:05:59,  3.45s/it, gpt_loss=0.503, lr=1.64e-6][A
Train step of epoch 0:  31%|███▏      | 1968/6250 [2:02:47<3:57:53,  3.33s/it, gpt_loss=0.503, lr=1.64e-6][A
Train step of epoch 0:  31%|███▏      | 1968/6250 [2:02:51<3:57:53,  3.33s/it, gpt_loss=0.702, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1969/6250 [2:02:51<3:55:25,  3.30s/it, gpt_loss=0.702, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1969/6250 [2:02:54<3:55:25,  3.30s/it, gpt_loss=0.633, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1970/6250 [2:02:54<4:01:19,  3.38s/it, gpt_loss=0.633, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1970/6250 [2:02:58<4:01:19,  3.38s/it, gpt_loss=0.624, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1971/6250 [2:02:58<4:05:06,  3.44s/it, gpt_loss=0.624, lr=1.64e-6][A[2025-04-24 01:55:40,455] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  32%|███▏      | 1971/6250 [2:03:01<4:05:06,  3.44s/it, gpt_loss=0.66, lr=1.64e-6] [A
Train step of epoch 0:  32%|███▏      | 1972/6250 [2:03:01<4:06:44,  3.46s/it, gpt_loss=0.66, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1972/6250 [2:03:05<4:06:44,  3.46s/it, gpt_loss=0.746, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1973/6250 [2:03:05<4:22:58,  3.69s/it, gpt_loss=0.746, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1973/6250 [2:03:09<4:22:58,  3.69s/it, gpt_loss=0.62, lr=1.64e-6] [A
Train step of epoch 0:  32%|███▏      | 1974/6250 [2:03:09<4:15:12,  3.58s/it, gpt_loss=0.62, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1974/6250 [2:03:12<4:15:12,  3.58s/it, gpt_loss=0.494, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1975/6250 [2:03:12<4:09:35,  3.50s/it, gpt_loss=0.494, lr=1.64e-6][A[2025-04-24 01:55:55,369] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  32%|███▏      | 1975/6250 [2:03:16<4:09:35,  3.50s/it, gpt_loss=0.578, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1976/6250 [2:03:16<4:21:03,  3.66s/it, gpt_loss=0.578, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1976/6250 [2:03:18<4:21:03,  3.66s/it, gpt_loss=0.509, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1977/6250 [2:03:18<3:52:25,  3.26s/it, gpt_loss=0.509, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1977/6250 [2:03:23<3:52:25,  3.26s/it, gpt_loss=0.519, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1978/6250 [2:03:23<4:17:13,  3.61s/it, gpt_loss=0.519, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1978/6250 [2:03:27<4:17:13,  3.61s/it, gpt_loss=0.715, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1979/6250 [2:03:27<4:32:24,  3.83s/it, gpt_loss=0.715, lr=1.64e-6][A[2025-04-24 01:56:11,410] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  32%|███▏      | 1979/6250 [2:03:32<4:32:24,  3.83s/it, gpt_loss=0.644, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1980/6250 [2:03:32<4:56:31,  4.17s/it, gpt_loss=0.644, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1980/6250 [2:03:37<4:56:31,  4.17s/it, gpt_loss=0.591, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1981/6250 [2:03:37<5:00:58,  4.23s/it, gpt_loss=0.591, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1981/6250 [2:03:40<5:00:58,  4.23s/it, gpt_loss=0.779, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1982/6250 [2:03:40<4:54:32,  4.14s/it, gpt_loss=0.779, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1982/6250 [2:03:45<4:54:32,  4.14s/it, gpt_loss=0.735, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1983/6250 [2:03:45<4:53:23,  4.13s/it, gpt_loss=0.735, lr=1.64e-6][A[2025-04-24 01:56:27,513] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  32%|███▏      | 1983/6250 [2:03:48<4:53:23,  4.13s/it, gpt_loss=0.566, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1984/6250 [2:03:48<4:44:18,  4.00s/it, gpt_loss=0.566, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1984/6250 [2:03:51<4:44:18,  4.00s/it, gpt_loss=0.724, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1985/6250 [2:03:51<4:17:58,  3.63s/it, gpt_loss=0.724, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1985/6250 [2:03:54<4:17:58,  3.63s/it, gpt_loss=0.709, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1986/6250 [2:03:54<4:09:40,  3.51s/it, gpt_loss=0.709, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1986/6250 [2:03:58<4:09:40,  3.51s/it, gpt_loss=0.605, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1987/6250 [2:03:58<4:09:07,  3.51s/it, gpt_loss=0.605, lr=1.64e-6][A[2025-04-24 01:56:40,777] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  32%|███▏      | 1987/6250 [2:04:02<4:09:07,  3.51s/it, gpt_loss=0.694, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1988/6250 [2:04:02<4:14:32,  3.58s/it, gpt_loss=0.694, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1988/6250 [2:04:06<4:14:32,  3.58s/it, gpt_loss=0.594, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1989/6250 [2:04:06<4:30:08,  3.80s/it, gpt_loss=0.594, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1989/6250 [2:04:09<4:30:08,  3.80s/it, gpt_loss=0.456, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1990/6250 [2:04:09<4:16:23,  3.61s/it, gpt_loss=0.456, lr=1.64e-6][A
Train step of epoch 0:  32%|███▏      | 1990/6250 [2:04:13<4:16:23,  3.61s/it, gpt_loss=0.85, lr=1.64e-6] [A
Train step of epoch 0:  32%|███▏      | 1991/6250 [2:04:13<4:18:08,  3.64s/it, gpt_loss=0.85, lr=1.64e-6][A[2025-04-24 01:56:54,881] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  32%|███▏      | 1991/6250 [2:04:16<4:18:08,  3.64s/it, gpt_loss=0.543, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 1992/6250 [2:04:16<4:02:59,  3.42s/it, gpt_loss=0.543, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 1992/6250 [2:04:20<4:02:59,  3.42s/it, gpt_loss=0.698, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 1993/6250 [2:04:20<4:18:00,  3.64s/it, gpt_loss=0.698, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 1993/6250 [2:04:24<4:18:00,  3.64s/it, gpt_loss=0.653, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 1994/6250 [2:04:24<4:20:08,  3.67s/it, gpt_loss=0.653, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 1994/6250 [2:04:28<4:20:08,  3.67s/it, gpt_loss=0.594, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 1995/6250 [2:04:28<4:31:01,  3.82s/it, gpt_loss=0.594, lr=1.63e-6][A[2025-04-24 01:57:11,941] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  32%|███▏      | 1995/6250 [2:04:33<4:31:01,  3.82s/it, gpt_loss=0.805, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 1996/6250 [2:04:33<4:56:09,  4.18s/it, gpt_loss=0.805, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 1996/6250 [2:04:37<4:56:09,  4.18s/it, gpt_loss=0.53, lr=1.63e-6] [A
Train step of epoch 0:  32%|███▏      | 1997/6250 [2:04:37<5:03:21,  4.28s/it, gpt_loss=0.53, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 1997/6250 [2:04:41<5:03:21,  4.28s/it, gpt_loss=0.687, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 1998/6250 [2:04:41<4:54:54,  4.16s/it, gpt_loss=0.687, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 1998/6250 [2:04:44<4:54:54,  4.16s/it, gpt_loss=0.601, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 1999/6250 [2:04:44<4:33:09,  3.86s/it, gpt_loss=0.601, lr=1.63e-6][A[2025-04-24 01:57:28,126] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-04-24 01:57:28,127] [INFO] [logging.py:107:log_dist] [Rank 0] step=500, skipped=0, lr=[1.6312689580320195e-06, 1.6312689580320195e-06], mom=[(0.9, 0.95), (0.9, 0.95)]
[2025-04-24 01:57:28,127] [INFO] [timer.py:264:stop] epoch=0/micro_step=2000/global_step=500, RunningAvgSamplesPerSec=2.222519962603756, CurrSamplesPerSec=2.0492571401349355, MemAllocated=40.57GB, MaxMemAllocated=60.14GB

Train step of epoch 0:  32%|███▏      | 1999/6250 [2:04:49<4:33:09,  3.86s/it, gpt_loss=0.486, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2000/6250 [2:04:49<4:49:45,  4.09s/it, gpt_loss=0.486, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2000/6250 [2:04:53<4:49:45,  4.09s/it, gpt_loss=0.646, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2001/6250 [2:04:53<4:42:26,  3.99s/it, gpt_loss=0.646, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2001/6250 [2:04:56<4:42:26,  3.99s/it, gpt_loss=0.503, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2002/6250 [2:04:56<4:36:37,  3.91s/it, gpt_loss=0.503, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2002/6250 [2:05:00<4:36:37,  3.91s/it, gpt_loss=0.765, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2003/6250 [2:05:00<4:30:12,  3.82s/it, gpt_loss=0.765, lr=1.63e-6][A[2025-04-24 01:57:42,526] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  32%|███▏      | 2003/6250 [2:05:03<4:30:12,  3.82s/it, gpt_loss=0.497, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2004/6250 [2:05:03<4:19:40,  3.67s/it, gpt_loss=0.497, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2004/6250 [2:05:07<4:19:40,  3.67s/it, gpt_loss=0.579, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2005/6250 [2:05:07<4:24:37,  3.74s/it, gpt_loss=0.579, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2005/6250 [2:05:10<4:24:37,  3.74s/it, gpt_loss=0.518, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2006/6250 [2:05:10<4:14:06,  3.59s/it, gpt_loss=0.518, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2006/6250 [2:05:14<4:14:06,  3.59s/it, gpt_loss=0.686, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2007/6250 [2:05:14<4:16:50,  3.63s/it, gpt_loss=0.686, lr=1.63e-6][A[2025-04-24 01:57:56,817] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  32%|███▏      | 2007/6250 [2:05:18<4:16:50,  3.63s/it, gpt_loss=0.559, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2008/6250 [2:05:18<4:12:10,  3.57s/it, gpt_loss=0.559, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2008/6250 [2:05:22<4:12:10,  3.57s/it, gpt_loss=0.536, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2009/6250 [2:05:22<4:25:56,  3.76s/it, gpt_loss=0.536, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2009/6250 [2:05:24<4:25:56,  3.76s/it, gpt_loss=0.539, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2010/6250 [2:05:24<3:53:20,  3.30s/it, gpt_loss=0.539, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2010/6250 [2:05:28<3:53:20,  3.30s/it, gpt_loss=0.595, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2011/6250 [2:05:28<4:11:25,  3.56s/it, gpt_loss=0.595, lr=1.63e-6][A[2025-04-24 01:58:11,679] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  32%|███▏      | 2011/6250 [2:05:32<4:11:25,  3.56s/it, gpt_loss=0.679, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2012/6250 [2:05:32<4:26:09,  3.77s/it, gpt_loss=0.679, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2012/6250 [2:05:37<4:26:09,  3.77s/it, gpt_loss=0.843, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2013/6250 [2:05:37<4:39:50,  3.96s/it, gpt_loss=0.843, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2013/6250 [2:05:40<4:39:50,  3.96s/it, gpt_loss=0.777, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2014/6250 [2:05:40<4:17:42,  3.65s/it, gpt_loss=0.777, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2014/6250 [2:05:43<4:17:42,  3.65s/it, gpt_loss=0.485, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2015/6250 [2:05:43<4:04:57,  3.47s/it, gpt_loss=0.485, lr=1.63e-6][A[2025-04-24 01:58:25,760] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  32%|███▏      | 2015/6250 [2:05:47<4:04:57,  3.47s/it, gpt_loss=0.651, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2016/6250 [2:05:47<4:09:35,  3.54s/it, gpt_loss=0.651, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2016/6250 [2:05:50<4:09:35,  3.54s/it, gpt_loss=0.729, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2017/6250 [2:05:50<4:07:35,  3.51s/it, gpt_loss=0.729, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2017/6250 [2:05:54<4:07:35,  3.51s/it, gpt_loss=0.598, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2018/6250 [2:05:54<4:17:22,  3.65s/it, gpt_loss=0.598, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2018/6250 [2:05:57<4:17:22,  3.65s/it, gpt_loss=0.587, lr=1.63e-6][A
Train step of epoch 0:  32%|███▏      | 2019/6250 [2:05:57<4:03:07,  3.45s/it, gpt_loss=0.587, lr=1.63e-6][A[2025-04-24 01:58:40,369] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  32%|███▏      | 2019/6250 [2:06:01<4:03:07,  3.45s/it, gpt_loss=0.533, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2020/6250 [2:06:01<4:19:11,  3.68s/it, gpt_loss=0.533, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2020/6250 [2:06:05<4:19:11,  3.68s/it, gpt_loss=0.558, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2021/6250 [2:06:05<4:14:00,  3.60s/it, gpt_loss=0.558, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2021/6250 [2:06:09<4:14:00,  3.60s/it, gpt_loss=0.647, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2022/6250 [2:06:09<4:32:00,  3.86s/it, gpt_loss=0.647, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2022/6250 [2:06:12<4:32:00,  3.86s/it, gpt_loss=0.563, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2023/6250 [2:06:12<4:08:44,  3.53s/it, gpt_loss=0.563, lr=1.62e-6][A[2025-04-24 01:58:53,952] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  32%|███▏      | 2023/6250 [2:06:15<4:08:44,  3.53s/it, gpt_loss=0.49, lr=1.62e-6] [A
Train step of epoch 0:  32%|███▏      | 2024/6250 [2:06:15<3:55:58,  3.35s/it, gpt_loss=0.49, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2024/6250 [2:06:18<3:55:58,  3.35s/it, gpt_loss=0.613, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2025/6250 [2:06:18<3:59:39,  3.40s/it, gpt_loss=0.613, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2025/6250 [2:06:22<3:59:39,  3.40s/it, gpt_loss=0.501, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2026/6250 [2:06:22<4:03:07,  3.45s/it, gpt_loss=0.501, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2026/6250 [2:06:25<4:03:07,  3.45s/it, gpt_loss=0.719, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2027/6250 [2:06:25<3:47:30,  3.23s/it, gpt_loss=0.719, lr=1.62e-6][A[2025-04-24 01:59:08,205] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  32%|███▏      | 2027/6250 [2:06:29<3:47:30,  3.23s/it, gpt_loss=0.534, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2028/6250 [2:06:29<4:12:54,  3.59s/it, gpt_loss=0.534, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2028/6250 [2:06:33<4:12:54,  3.59s/it, gpt_loss=0.602, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2029/6250 [2:06:33<4:26:25,  3.79s/it, gpt_loss=0.602, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2029/6250 [2:06:36<4:26:25,  3.79s/it, gpt_loss=0.486, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2030/6250 [2:06:36<4:08:35,  3.53s/it, gpt_loss=0.486, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2030/6250 [2:06:40<4:08:35,  3.53s/it, gpt_loss=0.603, lr=1.62e-6][A
Train step of epoch 0:  32%|███▏      | 2031/6250 [2:06:40<4:12:22,  3.59s/it, gpt_loss=0.603, lr=1.62e-6][A[2025-04-24 01:59:22,262] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  32%|███▏      | 2031/6250 [2:06:43<4:12:22,  3.59s/it, gpt_loss=0.564, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2032/6250 [2:06:43<4:03:13,  3.46s/it, gpt_loss=0.564, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2032/6250 [2:06:47<4:03:13,  3.46s/it, gpt_loss=0.619, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2033/6250 [2:06:47<4:14:01,  3.61s/it, gpt_loss=0.619, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2033/6250 [2:06:50<4:14:01,  3.61s/it, gpt_loss=0.642, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2034/6250 [2:06:50<4:09:13,  3.55s/it, gpt_loss=0.642, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2034/6250 [2:06:53<4:09:13,  3.55s/it, gpt_loss=0.506, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2035/6250 [2:06:53<3:59:21,  3.41s/it, gpt_loss=0.506, lr=1.62e-6][A[2025-04-24 01:59:35,869] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  33%|███▎      | 2035/6250 [2:06:57<3:59:21,  3.41s/it, gpt_loss=0.601, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2036/6250 [2:06:57<3:54:07,  3.33s/it, gpt_loss=0.601, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2036/6250 [2:07:00<3:54:07,  3.33s/it, gpt_loss=0.759, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2037/6250 [2:07:00<4:00:56,  3.43s/it, gpt_loss=0.759, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2037/6250 [2:07:03<4:00:56,  3.43s/it, gpt_loss=0.512, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2038/6250 [2:07:03<3:37:59,  3.11s/it, gpt_loss=0.512, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2038/6250 [2:07:08<3:37:59,  3.11s/it, gpt_loss=0.871, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2039/6250 [2:07:08<4:15:49,  3.65s/it, gpt_loss=0.871, lr=1.62e-6][A[2025-04-24 01:59:51,484] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  33%|███▎      | 2039/6250 [2:07:12<4:15:49,  3.65s/it, gpt_loss=0.68, lr=1.62e-6] [A
Train step of epoch 0:  33%|███▎      | 2040/6250 [2:07:12<4:38:05,  3.96s/it, gpt_loss=0.68, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2040/6250 [2:07:15<4:38:05,  3.96s/it, gpt_loss=0.436, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2041/6250 [2:07:15<4:19:57,  3.71s/it, gpt_loss=0.436, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2041/6250 [2:07:18<4:19:57,  3.71s/it, gpt_loss=0.694, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2042/6250 [2:07:18<3:58:46,  3.40s/it, gpt_loss=0.694, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2042/6250 [2:07:23<3:58:46,  3.40s/it, gpt_loss=0.824, lr=1.62e-6][A
Train step of epoch 0:  33%|███▎      | 2043/6250 [2:07:23<4:39:41,  3.99s/it, gpt_loss=0.824, lr=1.62e-6][A[2025-04-24 02:00:06,810] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  33%|███▎      | 2043/6250 [2:07:28<4:39:41,  3.99s/it, gpt_loss=0.545, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2044/6250 [2:07:28<4:43:22,  4.04s/it, gpt_loss=0.545, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2044/6250 [2:07:32<4:43:22,  4.04s/it, gpt_loss=0.494, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2045/6250 [2:07:32<4:52:37,  4.18s/it, gpt_loss=0.494, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2045/6250 [2:07:36<4:52:37,  4.18s/it, gpt_loss=0.607, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2046/6250 [2:07:36<4:55:52,  4.22s/it, gpt_loss=0.607, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2046/6250 [2:07:40<4:55:52,  4.22s/it, gpt_loss=0.551, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2047/6250 [2:07:40<4:49:43,  4.14s/it, gpt_loss=0.551, lr=1.61e-6][A[2025-04-24 02:00:23,053] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  33%|███▎      | 2047/6250 [2:07:44<4:49:43,  4.14s/it, gpt_loss=0.639, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2048/6250 [2:07:44<4:36:05,  3.94s/it, gpt_loss=0.639, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2048/6250 [2:07:48<4:36:05,  3.94s/it, gpt_loss=0.639, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2049/6250 [2:07:48<4:33:40,  3.91s/it, gpt_loss=0.639, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2049/6250 [2:07:51<4:33:40,  3.91s/it, gpt_loss=0.773, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2050/6250 [2:07:51<4:26:49,  3.81s/it, gpt_loss=0.773, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2050/6250 [2:07:54<4:26:49,  3.81s/it, gpt_loss=0.664, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2051/6250 [2:07:54<4:08:51,  3.56s/it, gpt_loss=0.664, lr=1.61e-6][A[2025-04-24 02:00:36,718] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  33%|███▎      | 2051/6250 [2:07:57<4:08:51,  3.56s/it, gpt_loss=0.859, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2052/6250 [2:07:57<4:03:12,  3.48s/it, gpt_loss=0.859, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2052/6250 [2:08:01<4:03:12,  3.48s/it, gpt_loss=0.505, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2053/6250 [2:08:01<4:06:23,  3.52s/it, gpt_loss=0.505, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2053/6250 [2:08:05<4:06:23,  3.52s/it, gpt_loss=0.527, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2054/6250 [2:08:05<4:04:35,  3.50s/it, gpt_loss=0.527, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2054/6250 [2:08:09<4:04:35,  3.50s/it, gpt_loss=0.554, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2055/6250 [2:08:09<4:28:17,  3.84s/it, gpt_loss=0.554, lr=1.61e-6][A[2025-04-24 02:00:52,676] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  33%|███▎      | 2055/6250 [2:08:13<4:28:17,  3.84s/it, gpt_loss=0.565, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2056/6250 [2:08:13<4:37:02,  3.96s/it, gpt_loss=0.565, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2056/6250 [2:08:17<4:37:02,  3.96s/it, gpt_loss=0.576, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2057/6250 [2:08:17<4:35:12,  3.94s/it, gpt_loss=0.576, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2057/6250 [2:08:21<4:35:12,  3.94s/it, gpt_loss=0.863, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2058/6250 [2:08:21<4:27:33,  3.83s/it, gpt_loss=0.863, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2058/6250 [2:08:25<4:27:33,  3.83s/it, gpt_loss=0.682, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2059/6250 [2:08:25<4:29:56,  3.86s/it, gpt_loss=0.682, lr=1.61e-6][A[2025-04-24 02:01:07,898] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  33%|███▎      | 2059/6250 [2:08:29<4:29:56,  3.86s/it, gpt_loss=0.496, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2060/6250 [2:08:29<4:28:57,  3.85s/it, gpt_loss=0.496, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2060/6250 [2:08:32<4:28:57,  3.85s/it, gpt_loss=0.715, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2061/6250 [2:08:32<4:25:36,  3.80s/it, gpt_loss=0.715, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2061/6250 [2:08:36<4:25:36,  3.80s/it, gpt_loss=0.723, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2062/6250 [2:08:36<4:22:44,  3.76s/it, gpt_loss=0.723, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2062/6250 [2:08:39<4:22:44,  3.76s/it, gpt_loss=0.709, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2063/6250 [2:08:39<4:15:10,  3.66s/it, gpt_loss=0.709, lr=1.61e-6][A[2025-04-24 02:01:22,390] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  33%|███▎      | 2063/6250 [2:08:43<4:15:10,  3.66s/it, gpt_loss=0.622, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2064/6250 [2:08:43<4:16:27,  3.68s/it, gpt_loss=0.622, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2064/6250 [2:08:47<4:16:27,  3.68s/it, gpt_loss=0.672, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2065/6250 [2:08:47<4:16:52,  3.68s/it, gpt_loss=0.672, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2065/6250 [2:08:51<4:16:52,  3.68s/it, gpt_loss=0.597, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2066/6250 [2:08:51<4:22:37,  3.77s/it, gpt_loss=0.597, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2066/6250 [2:08:54<4:22:37,  3.77s/it, gpt_loss=0.666, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2067/6250 [2:08:54<4:18:19,  3.71s/it, gpt_loss=0.666, lr=1.61e-6][A[2025-04-24 02:01:37,421] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  33%|███▎      | 2067/6250 [2:08:58<4:18:19,  3.71s/it, gpt_loss=0.697, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2068/6250 [2:08:58<4:20:24,  3.74s/it, gpt_loss=0.697, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2068/6250 [2:09:02<4:20:24,  3.74s/it, gpt_loss=0.729, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2069/6250 [2:09:02<4:21:34,  3.75s/it, gpt_loss=0.729, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2069/6250 [2:09:05<4:21:34,  3.75s/it, gpt_loss=0.682, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2070/6250 [2:09:05<4:12:48,  3.63s/it, gpt_loss=0.682, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2070/6250 [2:09:10<4:12:48,  3.63s/it, gpt_loss=0.712, lr=1.61e-6][A
Train step of epoch 0:  33%|███▎      | 2071/6250 [2:09:10<4:32:03,  3.91s/it, gpt_loss=0.712, lr=1.61e-6][A[2025-04-24 02:01:52,623] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  33%|███▎      | 2071/6250 [2:09:13<4:32:03,  3.91s/it, gpt_loss=0.682, lr=1.6e-6] [A
Train step of epoch 0:  33%|███▎      | 2072/6250 [2:09:13<4:23:53,  3.79s/it, gpt_loss=0.682, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2072/6250 [2:09:17<4:23:53,  3.79s/it, gpt_loss=0.697, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2073/6250 [2:09:17<4:13:39,  3.64s/it, gpt_loss=0.697, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2073/6250 [2:09:20<4:13:39,  3.64s/it, gpt_loss=0.55, lr=1.6e-6] [A
Train step of epoch 0:  33%|███▎      | 2074/6250 [2:09:20<4:16:23,  3.68s/it, gpt_loss=0.55, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2074/6250 [2:09:25<4:16:23,  3.68s/it, gpt_loss=0.72, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2075/6250 [2:09:25<4:31:02,  3.90s/it, gpt_loss=0.72, lr=1.6e-6][A[2025-04-24 02:02:08,117] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  33%|███▎      | 2075/6250 [2:09:29<4:31:02,  3.90s/it, gpt_loss=0.622, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2076/6250 [2:09:29<4:33:40,  3.93s/it, gpt_loss=0.622, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2076/6250 [2:09:33<4:33:40,  3.93s/it, gpt_loss=0.657, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2077/6250 [2:09:33<4:34:45,  3.95s/it, gpt_loss=0.657, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2077/6250 [2:09:36<4:34:45,  3.95s/it, gpt_loss=0.658, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2078/6250 [2:09:36<4:13:13,  3.64s/it, gpt_loss=0.658, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2078/6250 [2:09:39<4:13:13,  3.64s/it, gpt_loss=0.734, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2079/6250 [2:09:39<4:11:10,  3.61s/it, gpt_loss=0.734, lr=1.6e-6][A[2025-04-24 02:02:21,332] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  33%|███▎      | 2079/6250 [2:09:42<4:11:10,  3.61s/it, gpt_loss=0.513, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2080/6250 [2:09:42<3:53:17,  3.36s/it, gpt_loss=0.513, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2080/6250 [2:09:46<3:53:17,  3.36s/it, gpt_loss=0.573, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2081/6250 [2:09:46<4:00:48,  3.47s/it, gpt_loss=0.573, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2081/6250 [2:09:49<4:00:48,  3.47s/it, gpt_loss=0.624, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2082/6250 [2:09:49<3:52:02,  3.34s/it, gpt_loss=0.624, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2082/6250 [2:09:52<3:52:02,  3.34s/it, gpt_loss=0.524, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2083/6250 [2:09:52<3:44:51,  3.24s/it, gpt_loss=0.524, lr=1.6e-6][A[2025-04-24 02:02:34,027] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  33%|███▎      | 2083/6250 [2:09:55<3:44:51,  3.24s/it, gpt_loss=0.554, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2084/6250 [2:09:55<3:38:22,  3.15s/it, gpt_loss=0.554, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2084/6250 [2:09:59<3:38:22,  3.15s/it, gpt_loss=0.665, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2085/6250 [2:09:59<4:06:42,  3.55s/it, gpt_loss=0.665, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2085/6250 [2:10:04<4:06:42,  3.55s/it, gpt_loss=0.596, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2086/6250 [2:10:04<4:24:44,  3.81s/it, gpt_loss=0.596, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2086/6250 [2:10:08<4:24:44,  3.81s/it, gpt_loss=0.62, lr=1.6e-6] [A
Train step of epoch 0:  33%|███▎      | 2087/6250 [2:10:08<4:28:00,  3.86s/it, gpt_loss=0.62, lr=1.6e-6][A[2025-04-24 02:02:50,553] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  33%|███▎      | 2087/6250 [2:10:11<4:28:00,  3.86s/it, gpt_loss=0.725, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2088/6250 [2:10:11<4:22:54,  3.79s/it, gpt_loss=0.725, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2088/6250 [2:10:14<4:22:54,  3.79s/it, gpt_loss=0.546, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2089/6250 [2:10:14<4:06:14,  3.55s/it, gpt_loss=0.546, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2089/6250 [2:10:18<4:06:14,  3.55s/it, gpt_loss=0.703, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2090/6250 [2:10:18<4:13:03,  3.65s/it, gpt_loss=0.703, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2090/6250 [2:10:23<4:13:03,  3.65s/it, gpt_loss=0.51, lr=1.6e-6] [A
Train step of epoch 0:  33%|███▎      | 2091/6250 [2:10:23<4:26:59,  3.85s/it, gpt_loss=0.51, lr=1.6e-6][A[2025-04-24 02:03:06,105] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  33%|███▎      | 2091/6250 [2:10:27<4:26:59,  3.85s/it, gpt_loss=0.581, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2092/6250 [2:10:27<4:37:24,  4.00s/it, gpt_loss=0.581, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2092/6250 [2:10:31<4:37:24,  4.00s/it, gpt_loss=0.678, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2093/6250 [2:10:31<4:46:24,  4.13s/it, gpt_loss=0.678, lr=1.6e-6][A
Train step of epoch 0:  33%|███▎      | 2093/6250 [2:10:34<4:46:24,  4.13s/it, gpt_loss=0.715, lr=1.6e-6][A
Train step of epoch 0:  34%|███▎      | 2094/6250 [2:10:34<4:23:58,  3.81s/it, gpt_loss=0.715, lr=1.6e-6][A
Train step of epoch 0:  34%|███▎      | 2094/6250 [2:10:39<4:23:58,  3.81s/it, gpt_loss=0.722, lr=1.6e-6][A
Train step of epoch 0:  34%|███▎      | 2095/6250 [2:10:39<4:42:30,  4.08s/it, gpt_loss=0.722, lr=1.6e-6][A[2025-04-24 02:03:22,513] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  34%|███▎      | 2095/6250 [2:10:43<4:42:30,  4.08s/it, gpt_loss=0.491, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2096/6250 [2:10:43<4:45:03,  4.12s/it, gpt_loss=0.491, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2096/6250 [2:10:48<4:45:03,  4.12s/it, gpt_loss=0.703, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2097/6250 [2:10:48<4:49:49,  4.19s/it, gpt_loss=0.703, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2097/6250 [2:10:51<4:49:49,  4.19s/it, gpt_loss=0.834, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2098/6250 [2:10:51<4:41:14,  4.06s/it, gpt_loss=0.834, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2098/6250 [2:10:56<4:41:14,  4.06s/it, gpt_loss=0.6, lr=1.59e-6]  [A
Train step of epoch 0:  34%|███▎      | 2099/6250 [2:10:56<4:43:41,  4.10s/it, gpt_loss=0.6, lr=1.59e-6][A[2025-04-24 02:03:37,698] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  34%|███▎      | 2099/6250 [2:10:58<4:43:41,  4.10s/it, gpt_loss=0.489, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2100/6250 [2:10:58<4:18:07,  3.73s/it, gpt_loss=0.489, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2100/6250 [2:11:03<4:18:07,  3.73s/it, gpt_loss=0.652, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2101/6250 [2:11:03<4:43:44,  4.10s/it, gpt_loss=0.652, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2101/6250 [2:11:07<4:43:44,  4.10s/it, gpt_loss=0.562, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2102/6250 [2:11:07<4:26:33,  3.86s/it, gpt_loss=0.562, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2102/6250 [2:11:11<4:26:33,  3.86s/it, gpt_loss=0.561, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2103/6250 [2:11:11<4:32:04,  3.94s/it, gpt_loss=0.561, lr=1.59e-6][A[2025-04-24 02:03:53,582] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  34%|███▎      | 2103/6250 [2:11:14<4:32:04,  3.94s/it, gpt_loss=0.522, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2104/6250 [2:11:14<4:23:11,  3.81s/it, gpt_loss=0.522, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2104/6250 [2:11:16<4:23:11,  3.81s/it, gpt_loss=0.481, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2105/6250 [2:11:16<3:39:30,  3.18s/it, gpt_loss=0.481, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2105/6250 [2:11:20<3:39:30,  3.18s/it, gpt_loss=0.645, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2106/6250 [2:11:20<3:58:07,  3.45s/it, gpt_loss=0.645, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2106/6250 [2:11:23<3:58:07,  3.45s/it, gpt_loss=0.682, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2107/6250 [2:11:23<3:52:07,  3.36s/it, gpt_loss=0.682, lr=1.59e-6][A[2025-04-24 02:04:06,013] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  34%|███▎      | 2107/6250 [2:11:27<3:52:07,  3.36s/it, gpt_loss=0.629, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2108/6250 [2:11:27<3:54:40,  3.40s/it, gpt_loss=0.629, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2108/6250 [2:11:31<3:54:40,  3.40s/it, gpt_loss=0.427, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2109/6250 [2:11:31<4:09:54,  3.62s/it, gpt_loss=0.427, lr=1.59e-6][A
Train step of epoch 0:  34%|███▎      | 2109/6250 [2:11:35<4:09:54,  3.62s/it, gpt_loss=0.8, lr=1.59e-6]  [A
Train step of epoch 0:  34%|███▍      | 2110/6250 [2:11:35<4:15:37,  3.70s/it, gpt_loss=0.8, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2110/6250 [2:11:38<4:15:37,  3.70s/it, gpt_loss=0.52, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2111/6250 [2:11:38<4:03:10,  3.53s/it, gpt_loss=0.52, lr=1.59e-6][A[2025-04-24 02:04:21,646] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  34%|███▍      | 2111/6250 [2:11:42<4:03:10,  3.53s/it, gpt_loss=0.596, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2112/6250 [2:11:42<4:23:04,  3.81s/it, gpt_loss=0.596, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2112/6250 [2:11:47<4:23:04,  3.81s/it, gpt_loss=0.641, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2113/6250 [2:11:47<4:39:15,  4.05s/it, gpt_loss=0.641, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2113/6250 [2:11:50<4:39:15,  4.05s/it, gpt_loss=0.533, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2114/6250 [2:11:50<4:22:07,  3.80s/it, gpt_loss=0.533, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2114/6250 [2:11:54<4:22:07,  3.80s/it, gpt_loss=0.535, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2115/6250 [2:11:54<4:31:39,  3.94s/it, gpt_loss=0.535, lr=1.59e-6][A[2025-04-24 02:04:37,769] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  34%|███▍      | 2115/6250 [2:11:59<4:31:39,  3.94s/it, gpt_loss=0.461, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2116/6250 [2:11:59<4:33:25,  3.97s/it, gpt_loss=0.461, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2116/6250 [2:12:03<4:33:25,  3.97s/it, gpt_loss=0.516, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2117/6250 [2:12:03<4:33:40,  3.97s/it, gpt_loss=0.516, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2117/6250 [2:12:07<4:33:40,  3.97s/it, gpt_loss=0.549, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2118/6250 [2:12:07<4:40:10,  4.07s/it, gpt_loss=0.549, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2118/6250 [2:12:11<4:40:10,  4.07s/it, gpt_loss=0.709, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2119/6250 [2:12:11<4:41:15,  4.09s/it, gpt_loss=0.709, lr=1.59e-6][A[2025-04-24 02:04:54,074] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  34%|███▍      | 2119/6250 [2:12:15<4:41:15,  4.09s/it, gpt_loss=0.591, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2120/6250 [2:12:15<4:37:29,  4.03s/it, gpt_loss=0.591, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2120/6250 [2:12:18<4:37:29,  4.03s/it, gpt_loss=0.76, lr=1.59e-6] [A
Train step of epoch 0:  34%|███▍      | 2121/6250 [2:12:18<4:27:40,  3.89s/it, gpt_loss=0.76, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2121/6250 [2:12:22<4:27:40,  3.89s/it, gpt_loss=0.71, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2122/6250 [2:12:22<4:13:51,  3.69s/it, gpt_loss=0.71, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2122/6250 [2:12:25<4:13:51,  3.69s/it, gpt_loss=0.652, lr=1.59e-6][A
Train step of epoch 0:  34%|███▍      | 2123/6250 [2:12:25<4:00:01,  3.49s/it, gpt_loss=0.652, lr=1.59e-6][A[2025-04-24 02:05:06,795] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  34%|███▍      | 2123/6250 [2:12:28<4:00:01,  3.49s/it, gpt_loss=0.71, lr=1.58e-6] [A
Train step of epoch 0:  34%|███▍      | 2124/6250 [2:12:28<3:48:07,  3.32s/it, gpt_loss=0.71, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2124/6250 [2:12:31<3:48:07,  3.32s/it, gpt_loss=0.668, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2125/6250 [2:12:31<3:54:46,  3.41s/it, gpt_loss=0.668, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2125/6250 [2:12:35<3:54:46,  3.41s/it, gpt_loss=0.602, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2126/6250 [2:12:35<4:11:01,  3.65s/it, gpt_loss=0.602, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2126/6250 [2:12:39<4:11:01,  3.65s/it, gpt_loss=0.582, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2127/6250 [2:12:39<4:15:30,  3.72s/it, gpt_loss=0.582, lr=1.58e-6][A[2025-04-24 02:05:23,069] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  34%|███▍      | 2127/6250 [2:12:44<4:15:30,  3.72s/it, gpt_loss=0.633, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2128/6250 [2:12:44<4:32:40,  3.97s/it, gpt_loss=0.633, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2128/6250 [2:12:48<4:32:40,  3.97s/it, gpt_loss=0.518, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2129/6250 [2:12:48<4:28:10,  3.90s/it, gpt_loss=0.518, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2129/6250 [2:12:51<4:28:10,  3.90s/it, gpt_loss=0.747, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2130/6250 [2:12:51<4:20:31,  3.79s/it, gpt_loss=0.747, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2130/6250 [2:12:54<4:20:31,  3.79s/it, gpt_loss=0.748, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2131/6250 [2:12:54<4:05:38,  3.58s/it, gpt_loss=0.748, lr=1.58e-6][A[2025-04-24 02:05:37,272] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  34%|███▍      | 2131/6250 [2:12:58<4:05:38,  3.58s/it, gpt_loss=0.692, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2132/6250 [2:12:58<4:10:55,  3.66s/it, gpt_loss=0.692, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2132/6250 [2:13:02<4:10:55,  3.66s/it, gpt_loss=0.681, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2133/6250 [2:13:02<4:17:41,  3.76s/it, gpt_loss=0.681, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2133/6250 [2:13:06<4:17:41,  3.76s/it, gpt_loss=0.721, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2134/6250 [2:13:06<4:12:52,  3.69s/it, gpt_loss=0.721, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2134/6250 [2:13:10<4:12:52,  3.69s/it, gpt_loss=0.613, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2135/6250 [2:13:10<4:38:12,  4.06s/it, gpt_loss=0.613, lr=1.58e-6][A[2025-04-24 02:05:54,196] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  34%|███▍      | 2135/6250 [2:13:15<4:38:12,  4.06s/it, gpt_loss=0.533, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2136/6250 [2:13:15<4:47:04,  4.19s/it, gpt_loss=0.533, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2136/6250 [2:13:19<4:47:04,  4.19s/it, gpt_loss=0.583, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2137/6250 [2:13:19<4:36:07,  4.03s/it, gpt_loss=0.583, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2137/6250 [2:13:22<4:36:07,  4.03s/it, gpt_loss=0.537, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2138/6250 [2:13:22<4:25:07,  3.87s/it, gpt_loss=0.537, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2138/6250 [2:13:26<4:25:07,  3.87s/it, gpt_loss=0.726, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2139/6250 [2:13:26<4:31:33,  3.96s/it, gpt_loss=0.726, lr=1.58e-6][A[2025-04-24 02:06:09,807] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  34%|███▍      | 2139/6250 [2:13:31<4:31:33,  3.96s/it, gpt_loss=0.812, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2140/6250 [2:13:31<4:37:51,  4.06s/it, gpt_loss=0.812, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2140/6250 [2:13:35<4:37:51,  4.06s/it, gpt_loss=0.68, lr=1.58e-6] [A
Train step of epoch 0:  34%|███▍      | 2141/6250 [2:13:35<4:43:41,  4.14s/it, gpt_loss=0.68, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2141/6250 [2:13:38<4:43:41,  4.14s/it, gpt_loss=0.454, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2142/6250 [2:13:38<4:27:11,  3.90s/it, gpt_loss=0.454, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2142/6250 [2:13:43<4:27:11,  3.90s/it, gpt_loss=0.571, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2143/6250 [2:13:43<4:35:04,  4.02s/it, gpt_loss=0.571, lr=1.58e-6][A[2025-04-24 02:06:26,122] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  34%|███▍      | 2143/6250 [2:13:47<4:35:04,  4.02s/it, gpt_loss=0.691, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2144/6250 [2:13:47<4:41:35,  4.11s/it, gpt_loss=0.691, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2144/6250 [2:13:50<4:41:35,  4.11s/it, gpt_loss=0.655, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2145/6250 [2:13:50<4:23:42,  3.85s/it, gpt_loss=0.655, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2145/6250 [2:13:54<4:23:42,  3.85s/it, gpt_loss=0.794, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2146/6250 [2:13:54<4:21:03,  3.82s/it, gpt_loss=0.794, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2146/6250 [2:13:57<4:21:03,  3.82s/it, gpt_loss=0.882, lr=1.58e-6][A
Train step of epoch 0:  34%|███▍      | 2147/6250 [2:13:57<4:05:27,  3.59s/it, gpt_loss=0.882, lr=1.58e-6][A[2025-04-24 02:06:39,619] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  34%|███▍      | 2147/6250 [2:14:00<4:05:27,  3.59s/it, gpt_loss=0.499, lr=1.57e-6][A
Train step of epoch 0:  34%|███▍      | 2148/6250 [2:14:00<4:02:46,  3.55s/it, gpt_loss=0.499, lr=1.57e-6][A
Train step of epoch 0:  34%|███▍      | 2148/6250 [2:14:03<4:02:46,  3.55s/it, gpt_loss=0.743, lr=1.57e-6][A
Train step of epoch 0:  34%|███▍      | 2149/6250 [2:14:03<3:50:59,  3.38s/it, gpt_loss=0.743, lr=1.57e-6][A
Train step of epoch 0:  34%|███▍      | 2149/6250 [2:14:06<3:50:59,  3.38s/it, gpt_loss=0.551, lr=1.57e-6][A
Train step of epoch 0:  34%|███▍      | 2150/6250 [2:14:06<3:37:25,  3.18s/it, gpt_loss=0.551, lr=1.57e-6][A
Train step of epoch 0:  34%|███▍      | 2150/6250 [2:14:09<3:37:25,  3.18s/it, gpt_loss=0.636, lr=1.57e-6][A
Train step of epoch 0:  34%|███▍      | 2151/6250 [2:14:09<3:39:04,  3.21s/it, gpt_loss=0.636, lr=1.57e-6][A[2025-04-24 02:06:52,193] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  34%|███▍      | 2151/6250 [2:14:13<3:39:04,  3.21s/it, gpt_loss=0.594, lr=1.57e-6][A
Train step of epoch 0:  34%|███▍      | 2152/6250 [2:14:13<3:47:16,  3.33s/it, gpt_loss=0.594, lr=1.57e-6][A
Train step of epoch 0:  34%|███▍      | 2152/6250 [2:14:18<3:47:16,  3.33s/it, gpt_loss=0.55, lr=1.57e-6] [A
Train step of epoch 0:  34%|███▍      | 2153/6250 [2:14:18<4:12:50,  3.70s/it, gpt_loss=0.55, lr=1.57e-6][A
Train step of epoch 0:  34%|███▍      | 2153/6250 [2:14:21<4:12:50,  3.70s/it, gpt_loss=0.636, lr=1.57e-6][A
Train step of epoch 0:  34%|███▍      | 2154/6250 [2:14:21<4:17:12,  3.77s/it, gpt_loss=0.636, lr=1.57e-6][A
Train step of epoch 0:  34%|███▍      | 2154/6250 [2:14:25<4:17:12,  3.77s/it, gpt_loss=0.656, lr=1.57e-6][A
Train step of epoch 0:  34%|███▍      | 2155/6250 [2:14:25<4:14:18,  3.73s/it, gpt_loss=0.656, lr=1.57e-6][A[2025-04-24 02:07:07,521] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  34%|███▍      | 2155/6250 [2:14:28<4:14:18,  3.73s/it, gpt_loss=0.524, lr=1.57e-6][A
Train step of epoch 0:  34%|███▍      | 2156/6250 [2:14:28<4:03:30,  3.57s/it, gpt_loss=0.524, lr=1.57e-6][A
Train step of epoch 0:  34%|███▍      | 2156/6250 [2:14:32<4:03:30,  3.57s/it, gpt_loss=0.782, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2157/6250 [2:14:32<4:15:53,  3.75s/it, gpt_loss=0.782, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2157/6250 [2:14:37<4:15:53,  3.75s/it, gpt_loss=0.816, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2158/6250 [2:14:37<4:27:28,  3.92s/it, gpt_loss=0.816, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2158/6250 [2:14:41<4:27:28,  3.92s/it, gpt_loss=0.749, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2159/6250 [2:14:41<4:28:26,  3.94s/it, gpt_loss=0.749, lr=1.57e-6][A[2025-04-24 02:07:24,053] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  35%|███▍      | 2159/6250 [2:14:45<4:28:26,  3.94s/it, gpt_loss=0.718, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2160/6250 [2:14:45<4:30:57,  3.97s/it, gpt_loss=0.718, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2160/6250 [2:14:48<4:30:57,  3.97s/it, gpt_loss=0.545, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2161/6250 [2:14:48<4:16:32,  3.76s/it, gpt_loss=0.545, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2161/6250 [2:14:51<4:16:32,  3.76s/it, gpt_loss=0.537, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2162/6250 [2:14:51<4:09:08,  3.66s/it, gpt_loss=0.537, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2162/6250 [2:14:55<4:09:08,  3.66s/it, gpt_loss=0.689, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2163/6250 [2:14:55<4:11:49,  3.70s/it, gpt_loss=0.689, lr=1.57e-6][A[2025-04-24 02:07:37,744] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  35%|███▍      | 2163/6250 [2:14:59<4:11:49,  3.70s/it, gpt_loss=0.604, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2164/6250 [2:14:59<4:02:01,  3.55s/it, gpt_loss=0.604, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2164/6250 [2:15:03<4:02:01,  3.55s/it, gpt_loss=0.597, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2165/6250 [2:15:03<4:15:06,  3.75s/it, gpt_loss=0.597, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2165/6250 [2:15:06<4:15:06,  3.75s/it, gpt_loss=0.622, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2166/6250 [2:15:06<4:12:31,  3.71s/it, gpt_loss=0.622, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2166/6250 [2:15:10<4:12:31,  3.71s/it, gpt_loss=0.799, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2167/6250 [2:15:10<4:17:19,  3.78s/it, gpt_loss=0.799, lr=1.57e-6][A[2025-04-24 02:07:53,013] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  35%|███▍      | 2167/6250 [2:15:14<4:17:19,  3.78s/it, gpt_loss=0.542, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2168/6250 [2:15:14<4:11:31,  3.70s/it, gpt_loss=0.542, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2168/6250 [2:15:18<4:11:31,  3.70s/it, gpt_loss=0.67, lr=1.57e-6] [A
Train step of epoch 0:  35%|███▍      | 2169/6250 [2:15:18<4:18:41,  3.80s/it, gpt_loss=0.67, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2169/6250 [2:15:21<4:18:41,  3.80s/it, gpt_loss=0.719, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2170/6250 [2:15:21<4:15:30,  3.76s/it, gpt_loss=0.719, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2170/6250 [2:15:25<4:15:30,  3.76s/it, gpt_loss=0.566, lr=1.57e-6][A
Train step of epoch 0:  35%|███▍      | 2171/6250 [2:15:25<4:10:03,  3.68s/it, gpt_loss=0.566, lr=1.57e-6][A[2025-04-24 02:08:08,582] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  35%|███▍      | 2171/6250 [2:15:29<4:10:03,  3.68s/it, gpt_loss=0.758, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2172/6250 [2:15:29<4:24:11,  3.89s/it, gpt_loss=0.758, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2172/6250 [2:15:34<4:24:11,  3.89s/it, gpt_loss=0.693, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2173/6250 [2:15:34<4:33:42,  4.03s/it, gpt_loss=0.693, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2173/6250 [2:15:37<4:33:42,  4.03s/it, gpt_loss=0.73, lr=1.56e-6] [A
Train step of epoch 0:  35%|███▍      | 2174/6250 [2:15:37<4:24:22,  3.89s/it, gpt_loss=0.73, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2174/6250 [2:15:42<4:24:22,  3.89s/it, gpt_loss=0.759, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2175/6250 [2:15:42<4:50:24,  4.28s/it, gpt_loss=0.759, lr=1.56e-6][A[2025-04-24 02:08:25,908] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  35%|███▍      | 2175/6250 [2:15:47<4:50:24,  4.28s/it, gpt_loss=0.625, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2176/6250 [2:15:47<4:49:15,  4.26s/it, gpt_loss=0.625, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2176/6250 [2:15:51<4:49:15,  4.26s/it, gpt_loss=0.725, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2177/6250 [2:15:51<4:50:28,  4.28s/it, gpt_loss=0.725, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2177/6250 [2:15:54<4:50:28,  4.28s/it, gpt_loss=0.771, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2178/6250 [2:15:54<4:27:47,  3.95s/it, gpt_loss=0.771, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2178/6250 [2:15:57<4:27:47,  3.95s/it, gpt_loss=0.674, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2179/6250 [2:15:57<4:06:56,  3.64s/it, gpt_loss=0.674, lr=1.56e-6][A[2025-04-24 02:08:40,112] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  35%|███▍      | 2179/6250 [2:16:01<4:06:56,  3.64s/it, gpt_loss=0.637, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2180/6250 [2:16:01<4:09:52,  3.68s/it, gpt_loss=0.637, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2180/6250 [2:16:05<4:09:52,  3.68s/it, gpt_loss=0.696, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2181/6250 [2:16:05<4:12:19,  3.72s/it, gpt_loss=0.696, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2181/6250 [2:16:08<4:12:19,  3.72s/it, gpt_loss=0.554, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2182/6250 [2:16:08<4:11:44,  3.71s/it, gpt_loss=0.554, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2182/6250 [2:16:12<4:11:44,  3.71s/it, gpt_loss=0.548, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2183/6250 [2:16:12<4:03:35,  3.59s/it, gpt_loss=0.548, lr=1.56e-6][A[2025-04-24 02:08:53,990] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  35%|███▍      | 2183/6250 [2:16:15<4:03:35,  3.59s/it, gpt_loss=0.495, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2184/6250 [2:16:15<3:52:41,  3.43s/it, gpt_loss=0.495, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2184/6250 [2:16:19<3:52:41,  3.43s/it, gpt_loss=0.536, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2185/6250 [2:16:19<4:12:11,  3.72s/it, gpt_loss=0.536, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2185/6250 [2:16:24<4:12:11,  3.72s/it, gpt_loss=0.526, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2186/6250 [2:16:24<4:26:31,  3.93s/it, gpt_loss=0.526, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2186/6250 [2:16:28<4:26:31,  3.93s/it, gpt_loss=0.642, lr=1.56e-6][A
Train step of epoch 0:  35%|███▍      | 2187/6250 [2:16:28<4:27:01,  3.94s/it, gpt_loss=0.642, lr=1.56e-6][A[2025-04-24 02:09:09,974] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  35%|███▍      | 2187/6250 [2:16:31<4:27:01,  3.94s/it, gpt_loss=0.63, lr=1.56e-6] [A
Train step of epoch 0:  35%|███▌      | 2188/6250 [2:16:31<4:11:44,  3.72s/it, gpt_loss=0.63, lr=1.56e-6][A
Train step of epoch 0:  35%|███▌      | 2188/6250 [2:16:35<4:11:44,  3.72s/it, gpt_loss=0.58, lr=1.56e-6][A
Train step of epoch 0:  35%|███▌      | 2189/6250 [2:16:35<4:13:52,  3.75s/it, gpt_loss=0.58, lr=1.56e-6][A
Train step of epoch 0:  35%|███▌      | 2189/6250 [2:16:39<4:13:52,  3.75s/it, gpt_loss=0.667, lr=1.56e-6][A
Train step of epoch 0:  35%|███▌      | 2190/6250 [2:16:39<4:26:33,  3.94s/it, gpt_loss=0.667, lr=1.56e-6][A
Train step of epoch 0:  35%|███▌      | 2190/6250 [2:16:43<4:26:33,  3.94s/it, gpt_loss=0.586, lr=1.56e-6][A
Train step of epoch 0:  35%|███▌      | 2191/6250 [2:16:43<4:31:41,  4.02s/it, gpt_loss=0.586, lr=1.56e-6][A[2025-04-24 02:09:25,982] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  35%|███▌      | 2191/6250 [2:16:47<4:31:41,  4.02s/it, gpt_loss=0.565, lr=1.56e-6][A
Train step of epoch 0:  35%|███▌      | 2192/6250 [2:16:47<4:23:20,  3.89s/it, gpt_loss=0.565, lr=1.56e-6][A
Train step of epoch 0:  35%|███▌      | 2192/6250 [2:16:50<4:23:20,  3.89s/it, gpt_loss=0.576, lr=1.56e-6][A
Train step of epoch 0:  35%|███▌      | 2193/6250 [2:16:50<4:10:18,  3.70s/it, gpt_loss=0.576, lr=1.56e-6][A
Train step of epoch 0:  35%|███▌      | 2193/6250 [2:16:53<4:10:18,  3.70s/it, gpt_loss=0.668, lr=1.56e-6][A
Train step of epoch 0:  35%|███▌      | 2194/6250 [2:16:53<4:01:42,  3.58s/it, gpt_loss=0.668, lr=1.56e-6][A
Train step of epoch 0:  35%|███▌      | 2194/6250 [2:16:57<4:01:42,  3.58s/it, gpt_loss=0.683, lr=1.56e-6][A
Train step of epoch 0:  35%|███▌      | 2195/6250 [2:16:57<4:01:49,  3.58s/it, gpt_loss=0.683, lr=1.56e-6][A[2025-04-24 02:09:39,742] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  35%|███▌      | 2195/6250 [2:17:01<4:01:49,  3.58s/it, gpt_loss=0.541, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2196/6250 [2:17:01<4:03:01,  3.60s/it, gpt_loss=0.541, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2196/6250 [2:17:04<4:03:01,  3.60s/it, gpt_loss=0.522, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2197/6250 [2:17:04<4:03:35,  3.61s/it, gpt_loss=0.522, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2197/6250 [2:17:08<4:03:35,  3.61s/it, gpt_loss=0.559, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2198/6250 [2:17:08<4:13:51,  3.76s/it, gpt_loss=0.559, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2198/6250 [2:17:11<4:13:51,  3.76s/it, gpt_loss=0.463, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2199/6250 [2:17:11<3:59:35,  3.55s/it, gpt_loss=0.463, lr=1.55e-6][A[2025-04-24 02:09:54,852] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  35%|███▌      | 2199/6250 [2:17:16<3:59:35,  3.55s/it, gpt_loss=0.53, lr=1.55e-6] [A
Train step of epoch 0:  35%|███▌      | 2200/6250 [2:17:16<4:14:55,  3.78s/it, gpt_loss=0.53, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2200/6250 [2:17:19<4:14:55,  3.78s/it, gpt_loss=0.628, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2201/6250 [2:17:19<4:09:06,  3.69s/it, gpt_loss=0.628, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2201/6250 [2:17:23<4:09:06,  3.69s/it, gpt_loss=0.658, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2202/6250 [2:17:23<4:11:53,  3.73s/it, gpt_loss=0.658, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2202/6250 [2:17:27<4:11:53,  3.73s/it, gpt_loss=0.598, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2203/6250 [2:17:27<4:26:42,  3.95s/it, gpt_loss=0.598, lr=1.55e-6][A[2025-04-24 02:10:09,731] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  35%|███▌      | 2203/6250 [2:17:30<4:26:42,  3.95s/it, gpt_loss=0.557, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2204/6250 [2:17:30<4:09:04,  3.69s/it, gpt_loss=0.557, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2204/6250 [2:17:34<4:09:04,  3.69s/it, gpt_loss=0.705, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2205/6250 [2:17:34<4:08:23,  3.68s/it, gpt_loss=0.705, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2205/6250 [2:17:38<4:08:23,  3.68s/it, gpt_loss=0.594, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2206/6250 [2:17:38<4:16:43,  3.81s/it, gpt_loss=0.594, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2206/6250 [2:17:42<4:16:43,  3.81s/it, gpt_loss=0.543, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2207/6250 [2:17:42<4:08:47,  3.69s/it, gpt_loss=0.543, lr=1.55e-6][A[2025-04-24 02:10:24,755] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  35%|███▌      | 2207/6250 [2:17:46<4:08:47,  3.69s/it, gpt_loss=0.589, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2208/6250 [2:17:46<4:11:45,  3.74s/it, gpt_loss=0.589, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2208/6250 [2:17:50<4:11:45,  3.74s/it, gpt_loss=0.654, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2209/6250 [2:17:50<4:20:21,  3.87s/it, gpt_loss=0.654, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2209/6250 [2:17:53<4:20:21,  3.87s/it, gpt_loss=0.602, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2210/6250 [2:17:53<4:02:06,  3.60s/it, gpt_loss=0.602, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2210/6250 [2:17:57<4:02:06,  3.60s/it, gpt_loss=0.684, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2211/6250 [2:17:57<4:22:40,  3.90s/it, gpt_loss=0.684, lr=1.55e-6][A[2025-04-24 02:10:39,396] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  35%|███▌      | 2211/6250 [2:18:00<4:22:40,  3.90s/it, gpt_loss=0.575, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2212/6250 [2:18:00<4:02:12,  3.60s/it, gpt_loss=0.575, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2212/6250 [2:18:04<4:02:12,  3.60s/it, gpt_loss=0.793, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2213/6250 [2:18:04<4:15:25,  3.80s/it, gpt_loss=0.793, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2213/6250 [2:18:09<4:15:25,  3.80s/it, gpt_loss=0.728, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2214/6250 [2:18:09<4:25:41,  3.95s/it, gpt_loss=0.728, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2214/6250 [2:18:12<4:25:41,  3.95s/it, gpt_loss=0.55, lr=1.55e-6] [A
Train step of epoch 0:  35%|███▌      | 2215/6250 [2:18:12<4:12:29,  3.75s/it, gpt_loss=0.55, lr=1.55e-6][A[2025-04-24 02:10:54,719] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  35%|███▌      | 2215/6250 [2:18:15<4:12:29,  3.75s/it, gpt_loss=0.456, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2216/6250 [2:18:15<4:06:29,  3.67s/it, gpt_loss=0.456, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2216/6250 [2:18:20<4:06:29,  3.67s/it, gpt_loss=0.761, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2217/6250 [2:18:20<4:17:06,  3.82s/it, gpt_loss=0.761, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2217/6250 [2:18:22<4:17:06,  3.82s/it, gpt_loss=0.595, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2218/6250 [2:18:22<3:56:25,  3.52s/it, gpt_loss=0.595, lr=1.55e-6][A
Train step of epoch 0:  35%|███▌      | 2218/6250 [2:18:26<3:56:25,  3.52s/it, gpt_loss=0.556, lr=1.55e-6][A
Train step of epoch 0:  36%|███▌      | 2219/6250 [2:18:26<3:47:48,  3.39s/it, gpt_loss=0.556, lr=1.55e-6][A[2025-04-24 02:11:08,529] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  36%|███▌      | 2219/6250 [2:18:29<3:47:48,  3.39s/it, gpt_loss=0.659, lr=1.55e-6][A
Train step of epoch 0:  36%|███▌      | 2220/6250 [2:18:29<3:54:20,  3.49s/it, gpt_loss=0.659, lr=1.55e-6][A
Train step of epoch 0:  36%|███▌      | 2220/6250 [2:18:34<3:54:20,  3.49s/it, gpt_loss=0.527, lr=1.55e-6][A
Train step of epoch 0:  36%|███▌      | 2221/6250 [2:18:34<4:13:28,  3.77s/it, gpt_loss=0.527, lr=1.55e-6][A
Train step of epoch 0:  36%|███▌      | 2221/6250 [2:18:38<4:13:28,  3.77s/it, gpt_loss=0.554, lr=1.55e-6][A
Train step of epoch 0:  36%|███▌      | 2222/6250 [2:18:38<4:25:03,  3.95s/it, gpt_loss=0.554, lr=1.55e-6][A
Train step of epoch 0:  36%|███▌      | 2222/6250 [2:18:41<4:25:03,  3.95s/it, gpt_loss=0.447, lr=1.55e-6][A
Train step of epoch 0:  36%|███▌      | 2223/6250 [2:18:41<4:10:59,  3.74s/it, gpt_loss=0.447, lr=1.55e-6][A[2025-04-24 02:11:25,038] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  36%|███▌      | 2223/6250 [2:18:46<4:10:59,  3.74s/it, gpt_loss=0.737, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2224/6250 [2:18:46<4:25:28,  3.96s/it, gpt_loss=0.737, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2224/6250 [2:18:49<4:25:28,  3.96s/it, gpt_loss=0.574, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2225/6250 [2:18:49<4:04:52,  3.65s/it, gpt_loss=0.574, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2225/6250 [2:18:52<4:04:52,  3.65s/it, gpt_loss=0.653, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2226/6250 [2:18:52<4:03:48,  3.64s/it, gpt_loss=0.653, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2226/6250 [2:18:55<4:03:48,  3.64s/it, gpt_loss=0.532, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2227/6250 [2:18:55<3:49:30,  3.42s/it, gpt_loss=0.532, lr=1.54e-6][A[2025-04-24 02:11:38,762] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  36%|███▌      | 2227/6250 [2:19:00<3:49:30,  3.42s/it, gpt_loss=0.538, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2228/6250 [2:19:00<4:06:16,  3.67s/it, gpt_loss=0.538, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2228/6250 [2:19:02<4:06:16,  3.67s/it, gpt_loss=0.508, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2229/6250 [2:19:02<3:50:43,  3.44s/it, gpt_loss=0.508, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2229/6250 [2:19:07<3:50:43,  3.44s/it, gpt_loss=0.804, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2230/6250 [2:19:07<4:10:36,  3.74s/it, gpt_loss=0.804, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2230/6250 [2:19:11<4:10:36,  3.74s/it, gpt_loss=0.766, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2231/6250 [2:19:11<4:12:02,  3.76s/it, gpt_loss=0.766, lr=1.54e-6][A[2025-04-24 02:11:53,836] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  36%|███▌      | 2231/6250 [2:19:15<4:12:02,  3.76s/it, gpt_loss=0.677, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2232/6250 [2:19:15<4:15:08,  3.81s/it, gpt_loss=0.677, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2232/6250 [2:19:18<4:15:08,  3.81s/it, gpt_loss=0.626, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2233/6250 [2:19:18<4:12:06,  3.77s/it, gpt_loss=0.626, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2233/6250 [2:19:22<4:12:06,  3.77s/it, gpt_loss=0.568, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2234/6250 [2:19:22<4:04:18,  3.65s/it, gpt_loss=0.568, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2234/6250 [2:19:26<4:04:18,  3.65s/it, gpt_loss=0.702, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2235/6250 [2:19:26<4:11:08,  3.75s/it, gpt_loss=0.702, lr=1.54e-6][A[2025-04-24 02:12:08,242] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  36%|███▌      | 2235/6250 [2:19:29<4:11:08,  3.75s/it, gpt_loss=0.623, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2236/6250 [2:19:29<4:03:24,  3.64s/it, gpt_loss=0.623, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2236/6250 [2:19:33<4:03:24,  3.64s/it, gpt_loss=0.671, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2237/6250 [2:19:33<4:14:44,  3.81s/it, gpt_loss=0.671, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2237/6250 [2:19:38<4:14:44,  3.81s/it, gpt_loss=0.538, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2238/6250 [2:19:38<4:24:58,  3.96s/it, gpt_loss=0.538, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2238/6250 [2:19:42<4:24:58,  3.96s/it, gpt_loss=0.753, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2239/6250 [2:19:42<4:41:54,  4.22s/it, gpt_loss=0.753, lr=1.54e-6][A[2025-04-24 02:12:25,179] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  36%|███▌      | 2239/6250 [2:19:46<4:41:54,  4.22s/it, gpt_loss=0.575, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2240/6250 [2:19:46<4:29:25,  4.03s/it, gpt_loss=0.575, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2240/6250 [2:19:50<4:29:25,  4.03s/it, gpt_loss=0.577, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2241/6250 [2:19:50<4:34:09,  4.10s/it, gpt_loss=0.577, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2241/6250 [2:19:52<4:34:09,  4.10s/it, gpt_loss=0.393, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2242/6250 [2:19:52<3:47:31,  3.41s/it, gpt_loss=0.393, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2242/6250 [2:19:57<3:47:31,  3.41s/it, gpt_loss=0.863, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2243/6250 [2:19:57<4:13:23,  3.79s/it, gpt_loss=0.863, lr=1.54e-6][A[2025-04-24 02:12:39,589] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  36%|███▌      | 2243/6250 [2:20:00<4:13:23,  3.79s/it, gpt_loss=0.815, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2244/6250 [2:20:00<4:10:37,  3.75s/it, gpt_loss=0.815, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2244/6250 [2:20:05<4:10:37,  3.75s/it, gpt_loss=0.693, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2245/6250 [2:20:05<4:30:32,  4.05s/it, gpt_loss=0.693, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2245/6250 [2:20:09<4:30:32,  4.05s/it, gpt_loss=0.498, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2246/6250 [2:20:09<4:23:39,  3.95s/it, gpt_loss=0.498, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2246/6250 [2:20:13<4:23:39,  3.95s/it, gpt_loss=0.547, lr=1.54e-6][A
Train step of epoch 0:  36%|███▌      | 2247/6250 [2:20:13<4:31:02,  4.06s/it, gpt_loss=0.547, lr=1.54e-6][A[2025-04-24 02:12:56,346] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  36%|███▌      | 2247/6250 [2:20:17<4:31:02,  4.06s/it, gpt_loss=0.482, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2248/6250 [2:20:17<4:29:08,  4.04s/it, gpt_loss=0.482, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2248/6250 [2:20:20<4:29:08,  4.04s/it, gpt_loss=0.646, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2249/6250 [2:20:20<3:56:25,  3.55s/it, gpt_loss=0.646, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2249/6250 [2:20:23<3:56:25,  3.55s/it, gpt_loss=0.762, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2250/6250 [2:20:23<4:05:09,  3.68s/it, gpt_loss=0.762, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2250/6250 [2:20:27<4:05:09,  3.68s/it, gpt_loss=0.661, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2251/6250 [2:20:27<3:55:12,  3.53s/it, gpt_loss=0.661, lr=1.53e-6][A[2025-04-24 02:13:09,955] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  36%|███▌      | 2251/6250 [2:20:31<3:55:12,  3.53s/it, gpt_loss=0.626, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2252/6250 [2:20:31<4:05:20,  3.68s/it, gpt_loss=0.626, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2252/6250 [2:20:35<4:05:20,  3.68s/it, gpt_loss=0.525, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2253/6250 [2:20:35<4:11:41,  3.78s/it, gpt_loss=0.525, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2253/6250 [2:20:39<4:11:41,  3.78s/it, gpt_loss=0.46, lr=1.53e-6] [A
Train step of epoch 0:  36%|███▌      | 2254/6250 [2:20:39<4:22:49,  3.95s/it, gpt_loss=0.46, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2254/6250 [2:20:42<4:22:49,  3.95s/it, gpt_loss=0.639, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2255/6250 [2:20:42<4:01:41,  3.63s/it, gpt_loss=0.639, lr=1.53e-6][A[2025-04-24 02:13:25,288] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  36%|███▌      | 2255/6250 [2:20:46<4:01:41,  3.63s/it, gpt_loss=0.818, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2256/6250 [2:20:46<4:10:58,  3.77s/it, gpt_loss=0.818, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2256/6250 [2:20:50<4:10:58,  3.77s/it, gpt_loss=0.699, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2257/6250 [2:20:50<4:08:26,  3.73s/it, gpt_loss=0.699, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2257/6250 [2:20:53<4:08:26,  3.73s/it, gpt_loss=0.613, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2258/6250 [2:20:53<4:06:18,  3.70s/it, gpt_loss=0.613, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2258/6250 [2:20:57<4:06:18,  3.70s/it, gpt_loss=0.623, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2259/6250 [2:20:57<4:08:41,  3.74s/it, gpt_loss=0.623, lr=1.53e-6][A[2025-04-24 02:13:39,795] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  36%|███▌      | 2259/6250 [2:21:01<4:08:41,  3.74s/it, gpt_loss=0.587, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2260/6250 [2:21:01<4:02:01,  3.64s/it, gpt_loss=0.587, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2260/6250 [2:21:04<4:02:01,  3.64s/it, gpt_loss=0.51, lr=1.53e-6] [A
Train step of epoch 0:  36%|███▌      | 2261/6250 [2:21:04<3:59:17,  3.60s/it, gpt_loss=0.51, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2261/6250 [2:21:08<3:59:17,  3.60s/it, gpt_loss=0.715, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2262/6250 [2:21:08<3:56:03,  3.55s/it, gpt_loss=0.715, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2262/6250 [2:21:11<3:56:03,  3.55s/it, gpt_loss=0.573, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2263/6250 [2:21:11<3:53:26,  3.51s/it, gpt_loss=0.573, lr=1.53e-6][A[2025-04-24 02:13:53,873] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  36%|███▌      | 2263/6250 [2:21:15<3:53:26,  3.51s/it, gpt_loss=0.572, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2264/6250 [2:21:15<3:57:16,  3.57s/it, gpt_loss=0.572, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2264/6250 [2:21:18<3:57:16,  3.57s/it, gpt_loss=0.707, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2265/6250 [2:21:18<4:02:25,  3.65s/it, gpt_loss=0.707, lr=1.53e-6][A
Train step of epoch 0:  36%|███▌      | 2265/6250 [2:21:23<4:02:25,  3.65s/it, gpt_loss=0.516, lr=1.53e-6][A
Train step of epoch 0:  36%|███▋      | 2266/6250 [2:21:23<4:29:41,  4.06s/it, gpt_loss=0.516, lr=1.53e-6][A
Train step of epoch 0:  36%|███▋      | 2266/6250 [2:21:26<4:29:41,  4.06s/it, gpt_loss=0.686, lr=1.53e-6][A
Train step of epoch 0:  36%|███▋      | 2267/6250 [2:21:26<4:06:33,  3.71s/it, gpt_loss=0.686, lr=1.53e-6][A[2025-04-24 02:14:09,956] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  36%|███▋      | 2267/6250 [2:21:31<4:06:33,  3.71s/it, gpt_loss=0.714, lr=1.53e-6][A
Train step of epoch 0:  36%|███▋      | 2268/6250 [2:21:31<4:18:39,  3.90s/it, gpt_loss=0.714, lr=1.53e-6][A
Train step of epoch 0:  36%|███▋      | 2268/6250 [2:21:35<4:18:39,  3.90s/it, gpt_loss=0.505, lr=1.53e-6][A
Train step of epoch 0:  36%|███▋      | 2269/6250 [2:21:35<4:16:27,  3.87s/it, gpt_loss=0.505, lr=1.53e-6][A
Train step of epoch 0:  36%|███▋      | 2269/6250 [2:21:38<4:16:27,  3.87s/it, gpt_loss=0.57, lr=1.53e-6] [A
Train step of epoch 0:  36%|███▋      | 2270/6250 [2:21:38<4:02:57,  3.66s/it, gpt_loss=0.57, lr=1.53e-6][A
Train step of epoch 0:  36%|███▋      | 2270/6250 [2:21:42<4:02:57,  3.66s/it, gpt_loss=0.71, lr=1.53e-6][A
Train step of epoch 0:  36%|███▋      | 2271/6250 [2:21:42<4:20:50,  3.93s/it, gpt_loss=0.71, lr=1.53e-6][A[2025-04-24 02:14:25,150] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  36%|███▋      | 2271/6250 [2:21:46<4:20:50,  3.93s/it, gpt_loss=0.626, lr=1.52e-6][A
Train step of epoch 0:  36%|███▋      | 2272/6250 [2:21:46<4:15:06,  3.85s/it, gpt_loss=0.626, lr=1.52e-6][A
Train step of epoch 0:  36%|███▋      | 2272/6250 [2:21:49<4:15:06,  3.85s/it, gpt_loss=0.519, lr=1.52e-6][A
Train step of epoch 0:  36%|███▋      | 2273/6250 [2:21:49<4:08:50,  3.75s/it, gpt_loss=0.519, lr=1.52e-6][A
Train step of epoch 0:  36%|███▋      | 2273/6250 [2:21:53<4:08:50,  3.75s/it, gpt_loss=0.757, lr=1.52e-6][A
Train step of epoch 0:  36%|███▋      | 2274/6250 [2:21:53<4:13:03,  3.82s/it, gpt_loss=0.757, lr=1.52e-6][A
Train step of epoch 0:  36%|███▋      | 2274/6250 [2:21:57<4:13:03,  3.82s/it, gpt_loss=0.633, lr=1.52e-6][A
Train step of epoch 0:  36%|███▋      | 2275/6250 [2:21:57<4:04:37,  3.69s/it, gpt_loss=0.633, lr=1.52e-6][A[2025-04-24 02:14:39,866] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  36%|███▋      | 2275/6250 [2:22:01<4:04:37,  3.69s/it, gpt_loss=0.578, lr=1.52e-6][A
Train step of epoch 0:  36%|███▋      | 2276/6250 [2:22:01<4:06:58,  3.73s/it, gpt_loss=0.578, lr=1.52e-6][A
Train step of epoch 0:  36%|███▋      | 2276/6250 [2:22:05<4:06:58,  3.73s/it, gpt_loss=0.505, lr=1.52e-6][A
Train step of epoch 0:  36%|███▋      | 2277/6250 [2:22:05<4:25:46,  4.01s/it, gpt_loss=0.505, lr=1.52e-6][A
Train step of epoch 0:  36%|███▋      | 2277/6250 [2:22:09<4:25:46,  4.01s/it, gpt_loss=0.493, lr=1.52e-6][A
Train step of epoch 0:  36%|███▋      | 2278/6250 [2:22:09<4:25:19,  4.01s/it, gpt_loss=0.493, lr=1.52e-6][A
Train step of epoch 0:  36%|███▋      | 2278/6250 [2:22:14<4:25:19,  4.01s/it, gpt_loss=0.588, lr=1.52e-6][A
Train step of epoch 0:  36%|███▋      | 2279/6250 [2:22:14<4:37:55,  4.20s/it, gpt_loss=0.588, lr=1.52e-6][A[2025-04-24 02:14:56,872] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  36%|███▋      | 2279/6250 [2:22:18<4:37:55,  4.20s/it, gpt_loss=0.578, lr=1.52e-6][A
Train step of epoch 0:  36%|███▋      | 2280/6250 [2:22:18<4:27:40,  4.05s/it, gpt_loss=0.578, lr=1.52e-6][A
Train step of epoch 0:  36%|███▋      | 2280/6250 [2:22:22<4:27:40,  4.05s/it, gpt_loss=0.722, lr=1.52e-6][A
Train step of epoch 0:  36%|███▋      | 2281/6250 [2:22:22<4:32:10,  4.11s/it, gpt_loss=0.722, lr=1.52e-6][A
Train step of epoch 0:  36%|███▋      | 2281/6250 [2:22:28<4:32:10,  4.11s/it, gpt_loss=0.702, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2282/6250 [2:22:28<5:09:54,  4.69s/it, gpt_loss=0.702, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2282/6250 [2:22:32<5:09:54,  4.69s/it, gpt_loss=0.569, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2283/6250 [2:22:32<4:50:49,  4.40s/it, gpt_loss=0.569, lr=1.52e-6][A[2025-04-24 02:15:13,743] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  37%|███▋      | 2283/6250 [2:22:35<4:50:49,  4.40s/it, gpt_loss=0.457, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2284/6250 [2:22:35<4:20:00,  3.93s/it, gpt_loss=0.457, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2284/6250 [2:22:38<4:20:00,  3.93s/it, gpt_loss=0.612, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2285/6250 [2:22:38<4:12:34,  3.82s/it, gpt_loss=0.612, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2285/6250 [2:22:43<4:12:34,  3.82s/it, gpt_loss=0.679, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2286/6250 [2:22:43<4:27:26,  4.05s/it, gpt_loss=0.679, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2286/6250 [2:22:47<4:27:26,  4.05s/it, gpt_loss=0.638, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2287/6250 [2:22:47<4:24:48,  4.01s/it, gpt_loss=0.638, lr=1.52e-6][A[2025-04-24 02:15:30,054] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  37%|███▋      | 2287/6250 [2:22:51<4:24:48,  4.01s/it, gpt_loss=0.681, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2288/6250 [2:22:51<4:29:36,  4.08s/it, gpt_loss=0.681, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2288/6250 [2:22:55<4:29:36,  4.08s/it, gpt_loss=0.592, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2289/6250 [2:22:55<4:26:13,  4.03s/it, gpt_loss=0.592, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2289/6250 [2:22:58<4:26:13,  4.03s/it, gpt_loss=0.67, lr=1.52e-6] [A
Train step of epoch 0:  37%|███▋      | 2290/6250 [2:22:58<4:01:50,  3.66s/it, gpt_loss=0.67, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2290/6250 [2:23:02<4:01:50,  3.66s/it, gpt_loss=0.629, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2291/6250 [2:23:02<4:15:13,  3.87s/it, gpt_loss=0.629, lr=1.52e-6][A[2025-04-24 02:15:45,437] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  37%|███▋      | 2291/6250 [2:23:06<4:15:13,  3.87s/it, gpt_loss=0.638, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2292/6250 [2:23:06<4:24:05,  4.00s/it, gpt_loss=0.638, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2292/6250 [2:23:11<4:24:05,  4.00s/it, gpt_loss=0.53, lr=1.52e-6] [A
Train step of epoch 0:  37%|███▋      | 2293/6250 [2:23:11<4:32:16,  4.13s/it, gpt_loss=0.53, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2293/6250 [2:23:15<4:32:16,  4.13s/it, gpt_loss=0.648, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2294/6250 [2:23:15<4:27:29,  4.06s/it, gpt_loss=0.648, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2294/6250 [2:23:18<4:27:29,  4.06s/it, gpt_loss=0.427, lr=1.52e-6][A
Train step of epoch 0:  37%|███▋      | 2295/6250 [2:23:18<4:10:34,  3.80s/it, gpt_loss=0.427, lr=1.52e-6][A[2025-04-24 02:16:01,902] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  37%|███▋      | 2295/6250 [2:23:23<4:10:34,  3.80s/it, gpt_loss=0.547, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2296/6250 [2:23:23<4:33:12,  4.15s/it, gpt_loss=0.547, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2296/6250 [2:23:27<4:33:12,  4.15s/it, gpt_loss=0.558, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2297/6250 [2:23:27<4:34:17,  4.16s/it, gpt_loss=0.558, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2297/6250 [2:23:30<4:34:17,  4.16s/it, gpt_loss=0.451, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2298/6250 [2:23:30<4:20:29,  3.95s/it, gpt_loss=0.451, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2298/6250 [2:23:34<4:20:29,  3.95s/it, gpt_loss=0.74, lr=1.51e-6] [A
Train step of epoch 0:  37%|███▋      | 2299/6250 [2:23:34<4:18:17,  3.92s/it, gpt_loss=0.74, lr=1.51e-6][A[2025-04-24 02:16:16,859] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  37%|███▋      | 2299/6250 [2:23:38<4:18:17,  3.92s/it, gpt_loss=0.67, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2300/6250 [2:23:38<4:08:39,  3.78s/it, gpt_loss=0.67, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2300/6250 [2:23:42<4:08:39,  3.78s/it, gpt_loss=0.518, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2301/6250 [2:23:42<4:23:55,  4.01s/it, gpt_loss=0.518, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2301/6250 [2:23:46<4:23:55,  4.01s/it, gpt_loss=0.623, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2302/6250 [2:23:46<4:12:27,  3.84s/it, gpt_loss=0.623, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2302/6250 [2:23:49<4:12:27,  3.84s/it, gpt_loss=0.598, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2303/6250 [2:23:49<3:57:11,  3.61s/it, gpt_loss=0.598, lr=1.51e-6][A[2025-04-24 02:16:31,894] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  37%|███▋      | 2303/6250 [2:23:53<3:57:11,  3.61s/it, gpt_loss=0.661, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2304/6250 [2:23:53<4:04:33,  3.72s/it, gpt_loss=0.661, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2304/6250 [2:23:57<4:04:33,  3.72s/it, gpt_loss=0.546, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2305/6250 [2:23:57<4:07:16,  3.76s/it, gpt_loss=0.546, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2305/6250 [2:24:02<4:07:16,  3.76s/it, gpt_loss=0.67, lr=1.51e-6] [A
Train step of epoch 0:  37%|███▋      | 2306/6250 [2:24:02<4:39:41,  4.25s/it, gpt_loss=0.67, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2306/6250 [2:24:05<4:39:41,  4.25s/it, gpt_loss=0.678, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2307/6250 [2:24:05<4:23:05,  4.00s/it, gpt_loss=0.678, lr=1.51e-6][A[2025-04-24 02:16:48,267] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  37%|███▋      | 2307/6250 [2:24:09<4:23:05,  4.00s/it, gpt_loss=0.654, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2308/6250 [2:24:09<4:16:50,  3.91s/it, gpt_loss=0.654, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2308/6250 [2:24:13<4:16:50,  3.91s/it, gpt_loss=0.749, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2309/6250 [2:24:13<4:26:31,  4.06s/it, gpt_loss=0.749, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2309/6250 [2:24:17<4:26:31,  4.06s/it, gpt_loss=0.731, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2310/6250 [2:24:17<4:18:54,  3.94s/it, gpt_loss=0.731, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2310/6250 [2:24:20<4:18:54,  3.94s/it, gpt_loss=0.498, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2311/6250 [2:24:20<3:48:24,  3.48s/it, gpt_loss=0.498, lr=1.51e-6][A[2025-04-24 02:17:04,127] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  37%|███▋      | 2311/6250 [2:24:25<3:48:24,  3.48s/it, gpt_loss=0.647, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2312/6250 [2:24:25<4:25:50,  4.05s/it, gpt_loss=0.647, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2312/6250 [2:24:29<4:25:50,  4.05s/it, gpt_loss=0.714, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2313/6250 [2:24:29<4:21:47,  3.99s/it, gpt_loss=0.714, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2313/6250 [2:24:33<4:21:47,  3.99s/it, gpt_loss=0.746, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2314/6250 [2:24:33<4:22:10,  4.00s/it, gpt_loss=0.746, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2314/6250 [2:24:37<4:22:10,  4.00s/it, gpt_loss=0.551, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2315/6250 [2:24:37<4:33:29,  4.17s/it, gpt_loss=0.551, lr=1.51e-6][A[2025-04-24 02:17:21,761] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  37%|███▋      | 2315/6250 [2:24:43<4:33:29,  4.17s/it, gpt_loss=0.663, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2316/6250 [2:24:43<4:53:38,  4.48s/it, gpt_loss=0.663, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2316/6250 [2:24:47<4:53:38,  4.48s/it, gpt_loss=0.591, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2317/6250 [2:24:47<4:46:52,  4.38s/it, gpt_loss=0.591, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2317/6250 [2:24:49<4:46:52,  4.38s/it, gpt_loss=0.634, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2318/6250 [2:24:49<4:15:25,  3.90s/it, gpt_loss=0.634, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2318/6250 [2:24:54<4:15:25,  3.90s/it, gpt_loss=0.637, lr=1.51e-6][A
Train step of epoch 0:  37%|███▋      | 2319/6250 [2:24:54<4:24:44,  4.04s/it, gpt_loss=0.637, lr=1.51e-6][A[2025-04-24 02:17:37,623] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  37%|███▋      | 2319/6250 [2:24:58<4:24:44,  4.04s/it, gpt_loss=0.675, lr=1.5e-6] [A
Train step of epoch 0:  37%|███▋      | 2320/6250 [2:24:58<4:35:02,  4.20s/it, gpt_loss=0.675, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2320/6250 [2:25:03<4:35:02,  4.20s/it, gpt_loss=0.679, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2321/6250 [2:25:03<4:40:50,  4.29s/it, gpt_loss=0.679, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2321/6250 [2:25:06<4:40:50,  4.29s/it, gpt_loss=0.542, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2322/6250 [2:25:06<4:16:30,  3.92s/it, gpt_loss=0.542, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2322/6250 [2:25:10<4:16:30,  3.92s/it, gpt_loss=0.6, lr=1.5e-6]  [A
Train step of epoch 0:  37%|███▋      | 2323/6250 [2:25:10<4:21:01,  3.99s/it, gpt_loss=0.6, lr=1.5e-6][A[2025-04-24 02:17:53,772] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  37%|███▋      | 2323/6250 [2:25:15<4:21:01,  3.99s/it, gpt_loss=0.453, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2324/6250 [2:25:15<4:29:56,  4.13s/it, gpt_loss=0.453, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2324/6250 [2:25:18<4:29:56,  4.13s/it, gpt_loss=0.792, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2325/6250 [2:25:18<4:25:33,  4.06s/it, gpt_loss=0.792, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2325/6250 [2:25:21<4:25:33,  4.06s/it, gpt_loss=0.528, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2326/6250 [2:25:21<4:02:47,  3.71s/it, gpt_loss=0.528, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2326/6250 [2:25:25<4:02:47,  3.71s/it, gpt_loss=0.771, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2327/6250 [2:25:25<4:03:07,  3.72s/it, gpt_loss=0.771, lr=1.5e-6][A[2025-04-24 02:18:08,666] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  37%|███▋      | 2327/6250 [2:25:29<4:03:07,  3.72s/it, gpt_loss=0.567, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2328/6250 [2:25:29<4:15:30,  3.91s/it, gpt_loss=0.567, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2328/6250 [2:25:34<4:15:30,  3.91s/it, gpt_loss=0.693, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2329/6250 [2:25:34<4:21:26,  4.00s/it, gpt_loss=0.693, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2329/6250 [2:25:37<4:21:26,  4.00s/it, gpt_loss=0.573, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2330/6250 [2:25:37<4:06:12,  3.77s/it, gpt_loss=0.573, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2330/6250 [2:25:41<4:06:12,  3.77s/it, gpt_loss=0.664, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2331/6250 [2:25:41<4:03:59,  3.74s/it, gpt_loss=0.664, lr=1.5e-6][A[2025-04-24 02:18:23,023] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  37%|███▋      | 2331/6250 [2:25:44<4:03:59,  3.74s/it, gpt_loss=0.631, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2332/6250 [2:25:44<3:54:32,  3.59s/it, gpt_loss=0.631, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2332/6250 [2:25:48<3:54:32,  3.59s/it, gpt_loss=0.596, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2333/6250 [2:25:48<3:59:45,  3.67s/it, gpt_loss=0.596, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2333/6250 [2:25:51<3:59:45,  3.67s/it, gpt_loss=0.739, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2334/6250 [2:25:51<4:02:37,  3.72s/it, gpt_loss=0.739, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2334/6250 [2:25:54<4:02:37,  3.72s/it, gpt_loss=0.661, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2335/6250 [2:25:54<3:48:52,  3.51s/it, gpt_loss=0.661, lr=1.5e-6][A[2025-04-24 02:18:38,913] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  37%|███▋      | 2335/6250 [2:26:00<3:48:52,  3.51s/it, gpt_loss=0.583, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2336/6250 [2:26:00<4:21:43,  4.01s/it, gpt_loss=0.583, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2336/6250 [2:26:04<4:21:43,  4.01s/it, gpt_loss=0.767, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2337/6250 [2:26:04<4:21:38,  4.01s/it, gpt_loss=0.767, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2337/6250 [2:26:07<4:21:38,  4.01s/it, gpt_loss=0.563, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2338/6250 [2:26:07<4:17:01,  3.94s/it, gpt_loss=0.563, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2338/6250 [2:26:11<4:17:01,  3.94s/it, gpt_loss=0.587, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2339/6250 [2:26:11<4:18:15,  3.96s/it, gpt_loss=0.587, lr=1.5e-6][A[2025-04-24 02:18:55,079] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  37%|███▋      | 2339/6250 [2:26:16<4:18:15,  3.96s/it, gpt_loss=0.642, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2340/6250 [2:26:16<4:26:06,  4.08s/it, gpt_loss=0.642, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2340/6250 [2:26:19<4:26:06,  4.08s/it, gpt_loss=0.474, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2341/6250 [2:26:19<4:00:10,  3.69s/it, gpt_loss=0.474, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2341/6250 [2:26:22<4:00:10,  3.69s/it, gpt_loss=0.494, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2342/6250 [2:26:22<3:53:15,  3.58s/it, gpt_loss=0.494, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2342/6250 [2:26:26<3:53:15,  3.58s/it, gpt_loss=0.779, lr=1.5e-6][A
Train step of epoch 0:  37%|███▋      | 2343/6250 [2:26:26<3:54:38,  3.60s/it, gpt_loss=0.779, lr=1.5e-6][A[2025-04-24 02:19:08,615] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  37%|███▋      | 2343/6250 [2:26:29<3:54:38,  3.60s/it, gpt_loss=0.601, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2344/6250 [2:26:29<3:58:08,  3.66s/it, gpt_loss=0.601, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2344/6250 [2:26:32<3:58:08,  3.66s/it, gpt_loss=0.583, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2345/6250 [2:26:32<3:42:06,  3.41s/it, gpt_loss=0.583, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2345/6250 [2:26:37<3:42:06,  3.41s/it, gpt_loss=0.822, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2346/6250 [2:26:37<4:10:54,  3.86s/it, gpt_loss=0.822, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2346/6250 [2:26:41<4:10:54,  3.86s/it, gpt_loss=0.564, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2347/6250 [2:26:41<4:06:09,  3.78s/it, gpt_loss=0.564, lr=1.49e-6][A[2025-04-24 02:19:23,794] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  38%|███▊      | 2347/6250 [2:26:45<4:06:09,  3.78s/it, gpt_loss=0.753, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2348/6250 [2:26:45<4:07:02,  3.80s/it, gpt_loss=0.753, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2348/6250 [2:26:48<4:07:02,  3.80s/it, gpt_loss=0.692, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2349/6250 [2:26:48<3:57:19,  3.65s/it, gpt_loss=0.692, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2349/6250 [2:26:51<3:57:19,  3.65s/it, gpt_loss=0.541, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2350/6250 [2:26:51<3:49:40,  3.53s/it, gpt_loss=0.541, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2350/6250 [2:26:55<3:49:40,  3.53s/it, gpt_loss=0.603, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2351/6250 [2:26:55<3:53:56,  3.60s/it, gpt_loss=0.603, lr=1.49e-6][A[2025-04-24 02:19:37,819] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  38%|███▊      | 2351/6250 [2:26:59<3:53:56,  3.60s/it, gpt_loss=0.61, lr=1.49e-6] [A
Train step of epoch 0:  38%|███▊      | 2352/6250 [2:26:59<3:55:54,  3.63s/it, gpt_loss=0.61, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2352/6250 [2:27:02<3:55:54,  3.63s/it, gpt_loss=0.448, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2353/6250 [2:27:02<3:59:15,  3.68s/it, gpt_loss=0.448, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2353/6250 [2:27:07<3:59:15,  3.68s/it, gpt_loss=0.559, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2354/6250 [2:27:07<4:09:43,  3.85s/it, gpt_loss=0.559, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2354/6250 [2:27:11<4:09:43,  3.85s/it, gpt_loss=0.648, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2355/6250 [2:27:11<4:15:56,  3.94s/it, gpt_loss=0.648, lr=1.49e-6][A[2025-04-24 02:19:54,284] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  38%|███▊      | 2355/6250 [2:27:15<4:15:56,  3.94s/it, gpt_loss=0.671, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2356/6250 [2:27:15<4:22:10,  4.04s/it, gpt_loss=0.671, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2356/6250 [2:27:19<4:22:10,  4.04s/it, gpt_loss=0.428, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2357/6250 [2:27:19<4:18:42,  3.99s/it, gpt_loss=0.428, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2357/6250 [2:27:23<4:18:42,  3.99s/it, gpt_loss=0.642, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2358/6250 [2:27:23<4:13:56,  3.91s/it, gpt_loss=0.642, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2358/6250 [2:27:27<4:13:56,  3.91s/it, gpt_loss=0.703, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2359/6250 [2:27:27<4:31:08,  4.18s/it, gpt_loss=0.703, lr=1.49e-6][A[2025-04-24 02:20:10,607] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  38%|███▊      | 2359/6250 [2:27:31<4:31:08,  4.18s/it, gpt_loss=0.605, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2360/6250 [2:27:31<4:25:48,  4.10s/it, gpt_loss=0.605, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2360/6250 [2:27:35<4:25:48,  4.10s/it, gpt_loss=0.89, lr=1.49e-6] [A
Train step of epoch 0:  38%|███▊      | 2361/6250 [2:27:35<4:17:08,  3.97s/it, gpt_loss=0.89, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2361/6250 [2:27:38<4:17:08,  3.97s/it, gpt_loss=0.629, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2362/6250 [2:27:38<4:04:18,  3.77s/it, gpt_loss=0.629, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2362/6250 [2:27:42<4:04:18,  3.77s/it, gpt_loss=0.869, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2363/6250 [2:27:42<3:55:42,  3.64s/it, gpt_loss=0.869, lr=1.49e-6][A[2025-04-24 02:20:25,022] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  38%|███▊      | 2363/6250 [2:27:46<3:55:42,  3.64s/it, gpt_loss=0.828, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2364/6250 [2:27:46<4:04:54,  3.78s/it, gpt_loss=0.828, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2364/6250 [2:27:49<4:04:54,  3.78s/it, gpt_loss=0.705, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2365/6250 [2:27:49<4:01:52,  3.74s/it, gpt_loss=0.705, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2365/6250 [2:27:52<4:01:52,  3.74s/it, gpt_loss=0.459, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2366/6250 [2:27:52<3:36:45,  3.35s/it, gpt_loss=0.459, lr=1.49e-6][A
Train step of epoch 0:  38%|███▊      | 2366/6250 [2:27:55<3:36:45,  3.35s/it, gpt_loss=0.74, lr=1.49e-6] [A
Train step of epoch 0:  38%|███▊      | 2367/6250 [2:27:55<3:25:42,  3.18s/it, gpt_loss=0.74, lr=1.49e-6][A[2025-04-24 02:20:38,022] [WARNING] [stage3.py:2139:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  38%|███▊      | 2367/6250 [2:27:59<3:25:42,  3.18s/it, gpt_loss=0.778, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2368/6250 [2:27:59<3:44:23,  3.47s/it, gpt_loss=0.778, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2368/6250 [2:28:03<3:44:23,  3.47s/it, gpt_loss=0.697, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2369/6250 [2:28:03<3:52:30,  3.59s/it, gpt_loss=0.697, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2369/6250 [2:28:07<3:52:30,  3.59s/it, gpt_loss=0.8, lr=1.48e-6]  [A
Train step of epoch 0:  38%|███▊      | 2370/6250 [2:28:07<4:07:49,  3.83s/it, gpt_loss=0.8, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2370/6250 [2:28:11<4:07:49,  3.83s/it, gpt_loss=0.544, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2371/6250 [2:28:11<4:19:00,  4.01s/it, gpt_loss=0.544, lr=1.48e-6][A[2025-04-24 02:20:55,323] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  38%|███▊      | 2371/6250 [2:28:16<4:19:00,  4.01s/it, gpt_loss=0.51, lr=1.48e-6] [A
Train step of epoch 0:  38%|███▊      | 2372/6250 [2:28:16<4:30:41,  4.19s/it, gpt_loss=0.51, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2372/6250 [2:28:20<4:30:41,  4.19s/it, gpt_loss=0.641, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2373/6250 [2:28:20<4:23:32,  4.08s/it, gpt_loss=0.641, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2373/6250 [2:28:23<4:23:32,  4.08s/it, gpt_loss=0.767, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2374/6250 [2:28:23<4:12:15,  3.90s/it, gpt_loss=0.767, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2374/6250 [2:28:27<4:12:15,  3.90s/it, gpt_loss=0.751, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2375/6250 [2:28:27<4:08:57,  3.85s/it, gpt_loss=0.751, lr=1.48e-6][A[2025-04-24 02:21:09,463] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  38%|███▊      | 2375/6250 [2:28:30<4:08:57,  3.85s/it, gpt_loss=0.779, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2376/6250 [2:28:30<3:53:51,  3.62s/it, gpt_loss=0.779, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2376/6250 [2:28:34<3:53:51,  3.62s/it, gpt_loss=0.641, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2377/6250 [2:28:34<4:01:38,  3.74s/it, gpt_loss=0.641, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2377/6250 [2:28:37<4:01:38,  3.74s/it, gpt_loss=0.665, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2378/6250 [2:28:37<3:51:28,  3.59s/it, gpt_loss=0.665, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2378/6250 [2:28:42<3:51:28,  3.59s/it, gpt_loss=0.614, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2379/6250 [2:28:42<4:07:59,  3.84s/it, gpt_loss=0.614, lr=1.48e-6][A[2025-04-24 02:21:24,082] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  38%|███▊      | 2379/6250 [2:28:45<4:07:59,  3.84s/it, gpt_loss=0.483, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2380/6250 [2:28:45<3:50:11,  3.57s/it, gpt_loss=0.483, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2380/6250 [2:28:49<3:50:11,  3.57s/it, gpt_loss=0.559, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2381/6250 [2:28:49<3:53:38,  3.62s/it, gpt_loss=0.559, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2381/6250 [2:28:53<3:53:38,  3.62s/it, gpt_loss=0.743, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2382/6250 [2:28:53<4:00:44,  3.73s/it, gpt_loss=0.743, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2382/6250 [2:28:56<4:00:44,  3.73s/it, gpt_loss=0.531, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2383/6250 [2:28:56<3:52:01,  3.60s/it, gpt_loss=0.531, lr=1.48e-6][A[2025-04-24 02:21:39,849] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  38%|███▊      | 2383/6250 [2:29:01<3:52:01,  3.60s/it, gpt_loss=0.602, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2384/6250 [2:29:01<4:13:56,  3.94s/it, gpt_loss=0.602, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2384/6250 [2:29:04<4:13:56,  3.94s/it, gpt_loss=0.485, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2385/6250 [2:29:04<4:08:30,  3.86s/it, gpt_loss=0.485, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2385/6250 [2:29:08<4:08:30,  3.86s/it, gpt_loss=0.561, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2386/6250 [2:29:08<4:01:08,  3.74s/it, gpt_loss=0.561, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2386/6250 [2:29:12<4:01:08,  3.74s/it, gpt_loss=0.685, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2387/6250 [2:29:12<4:13:15,  3.93s/it, gpt_loss=0.685, lr=1.48e-6][A[2025-04-24 02:21:55,823] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  38%|███▊      | 2387/6250 [2:29:17<4:13:15,  3.93s/it, gpt_loss=0.663, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2388/6250 [2:29:17<4:23:16,  4.09s/it, gpt_loss=0.663, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2388/6250 [2:29:20<4:23:16,  4.09s/it, gpt_loss=0.511, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2389/6250 [2:29:20<4:08:42,  3.86s/it, gpt_loss=0.511, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2389/6250 [2:29:24<4:08:42,  3.86s/it, gpt_loss=0.529, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2390/6250 [2:29:24<4:13:44,  3.94s/it, gpt_loss=0.529, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2390/6250 [2:29:27<4:13:44,  3.94s/it, gpt_loss=0.624, lr=1.48e-6][A
Train step of epoch 0:  38%|███▊      | 2391/6250 [2:29:27<3:58:38,  3.71s/it, gpt_loss=0.624, lr=1.48e-6][A[2025-04-24 02:22:10,460] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  38%|███▊      | 2391/6250 [2:29:31<3:58:38,  3.71s/it, gpt_loss=0.608, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2392/6250 [2:29:31<4:04:13,  3.80s/it, gpt_loss=0.608, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2392/6250 [2:29:35<4:04:13,  3.80s/it, gpt_loss=0.504, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2393/6250 [2:29:35<4:02:39,  3.77s/it, gpt_loss=0.504, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2393/6250 [2:29:38<4:02:39,  3.77s/it, gpt_loss=0.837, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2394/6250 [2:29:38<3:54:30,  3.65s/it, gpt_loss=0.837, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2394/6250 [2:29:42<3:54:30,  3.65s/it, gpt_loss=0.672, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2395/6250 [2:29:42<3:55:58,  3.67s/it, gpt_loss=0.672, lr=1.47e-6][A[2025-04-24 02:22:24,740] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  38%|███▊      | 2395/6250 [2:29:45<3:55:58,  3.67s/it, gpt_loss=0.648, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2396/6250 [2:29:45<3:52:07,  3.61s/it, gpt_loss=0.648, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2396/6250 [2:29:48<3:52:07,  3.61s/it, gpt_loss=0.623, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2397/6250 [2:29:48<3:38:55,  3.41s/it, gpt_loss=0.623, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2397/6250 [2:29:51<3:38:55,  3.41s/it, gpt_loss=0.632, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2398/6250 [2:29:51<3:29:08,  3.26s/it, gpt_loss=0.632, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2398/6250 [2:29:55<3:29:08,  3.26s/it, gpt_loss=0.582, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2399/6250 [2:29:55<3:36:01,  3.37s/it, gpt_loss=0.582, lr=1.47e-6][A[2025-04-24 02:22:38,822] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-04-24 02:22:38,823] [INFO] [logging.py:107:log_dist] [Rank 0] step=600, skipped=0, lr=[1.4703203986156725e-06, 1.4703203986156725e-06], mom=[(0.9, 0.95), (0.9, 0.95)]
[2025-04-24 02:22:38,823] [INFO] [timer.py:264:stop] epoch=0/micro_step=2400/global_step=600, RunningAvgSamplesPerSec=2.2194021729896534, CurrSamplesPerSec=2.365612908399033, MemAllocated=40.57GB, MaxMemAllocated=60.14GB

Train step of epoch 0:  38%|███▊      | 2399/6250 [2:30:00<3:36:01,  3.37s/it, gpt_loss=0.73, lr=1.47e-6] [A
Train step of epoch 0:  38%|███▊      | 2400/6250 [2:30:00<4:00:19,  3.75s/it, gpt_loss=0.73, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2400/6250 [2:30:02<4:00:19,  3.75s/it, gpt_loss=0.633, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2401/6250 [2:30:02<3:41:05,  3.45s/it, gpt_loss=0.633, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2401/6250 [2:30:06<3:41:05,  3.45s/it, gpt_loss=0.704, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2402/6250 [2:30:06<3:48:05,  3.56s/it, gpt_loss=0.704, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2402/6250 [2:30:10<3:48:05,  3.56s/it, gpt_loss=0.547, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2403/6250 [2:30:10<3:46:31,  3.53s/it, gpt_loss=0.547, lr=1.47e-6][A[2025-04-24 02:22:52,624] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  38%|███▊      | 2403/6250 [2:30:13<3:46:31,  3.53s/it, gpt_loss=0.804, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2404/6250 [2:30:13<3:50:49,  3.60s/it, gpt_loss=0.804, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2404/6250 [2:30:18<3:50:49,  3.60s/it, gpt_loss=0.531, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2405/6250 [2:30:18<4:13:49,  3.96s/it, gpt_loss=0.531, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2405/6250 [2:30:22<4:13:49,  3.96s/it, gpt_loss=0.476, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2406/6250 [2:30:22<4:11:40,  3.93s/it, gpt_loss=0.476, lr=1.47e-6][A
Train step of epoch 0:  38%|███▊      | 2406/6250 [2:30:25<4:11:40,  3.93s/it, gpt_loss=0.513, lr=1.47e-6][A
Train step of epoch 0:  39%|███▊      | 2407/6250 [2:30:25<3:54:04,  3.65s/it, gpt_loss=0.513, lr=1.47e-6][A[2025-04-24 02:23:08,994] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  39%|███▊      | 2407/6250 [2:30:30<3:54:04,  3.65s/it, gpt_loss=0.659, lr=1.47e-6][A
Train step of epoch 0:  39%|███▊      | 2408/6250 [2:30:30<4:14:07,  3.97s/it, gpt_loss=0.659, lr=1.47e-6][A
Train step of epoch 0:  39%|███▊      | 2408/6250 [2:30:33<4:14:07,  3.97s/it, gpt_loss=0.497, lr=1.47e-6][A
Train step of epoch 0:  39%|███▊      | 2409/6250 [2:30:33<4:02:05,  3.78s/it, gpt_loss=0.497, lr=1.47e-6][A
Train step of epoch 0:  39%|███▊      | 2409/6250 [2:30:37<4:02:05,  3.78s/it, gpt_loss=0.489, lr=1.47e-6][A
Train step of epoch 0:  39%|███▊      | 2410/6250 [2:30:37<4:00:24,  3.76s/it, gpt_loss=0.489, lr=1.47e-6][A
Train step of epoch 0:  39%|███▊      | 2410/6250 [2:30:41<4:00:24,  3.76s/it, gpt_loss=0.683, lr=1.47e-6][A
Train step of epoch 0:  39%|███▊      | 2411/6250 [2:30:41<4:11:53,  3.94s/it, gpt_loss=0.683, lr=1.47e-6][A[2025-04-24 02:23:23,862] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  39%|███▊      | 2411/6250 [2:30:45<4:11:53,  3.94s/it, gpt_loss=0.731, lr=1.47e-6][A
Train step of epoch 0:  39%|███▊      | 2412/6250 [2:30:45<4:02:48,  3.80s/it, gpt_loss=0.731, lr=1.47e-6][A
Train step of epoch 0:  39%|███▊      | 2412/6250 [2:30:48<4:02:48,  3.80s/it, gpt_loss=0.736, lr=1.47e-6][A
Train step of epoch 0:  39%|███▊      | 2413/6250 [2:30:48<3:59:01,  3.74s/it, gpt_loss=0.736, lr=1.47e-6][A
Train step of epoch 0:  39%|███▊      | 2413/6250 [2:30:51<3:59:01,  3.74s/it, gpt_loss=0.565, lr=1.47e-6][A
Train step of epoch 0:  39%|███▊      | 2414/6250 [2:30:51<3:49:58,  3.60s/it, gpt_loss=0.565, lr=1.47e-6][A
Train step of epoch 0:  39%|███▊      | 2414/6250 [2:30:55<3:49:58,  3.60s/it, gpt_loss=0.74, lr=1.47e-6] [A
Train step of epoch 0:  39%|███▊      | 2415/6250 [2:30:55<3:40:34,  3.45s/it, gpt_loss=0.74, lr=1.47e-6][A[2025-04-24 02:23:38,394] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  39%|███▊      | 2415/6250 [2:30:59<3:40:34,  3.45s/it, gpt_loss=0.618, lr=1.46e-6][A
Train step of epoch 0:  39%|███▊      | 2416/6250 [2:30:59<4:01:36,  3.78s/it, gpt_loss=0.618, lr=1.46e-6][A
Train step of epoch 0:  39%|███▊      | 2416/6250 [2:31:03<4:01:36,  3.78s/it, gpt_loss=0.708, lr=1.46e-6][A
Train step of epoch 0:  39%|███▊      | 2417/6250 [2:31:03<3:58:21,  3.73s/it, gpt_loss=0.708, lr=1.46e-6][A
Train step of epoch 0:  39%|███▊      | 2417/6250 [2:31:06<3:58:21,  3.73s/it, gpt_loss=0.757, lr=1.46e-6][A
Train step of epoch 0:  39%|███▊      | 2418/6250 [2:31:06<3:54:58,  3.68s/it, gpt_loss=0.757, lr=1.46e-6][A
Train step of epoch 0:  39%|███▊      | 2418/6250 [2:31:10<3:54:58,  3.68s/it, gpt_loss=0.74, lr=1.46e-6] [A
Train step of epoch 0:  39%|███▊      | 2419/6250 [2:31:10<4:02:46,  3.80s/it, gpt_loss=0.74, lr=1.46e-6][A[2025-04-24 02:23:54,788] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  39%|███▊      | 2419/6250 [2:31:16<4:02:46,  3.80s/it, gpt_loss=0.627, lr=1.46e-6][A
Train step of epoch 0:  39%|███▊      | 2420/6250 [2:31:16<4:28:10,  4.20s/it, gpt_loss=0.627, lr=1.46e-6][A
Train step of epoch 0:  39%|███▊      | 2420/6250 [2:31:19<4:28:10,  4.20s/it, gpt_loss=0.657, lr=1.46e-6][A
Train step of epoch 0:  39%|███▊      | 2421/6250 [2:31:19<4:16:41,  4.02s/it, gpt_loss=0.657, lr=1.46e-6][A
Train step of epoch 0:  39%|███▊      | 2421/6250 [2:31:23<4:16:41,  4.02s/it, gpt_loss=0.62, lr=1.46e-6] [A
Train step of epoch 0:  39%|███▉      | 2422/6250 [2:31:23<4:10:17,  3.92s/it, gpt_loss=0.62, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2422/6250 [2:31:26<4:10:17,  3.92s/it, gpt_loss=0.739, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2423/6250 [2:31:26<3:55:07,  3.69s/it, gpt_loss=0.739, lr=1.46e-6][A[2025-04-24 02:24:09,599] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  39%|███▉      | 2423/6250 [2:31:30<3:55:07,  3.69s/it, gpt_loss=0.531, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2424/6250 [2:31:30<4:08:21,  3.89s/it, gpt_loss=0.531, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2424/6250 [2:31:34<4:08:21,  3.89s/it, gpt_loss=0.409, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2425/6250 [2:31:34<3:53:54,  3.67s/it, gpt_loss=0.409, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2425/6250 [2:31:38<3:53:54,  3.67s/it, gpt_loss=0.571, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2426/6250 [2:31:38<4:07:57,  3.89s/it, gpt_loss=0.571, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2426/6250 [2:31:42<4:07:57,  3.89s/it, gpt_loss=0.61, lr=1.46e-6] [A
Train step of epoch 0:  39%|███▉      | 2427/6250 [2:31:42<4:03:15,  3.82s/it, gpt_loss=0.61, lr=1.46e-6][A[2025-04-24 02:24:24,826] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  39%|███▉      | 2427/6250 [2:31:46<4:03:15,  3.82s/it, gpt_loss=0.539, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2428/6250 [2:31:46<4:07:13,  3.88s/it, gpt_loss=0.539, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2428/6250 [2:31:50<4:07:13,  3.88s/it, gpt_loss=0.517, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2429/6250 [2:31:50<4:23:08,  4.13s/it, gpt_loss=0.517, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2429/6250 [2:31:53<4:23:08,  4.13s/it, gpt_loss=0.58, lr=1.46e-6] [A
Train step of epoch 0:  39%|███▉      | 2430/6250 [2:31:53<4:02:27,  3.81s/it, gpt_loss=0.58, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2430/6250 [2:31:56<4:02:27,  3.81s/it, gpt_loss=0.475, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2431/6250 [2:31:56<3:37:16,  3.41s/it, gpt_loss=0.475, lr=1.46e-6][A[2025-04-24 02:24:38,988] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  39%|███▉      | 2431/6250 [2:32:00<3:37:16,  3.41s/it, gpt_loss=0.561, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2432/6250 [2:32:00<3:46:29,  3.56s/it, gpt_loss=0.561, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2432/6250 [2:32:04<3:46:29,  3.56s/it, gpt_loss=0.729, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2433/6250 [2:32:04<4:01:05,  3.79s/it, gpt_loss=0.729, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2433/6250 [2:32:07<4:01:05,  3.79s/it, gpt_loss=0.551, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2434/6250 [2:32:07<3:49:59,  3.62s/it, gpt_loss=0.551, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2434/6250 [2:32:11<3:49:59,  3.62s/it, gpt_loss=0.685, lr=1.46e-6][A
Train step of epoch 0:  39%|███▉      | 2435/6250 [2:32:11<3:46:55,  3.57s/it, gpt_loss=0.685, lr=1.46e-6][A[2025-04-24 02:24:53,758] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  39%|███▉      | 2435/6250 [2:32:15<3:46:55,  3.57s/it, gpt_loss=0.555, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2436/6250 [2:32:15<3:50:43,  3.63s/it, gpt_loss=0.555, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2436/6250 [2:32:18<3:50:43,  3.63s/it, gpt_loss=0.778, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2437/6250 [2:32:18<3:51:02,  3.64s/it, gpt_loss=0.778, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2437/6250 [2:32:22<3:51:02,  3.64s/it, gpt_loss=0.551, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2438/6250 [2:32:22<3:47:37,  3.58s/it, gpt_loss=0.551, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2438/6250 [2:32:26<3:47:37,  3.58s/it, gpt_loss=0.683, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2439/6250 [2:32:26<3:53:14,  3.67s/it, gpt_loss=0.683, lr=1.45e-6][A[2025-04-24 02:25:08,009] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  39%|███▉      | 2439/6250 [2:32:29<3:53:14,  3.67s/it, gpt_loss=0.643, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2440/6250 [2:32:29<3:45:21,  3.55s/it, gpt_loss=0.643, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2440/6250 [2:32:33<3:45:21,  3.55s/it, gpt_loss=0.539, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2441/6250 [2:32:33<4:04:13,  3.85s/it, gpt_loss=0.539, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2441/6250 [2:32:37<4:04:13,  3.85s/it, gpt_loss=0.619, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2442/6250 [2:32:37<3:54:03,  3.69s/it, gpt_loss=0.619, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2442/6250 [2:32:40<3:54:03,  3.69s/it, gpt_loss=0.521, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2443/6250 [2:32:40<3:57:25,  3.74s/it, gpt_loss=0.521, lr=1.45e-6][A[2025-04-24 02:25:23,953] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  39%|███▉      | 2443/6250 [2:32:45<3:57:25,  3.74s/it, gpt_loss=0.651, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2444/6250 [2:32:45<4:06:23,  3.88s/it, gpt_loss=0.651, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2444/6250 [2:32:48<4:06:23,  3.88s/it, gpt_loss=0.765, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2445/6250 [2:32:48<3:56:14,  3.73s/it, gpt_loss=0.765, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2445/6250 [2:32:52<3:56:14,  3.73s/it, gpt_loss=0.574, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2446/6250 [2:32:52<4:01:42,  3.81s/it, gpt_loss=0.574, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2446/6250 [2:32:56<4:01:42,  3.81s/it, gpt_loss=0.613, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2447/6250 [2:32:56<4:00:34,  3.80s/it, gpt_loss=0.613, lr=1.45e-6][A[2025-04-24 02:25:38,226] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  39%|███▉      | 2447/6250 [2:32:59<4:00:34,  3.80s/it, gpt_loss=0.518, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2448/6250 [2:32:59<3:48:11,  3.60s/it, gpt_loss=0.518, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2448/6250 [2:33:03<3:48:11,  3.60s/it, gpt_loss=0.79, lr=1.45e-6] [A
Train step of epoch 0:  39%|███▉      | 2449/6250 [2:33:03<4:03:51,  3.85s/it, gpt_loss=0.79, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2449/6250 [2:33:07<4:03:51,  3.85s/it, gpt_loss=0.742, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2450/6250 [2:33:07<3:50:42,  3.64s/it, gpt_loss=0.742, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2450/6250 [2:33:11<3:50:42,  3.64s/it, gpt_loss=0.622, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2451/6250 [2:33:11<4:07:37,  3.91s/it, gpt_loss=0.622, lr=1.45e-6][A[2025-04-24 02:25:53,516] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  39%|███▉      | 2451/6250 [2:33:14<4:07:37,  3.91s/it, gpt_loss=0.501, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2452/6250 [2:33:14<3:53:21,  3.69s/it, gpt_loss=0.501, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2452/6250 [2:33:18<3:53:21,  3.69s/it, gpt_loss=0.515, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2453/6250 [2:33:18<3:51:35,  3.66s/it, gpt_loss=0.515, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2453/6250 [2:33:21<3:51:35,  3.66s/it, gpt_loss=0.45, lr=1.45e-6] [A
Train step of epoch 0:  39%|███▉      | 2454/6250 [2:33:21<3:36:13,  3.42s/it, gpt_loss=0.45, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2454/6250 [2:33:24<3:36:13,  3.42s/it, gpt_loss=0.572, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2455/6250 [2:33:24<3:25:46,  3.25s/it, gpt_loss=0.572, lr=1.45e-6][A[2025-04-24 02:26:07,416] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  39%|███▉      | 2455/6250 [2:33:28<3:25:46,  3.25s/it, gpt_loss=0.516, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2456/6250 [2:33:28<3:50:54,  3.65s/it, gpt_loss=0.516, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2456/6250 [2:33:32<3:50:54,  3.65s/it, gpt_loss=0.701, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2457/6250 [2:33:32<3:59:06,  3.78s/it, gpt_loss=0.701, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2457/6250 [2:33:35<3:59:06,  3.78s/it, gpt_loss=0.546, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2458/6250 [2:33:35<3:45:25,  3.57s/it, gpt_loss=0.546, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2458/6250 [2:33:40<3:45:25,  3.57s/it, gpt_loss=0.554, lr=1.45e-6][A
Train step of epoch 0:  39%|███▉      | 2459/6250 [2:33:40<3:56:56,  3.75s/it, gpt_loss=0.554, lr=1.45e-6][A[2025-04-24 02:26:22,406] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  39%|███▉      | 2459/6250 [2:33:43<3:56:56,  3.75s/it, gpt_loss=0.626, lr=1.44e-6][A
Train step of epoch 0:  39%|███▉      | 2460/6250 [2:33:43<3:55:11,  3.72s/it, gpt_loss=0.626, lr=1.44e-6][A
Train step of epoch 0:  39%|███▉      | 2460/6250 [2:33:47<3:55:11,  3.72s/it, gpt_loss=0.568, lr=1.44e-6][A
Train step of epoch 0:  39%|███▉      | 2461/6250 [2:33:47<3:56:32,  3.75s/it, gpt_loss=0.568, lr=1.44e-6][A
Train step of epoch 0:  39%|███▉      | 2461/6250 [2:33:51<3:56:32,  3.75s/it, gpt_loss=0.647, lr=1.44e-6][A
Train step of epoch 0:  39%|███▉      | 2462/6250 [2:33:51<4:09:01,  3.94s/it, gpt_loss=0.647, lr=1.44e-6][A
Train step of epoch 0:  39%|███▉      | 2462/6250 [2:33:55<4:09:01,  3.94s/it, gpt_loss=0.779, lr=1.44e-6][A
Train step of epoch 0:  39%|███▉      | 2463/6250 [2:33:55<4:06:58,  3.91s/it, gpt_loss=0.779, lr=1.44e-6][A[2025-04-24 02:26:38,512] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  39%|███▉      | 2463/6250 [2:33:59<4:06:58,  3.91s/it, gpt_loss=0.69, lr=1.44e-6] [A
Train step of epoch 0:  39%|███▉      | 2464/6250 [2:33:59<4:09:41,  3.96s/it, gpt_loss=0.69, lr=1.44e-6][A
Train step of epoch 0:  39%|███▉      | 2464/6250 [2:34:04<4:09:41,  3.96s/it, gpt_loss=0.545, lr=1.44e-6][A
Train step of epoch 0:  39%|███▉      | 2465/6250 [2:34:04<4:18:21,  4.10s/it, gpt_loss=0.545, lr=1.44e-6][A
Train step of epoch 0:  39%|███▉      | 2465/6250 [2:34:07<4:18:21,  4.10s/it, gpt_loss=0.566, lr=1.44e-6][A
Train step of epoch 0:  39%|███▉      | 2466/6250 [2:34:07<4:02:48,  3.85s/it, gpt_loss=0.566, lr=1.44e-6][A
Train step of epoch 0:  39%|███▉      | 2466/6250 [2:34:11<4:02:48,  3.85s/it, gpt_loss=0.72, lr=1.44e-6] [A
Train step of epoch 0:  39%|███▉      | 2467/6250 [2:34:11<3:59:27,  3.80s/it, gpt_loss=0.72, lr=1.44e-6][A[2025-04-24 02:26:53,420] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  39%|███▉      | 2467/6250 [2:34:14<3:59:27,  3.80s/it, gpt_loss=0.578, lr=1.44e-6][A
Train step of epoch 0:  39%|███▉      | 2468/6250 [2:34:14<3:54:26,  3.72s/it, gpt_loss=0.578, lr=1.44e-6][A
Train step of epoch 0:  39%|███▉      | 2468/6250 [2:34:18<3:54:26,  3.72s/it, gpt_loss=0.68, lr=1.44e-6] [A
Train step of epoch 0:  40%|███▉      | 2469/6250 [2:34:18<3:48:45,  3.63s/it, gpt_loss=0.68, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2469/6250 [2:34:21<3:48:45,  3.63s/it, gpt_loss=0.756, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2470/6250 [2:34:21<3:43:55,  3.55s/it, gpt_loss=0.756, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2470/6250 [2:34:24<3:43:55,  3.55s/it, gpt_loss=0.573, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2471/6250 [2:34:24<3:36:04,  3.43s/it, gpt_loss=0.573, lr=1.44e-6][A[2025-04-24 02:27:07,734] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  40%|███▉      | 2471/6250 [2:34:28<3:36:04,  3.43s/it, gpt_loss=0.427, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2472/6250 [2:34:28<3:53:49,  3.71s/it, gpt_loss=0.427, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2472/6250 [2:34:32<3:53:49,  3.71s/it, gpt_loss=0.593, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2473/6250 [2:34:32<3:55:36,  3.74s/it, gpt_loss=0.593, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2473/6250 [2:34:35<3:55:36,  3.74s/it, gpt_loss=0.517, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2474/6250 [2:34:35<3:41:23,  3.52s/it, gpt_loss=0.517, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2474/6250 [2:34:38<3:41:23,  3.52s/it, gpt_loss=0.449, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2475/6250 [2:34:38<3:17:24,  3.14s/it, gpt_loss=0.449, lr=1.44e-6][A[2025-04-24 02:27:20,871] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  40%|███▉      | 2475/6250 [2:34:42<3:17:24,  3.14s/it, gpt_loss=0.679, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2476/6250 [2:34:42<3:35:10,  3.42s/it, gpt_loss=0.679, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2476/6250 [2:34:46<3:35:10,  3.42s/it, gpt_loss=0.52, lr=1.44e-6] [A
Train step of epoch 0:  40%|███▉      | 2477/6250 [2:34:46<3:44:32,  3.57s/it, gpt_loss=0.52, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2477/6250 [2:34:49<3:44:32,  3.57s/it, gpt_loss=0.599, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2478/6250 [2:34:49<3:42:17,  3.54s/it, gpt_loss=0.599, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2478/6250 [2:34:52<3:42:17,  3.54s/it, gpt_loss=0.577, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2479/6250 [2:34:52<3:38:55,  3.48s/it, gpt_loss=0.577, lr=1.44e-6][A[2025-04-24 02:27:35,362] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  40%|███▉      | 2479/6250 [2:34:56<3:38:55,  3.48s/it, gpt_loss=0.477, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2480/6250 [2:34:56<3:43:59,  3.56s/it, gpt_loss=0.477, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2480/6250 [2:35:00<3:43:59,  3.56s/it, gpt_loss=0.555, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2481/6250 [2:35:00<3:50:32,  3.67s/it, gpt_loss=0.555, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2481/6250 [2:35:04<3:50:32,  3.67s/it, gpt_loss=0.593, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2482/6250 [2:35:04<3:55:43,  3.75s/it, gpt_loss=0.593, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2482/6250 [2:35:08<3:55:43,  3.75s/it, gpt_loss=0.672, lr=1.44e-6][A
Train step of epoch 0:  40%|███▉      | 2483/6250 [2:35:08<4:04:18,  3.89s/it, gpt_loss=0.672, lr=1.44e-6][A[2025-04-24 02:27:50,737] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  40%|███▉      | 2483/6250 [2:35:11<4:04:18,  3.89s/it, gpt_loss=0.704, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2484/6250 [2:35:11<3:53:04,  3.71s/it, gpt_loss=0.704, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2484/6250 [2:35:17<3:53:04,  3.71s/it, gpt_loss=0.782, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2485/6250 [2:35:17<4:20:56,  4.16s/it, gpt_loss=0.782, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2485/6250 [2:35:21<4:20:56,  4.16s/it, gpt_loss=0.543, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2486/6250 [2:35:21<4:15:58,  4.08s/it, gpt_loss=0.543, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2486/6250 [2:35:24<4:15:58,  4.08s/it, gpt_loss=0.611, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2487/6250 [2:35:24<4:04:05,  3.89s/it, gpt_loss=0.611, lr=1.43e-6][A[2025-04-24 02:28:06,692] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  40%|███▉      | 2487/6250 [2:35:27<4:04:05,  3.89s/it, gpt_loss=0.607, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2488/6250 [2:35:27<3:54:55,  3.75s/it, gpt_loss=0.607, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2488/6250 [2:35:31<3:54:55,  3.75s/it, gpt_loss=0.503, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2489/6250 [2:35:31<3:56:31,  3.77s/it, gpt_loss=0.503, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2489/6250 [2:35:36<3:56:31,  3.77s/it, gpt_loss=0.609, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2490/6250 [2:35:36<4:15:19,  4.07s/it, gpt_loss=0.609, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2490/6250 [2:35:41<4:15:19,  4.07s/it, gpt_loss=0.631, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2491/6250 [2:35:41<4:24:14,  4.22s/it, gpt_loss=0.631, lr=1.43e-6][A[2025-04-24 02:28:24,948] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  40%|███▉      | 2491/6250 [2:35:46<4:24:14,  4.22s/it, gpt_loss=0.837, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2492/6250 [2:35:46<4:40:34,  4.48s/it, gpt_loss=0.837, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2492/6250 [2:35:49<4:40:34,  4.48s/it, gpt_loss=0.598, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2493/6250 [2:35:49<4:22:44,  4.20s/it, gpt_loss=0.598, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2493/6250 [2:35:52<4:22:44,  4.20s/it, gpt_loss=0.6, lr=1.43e-6]  [A
Train step of epoch 0:  40%|███▉      | 2494/6250 [2:35:52<3:58:46,  3.81s/it, gpt_loss=0.6, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2494/6250 [2:35:57<3:58:46,  3.81s/it, gpt_loss=0.636, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2495/6250 [2:35:57<4:08:31,  3.97s/it, gpt_loss=0.636, lr=1.43e-6][A[2025-04-24 02:28:39,804] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  40%|███▉      | 2495/6250 [2:36:01<4:08:31,  3.97s/it, gpt_loss=0.645, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2496/6250 [2:36:01<4:10:09,  4.00s/it, gpt_loss=0.645, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2496/6250 [2:36:04<4:10:09,  4.00s/it, gpt_loss=0.821, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2497/6250 [2:36:04<4:06:42,  3.94s/it, gpt_loss=0.821, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2497/6250 [2:36:08<4:06:42,  3.94s/it, gpt_loss=0.616, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2498/6250 [2:36:08<3:53:49,  3.74s/it, gpt_loss=0.616, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2498/6250 [2:36:11<3:53:49,  3.74s/it, gpt_loss=0.824, lr=1.43e-6][A
Train step of epoch 0:  40%|███▉      | 2499/6250 [2:36:11<3:53:41,  3.74s/it, gpt_loss=0.824, lr=1.43e-6][A[2025-04-24 02:28:54,971] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  40%|███▉      | 2499/6250 [2:36:16<3:53:41,  3.74s/it, gpt_loss=0.64, lr=1.43e-6] [A
Train step of epoch 0:  40%|████      | 2500/6250 [2:36:16<4:05:10,  3.92s/it, gpt_loss=0.64, lr=1.43e-6][A
Train step of epoch 0:  40%|████      | 2500/6250 [2:36:19<4:05:10,  3.92s/it, gpt_loss=0.521, lr=1.43e-6][A
Train step of epoch 0:  40%|████      | 2501/6250 [2:36:19<3:50:12,  3.68s/it, gpt_loss=0.521, lr=1.43e-6][A
Train step of epoch 0:  40%|████      | 2501/6250 [2:36:23<3:50:12,  3.68s/it, gpt_loss=0.634, lr=1.43e-6][A
Train step of epoch 0:  40%|████      | 2502/6250 [2:36:23<3:49:28,  3.67s/it, gpt_loss=0.634, lr=1.43e-6][A
Train step of epoch 0:  40%|████      | 2502/6250 [2:36:25<3:49:28,  3.67s/it, gpt_loss=0.619, lr=1.43e-6][A
Train step of epoch 0:  40%|████      | 2503/6250 [2:36:25<3:30:16,  3.37s/it, gpt_loss=0.619, lr=1.43e-6][A[2025-04-24 02:29:08,499] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  40%|████      | 2503/6250 [2:36:29<3:30:16,  3.37s/it, gpt_loss=0.582, lr=1.43e-6][A
Train step of epoch 0:  40%|████      | 2504/6250 [2:36:29<3:43:55,  3.59s/it, gpt_loss=0.582, lr=1.43e-6][A
Train step of epoch 0:  40%|████      | 2504/6250 [2:36:33<3:43:55,  3.59s/it, gpt_loss=0.597, lr=1.43e-6][A
Train step of epoch 0:  40%|████      | 2505/6250 [2:36:33<3:37:46,  3.49s/it, gpt_loss=0.597, lr=1.43e-6][A
Train step of epoch 0:  40%|████      | 2505/6250 [2:36:37<3:37:46,  3.49s/it, gpt_loss=0.596, lr=1.43e-6][A
Train step of epoch 0:  40%|████      | 2506/6250 [2:36:37<3:55:29,  3.77s/it, gpt_loss=0.596, lr=1.43e-6][A
Train step of epoch 0:  40%|████      | 2506/6250 [2:36:41<3:55:29,  3.77s/it, gpt_loss=0.581, lr=1.43e-6][A
Train step of epoch 0:  40%|████      | 2507/6250 [2:36:41<3:51:35,  3.71s/it, gpt_loss=0.581, lr=1.43e-6][A[2025-04-24 02:29:24,055] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  40%|████      | 2507/6250 [2:36:45<3:51:35,  3.71s/it, gpt_loss=0.613, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2508/6250 [2:36:45<4:02:17,  3.88s/it, gpt_loss=0.613, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2508/6250 [2:36:48<4:02:17,  3.88s/it, gpt_loss=0.609, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2509/6250 [2:36:48<3:56:45,  3.80s/it, gpt_loss=0.609, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2509/6250 [2:36:51<3:56:45,  3.80s/it, gpt_loss=0.747, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2510/6250 [2:36:51<3:43:16,  3.58s/it, gpt_loss=0.747, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2510/6250 [2:36:55<3:43:16,  3.58s/it, gpt_loss=0.686, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2511/6250 [2:36:55<3:33:02,  3.42s/it, gpt_loss=0.686, lr=1.42e-6][A[2025-04-24 02:29:36,764] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  40%|████      | 2511/6250 [2:36:58<3:33:02,  3.42s/it, gpt_loss=0.671, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2512/6250 [2:36:58<3:25:08,  3.29s/it, gpt_loss=0.671, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2512/6250 [2:37:02<3:25:08,  3.29s/it, gpt_loss=0.656, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2513/6250 [2:37:02<3:50:49,  3.71s/it, gpt_loss=0.656, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2513/6250 [2:37:05<3:50:49,  3.71s/it, gpt_loss=0.743, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2514/6250 [2:37:05<3:41:37,  3.56s/it, gpt_loss=0.743, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2514/6250 [2:37:08<3:41:37,  3.56s/it, gpt_loss=0.541, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2515/6250 [2:37:08<3:32:42,  3.42s/it, gpt_loss=0.541, lr=1.42e-6][A[2025-04-24 02:29:51,530] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  40%|████      | 2515/6250 [2:37:12<3:32:42,  3.42s/it, gpt_loss=0.624, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2516/6250 [2:37:12<3:39:41,  3.53s/it, gpt_loss=0.624, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2516/6250 [2:37:16<3:39:41,  3.53s/it, gpt_loss=0.712, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2517/6250 [2:37:16<3:38:19,  3.51s/it, gpt_loss=0.712, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2517/6250 [2:37:19<3:38:19,  3.51s/it, gpt_loss=0.603, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2518/6250 [2:37:19<3:31:25,  3.40s/it, gpt_loss=0.603, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2518/6250 [2:37:23<3:31:25,  3.40s/it, gpt_loss=0.634, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2519/6250 [2:37:23<3:42:05,  3.57s/it, gpt_loss=0.634, lr=1.42e-6][A[2025-04-24 02:30:05,924] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  40%|████      | 2519/6250 [2:37:27<3:42:05,  3.57s/it, gpt_loss=0.543, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2520/6250 [2:37:27<3:46:38,  3.65s/it, gpt_loss=0.543, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2520/6250 [2:37:30<3:46:38,  3.65s/it, gpt_loss=0.518, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2521/6250 [2:37:30<3:33:35,  3.44s/it, gpt_loss=0.518, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2521/6250 [2:37:34<3:33:35,  3.44s/it, gpt_loss=0.74, lr=1.42e-6] [A
Train step of epoch 0:  40%|████      | 2522/6250 [2:37:34<3:47:20,  3.66s/it, gpt_loss=0.74, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2522/6250 [2:37:38<3:47:20,  3.66s/it, gpt_loss=0.488, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2523/6250 [2:37:38<3:52:14,  3.74s/it, gpt_loss=0.488, lr=1.42e-6][A[2025-04-24 02:30:20,283] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  40%|████      | 2523/6250 [2:37:41<3:52:14,  3.74s/it, gpt_loss=0.432, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2524/6250 [2:37:41<3:44:07,  3.61s/it, gpt_loss=0.432, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2524/6250 [2:37:44<3:44:07,  3.61s/it, gpt_loss=0.636, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2525/6250 [2:37:44<3:41:12,  3.56s/it, gpt_loss=0.636, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2525/6250 [2:37:49<3:41:12,  3.56s/it, gpt_loss=0.546, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2526/6250 [2:37:49<3:52:09,  3.74s/it, gpt_loss=0.546, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2526/6250 [2:37:52<3:52:09,  3.74s/it, gpt_loss=0.537, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2527/6250 [2:37:52<3:43:27,  3.60s/it, gpt_loss=0.537, lr=1.42e-6][A[2025-04-24 02:30:34,428] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  40%|████      | 2527/6250 [2:37:55<3:43:27,  3.60s/it, gpt_loss=0.583, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2528/6250 [2:37:55<3:37:00,  3.50s/it, gpt_loss=0.583, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2528/6250 [2:37:59<3:37:00,  3.50s/it, gpt_loss=0.62, lr=1.42e-6] [A
Train step of epoch 0:  40%|████      | 2529/6250 [2:37:59<3:50:01,  3.71s/it, gpt_loss=0.62, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2529/6250 [2:38:04<3:50:01,  3.71s/it, gpt_loss=0.503, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2530/6250 [2:38:04<4:05:41,  3.96s/it, gpt_loss=0.503, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2530/6250 [2:38:08<4:05:41,  3.96s/it, gpt_loss=0.634, lr=1.42e-6][A
Train step of epoch 0:  40%|████      | 2531/6250 [2:38:08<4:03:15,  3.92s/it, gpt_loss=0.634, lr=1.42e-6][A[2025-04-24 02:30:50,511] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  40%|████      | 2531/6250 [2:38:11<4:03:15,  3.92s/it, gpt_loss=0.546, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2532/6250 [2:38:11<3:55:09,  3.79s/it, gpt_loss=0.546, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2532/6250 [2:38:15<3:55:09,  3.79s/it, gpt_loss=0.797, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2533/6250 [2:38:15<4:02:42,  3.92s/it, gpt_loss=0.797, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2533/6250 [2:38:20<4:02:42,  3.92s/it, gpt_loss=0.707, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2534/6250 [2:38:20<4:11:38,  4.06s/it, gpt_loss=0.707, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2534/6250 [2:38:24<4:11:38,  4.06s/it, gpt_loss=0.599, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2535/6250 [2:38:24<4:06:55,  3.99s/it, gpt_loss=0.599, lr=1.41e-6][A[2025-04-24 02:31:05,547] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  41%|████      | 2535/6250 [2:38:26<4:06:55,  3.99s/it, gpt_loss=0.508, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2536/6250 [2:38:26<3:41:23,  3.58s/it, gpt_loss=0.508, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2536/6250 [2:38:29<3:41:23,  3.58s/it, gpt_loss=0.572, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2537/6250 [2:38:29<3:33:21,  3.45s/it, gpt_loss=0.572, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2537/6250 [2:38:33<3:33:21,  3.45s/it, gpt_loss=0.607, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2538/6250 [2:38:33<3:27:49,  3.36s/it, gpt_loss=0.607, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2538/6250 [2:38:36<3:27:49,  3.36s/it, gpt_loss=0.412, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2539/6250 [2:38:36<3:25:47,  3.33s/it, gpt_loss=0.412, lr=1.41e-6][A[2025-04-24 02:31:18,575] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  41%|████      | 2539/6250 [2:38:39<3:25:47,  3.33s/it, gpt_loss=0.672, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2540/6250 [2:38:39<3:28:28,  3.37s/it, gpt_loss=0.672, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2540/6250 [2:38:43<3:28:28,  3.37s/it, gpt_loss=0.609, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2541/6250 [2:38:43<3:34:11,  3.46s/it, gpt_loss=0.609, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2541/6250 [2:38:48<3:34:11,  3.46s/it, gpt_loss=0.757, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2542/6250 [2:38:48<3:55:45,  3.81s/it, gpt_loss=0.757, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2542/6250 [2:38:51<3:55:45,  3.81s/it, gpt_loss=0.752, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2543/6250 [2:38:51<3:53:31,  3.78s/it, gpt_loss=0.752, lr=1.41e-6][A[2025-04-24 02:31:34,247] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  41%|████      | 2543/6250 [2:38:55<3:53:31,  3.78s/it, gpt_loss=0.566, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2544/6250 [2:38:55<3:51:15,  3.74s/it, gpt_loss=0.566, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2544/6250 [2:38:59<3:51:15,  3.74s/it, gpt_loss=0.829, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2545/6250 [2:38:59<3:57:35,  3.85s/it, gpt_loss=0.829, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2545/6250 [2:39:03<3:57:35,  3.85s/it, gpt_loss=0.651, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2546/6250 [2:39:03<4:06:19,  3.99s/it, gpt_loss=0.651, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2546/6250 [2:39:07<4:06:19,  3.99s/it, gpt_loss=0.58, lr=1.41e-6] [A
Train step of epoch 0:  41%|████      | 2547/6250 [2:39:07<3:59:38,  3.88s/it, gpt_loss=0.58, lr=1.41e-6][A[2025-04-24 02:31:50,288] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  41%|████      | 2547/6250 [2:39:11<3:59:38,  3.88s/it, gpt_loss=0.557, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2548/6250 [2:39:11<4:01:39,  3.92s/it, gpt_loss=0.557, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2548/6250 [2:39:15<4:01:39,  3.92s/it, gpt_loss=0.599, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2549/6250 [2:39:15<4:07:04,  4.01s/it, gpt_loss=0.599, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2549/6250 [2:39:19<4:07:04,  4.01s/it, gpt_loss=0.685, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2550/6250 [2:39:19<4:06:02,  3.99s/it, gpt_loss=0.685, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2550/6250 [2:39:22<4:06:02,  3.99s/it, gpt_loss=0.535, lr=1.41e-6][A
Train step of epoch 0:  41%|████      | 2551/6250 [2:39:22<3:49:55,  3.73s/it, gpt_loss=0.535, lr=1.41e-6][A[2025-04-24 02:32:05,998] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  41%|████      | 2551/6250 [2:39:27<3:49:55,  3.73s/it, gpt_loss=0.71, lr=1.4e-6]  [A
Train step of epoch 0:  41%|████      | 2552/6250 [2:39:27<4:02:39,  3.94s/it, gpt_loss=0.71, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2552/6250 [2:39:31<4:02:39,  3.94s/it, gpt_loss=0.666, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2553/6250 [2:39:31<4:02:22,  3.93s/it, gpt_loss=0.666, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2553/6250 [2:39:35<4:02:22,  3.93s/it, gpt_loss=0.596, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2554/6250 [2:39:35<4:11:12,  4.08s/it, gpt_loss=0.596, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2554/6250 [2:39:38<4:11:12,  4.08s/it, gpt_loss=0.631, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2555/6250 [2:39:38<3:45:59,  3.67s/it, gpt_loss=0.631, lr=1.4e-6][A[2025-04-24 02:32:21,691] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  41%|████      | 2555/6250 [2:39:42<3:45:59,  3.67s/it, gpt_loss=0.546, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2556/6250 [2:39:42<4:03:46,  3.96s/it, gpt_loss=0.546, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2556/6250 [2:39:46<4:03:46,  3.96s/it, gpt_loss=0.778, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2557/6250 [2:39:46<3:55:03,  3.82s/it, gpt_loss=0.778, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2557/6250 [2:39:50<3:55:03,  3.82s/it, gpt_loss=0.686, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2558/6250 [2:39:50<3:59:06,  3.89s/it, gpt_loss=0.686, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2558/6250 [2:39:52<3:59:06,  3.89s/it, gpt_loss=0.577, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2559/6250 [2:39:52<3:29:04,  3.40s/it, gpt_loss=0.577, lr=1.4e-6][A[2025-04-24 02:32:35,183] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  41%|████      | 2559/6250 [2:39:56<3:29:04,  3.40s/it, gpt_loss=0.662, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2560/6250 [2:39:56<3:34:30,  3.49s/it, gpt_loss=0.662, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2560/6250 [2:39:59<3:34:30,  3.49s/it, gpt_loss=0.705, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2561/6250 [2:39:59<3:26:04,  3.35s/it, gpt_loss=0.705, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2561/6250 [2:40:04<3:26:04,  3.35s/it, gpt_loss=0.429, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2562/6250 [2:40:04<3:48:14,  3.71s/it, gpt_loss=0.429, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2562/6250 [2:40:07<3:48:14,  3.71s/it, gpt_loss=0.583, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2563/6250 [2:40:07<3:46:13,  3.68s/it, gpt_loss=0.583, lr=1.4e-6][A[2025-04-24 02:32:49,154] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  41%|████      | 2563/6250 [2:40:10<3:46:13,  3.68s/it, gpt_loss=0.565, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2564/6250 [2:40:10<3:29:26,  3.41s/it, gpt_loss=0.565, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2564/6250 [2:40:14<3:29:26,  3.41s/it, gpt_loss=0.445, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2565/6250 [2:40:14<3:44:41,  3.66s/it, gpt_loss=0.445, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2565/6250 [2:40:18<3:44:41,  3.66s/it, gpt_loss=0.477, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2566/6250 [2:40:18<3:57:06,  3.86s/it, gpt_loss=0.477, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2566/6250 [2:40:23<3:57:06,  3.86s/it, gpt_loss=0.7, lr=1.4e-6]  [A
Train step of epoch 0:  41%|████      | 2567/6250 [2:40:23<4:04:03,  3.98s/it, gpt_loss=0.7, lr=1.4e-6][A[2025-04-24 02:33:06,345] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  41%|████      | 2567/6250 [2:40:27<4:04:03,  3.98s/it, gpt_loss=0.65, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2568/6250 [2:40:27<4:11:17,  4.09s/it, gpt_loss=0.65, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2568/6250 [2:40:31<4:11:17,  4.09s/it, gpt_loss=0.696, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2569/6250 [2:40:31<4:14:25,  4.15s/it, gpt_loss=0.696, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2569/6250 [2:40:35<4:14:25,  4.15s/it, gpt_loss=0.59, lr=1.4e-6] [A
Train step of epoch 0:  41%|████      | 2570/6250 [2:40:35<3:59:28,  3.90s/it, gpt_loss=0.59, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2570/6250 [2:40:38<3:59:28,  3.90s/it, gpt_loss=0.742, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2571/6250 [2:40:38<3:55:40,  3.84s/it, gpt_loss=0.742, lr=1.4e-6][A[2025-04-24 02:33:20,330] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  41%|████      | 2571/6250 [2:40:41<3:55:40,  3.84s/it, gpt_loss=0.637, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2572/6250 [2:40:41<3:34:08,  3.49s/it, gpt_loss=0.637, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2572/6250 [2:40:46<3:34:08,  3.49s/it, gpt_loss=0.709, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2573/6250 [2:40:46<3:54:39,  3.83s/it, gpt_loss=0.709, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2573/6250 [2:40:49<3:54:39,  3.83s/it, gpt_loss=0.575, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2574/6250 [2:40:49<3:45:37,  3.68s/it, gpt_loss=0.575, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2574/6250 [2:40:52<3:45:37,  3.68s/it, gpt_loss=0.595, lr=1.4e-6][A
Train step of epoch 0:  41%|████      | 2575/6250 [2:40:52<3:36:29,  3.53s/it, gpt_loss=0.595, lr=1.4e-6][A[2025-04-24 02:33:35,265] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  41%|████      | 2575/6250 [2:40:56<3:36:29,  3.53s/it, gpt_loss=0.652, lr=1.39e-6][A
Train step of epoch 0:  41%|████      | 2576/6250 [2:40:56<3:41:09,  3.61s/it, gpt_loss=0.652, lr=1.39e-6][A
Train step of epoch 0:  41%|████      | 2576/6250 [2:41:00<3:41:09,  3.61s/it, gpt_loss=0.757, lr=1.39e-6][A
Train step of epoch 0:  41%|████      | 2577/6250 [2:41:00<3:44:26,  3.67s/it, gpt_loss=0.757, lr=1.39e-6][A
Train step of epoch 0:  41%|████      | 2577/6250 [2:41:04<3:44:26,  3.67s/it, gpt_loss=0.504, lr=1.39e-6][A
Train step of epoch 0:  41%|████      | 2578/6250 [2:41:04<3:45:06,  3.68s/it, gpt_loss=0.504, lr=1.39e-6][A
Train step of epoch 0:  41%|████      | 2578/6250 [2:41:07<3:45:06,  3.68s/it, gpt_loss=0.665, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2579/6250 [2:41:07<3:49:01,  3.74s/it, gpt_loss=0.665, lr=1.39e-6][A[2025-04-24 02:33:49,899] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  41%|████▏     | 2579/6250 [2:41:11<3:49:01,  3.74s/it, gpt_loss=0.516, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2580/6250 [2:41:11<3:39:43,  3.59s/it, gpt_loss=0.516, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2580/6250 [2:41:14<3:39:43,  3.59s/it, gpt_loss=0.615, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2581/6250 [2:41:14<3:40:02,  3.60s/it, gpt_loss=0.615, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2581/6250 [2:41:18<3:40:02,  3.60s/it, gpt_loss=0.665, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2582/6250 [2:41:18<3:39:08,  3.58s/it, gpt_loss=0.665, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2582/6250 [2:41:22<3:39:08,  3.58s/it, gpt_loss=0.472, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2583/6250 [2:41:22<3:42:07,  3.63s/it, gpt_loss=0.472, lr=1.39e-6][A[2025-04-24 02:34:04,970] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  41%|████▏     | 2583/6250 [2:41:26<3:42:07,  3.63s/it, gpt_loss=0.465, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2584/6250 [2:41:26<3:51:36,  3.79s/it, gpt_loss=0.465, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2584/6250 [2:41:29<3:51:36,  3.79s/it, gpt_loss=0.587, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2585/6250 [2:41:29<3:39:51,  3.60s/it, gpt_loss=0.587, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2585/6250 [2:41:34<3:39:51,  3.60s/it, gpt_loss=0.566, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2586/6250 [2:41:34<3:59:17,  3.92s/it, gpt_loss=0.566, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2586/6250 [2:41:38<3:59:17,  3.92s/it, gpt_loss=0.602, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2587/6250 [2:41:38<4:05:48,  4.03s/it, gpt_loss=0.602, lr=1.39e-6][A[2025-04-24 02:34:20,637] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  41%|████▏     | 2587/6250 [2:41:41<4:05:48,  4.03s/it, gpt_loss=0.594, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2588/6250 [2:41:41<3:57:26,  3.89s/it, gpt_loss=0.594, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2588/6250 [2:41:46<3:57:26,  3.89s/it, gpt_loss=0.473, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2589/6250 [2:41:46<4:13:30,  4.15s/it, gpt_loss=0.473, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2589/6250 [2:41:51<4:13:30,  4.15s/it, gpt_loss=0.552, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2590/6250 [2:41:51<4:18:21,  4.24s/it, gpt_loss=0.552, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2590/6250 [2:41:54<4:18:21,  4.24s/it, gpt_loss=0.503, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2591/6250 [2:41:54<4:05:18,  4.02s/it, gpt_loss=0.503, lr=1.39e-6][A[2025-04-24 02:34:36,615] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  41%|████▏     | 2591/6250 [2:41:57<4:05:18,  4.02s/it, gpt_loss=0.432, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2592/6250 [2:41:57<3:51:13,  3.79s/it, gpt_loss=0.432, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2592/6250 [2:42:02<3:51:13,  3.79s/it, gpt_loss=0.648, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2593/6250 [2:42:02<3:58:38,  3.92s/it, gpt_loss=0.648, lr=1.39e-6][A
Train step of epoch 0:  41%|████▏     | 2593/6250 [2:42:06<3:58:38,  3.92s/it, gpt_loss=0.644, lr=1.39e-6][A
Train step of epoch 0:  42%|████▏     | 2594/6250 [2:42:06<4:02:27,  3.98s/it, gpt_loss=0.644, lr=1.39e-6][A
Train step of epoch 0:  42%|████▏     | 2594/6250 [2:42:09<4:02:27,  3.98s/it, gpt_loss=0.77, lr=1.39e-6] [A
Train step of epoch 0:  42%|████▏     | 2595/6250 [2:42:09<3:48:38,  3.75s/it, gpt_loss=0.77, lr=1.39e-6][A[2025-04-24 02:34:53,128] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  42%|████▏     | 2595/6250 [2:42:14<3:48:38,  3.75s/it, gpt_loss=0.638, lr=1.39e-6][A
Train step of epoch 0:  42%|████▏     | 2596/6250 [2:42:14<4:10:34,  4.11s/it, gpt_loss=0.638, lr=1.39e-6][A
Train step of epoch 0:  42%|████▏     | 2596/6250 [2:42:16<4:10:34,  4.11s/it, gpt_loss=0.424, lr=1.39e-6][A
Train step of epoch 0:  42%|████▏     | 2597/6250 [2:42:16<3:40:06,  3.62s/it, gpt_loss=0.424, lr=1.39e-6][A
Train step of epoch 0:  42%|████▏     | 2597/6250 [2:42:20<3:40:06,  3.62s/it, gpt_loss=0.589, lr=1.39e-6][A
Train step of epoch 0:  42%|████▏     | 2598/6250 [2:42:20<3:32:32,  3.49s/it, gpt_loss=0.589, lr=1.39e-6][A
Train step of epoch 0:  42%|████▏     | 2598/6250 [2:42:24<3:32:32,  3.49s/it, gpt_loss=0.779, lr=1.39e-6][A
Train step of epoch 0:  42%|████▏     | 2599/6250 [2:42:24<3:42:26,  3.66s/it, gpt_loss=0.779, lr=1.39e-6][A[2025-04-24 02:35:07,263] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  42%|████▏     | 2599/6250 [2:42:28<3:42:26,  3.66s/it, gpt_loss=0.865, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2600/6250 [2:42:28<3:56:45,  3.89s/it, gpt_loss=0.865, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2600/6250 [2:42:32<3:56:45,  3.89s/it, gpt_loss=0.602, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2601/6250 [2:42:32<3:56:36,  3.89s/it, gpt_loss=0.602, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2601/6250 [2:42:35<3:56:36,  3.89s/it, gpt_loss=0.659, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2602/6250 [2:42:35<3:40:29,  3.63s/it, gpt_loss=0.659, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2602/6250 [2:42:37<3:40:29,  3.63s/it, gpt_loss=0.477, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2603/6250 [2:42:37<3:20:40,  3.30s/it, gpt_loss=0.477, lr=1.38e-6][A[2025-04-24 02:35:19,593] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  42%|████▏     | 2603/6250 [2:42:40<3:20:40,  3.30s/it, gpt_loss=0.517, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2604/6250 [2:42:40<3:13:05,  3.18s/it, gpt_loss=0.517, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2604/6250 [2:42:45<3:13:05,  3.18s/it, gpt_loss=0.737, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2605/6250 [2:42:45<3:39:05,  3.61s/it, gpt_loss=0.737, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2605/6250 [2:42:48<3:39:05,  3.61s/it, gpt_loss=0.441, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2606/6250 [2:42:48<3:23:17,  3.35s/it, gpt_loss=0.441, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2606/6250 [2:42:50<3:23:17,  3.35s/it, gpt_loss=0.62, lr=1.38e-6] [A
Train step of epoch 0:  42%|████▏     | 2607/6250 [2:42:50<3:09:02,  3.11s/it, gpt_loss=0.62, lr=1.38e-6][A[2025-04-24 02:35:34,223] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  42%|████▏     | 2607/6250 [2:42:55<3:09:02,  3.11s/it, gpt_loss=0.545, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2608/6250 [2:42:55<3:38:06,  3.59s/it, gpt_loss=0.545, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2608/6250 [2:42:59<3:38:06,  3.59s/it, gpt_loss=0.575, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2609/6250 [2:42:59<3:42:03,  3.66s/it, gpt_loss=0.575, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2609/6250 [2:43:03<3:42:03,  3.66s/it, gpt_loss=0.791, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2610/6250 [2:43:03<3:49:37,  3.78s/it, gpt_loss=0.791, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2610/6250 [2:43:06<3:49:37,  3.78s/it, gpt_loss=0.711, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2611/6250 [2:43:06<3:41:18,  3.65s/it, gpt_loss=0.711, lr=1.38e-6][A[2025-04-24 02:35:49,390] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  42%|████▏     | 2611/6250 [2:43:10<3:41:18,  3.65s/it, gpt_loss=0.659, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2612/6250 [2:43:10<3:46:35,  3.74s/it, gpt_loss=0.659, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2612/6250 [2:43:14<3:46:35,  3.74s/it, gpt_loss=0.737, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2613/6250 [2:43:14<3:53:47,  3.86s/it, gpt_loss=0.737, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2613/6250 [2:43:19<3:53:47,  3.86s/it, gpt_loss=0.796, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2614/6250 [2:43:19<4:13:40,  4.19s/it, gpt_loss=0.796, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2614/6250 [2:43:22<4:13:40,  4.19s/it, gpt_loss=0.557, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2615/6250 [2:43:22<3:46:29,  3.74s/it, gpt_loss=0.557, lr=1.38e-6][A[2025-04-24 02:36:06,051] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  42%|████▏     | 2615/6250 [2:43:27<3:46:29,  3.74s/it, gpt_loss=0.623, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2616/6250 [2:43:27<4:07:07,  4.08s/it, gpt_loss=0.623, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2616/6250 [2:43:31<4:07:07,  4.08s/it, gpt_loss=0.657, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2617/6250 [2:43:31<4:05:31,  4.05s/it, gpt_loss=0.657, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2617/6250 [2:43:34<4:05:31,  4.05s/it, gpt_loss=0.487, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2618/6250 [2:43:34<3:54:36,  3.88s/it, gpt_loss=0.487, lr=1.38e-6][A
Train step of epoch 0:  42%|████▏     | 2618/6250 [2:43:37<3:54:36,  3.88s/it, gpt_loss=0.54, lr=1.38e-6] [A
Train step of epoch 0:  42%|████▏     | 2619/6250 [2:43:37<3:36:05,  3.57s/it, gpt_loss=0.54, lr=1.38e-6][A[2025-04-24 02:36:19,137] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  42%|████▏     | 2619/6250 [2:43:40<3:36:05,  3.57s/it, gpt_loss=0.509, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2620/6250 [2:43:40<3:21:33,  3.33s/it, gpt_loss=0.509, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2620/6250 [2:43:44<3:21:33,  3.33s/it, gpt_loss=0.527, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2621/6250 [2:43:44<3:26:38,  3.42s/it, gpt_loss=0.527, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2621/6250 [2:43:48<3:26:38,  3.42s/it, gpt_loss=0.519, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2622/6250 [2:43:48<3:52:44,  3.85s/it, gpt_loss=0.519, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2622/6250 [2:43:53<3:52:44,  3.85s/it, gpt_loss=0.638, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2623/6250 [2:43:53<4:03:28,  4.03s/it, gpt_loss=0.638, lr=1.37e-6][A[2025-04-24 02:36:35,350] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  42%|████▏     | 2623/6250 [2:43:56<4:03:28,  4.03s/it, gpt_loss=0.614, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2624/6250 [2:43:56<3:50:07,  3.81s/it, gpt_loss=0.614, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2624/6250 [2:44:01<3:50:07,  3.81s/it, gpt_loss=0.689, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2625/6250 [2:44:01<4:06:33,  4.08s/it, gpt_loss=0.689, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2625/6250 [2:44:05<4:06:33,  4.08s/it, gpt_loss=0.596, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2626/6250 [2:44:05<4:14:09,  4.21s/it, gpt_loss=0.596, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2626/6250 [2:44:08<4:14:09,  4.21s/it, gpt_loss=0.535, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2627/6250 [2:44:08<3:51:13,  3.83s/it, gpt_loss=0.535, lr=1.37e-6][A[2025-04-24 02:36:52,471] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  42%|████▏     | 2627/6250 [2:44:13<3:51:13,  3.83s/it, gpt_loss=0.643, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2628/6250 [2:44:13<4:11:30,  4.17s/it, gpt_loss=0.643, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2628/6250 [2:44:17<4:11:30,  4.17s/it, gpt_loss=0.705, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2629/6250 [2:44:17<4:08:57,  4.13s/it, gpt_loss=0.705, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2629/6250 [2:44:21<4:08:57,  4.13s/it, gpt_loss=0.513, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2630/6250 [2:44:21<3:58:43,  3.96s/it, gpt_loss=0.513, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2630/6250 [2:44:24<3:58:43,  3.96s/it, gpt_loss=0.513, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2631/6250 [2:44:24<3:45:17,  3.74s/it, gpt_loss=0.513, lr=1.37e-6][A[2025-04-24 02:37:07,070] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  42%|████▏     | 2631/6250 [2:44:28<3:45:17,  3.74s/it, gpt_loss=0.704, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2632/6250 [2:44:28<3:46:11,  3.75s/it, gpt_loss=0.704, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2632/6250 [2:44:31<3:46:11,  3.75s/it, gpt_loss=0.524, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2633/6250 [2:44:31<3:39:52,  3.65s/it, gpt_loss=0.524, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2633/6250 [2:44:35<3:39:52,  3.65s/it, gpt_loss=0.535, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2634/6250 [2:44:35<3:35:08,  3.57s/it, gpt_loss=0.535, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2634/6250 [2:44:37<3:35:08,  3.57s/it, gpt_loss=0.495, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2635/6250 [2:44:37<3:13:52,  3.22s/it, gpt_loss=0.495, lr=1.37e-6][A[2025-04-24 02:37:20,602] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  42%|████▏     | 2635/6250 [2:44:41<3:13:52,  3.22s/it, gpt_loss=0.505, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2636/6250 [2:44:41<3:34:06,  3.55s/it, gpt_loss=0.505, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2636/6250 [2:44:45<3:34:06,  3.55s/it, gpt_loss=0.656, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2637/6250 [2:44:45<3:43:12,  3.71s/it, gpt_loss=0.656, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2637/6250 [2:44:49<3:43:12,  3.71s/it, gpt_loss=0.59, lr=1.37e-6] [A
Train step of epoch 0:  42%|████▏     | 2638/6250 [2:44:49<3:44:41,  3.73s/it, gpt_loss=0.59, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2638/6250 [2:44:53<3:44:41,  3.73s/it, gpt_loss=0.609, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2639/6250 [2:44:53<3:43:18,  3.71s/it, gpt_loss=0.609, lr=1.37e-6][A[2025-04-24 02:37:35,393] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  42%|████▏     | 2639/6250 [2:44:56<3:43:18,  3.71s/it, gpt_loss=0.561, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2640/6250 [2:44:56<3:35:26,  3.58s/it, gpt_loss=0.561, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2640/6250 [2:45:01<3:35:26,  3.58s/it, gpt_loss=0.607, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2641/6250 [2:45:01<3:51:26,  3.85s/it, gpt_loss=0.607, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2641/6250 [2:45:04<3:51:26,  3.85s/it, gpt_loss=0.411, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2642/6250 [2:45:04<3:51:38,  3.85s/it, gpt_loss=0.411, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2642/6250 [2:45:07<3:51:38,  3.85s/it, gpt_loss=0.693, lr=1.37e-6][A
Train step of epoch 0:  42%|████▏     | 2643/6250 [2:45:07<3:32:06,  3.53s/it, gpt_loss=0.693, lr=1.37e-6][A[2025-04-24 02:37:50,324] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  42%|████▏     | 2643/6250 [2:45:11<3:32:06,  3.53s/it, gpt_loss=0.541, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2644/6250 [2:45:11<3:37:24,  3.62s/it, gpt_loss=0.541, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2644/6250 [2:45:16<3:37:24,  3.62s/it, gpt_loss=0.625, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2645/6250 [2:45:16<3:55:44,  3.92s/it, gpt_loss=0.625, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2645/6250 [2:45:20<3:55:44,  3.92s/it, gpt_loss=0.503, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2646/6250 [2:45:20<4:05:47,  4.09s/it, gpt_loss=0.503, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2646/6250 [2:45:23<4:05:47,  4.09s/it, gpt_loss=0.711, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2647/6250 [2:45:23<3:46:19,  3.77s/it, gpt_loss=0.711, lr=1.36e-6][A[2025-04-24 02:38:06,433] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  42%|████▏     | 2647/6250 [2:45:27<3:46:19,  3.77s/it, gpt_loss=0.725, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2648/6250 [2:45:27<3:49:53,  3.83s/it, gpt_loss=0.725, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2648/6250 [2:45:32<3:49:53,  3.83s/it, gpt_loss=0.57, lr=1.36e-6] [A
Train step of epoch 0:  42%|████▏     | 2649/6250 [2:45:32<4:06:56,  4.11s/it, gpt_loss=0.57, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2649/6250 [2:45:34<4:06:56,  4.11s/it, gpt_loss=0.656, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2650/6250 [2:45:34<3:36:14,  3.60s/it, gpt_loss=0.656, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2650/6250 [2:45:38<3:36:14,  3.60s/it, gpt_loss=0.45, lr=1.36e-6] [A
Train step of epoch 0:  42%|████▏     | 2651/6250 [2:45:38<3:36:12,  3.60s/it, gpt_loss=0.45, lr=1.36e-6][A[2025-04-24 02:38:21,042] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  42%|████▏     | 2651/6250 [2:45:42<3:36:12,  3.60s/it, gpt_loss=0.501, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2652/6250 [2:45:42<3:39:52,  3.67s/it, gpt_loss=0.501, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2652/6250 [2:45:46<3:39:52,  3.67s/it, gpt_loss=0.506, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2653/6250 [2:45:46<3:43:03,  3.72s/it, gpt_loss=0.506, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2653/6250 [2:45:49<3:43:03,  3.72s/it, gpt_loss=0.559, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2654/6250 [2:45:49<3:42:29,  3.71s/it, gpt_loss=0.559, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2654/6250 [2:45:52<3:42:29,  3.71s/it, gpt_loss=0.535, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2655/6250 [2:45:52<3:26:37,  3.45s/it, gpt_loss=0.535, lr=1.36e-6][A[2025-04-24 02:38:34,935] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  42%|████▏     | 2655/6250 [2:45:56<3:26:37,  3.45s/it, gpt_loss=0.583, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2656/6250 [2:45:56<3:27:50,  3.47s/it, gpt_loss=0.583, lr=1.36e-6][A
Train step of epoch 0:  42%|████▏     | 2656/6250 [2:46:00<3:27:50,  3.47s/it, gpt_loss=0.742, lr=1.36e-6][A
Train step of epoch 0:  43%|████▎     | 2657/6250 [2:46:00<3:34:54,  3.59s/it, gpt_loss=0.742, lr=1.36e-6][A
Train step of epoch 0:  43%|████▎     | 2657/6250 [2:46:03<3:34:54,  3.59s/it, gpt_loss=0.547, lr=1.36e-6][A
Train step of epoch 0:  43%|████▎     | 2658/6250 [2:46:03<3:38:54,  3.66s/it, gpt_loss=0.547, lr=1.36e-6][A
Train step of epoch 0:  43%|████▎     | 2658/6250 [2:46:06<3:38:54,  3.66s/it, gpt_loss=0.59, lr=1.36e-6] [A
Train step of epoch 0:  43%|████▎     | 2659/6250 [2:46:06<3:27:16,  3.46s/it, gpt_loss=0.59, lr=1.36e-6][A[2025-04-24 02:38:49,864] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  43%|████▎     | 2659/6250 [2:46:11<3:27:16,  3.46s/it, gpt_loss=0.598, lr=1.36e-6][A
Train step of epoch 0:  43%|████▎     | 2660/6250 [2:46:11<3:41:05,  3.70s/it, gpt_loss=0.598, lr=1.36e-6][A
Train step of epoch 0:  43%|████▎     | 2660/6250 [2:46:15<3:41:05,  3.70s/it, gpt_loss=0.587, lr=1.36e-6][A
Train step of epoch 0:  43%|████▎     | 2661/6250 [2:46:15<3:55:26,  3.94s/it, gpt_loss=0.587, lr=1.36e-6][A
Train step of epoch 0:  43%|████▎     | 2661/6250 [2:46:19<3:55:26,  3.94s/it, gpt_loss=0.579, lr=1.36e-6][A
Train step of epoch 0:  43%|████▎     | 2662/6250 [2:46:19<3:51:33,  3.87s/it, gpt_loss=0.579, lr=1.36e-6][A
Train step of epoch 0:  43%|████▎     | 2662/6250 [2:46:23<3:51:33,  3.87s/it, gpt_loss=0.51, lr=1.36e-6] [A
Train step of epoch 0:  43%|████▎     | 2663/6250 [2:46:23<4:04:09,  4.08s/it, gpt_loss=0.51, lr=1.36e-6][A[2025-04-24 02:39:08,083] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  43%|████▎     | 2663/6250 [2:46:29<4:04:09,  4.08s/it, gpt_loss=0.683, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2664/6250 [2:46:29<4:28:01,  4.48s/it, gpt_loss=0.683, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2664/6250 [2:46:33<4:28:01,  4.48s/it, gpt_loss=0.593, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2665/6250 [2:46:33<4:15:26,  4.28s/it, gpt_loss=0.593, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2665/6250 [2:46:37<4:15:26,  4.28s/it, gpt_loss=0.573, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2666/6250 [2:46:37<4:23:04,  4.40s/it, gpt_loss=0.573, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2666/6250 [2:46:41<4:23:04,  4.40s/it, gpt_loss=0.655, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2667/6250 [2:46:41<4:11:40,  4.21s/it, gpt_loss=0.655, lr=1.35e-6][A[2025-04-24 02:39:23,891] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  43%|████▎     | 2667/6250 [2:46:45<4:11:40,  4.21s/it, gpt_loss=0.515, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2668/6250 [2:46:45<3:59:36,  4.01s/it, gpt_loss=0.515, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2668/6250 [2:46:48<3:59:36,  4.01s/it, gpt_loss=0.717, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2669/6250 [2:46:48<3:53:03,  3.91s/it, gpt_loss=0.717, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2669/6250 [2:46:52<3:53:03,  3.91s/it, gpt_loss=0.707, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2670/6250 [2:46:52<3:52:25,  3.90s/it, gpt_loss=0.707, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2670/6250 [2:46:55<3:52:25,  3.90s/it, gpt_loss=0.582, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2671/6250 [2:46:55<3:35:26,  3.61s/it, gpt_loss=0.582, lr=1.35e-6][A[2025-04-24 02:39:39,551] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  43%|████▎     | 2671/6250 [2:47:00<3:35:26,  3.61s/it, gpt_loss=0.77, lr=1.35e-6] [A
Train step of epoch 0:  43%|████▎     | 2672/6250 [2:47:00<4:03:32,  4.08s/it, gpt_loss=0.77, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2672/6250 [2:47:04<4:03:32,  4.08s/it, gpt_loss=0.522, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2673/6250 [2:47:04<4:01:26,  4.05s/it, gpt_loss=0.522, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2673/6250 [2:47:07<4:01:26,  4.05s/it, gpt_loss=0.561, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2674/6250 [2:47:07<3:41:50,  3.72s/it, gpt_loss=0.561, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2674/6250 [2:47:11<3:41:50,  3.72s/it, gpt_loss=0.682, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2675/6250 [2:47:11<3:44:20,  3.77s/it, gpt_loss=0.682, lr=1.35e-6][A[2025-04-24 02:39:55,067] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  43%|████▎     | 2675/6250 [2:47:16<3:44:20,  3.77s/it, gpt_loss=0.625, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2676/6250 [2:47:16<4:01:23,  4.05s/it, gpt_loss=0.625, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2676/6250 [2:47:21<4:01:23,  4.05s/it, gpt_loss=0.667, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2677/6250 [2:47:21<4:16:34,  4.31s/it, gpt_loss=0.667, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2677/6250 [2:47:25<4:16:34,  4.31s/it, gpt_loss=0.692, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2678/6250 [2:47:25<4:14:51,  4.28s/it, gpt_loss=0.692, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2678/6250 [2:47:29<4:14:51,  4.28s/it, gpt_loss=0.648, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2679/6250 [2:47:29<4:13:56,  4.27s/it, gpt_loss=0.648, lr=1.35e-6][A[2025-04-24 02:40:11,554] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  43%|████▎     | 2679/6250 [2:47:32<4:13:56,  4.27s/it, gpt_loss=0.55, lr=1.35e-6] [A
Train step of epoch 0:  43%|████▎     | 2680/6250 [2:47:32<3:53:35,  3.93s/it, gpt_loss=0.55, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2680/6250 [2:47:36<3:53:35,  3.93s/it, gpt_loss=0.71, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2681/6250 [2:47:36<3:46:45,  3.81s/it, gpt_loss=0.71, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2681/6250 [2:47:39<3:46:45,  3.81s/it, gpt_loss=0.618, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2682/6250 [2:47:39<3:32:11,  3.57s/it, gpt_loss=0.618, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2682/6250 [2:47:43<3:32:11,  3.57s/it, gpt_loss=0.725, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2683/6250 [2:47:43<3:33:41,  3.59s/it, gpt_loss=0.725, lr=1.35e-6][A[2025-04-24 02:40:25,435] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  43%|████▎     | 2683/6250 [2:47:46<3:33:41,  3.59s/it, gpt_loss=0.476, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2684/6250 [2:47:46<3:35:08,  3.62s/it, gpt_loss=0.476, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2684/6250 [2:47:49<3:35:08,  3.62s/it, gpt_loss=0.63, lr=1.35e-6] [A
Train step of epoch 0:  43%|████▎     | 2685/6250 [2:47:49<3:24:04,  3.43s/it, gpt_loss=0.63, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2685/6250 [2:47:53<3:24:04,  3.43s/it, gpt_loss=0.652, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2686/6250 [2:47:53<3:32:56,  3.58s/it, gpt_loss=0.652, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2686/6250 [2:47:56<3:32:56,  3.58s/it, gpt_loss=0.757, lr=1.35e-6][A
Train step of epoch 0:  43%|████▎     | 2687/6250 [2:47:56<3:25:19,  3.46s/it, gpt_loss=0.757, lr=1.35e-6][A[2025-04-24 02:40:38,988] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  43%|████▎     | 2687/6250 [2:48:00<3:25:19,  3.46s/it, gpt_loss=0.677, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2688/6250 [2:48:00<3:25:13,  3.46s/it, gpt_loss=0.677, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2688/6250 [2:48:05<3:25:13,  3.46s/it, gpt_loss=0.721, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2689/6250 [2:48:05<3:48:18,  3.85s/it, gpt_loss=0.721, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2689/6250 [2:48:08<3:48:18,  3.85s/it, gpt_loss=0.598, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2690/6250 [2:48:08<3:46:10,  3.81s/it, gpt_loss=0.598, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2690/6250 [2:48:12<3:46:10,  3.81s/it, gpt_loss=0.667, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2691/6250 [2:48:12<3:52:53,  3.93s/it, gpt_loss=0.667, lr=1.34e-6][A[2025-04-24 02:40:55,728] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  43%|████▎     | 2691/6250 [2:48:16<3:52:53,  3.93s/it, gpt_loss=0.513, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2692/6250 [2:48:16<3:55:11,  3.97s/it, gpt_loss=0.513, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2692/6250 [2:48:19<3:55:11,  3.97s/it, gpt_loss=0.54, lr=1.34e-6] [A
Train step of epoch 0:  43%|████▎     | 2693/6250 [2:48:19<3:37:20,  3.67s/it, gpt_loss=0.54, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2693/6250 [2:48:24<3:37:20,  3.67s/it, gpt_loss=0.676, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2694/6250 [2:48:24<3:45:33,  3.81s/it, gpt_loss=0.676, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2694/6250 [2:48:27<3:45:33,  3.81s/it, gpt_loss=0.507, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2695/6250 [2:48:27<3:45:58,  3.81s/it, gpt_loss=0.507, lr=1.34e-6][A[2025-04-24 02:41:10,591] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  43%|████▎     | 2695/6250 [2:48:31<3:45:58,  3.81s/it, gpt_loss=0.584, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2696/6250 [2:48:31<3:48:01,  3.85s/it, gpt_loss=0.584, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2696/6250 [2:48:35<3:48:01,  3.85s/it, gpt_loss=0.768, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2697/6250 [2:48:35<3:38:09,  3.68s/it, gpt_loss=0.768, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2697/6250 [2:48:38<3:38:09,  3.68s/it, gpt_loss=0.65, lr=1.34e-6] [A
Train step of epoch 0:  43%|████▎     | 2698/6250 [2:48:38<3:30:55,  3.56s/it, gpt_loss=0.65, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2698/6250 [2:48:41<3:30:55,  3.56s/it, gpt_loss=0.48, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2699/6250 [2:48:41<3:30:58,  3.56s/it, gpt_loss=0.48, lr=1.34e-6][A[2025-04-24 02:41:24,711] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  43%|████▎     | 2699/6250 [2:48:45<3:30:58,  3.56s/it, gpt_loss=0.581, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2700/6250 [2:48:45<3:38:08,  3.69s/it, gpt_loss=0.581, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2700/6250 [2:48:50<3:38:08,  3.69s/it, gpt_loss=0.587, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2701/6250 [2:48:50<3:58:26,  4.03s/it, gpt_loss=0.587, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2701/6250 [2:48:54<3:58:26,  4.03s/it, gpt_loss=0.41, lr=1.34e-6] [A
Train step of epoch 0:  43%|████▎     | 2702/6250 [2:48:54<3:48:32,  3.86s/it, gpt_loss=0.41, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2702/6250 [2:48:58<3:48:32,  3.86s/it, gpt_loss=0.577, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2703/6250 [2:48:58<3:50:32,  3.90s/it, gpt_loss=0.577, lr=1.34e-6][A[2025-04-24 02:41:41,472] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  43%|████▎     | 2703/6250 [2:49:02<3:50:32,  3.90s/it, gpt_loss=0.669, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2704/6250 [2:49:02<4:00:34,  4.07s/it, gpt_loss=0.669, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2704/6250 [2:49:06<4:00:34,  4.07s/it, gpt_loss=0.57, lr=1.34e-6] [A
Train step of epoch 0:  43%|████▎     | 2705/6250 [2:49:06<3:50:19,  3.90s/it, gpt_loss=0.57, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2705/6250 [2:49:10<3:50:19,  3.90s/it, gpt_loss=0.474, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2706/6250 [2:49:10<3:51:27,  3.92s/it, gpt_loss=0.474, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2706/6250 [2:49:13<3:51:27,  3.92s/it, gpt_loss=0.573, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2707/6250 [2:49:13<3:35:26,  3.65s/it, gpt_loss=0.573, lr=1.34e-6][A[2025-04-24 02:41:56,187] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  43%|████▎     | 2707/6250 [2:49:17<3:35:26,  3.65s/it, gpt_loss=0.619, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2708/6250 [2:49:17<3:45:45,  3.82s/it, gpt_loss=0.619, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2708/6250 [2:49:21<3:45:45,  3.82s/it, gpt_loss=0.541, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2709/6250 [2:49:21<3:53:10,  3.95s/it, gpt_loss=0.541, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2709/6250 [2:49:25<3:53:10,  3.95s/it, gpt_loss=0.555, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2710/6250 [2:49:25<3:51:46,  3.93s/it, gpt_loss=0.555, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2710/6250 [2:49:28<3:51:46,  3.93s/it, gpt_loss=0.492, lr=1.34e-6][A
Train step of epoch 0:  43%|████▎     | 2711/6250 [2:49:28<3:27:41,  3.52s/it, gpt_loss=0.492, lr=1.34e-6][A[2025-04-24 02:42:10,157] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  43%|████▎     | 2711/6250 [2:49:31<3:27:41,  3.52s/it, gpt_loss=0.632, lr=1.33e-6][A
Train step of epoch 0:  43%|████▎     | 2712/6250 [2:49:31<3:23:18,  3.45s/it, gpt_loss=0.632, lr=1.33e-6][A
Train step of epoch 0:  43%|████▎     | 2712/6250 [2:49:35<3:23:18,  3.45s/it, gpt_loss=0.624, lr=1.33e-6][A
Train step of epoch 0:  43%|████▎     | 2713/6250 [2:49:35<3:35:45,  3.66s/it, gpt_loss=0.624, lr=1.33e-6][A
Train step of epoch 0:  43%|████▎     | 2713/6250 [2:49:39<3:35:45,  3.66s/it, gpt_loss=0.535, lr=1.33e-6][A
Train step of epoch 0:  43%|████▎     | 2714/6250 [2:49:39<3:47:45,  3.86s/it, gpt_loss=0.535, lr=1.33e-6][A
Train step of epoch 0:  43%|████▎     | 2714/6250 [2:49:43<3:47:45,  3.86s/it, gpt_loss=0.6, lr=1.33e-6]  [A
Train step of epoch 0:  43%|████▎     | 2715/6250 [2:49:43<3:45:48,  3.83s/it, gpt_loss=0.6, lr=1.33e-6][A[2025-04-24 02:42:26,649] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  43%|████▎     | 2715/6250 [2:49:47<3:45:48,  3.83s/it, gpt_loss=0.581, lr=1.33e-6][A
Train step of epoch 0:  43%|████▎     | 2716/6250 [2:49:47<3:52:52,  3.95s/it, gpt_loss=0.581, lr=1.33e-6][A
Train step of epoch 0:  43%|████▎     | 2716/6250 [2:49:52<3:52:52,  3.95s/it, gpt_loss=0.676, lr=1.33e-6][A
Train step of epoch 0:  43%|████▎     | 2717/6250 [2:49:52<4:00:50,  4.09s/it, gpt_loss=0.676, lr=1.33e-6][A
Train step of epoch 0:  43%|████▎     | 2717/6250 [2:49:56<4:00:50,  4.09s/it, gpt_loss=0.633, lr=1.33e-6][A
Train step of epoch 0:  43%|████▎     | 2718/6250 [2:49:56<3:58:44,  4.06s/it, gpt_loss=0.633, lr=1.33e-6][A
Train step of epoch 0:  43%|████▎     | 2718/6250 [2:49:59<3:58:44,  4.06s/it, gpt_loss=0.716, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2719/6250 [2:49:59<3:51:30,  3.93s/it, gpt_loss=0.716, lr=1.33e-6][A[2025-04-24 02:42:42,970] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  44%|████▎     | 2719/6250 [2:50:04<3:51:30,  3.93s/it, gpt_loss=0.697, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2720/6250 [2:50:04<3:57:41,  4.04s/it, gpt_loss=0.697, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2720/6250 [2:50:08<3:57:41,  4.04s/it, gpt_loss=0.547, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2721/6250 [2:50:08<4:02:58,  4.13s/it, gpt_loss=0.547, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2721/6250 [2:50:11<4:02:58,  4.13s/it, gpt_loss=0.454, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2722/6250 [2:50:11<3:33:42,  3.63s/it, gpt_loss=0.454, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2722/6250 [2:50:14<3:33:42,  3.63s/it, gpt_loss=0.758, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2723/6250 [2:50:14<3:22:09,  3.44s/it, gpt_loss=0.758, lr=1.33e-6][A[2025-04-24 02:42:56,443] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  44%|████▎     | 2723/6250 [2:50:17<3:22:09,  3.44s/it, gpt_loss=0.519, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2724/6250 [2:50:17<3:26:11,  3.51s/it, gpt_loss=0.519, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2724/6250 [2:50:21<3:26:11,  3.51s/it, gpt_loss=0.578, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2725/6250 [2:50:21<3:39:49,  3.74s/it, gpt_loss=0.578, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2725/6250 [2:50:26<3:39:49,  3.74s/it, gpt_loss=0.821, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2726/6250 [2:50:26<3:47:27,  3.87s/it, gpt_loss=0.821, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2726/6250 [2:50:29<3:47:27,  3.87s/it, gpt_loss=0.68, lr=1.33e-6] [A
Train step of epoch 0:  44%|████▎     | 2727/6250 [2:50:29<3:33:26,  3.64s/it, gpt_loss=0.68, lr=1.33e-6][A[2025-04-24 02:43:11,570] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  44%|████▎     | 2727/6250 [2:50:32<3:33:26,  3.64s/it, gpt_loss=0.653, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2728/6250 [2:50:32<3:32:26,  3.62s/it, gpt_loss=0.653, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2728/6250 [2:50:35<3:32:26,  3.62s/it, gpt_loss=0.606, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2729/6250 [2:50:35<3:23:45,  3.47s/it, gpt_loss=0.606, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2729/6250 [2:50:39<3:23:45,  3.47s/it, gpt_loss=0.682, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2730/6250 [2:50:39<3:20:55,  3.42s/it, gpt_loss=0.682, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2730/6250 [2:50:42<3:20:55,  3.42s/it, gpt_loss=0.463, lr=1.33e-6][A
Train step of epoch 0:  44%|████▎     | 2731/6250 [2:50:42<3:17:07,  3.36s/it, gpt_loss=0.463, lr=1.33e-6][A[2025-04-24 02:43:25,887] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  44%|████▎     | 2731/6250 [2:50:47<3:17:07,  3.36s/it, gpt_loss=0.782, lr=1.32e-6][A
Train step of epoch 0:  44%|████▎     | 2732/6250 [2:50:47<3:39:56,  3.75s/it, gpt_loss=0.782, lr=1.32e-6][A
Train step of epoch 0:  44%|████▎     | 2732/6250 [2:50:50<3:39:56,  3.75s/it, gpt_loss=0.672, lr=1.32e-6][A
Train step of epoch 0:  44%|████▎     | 2733/6250 [2:50:50<3:32:41,  3.63s/it, gpt_loss=0.672, lr=1.32e-6][A
Train step of epoch 0:  44%|████▎     | 2733/6250 [2:50:54<3:32:41,  3.63s/it, gpt_loss=0.751, lr=1.32e-6][A
Train step of epoch 0:  44%|████▎     | 2734/6250 [2:50:54<3:36:31,  3.70s/it, gpt_loss=0.751, lr=1.32e-6][A
Train step of epoch 0:  44%|████▎     | 2734/6250 [2:50:58<3:36:31,  3.70s/it, gpt_loss=0.643, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2735/6250 [2:50:58<3:37:04,  3.71s/it, gpt_loss=0.643, lr=1.32e-6][A[2025-04-24 02:43:41,070] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  44%|████▍     | 2735/6250 [2:51:02<3:37:04,  3.71s/it, gpt_loss=0.651, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2736/6250 [2:51:02<3:46:46,  3.87s/it, gpt_loss=0.651, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2736/6250 [2:51:05<3:46:46,  3.87s/it, gpt_loss=0.672, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2737/6250 [2:51:05<3:42:47,  3.81s/it, gpt_loss=0.672, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2737/6250 [2:51:09<3:42:47,  3.81s/it, gpt_loss=0.574, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2738/6250 [2:51:09<3:31:24,  3.61s/it, gpt_loss=0.574, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2738/6250 [2:51:13<3:31:24,  3.61s/it, gpt_loss=0.518, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2739/6250 [2:51:13<3:47:52,  3.89s/it, gpt_loss=0.518, lr=1.32e-6][A[2025-04-24 02:43:57,614] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  44%|████▍     | 2739/6250 [2:51:18<3:47:52,  3.89s/it, gpt_loss=0.605, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2740/6250 [2:51:18<4:10:23,  4.28s/it, gpt_loss=0.605, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2740/6250 [2:51:22<4:10:23,  4.28s/it, gpt_loss=0.631, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2741/6250 [2:51:22<4:00:13,  4.11s/it, gpt_loss=0.631, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2741/6250 [2:51:26<4:00:13,  4.11s/it, gpt_loss=0.577, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2742/6250 [2:51:26<3:49:34,  3.93s/it, gpt_loss=0.577, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2742/6250 [2:51:28<3:49:34,  3.93s/it, gpt_loss=0.669, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2743/6250 [2:51:28<3:25:14,  3.51s/it, gpt_loss=0.669, lr=1.32e-6][A[2025-04-24 02:44:11,770] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  44%|████▍     | 2743/6250 [2:51:33<3:25:14,  3.51s/it, gpt_loss=0.701, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2744/6250 [2:51:33<3:40:49,  3.78s/it, gpt_loss=0.701, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2744/6250 [2:51:36<3:40:49,  3.78s/it, gpt_loss=0.648, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2745/6250 [2:51:36<3:37:46,  3.73s/it, gpt_loss=0.648, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2745/6250 [2:51:40<3:37:46,  3.73s/it, gpt_loss=0.801, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2746/6250 [2:51:40<3:39:45,  3.76s/it, gpt_loss=0.801, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2746/6250 [2:51:44<3:39:45,  3.76s/it, gpt_loss=0.598, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2747/6250 [2:51:44<3:38:03,  3.74s/it, gpt_loss=0.598, lr=1.32e-6][A[2025-04-24 02:44:26,858] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  44%|████▍     | 2747/6250 [2:51:48<3:38:03,  3.74s/it, gpt_loss=0.742, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2748/6250 [2:51:48<3:42:02,  3.80s/it, gpt_loss=0.742, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2748/6250 [2:51:51<3:42:02,  3.80s/it, gpt_loss=0.527, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2749/6250 [2:51:51<3:42:55,  3.82s/it, gpt_loss=0.527, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2749/6250 [2:51:56<3:42:55,  3.82s/it, gpt_loss=0.631, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2750/6250 [2:51:56<3:48:55,  3.92s/it, gpt_loss=0.631, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2750/6250 [2:51:59<3:48:55,  3.92s/it, gpt_loss=0.618, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2751/6250 [2:51:59<3:36:16,  3.71s/it, gpt_loss=0.618, lr=1.32e-6][A[2025-04-24 02:44:41,579] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  44%|████▍     | 2751/6250 [2:52:02<3:36:16,  3.71s/it, gpt_loss=0.675, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2752/6250 [2:52:02<3:32:23,  3.64s/it, gpt_loss=0.675, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2752/6250 [2:52:06<3:32:23,  3.64s/it, gpt_loss=0.635, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2753/6250 [2:52:06<3:38:40,  3.75s/it, gpt_loss=0.635, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2753/6250 [2:52:10<3:38:40,  3.75s/it, gpt_loss=0.682, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2754/6250 [2:52:10<3:34:31,  3.68s/it, gpt_loss=0.682, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2754/6250 [2:52:13<3:34:31,  3.68s/it, gpt_loss=0.506, lr=1.32e-6][A
Train step of epoch 0:  44%|████▍     | 2755/6250 [2:52:13<3:27:11,  3.56s/it, gpt_loss=0.506, lr=1.32e-6][A[2025-04-24 02:44:56,081] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  44%|████▍     | 2755/6250 [2:52:17<3:27:11,  3.56s/it, gpt_loss=0.688, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2756/6250 [2:52:17<3:29:50,  3.60s/it, gpt_loss=0.688, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2756/6250 [2:52:21<3:29:50,  3.60s/it, gpt_loss=0.726, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2757/6250 [2:52:21<3:36:17,  3.72s/it, gpt_loss=0.726, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2757/6250 [2:52:25<3:36:17,  3.72s/it, gpt_loss=0.547, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2758/6250 [2:52:25<3:43:33,  3.84s/it, gpt_loss=0.547, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2758/6250 [2:52:28<3:43:33,  3.84s/it, gpt_loss=0.584, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2759/6250 [2:52:28<3:30:13,  3.61s/it, gpt_loss=0.584, lr=1.31e-6][A[2025-04-24 02:45:10,933] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  44%|████▍     | 2759/6250 [2:52:32<3:30:13,  3.61s/it, gpt_loss=0.585, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2760/6250 [2:52:32<3:30:59,  3.63s/it, gpt_loss=0.585, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2760/6250 [2:52:35<3:30:59,  3.63s/it, gpt_loss=0.501, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2761/6250 [2:52:35<3:28:08,  3.58s/it, gpt_loss=0.501, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2761/6250 [2:52:39<3:28:08,  3.58s/it, gpt_loss=0.598, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2762/6250 [2:52:39<3:28:35,  3.59s/it, gpt_loss=0.598, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2762/6250 [2:52:42<3:28:35,  3.59s/it, gpt_loss=0.631, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2763/6250 [2:52:42<3:22:09,  3.48s/it, gpt_loss=0.631, lr=1.31e-6][A[2025-04-24 02:45:25,436] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  44%|████▍     | 2763/6250 [2:52:46<3:22:09,  3.48s/it, gpt_loss=0.671, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2764/6250 [2:52:46<3:34:44,  3.70s/it, gpt_loss=0.671, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2764/6250 [2:52:50<3:34:44,  3.70s/it, gpt_loss=0.598, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2765/6250 [2:52:50<3:37:27,  3.74s/it, gpt_loss=0.598, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2765/6250 [2:52:53<3:37:27,  3.74s/it, gpt_loss=0.568, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2766/6250 [2:52:53<3:25:31,  3.54s/it, gpt_loss=0.568, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2766/6250 [2:52:56<3:25:31,  3.54s/it, gpt_loss=0.449, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2767/6250 [2:52:56<3:22:25,  3.49s/it, gpt_loss=0.449, lr=1.31e-6][A[2025-04-24 02:45:38,905] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  44%|████▍     | 2767/6250 [2:53:00<3:22:25,  3.49s/it, gpt_loss=0.558, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2768/6250 [2:53:00<3:17:07,  3.40s/it, gpt_loss=0.558, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2768/6250 [2:53:03<3:17:07,  3.40s/it, gpt_loss=0.539, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2769/6250 [2:53:03<3:24:30,  3.52s/it, gpt_loss=0.539, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2769/6250 [2:53:07<3:24:30,  3.52s/it, gpt_loss=0.589, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2770/6250 [2:53:07<3:17:15,  3.40s/it, gpt_loss=0.589, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2770/6250 [2:53:11<3:17:15,  3.40s/it, gpt_loss=0.755, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2771/6250 [2:53:11<3:35:55,  3.72s/it, gpt_loss=0.755, lr=1.31e-6][A[2025-04-24 02:45:54,236] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  44%|████▍     | 2771/6250 [2:53:15<3:35:55,  3.72s/it, gpt_loss=0.539, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2772/6250 [2:53:15<3:39:14,  3.78s/it, gpt_loss=0.539, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2772/6250 [2:53:19<3:39:14,  3.78s/it, gpt_loss=0.63, lr=1.31e-6] [A
Train step of epoch 0:  44%|████▍     | 2773/6250 [2:53:19<3:41:30,  3.82s/it, gpt_loss=0.63, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2773/6250 [2:53:23<3:41:30,  3.82s/it, gpt_loss=0.779, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2774/6250 [2:53:23<3:50:23,  3.98s/it, gpt_loss=0.779, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2774/6250 [2:53:27<3:50:23,  3.98s/it, gpt_loss=0.454, lr=1.31e-6][A
Train step of epoch 0:  44%|████▍     | 2775/6250 [2:53:27<3:49:37,  3.96s/it, gpt_loss=0.454, lr=1.31e-6][A[2025-04-24 02:46:10,367] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  44%|████▍     | 2775/6250 [2:53:31<3:49:37,  3.96s/it, gpt_loss=0.702, lr=1.3e-6] [A
Train step of epoch 0:  44%|████▍     | 2776/6250 [2:53:31<3:49:08,  3.96s/it, gpt_loss=0.702, lr=1.3e-6][A
Train step of epoch 0:  44%|████▍     | 2776/6250 [2:53:35<3:49:08,  3.96s/it, gpt_loss=0.714, lr=1.3e-6][A
Train step of epoch 0:  44%|████▍     | 2777/6250 [2:53:35<3:49:07,  3.96s/it, gpt_loss=0.714, lr=1.3e-6][A
Train step of epoch 0:  44%|████▍     | 2777/6250 [2:53:39<3:49:07,  3.96s/it, gpt_loss=0.592, lr=1.3e-6][A
Train step of epoch 0:  44%|████▍     | 2778/6250 [2:53:39<3:47:35,  3.93s/it, gpt_loss=0.592, lr=1.3e-6][A
Train step of epoch 0:  44%|████▍     | 2778/6250 [2:53:42<3:47:35,  3.93s/it, gpt_loss=0.64, lr=1.3e-6] [A
Train step of epoch 0:  44%|████▍     | 2779/6250 [2:53:42<3:32:04,  3.67s/it, gpt_loss=0.64, lr=1.3e-6][A[2025-04-24 02:46:25,907] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  44%|████▍     | 2779/6250 [2:53:47<3:32:04,  3.67s/it, gpt_loss=0.672, lr=1.3e-6][A
Train step of epoch 0:  44%|████▍     | 2780/6250 [2:53:47<3:49:18,  3.97s/it, gpt_loss=0.672, lr=1.3e-6][A
Train step of epoch 0:  44%|████▍     | 2780/6250 [2:53:50<3:49:18,  3.97s/it, gpt_loss=0.5, lr=1.3e-6]  [A
Train step of epoch 0:  44%|████▍     | 2781/6250 [2:53:50<3:35:09,  3.72s/it, gpt_loss=0.5, lr=1.3e-6][A
Train step of epoch 0:  44%|████▍     | 2781/6250 [2:53:54<3:35:09,  3.72s/it, gpt_loss=0.524, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2782/6250 [2:53:54<3:48:26,  3.95s/it, gpt_loss=0.524, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2782/6250 [2:53:58<3:48:26,  3.95s/it, gpt_loss=0.57, lr=1.3e-6] [A
Train step of epoch 0:  45%|████▍     | 2783/6250 [2:53:58<3:40:09,  3.81s/it, gpt_loss=0.57, lr=1.3e-6][A[2025-04-24 02:46:41,231] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  45%|████▍     | 2783/6250 [2:54:02<3:40:09,  3.81s/it, gpt_loss=0.502, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2784/6250 [2:54:02<3:46:53,  3.93s/it, gpt_loss=0.502, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2784/6250 [2:54:06<3:46:53,  3.93s/it, gpt_loss=0.55, lr=1.3e-6] [A
Train step of epoch 0:  45%|████▍     | 2785/6250 [2:54:06<3:47:07,  3.93s/it, gpt_loss=0.55, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2785/6250 [2:54:09<3:47:07,  3.93s/it, gpt_loss=0.891, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2786/6250 [2:54:09<3:32:03,  3.67s/it, gpt_loss=0.891, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2786/6250 [2:54:13<3:32:03,  3.67s/it, gpt_loss=0.685, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2787/6250 [2:54:13<3:34:26,  3.72s/it, gpt_loss=0.685, lr=1.3e-6][A[2025-04-24 02:46:56,439] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  45%|████▍     | 2787/6250 [2:54:17<3:34:26,  3.72s/it, gpt_loss=0.639, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2788/6250 [2:54:17<3:45:53,  3.92s/it, gpt_loss=0.639, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2788/6250 [2:54:21<3:45:53,  3.92s/it, gpt_loss=0.782, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2789/6250 [2:54:21<3:38:19,  3.78s/it, gpt_loss=0.782, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2789/6250 [2:54:24<3:38:19,  3.78s/it, gpt_loss=0.613, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2790/6250 [2:54:24<3:34:18,  3.72s/it, gpt_loss=0.613, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2790/6250 [2:54:28<3:34:18,  3.72s/it, gpt_loss=0.567, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2791/6250 [2:54:28<3:31:56,  3.68s/it, gpt_loss=0.567, lr=1.3e-6][A[2025-04-24 02:47:10,099] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  45%|████▍     | 2791/6250 [2:54:31<3:31:56,  3.68s/it, gpt_loss=0.579, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2792/6250 [2:54:31<3:20:52,  3.49s/it, gpt_loss=0.579, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2792/6250 [2:54:35<3:20:52,  3.49s/it, gpt_loss=0.686, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2793/6250 [2:54:35<3:39:25,  3.81s/it, gpt_loss=0.686, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2793/6250 [2:54:39<3:39:25,  3.81s/it, gpt_loss=0.529, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2794/6250 [2:54:39<3:41:01,  3.84s/it, gpt_loss=0.529, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2794/6250 [2:54:42<3:41:01,  3.84s/it, gpt_loss=0.761, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2795/6250 [2:54:42<3:26:14,  3.58s/it, gpt_loss=0.761, lr=1.3e-6][A[2025-04-24 02:47:25,185] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  45%|████▍     | 2795/6250 [2:54:46<3:26:14,  3.58s/it, gpt_loss=0.623, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2796/6250 [2:54:46<3:27:05,  3.60s/it, gpt_loss=0.623, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2796/6250 [2:54:50<3:27:05,  3.60s/it, gpt_loss=0.483, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2797/6250 [2:54:50<3:26:18,  3.58s/it, gpt_loss=0.483, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2797/6250 [2:54:52<3:26:18,  3.58s/it, gpt_loss=0.549, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2798/6250 [2:54:52<3:07:25,  3.26s/it, gpt_loss=0.549, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2798/6250 [2:54:56<3:07:25,  3.26s/it, gpt_loss=0.737, lr=1.3e-6][A
Train step of epoch 0:  45%|████▍     | 2799/6250 [2:54:56<3:24:48,  3.56s/it, gpt_loss=0.737, lr=1.3e-6][A[2025-04-24 02:47:39,381] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-04-24 02:47:39,382] [INFO] [logging.py:107:log_dist] [Rank 0] step=700, skipped=0, lr=[1.2935048212348829e-06, 1.2935048212348829e-06], mom=[(0.9, 0.95), (0.9, 0.95)]
[2025-04-24 02:47:39,382] [INFO] [timer.py:264:stop] epoch=0/micro_step=2800/global_step=700, RunningAvgSamplesPerSec=2.2194242837144302, CurrSamplesPerSec=2.3797097697394634, MemAllocated=40.57GB, MaxMemAllocated=60.14GB

Train step of epoch 0:  45%|████▍     | 2799/6250 [2:55:00<3:24:48,  3.56s/it, gpt_loss=0.668, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2800/6250 [2:55:00<3:30:13,  3.66s/it, gpt_loss=0.668, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2800/6250 [2:55:04<3:30:13,  3.66s/it, gpt_loss=0.734, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2801/6250 [2:55:04<3:38:01,  3.79s/it, gpt_loss=0.734, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2801/6250 [2:55:09<3:38:01,  3.79s/it, gpt_loss=0.595, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2802/6250 [2:55:09<3:52:36,  4.05s/it, gpt_loss=0.595, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2802/6250 [2:55:12<3:52:36,  4.05s/it, gpt_loss=0.564, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2803/6250 [2:55:12<3:30:27,  3.66s/it, gpt_loss=0.564, lr=1.29e-6][A[2025-04-24 02:47:55,435] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  45%|████▍     | 2803/6250 [2:55:16<3:30:27,  3.66s/it, gpt_loss=0.63, lr=1.29e-6] [A
Train step of epoch 0:  45%|████▍     | 2804/6250 [2:55:16<3:45:22,  3.92s/it, gpt_loss=0.63, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2804/6250 [2:55:20<3:45:22,  3.92s/it, gpt_loss=0.735, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2805/6250 [2:55:20<3:44:26,  3.91s/it, gpt_loss=0.735, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2805/6250 [2:55:24<3:44:26,  3.91s/it, gpt_loss=0.591, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2806/6250 [2:55:24<3:45:37,  3.93s/it, gpt_loss=0.591, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2806/6250 [2:55:28<3:45:37,  3.93s/it, gpt_loss=0.648, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2807/6250 [2:55:28<3:39:46,  3.83s/it, gpt_loss=0.648, lr=1.29e-6][A[2025-04-24 02:48:10,766] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  45%|████▍     | 2807/6250 [2:55:32<3:39:46,  3.83s/it, gpt_loss=0.5, lr=1.29e-6]  [A
Train step of epoch 0:  45%|████▍     | 2808/6250 [2:55:32<3:40:34,  3.85s/it, gpt_loss=0.5, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2808/6250 [2:55:35<3:40:34,  3.85s/it, gpt_loss=0.658, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2809/6250 [2:55:35<3:39:20,  3.82s/it, gpt_loss=0.658, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2809/6250 [2:55:39<3:39:20,  3.82s/it, gpt_loss=0.756, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2810/6250 [2:55:39<3:43:43,  3.90s/it, gpt_loss=0.756, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2810/6250 [2:55:43<3:43:43,  3.90s/it, gpt_loss=0.664, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2811/6250 [2:55:43<3:33:57,  3.73s/it, gpt_loss=0.664, lr=1.29e-6][A[2025-04-24 02:48:27,044] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  45%|████▍     | 2811/6250 [2:55:48<3:33:57,  3.73s/it, gpt_loss=0.538, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2812/6250 [2:55:48<3:57:03,  4.14s/it, gpt_loss=0.538, lr=1.29e-6][A
Train step of epoch 0:  45%|████▍     | 2812/6250 [2:55:51<3:57:03,  4.14s/it, gpt_loss=0.585, lr=1.29e-6][A
Train step of epoch 0:  45%|████▌     | 2813/6250 [2:55:51<3:39:14,  3.83s/it, gpt_loss=0.585, lr=1.29e-6][A
Train step of epoch 0:  45%|████▌     | 2813/6250 [2:55:54<3:39:14,  3.83s/it, gpt_loss=0.512, lr=1.29e-6][A
Train step of epoch 0:  45%|████▌     | 2814/6250 [2:55:54<3:30:43,  3.68s/it, gpt_loss=0.512, lr=1.29e-6][A
Train step of epoch 0:  45%|████▌     | 2814/6250 [2:55:58<3:30:43,  3.68s/it, gpt_loss=0.755, lr=1.29e-6][A
Train step of epoch 0:  45%|████▌     | 2815/6250 [2:55:58<3:36:30,  3.78s/it, gpt_loss=0.755, lr=1.29e-6][A[2025-04-24 02:48:41,612] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  45%|████▌     | 2815/6250 [2:56:02<3:36:30,  3.78s/it, gpt_loss=0.745, lr=1.29e-6][A
Train step of epoch 0:  45%|████▌     | 2816/6250 [2:56:02<3:42:03,  3.88s/it, gpt_loss=0.745, lr=1.29e-6][A
Train step of epoch 0:  45%|████▌     | 2816/6250 [2:56:07<3:42:03,  3.88s/it, gpt_loss=0.676, lr=1.29e-6][A
Train step of epoch 0:  45%|████▌     | 2817/6250 [2:56:07<4:00:53,  4.21s/it, gpt_loss=0.676, lr=1.29e-6][A
Train step of epoch 0:  45%|████▌     | 2817/6250 [2:56:11<4:00:53,  4.21s/it, gpt_loss=0.769, lr=1.29e-6][A
Train step of epoch 0:  45%|████▌     | 2818/6250 [2:56:11<3:54:29,  4.10s/it, gpt_loss=0.769, lr=1.29e-6][A
Train step of epoch 0:  45%|████▌     | 2818/6250 [2:56:14<3:54:29,  4.10s/it, gpt_loss=0.606, lr=1.29e-6][A
Train step of epoch 0:  45%|████▌     | 2819/6250 [2:56:14<3:36:26,  3.78s/it, gpt_loss=0.606, lr=1.29e-6][A[2025-04-24 02:48:57,017] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  45%|████▌     | 2819/6250 [2:56:18<3:36:26,  3.78s/it, gpt_loss=0.517, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2820/6250 [2:56:18<3:32:02,  3.71s/it, gpt_loss=0.517, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2820/6250 [2:56:22<3:32:02,  3.71s/it, gpt_loss=0.687, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2821/6250 [2:56:22<3:46:53,  3.97s/it, gpt_loss=0.687, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2821/6250 [2:56:25<3:46:53,  3.97s/it, gpt_loss=0.628, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2822/6250 [2:56:25<3:27:28,  3.63s/it, gpt_loss=0.628, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2822/6250 [2:56:28<3:27:28,  3.63s/it, gpt_loss=0.598, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2823/6250 [2:56:28<3:15:05,  3.42s/it, gpt_loss=0.598, lr=1.28e-6][A[2025-04-24 02:49:11,931] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  45%|████▌     | 2823/6250 [2:56:33<3:15:05,  3.42s/it, gpt_loss=0.634, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2824/6250 [2:56:33<3:34:59,  3.77s/it, gpt_loss=0.634, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2824/6250 [2:56:37<3:34:59,  3.77s/it, gpt_loss=0.427, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2825/6250 [2:56:37<3:37:19,  3.81s/it, gpt_loss=0.427, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2825/6250 [2:56:40<3:37:19,  3.81s/it, gpt_loss=0.649, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2826/6250 [2:56:40<3:24:40,  3.59s/it, gpt_loss=0.649, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2826/6250 [2:56:44<3:24:40,  3.59s/it, gpt_loss=0.831, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2827/6250 [2:56:44<3:29:03,  3.66s/it, gpt_loss=0.831, lr=1.28e-6][A[2025-04-24 02:49:27,048] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  45%|████▌     | 2827/6250 [2:56:48<3:29:03,  3.66s/it, gpt_loss=0.683, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2828/6250 [2:56:48<3:39:45,  3.85s/it, gpt_loss=0.683, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2828/6250 [2:56:51<3:39:45,  3.85s/it, gpt_loss=0.529, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2829/6250 [2:56:51<3:30:57,  3.70s/it, gpt_loss=0.529, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2829/6250 [2:56:55<3:30:57,  3.70s/it, gpt_loss=0.651, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2830/6250 [2:56:55<3:31:53,  3.72s/it, gpt_loss=0.651, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2830/6250 [2:56:59<3:31:53,  3.72s/it, gpt_loss=0.534, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2831/6250 [2:56:59<3:39:22,  3.85s/it, gpt_loss=0.534, lr=1.28e-6][A[2025-04-24 02:49:41,921] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  45%|████▌     | 2831/6250 [2:57:03<3:39:22,  3.85s/it, gpt_loss=0.627, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2832/6250 [2:57:03<3:35:16,  3.78s/it, gpt_loss=0.627, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2832/6250 [2:57:06<3:35:16,  3.78s/it, gpt_loss=0.623, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2833/6250 [2:57:06<3:31:39,  3.72s/it, gpt_loss=0.623, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2833/6250 [2:57:11<3:31:39,  3.72s/it, gpt_loss=0.601, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2834/6250 [2:57:11<3:45:45,  3.97s/it, gpt_loss=0.601, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2834/6250 [2:57:14<3:45:45,  3.97s/it, gpt_loss=0.558, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2835/6250 [2:57:14<3:33:08,  3.74s/it, gpt_loss=0.558, lr=1.28e-6][A[2025-04-24 02:49:56,747] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  45%|████▌     | 2835/6250 [2:57:18<3:33:08,  3.74s/it, gpt_loss=0.529, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2836/6250 [2:57:18<3:28:33,  3.67s/it, gpt_loss=0.529, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2836/6250 [2:57:22<3:28:33,  3.67s/it, gpt_loss=0.441, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2837/6250 [2:57:22<3:44:55,  3.95s/it, gpt_loss=0.441, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2837/6250 [2:57:25<3:44:55,  3.95s/it, gpt_loss=0.513, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2838/6250 [2:57:25<3:32:59,  3.75s/it, gpt_loss=0.513, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2838/6250 [2:57:28<3:32:59,  3.75s/it, gpt_loss=0.508, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2839/6250 [2:57:28<3:14:42,  3.43s/it, gpt_loss=0.508, lr=1.28e-6][A[2025-04-24 02:50:11,858] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  45%|████▌     | 2839/6250 [2:57:33<3:14:42,  3.43s/it, gpt_loss=0.544, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2840/6250 [2:57:33<3:33:46,  3.76s/it, gpt_loss=0.544, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2840/6250 [2:57:37<3:33:46,  3.76s/it, gpt_loss=0.597, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2841/6250 [2:57:37<3:49:11,  4.03s/it, gpt_loss=0.597, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2841/6250 [2:57:42<3:49:11,  4.03s/it, gpt_loss=0.639, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2842/6250 [2:57:42<4:00:35,  4.24s/it, gpt_loss=0.639, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2842/6250 [2:57:47<4:00:35,  4.24s/it, gpt_loss=0.627, lr=1.28e-6][A
Train step of epoch 0:  45%|████▌     | 2843/6250 [2:57:47<4:11:32,  4.43s/it, gpt_loss=0.627, lr=1.28e-6][A[2025-04-24 02:50:30,421] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  45%|████▌     | 2843/6250 [2:57:51<4:11:32,  4.43s/it, gpt_loss=0.635, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2844/6250 [2:57:51<4:09:19,  4.39s/it, gpt_loss=0.635, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2844/6250 [2:57:56<4:09:19,  4.39s/it, gpt_loss=0.745, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2845/6250 [2:57:56<4:10:07,  4.41s/it, gpt_loss=0.745, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2845/6250 [2:57:58<4:10:07,  4.41s/it, gpt_loss=0.45, lr=1.27e-6] [A
Train step of epoch 0:  46%|████▌     | 2846/6250 [2:57:58<3:33:00,  3.75s/it, gpt_loss=0.45, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2846/6250 [2:58:02<3:33:00,  3.75s/it, gpt_loss=0.581, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2847/6250 [2:58:02<3:38:27,  3.85s/it, gpt_loss=0.581, lr=1.27e-6][A[2025-04-24 02:50:45,062] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  46%|████▌     | 2847/6250 [2:58:06<3:38:27,  3.85s/it, gpt_loss=0.515, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2848/6250 [2:58:06<3:39:01,  3.86s/it, gpt_loss=0.515, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2848/6250 [2:58:08<3:39:01,  3.86s/it, gpt_loss=0.656, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2849/6250 [2:58:08<3:12:21,  3.39s/it, gpt_loss=0.656, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2849/6250 [2:58:13<3:12:21,  3.39s/it, gpt_loss=0.566, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2850/6250 [2:58:13<3:29:31,  3.70s/it, gpt_loss=0.566, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2850/6250 [2:58:16<3:29:31,  3.70s/it, gpt_loss=0.52, lr=1.27e-6] [A
Train step of epoch 0:  46%|████▌     | 2851/6250 [2:58:16<3:20:39,  3.54s/it, gpt_loss=0.52, lr=1.27e-6][A[2025-04-24 02:50:57,884] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  46%|████▌     | 2851/6250 [2:58:19<3:20:39,  3.54s/it, gpt_loss=0.609, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2852/6250 [2:58:19<3:10:19,  3.36s/it, gpt_loss=0.609, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2852/6250 [2:58:22<3:10:19,  3.36s/it, gpt_loss=0.572, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2853/6250 [2:58:22<3:08:22,  3.33s/it, gpt_loss=0.572, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2853/6250 [2:58:25<3:08:22,  3.33s/it, gpt_loss=0.676, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2854/6250 [2:58:25<2:58:59,  3.16s/it, gpt_loss=0.676, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2854/6250 [2:58:29<2:58:59,  3.16s/it, gpt_loss=0.791, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2855/6250 [2:58:29<3:10:36,  3.37s/it, gpt_loss=0.791, lr=1.27e-6][A[2025-04-24 02:51:12,045] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  46%|████▌     | 2855/6250 [2:58:33<3:10:36,  3.37s/it, gpt_loss=0.565, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2856/6250 [2:58:33<3:26:04,  3.64s/it, gpt_loss=0.565, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2856/6250 [2:58:37<3:26:04,  3.64s/it, gpt_loss=0.563, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2857/6250 [2:58:37<3:37:10,  3.84s/it, gpt_loss=0.563, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2857/6250 [2:58:41<3:37:10,  3.84s/it, gpt_loss=0.665, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2858/6250 [2:58:41<3:35:07,  3.81s/it, gpt_loss=0.665, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2858/6250 [2:58:44<3:35:07,  3.81s/it, gpt_loss=0.539, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2859/6250 [2:58:44<3:27:15,  3.67s/it, gpt_loss=0.539, lr=1.27e-6][A[2025-04-24 02:51:27,582] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  46%|████▌     | 2859/6250 [2:58:48<3:27:15,  3.67s/it, gpt_loss=0.672, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2860/6250 [2:58:48<3:35:41,  3.82s/it, gpt_loss=0.672, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2860/6250 [2:58:52<3:35:41,  3.82s/it, gpt_loss=0.653, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2861/6250 [2:58:52<3:26:03,  3.65s/it, gpt_loss=0.653, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2861/6250 [2:58:56<3:26:03,  3.65s/it, gpt_loss=0.804, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2862/6250 [2:58:56<3:41:31,  3.92s/it, gpt_loss=0.804, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2862/6250 [2:59:00<3:41:31,  3.92s/it, gpt_loss=0.863, lr=1.27e-6][A
Train step of epoch 0:  46%|████▌     | 2863/6250 [2:59:00<3:38:16,  3.87s/it, gpt_loss=0.863, lr=1.27e-6][A[2025-04-24 02:51:43,586] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  46%|████▌     | 2863/6250 [2:59:04<3:38:16,  3.87s/it, gpt_loss=0.493, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2864/6250 [2:59:04<3:48:06,  4.04s/it, gpt_loss=0.493, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2864/6250 [2:59:09<3:48:06,  4.04s/it, gpt_loss=0.629, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2865/6250 [2:59:09<3:51:32,  4.10s/it, gpt_loss=0.629, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2865/6250 [2:59:13<3:51:32,  4.10s/it, gpt_loss=0.729, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2866/6250 [2:59:13<3:52:55,  4.13s/it, gpt_loss=0.729, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2866/6250 [2:59:17<3:52:55,  4.13s/it, gpt_loss=0.687, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2867/6250 [2:59:17<4:01:23,  4.28s/it, gpt_loss=0.687, lr=1.26e-6][A[2025-04-24 02:52:00,029] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  46%|████▌     | 2867/6250 [2:59:21<4:01:23,  4.28s/it, gpt_loss=0.6, lr=1.26e-6]  [A
Train step of epoch 0:  46%|████▌     | 2868/6250 [2:59:21<3:45:55,  4.01s/it, gpt_loss=0.6, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2868/6250 [2:59:23<3:45:55,  4.01s/it, gpt_loss=0.523, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2869/6250 [2:59:23<3:17:39,  3.51s/it, gpt_loss=0.523, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2869/6250 [2:59:26<3:17:39,  3.51s/it, gpt_loss=0.591, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2870/6250 [2:59:27<3:15:16,  3.47s/it, gpt_loss=0.591, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2870/6250 [2:59:31<3:15:16,  3.47s/it, gpt_loss=0.714, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2871/6250 [2:59:31<3:25:21,  3.65s/it, gpt_loss=0.714, lr=1.26e-6][A[2025-04-24 02:52:13,396] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  46%|████▌     | 2871/6250 [2:59:34<3:25:21,  3.65s/it, gpt_loss=0.54, lr=1.26e-6] [A
Train step of epoch 0:  46%|████▌     | 2872/6250 [2:59:34<3:24:20,  3.63s/it, gpt_loss=0.54, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2872/6250 [2:59:38<3:24:20,  3.63s/it, gpt_loss=0.719, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2873/6250 [2:59:38<3:33:03,  3.79s/it, gpt_loss=0.719, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2873/6250 [2:59:41<3:33:03,  3.79s/it, gpt_loss=0.656, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2874/6250 [2:59:41<3:16:59,  3.50s/it, gpt_loss=0.656, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2874/6250 [2:59:44<3:16:59,  3.50s/it, gpt_loss=0.651, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2875/6250 [2:59:44<3:12:34,  3.42s/it, gpt_loss=0.651, lr=1.26e-6][A[2025-04-24 02:52:27,919] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  46%|████▌     | 2875/6250 [2:59:49<3:12:34,  3.42s/it, gpt_loss=0.855, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2876/6250 [2:59:49<3:27:11,  3.68s/it, gpt_loss=0.855, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2876/6250 [2:59:52<3:27:11,  3.68s/it, gpt_loss=0.661, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2877/6250 [2:59:52<3:28:34,  3.71s/it, gpt_loss=0.661, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2877/6250 [2:59:57<3:28:34,  3.71s/it, gpt_loss=0.702, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2878/6250 [2:59:57<3:38:48,  3.89s/it, gpt_loss=0.702, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2878/6250 [3:00:00<3:38:48,  3.89s/it, gpt_loss=0.614, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2879/6250 [3:00:00<3:29:53,  3.74s/it, gpt_loss=0.614, lr=1.26e-6][A[2025-04-24 02:52:43,117] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  46%|████▌     | 2879/6250 [3:00:04<3:29:53,  3.74s/it, gpt_loss=0.514, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2880/6250 [3:00:04<3:29:52,  3.74s/it, gpt_loss=0.514, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2880/6250 [3:00:07<3:29:52,  3.74s/it, gpt_loss=0.678, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2881/6250 [3:00:07<3:23:29,  3.62s/it, gpt_loss=0.678, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2881/6250 [3:00:11<3:23:29,  3.62s/it, gpt_loss=0.642, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2882/6250 [3:00:11<3:23:30,  3.63s/it, gpt_loss=0.642, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2882/6250 [3:00:15<3:23:30,  3.63s/it, gpt_loss=0.68, lr=1.26e-6] [A
Train step of epoch 0:  46%|████▌     | 2883/6250 [3:00:15<3:27:48,  3.70s/it, gpt_loss=0.68, lr=1.26e-6][A[2025-04-24 02:52:58,092] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  46%|████▌     | 2883/6250 [3:00:19<3:27:48,  3.70s/it, gpt_loss=0.832, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2884/6250 [3:00:19<3:34:25,  3.82s/it, gpt_loss=0.832, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2884/6250 [3:00:21<3:34:25,  3.82s/it, gpt_loss=0.531, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2885/6250 [3:00:21<3:07:43,  3.35s/it, gpt_loss=0.531, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2885/6250 [3:00:25<3:07:43,  3.35s/it, gpt_loss=0.836, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2886/6250 [3:00:25<3:15:34,  3.49s/it, gpt_loss=0.836, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2886/6250 [3:00:29<3:15:34,  3.49s/it, gpt_loss=0.523, lr=1.26e-6][A
Train step of epoch 0:  46%|████▌     | 2887/6250 [3:00:29<3:27:04,  3.69s/it, gpt_loss=0.523, lr=1.26e-6][A[2025-04-24 02:53:12,847] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  46%|████▌     | 2887/6250 [3:00:34<3:27:04,  3.69s/it, gpt_loss=0.782, lr=1.25e-6][A
Train step of epoch 0:  46%|████▌     | 2888/6250 [3:00:34<3:40:56,  3.94s/it, gpt_loss=0.782, lr=1.25e-6][A
Train step of epoch 0:  46%|████▌     | 2888/6250 [3:00:37<3:40:56,  3.94s/it, gpt_loss=0.806, lr=1.25e-6][A
Train step of epoch 0:  46%|████▌     | 2889/6250 [3:00:37<3:39:59,  3.93s/it, gpt_loss=0.806, lr=1.25e-6][A
Train step of epoch 0:  46%|████▌     | 2889/6250 [3:00:41<3:39:59,  3.93s/it, gpt_loss=0.63, lr=1.25e-6] [A
Train step of epoch 0:  46%|████▌     | 2890/6250 [3:00:41<3:33:42,  3.82s/it, gpt_loss=0.63, lr=1.25e-6][A
Train step of epoch 0:  46%|████▌     | 2890/6250 [3:00:45<3:33:42,  3.82s/it, gpt_loss=0.741, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2891/6250 [3:00:45<3:36:06,  3.86s/it, gpt_loss=0.741, lr=1.25e-6][A[2025-04-24 02:53:27,622] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  46%|████▋     | 2891/6250 [3:00:48<3:36:06,  3.86s/it, gpt_loss=0.58, lr=1.25e-6] [A
Train step of epoch 0:  46%|████▋     | 2892/6250 [3:00:48<3:27:45,  3.71s/it, gpt_loss=0.58, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2892/6250 [3:00:52<3:27:45,  3.71s/it, gpt_loss=0.546, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2893/6250 [3:00:52<3:32:33,  3.80s/it, gpt_loss=0.546, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2893/6250 [3:00:56<3:32:33,  3.80s/it, gpt_loss=0.649, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2894/6250 [3:00:56<3:34:25,  3.83s/it, gpt_loss=0.649, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2894/6250 [3:01:00<3:34:25,  3.83s/it, gpt_loss=0.599, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2895/6250 [3:01:00<3:24:39,  3.66s/it, gpt_loss=0.599, lr=1.25e-6][A[2025-04-24 02:53:43,898] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  46%|████▋     | 2895/6250 [3:01:05<3:24:39,  3.66s/it, gpt_loss=0.708, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2896/6250 [3:01:05<3:48:47,  4.09s/it, gpt_loss=0.708, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2896/6250 [3:01:08<3:48:47,  4.09s/it, gpt_loss=0.531, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2897/6250 [3:01:08<3:40:20,  3.94s/it, gpt_loss=0.531, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2897/6250 [3:01:12<3:40:20,  3.94s/it, gpt_loss=0.548, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2898/6250 [3:01:12<3:31:26,  3.78s/it, gpt_loss=0.548, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2898/6250 [3:01:16<3:31:26,  3.78s/it, gpt_loss=0.595, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2899/6250 [3:01:16<3:39:05,  3.92s/it, gpt_loss=0.595, lr=1.25e-6][A[2025-04-24 02:53:58,674] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  46%|████▋     | 2899/6250 [3:01:19<3:39:05,  3.92s/it, gpt_loss=0.788, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2900/6250 [3:01:19<3:32:18,  3.80s/it, gpt_loss=0.788, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2900/6250 [3:01:24<3:32:18,  3.80s/it, gpt_loss=0.554, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2901/6250 [3:01:24<3:40:59,  3.96s/it, gpt_loss=0.554, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2901/6250 [3:01:27<3:40:59,  3.96s/it, gpt_loss=0.541, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2902/6250 [3:01:27<3:33:10,  3.82s/it, gpt_loss=0.541, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2902/6250 [3:01:31<3:33:10,  3.82s/it, gpt_loss=0.613, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2903/6250 [3:01:31<3:25:55,  3.69s/it, gpt_loss=0.613, lr=1.25e-6][A[2025-04-24 02:54:13,292] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  46%|████▋     | 2903/6250 [3:01:34<3:25:55,  3.69s/it, gpt_loss=0.539, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2904/6250 [3:01:34<3:21:05,  3.61s/it, gpt_loss=0.539, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2904/6250 [3:01:38<3:21:05,  3.61s/it, gpt_loss=0.674, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2905/6250 [3:01:38<3:29:35,  3.76s/it, gpt_loss=0.674, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2905/6250 [3:01:41<3:29:35,  3.76s/it, gpt_loss=0.606, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2906/6250 [3:01:41<3:12:07,  3.45s/it, gpt_loss=0.606, lr=1.25e-6][A
Train step of epoch 0:  46%|████▋     | 2906/6250 [3:01:44<3:12:07,  3.45s/it, gpt_loss=0.475, lr=1.25e-6][A
Train step of epoch 0:  47%|████▋     | 2907/6250 [3:01:44<3:10:49,  3.42s/it, gpt_loss=0.475, lr=1.25e-6][A[2025-04-24 02:54:27,312] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  47%|████▋     | 2907/6250 [3:01:48<3:10:49,  3.42s/it, gpt_loss=0.571, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2908/6250 [3:01:48<3:17:13,  3.54s/it, gpt_loss=0.571, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2908/6250 [3:01:52<3:17:13,  3.54s/it, gpt_loss=0.611, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2909/6250 [3:01:52<3:20:27,  3.60s/it, gpt_loss=0.611, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2909/6250 [3:01:55<3:20:27,  3.60s/it, gpt_loss=0.656, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2910/6250 [3:01:55<3:21:38,  3.62s/it, gpt_loss=0.656, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2910/6250 [3:01:59<3:21:38,  3.62s/it, gpt_loss=0.461, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2911/6250 [3:01:59<3:16:43,  3.54s/it, gpt_loss=0.461, lr=1.24e-6][A[2025-04-24 02:54:41,180] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  47%|████▋     | 2911/6250 [3:02:02<3:16:43,  3.54s/it, gpt_loss=0.538, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2912/6250 [3:02:02<3:09:47,  3.41s/it, gpt_loss=0.538, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2912/6250 [3:02:06<3:09:47,  3.41s/it, gpt_loss=0.71, lr=1.24e-6] [A
Train step of epoch 0:  47%|████▋     | 2913/6250 [3:02:06<3:22:46,  3.65s/it, gpt_loss=0.71, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2913/6250 [3:02:11<3:22:46,  3.65s/it, gpt_loss=0.749, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2914/6250 [3:02:11<3:41:23,  3.98s/it, gpt_loss=0.749, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2914/6250 [3:02:15<3:41:23,  3.98s/it, gpt_loss=0.534, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2915/6250 [3:02:15<3:36:46,  3.90s/it, gpt_loss=0.534, lr=1.24e-6][A[2025-04-24 02:54:57,665] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  47%|████▋     | 2915/6250 [3:02:18<3:36:46,  3.90s/it, gpt_loss=0.625, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2916/6250 [3:02:18<3:35:20,  3.88s/it, gpt_loss=0.625, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2916/6250 [3:02:22<3:35:20,  3.88s/it, gpt_loss=0.498, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2917/6250 [3:02:22<3:25:32,  3.70s/it, gpt_loss=0.498, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2917/6250 [3:02:26<3:25:32,  3.70s/it, gpt_loss=0.77, lr=1.24e-6] [A
Train step of epoch 0:  47%|████▋     | 2918/6250 [3:02:26<3:33:29,  3.84s/it, gpt_loss=0.77, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2918/6250 [3:02:29<3:33:29,  3.84s/it, gpt_loss=0.698, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2919/6250 [3:02:29<3:25:53,  3.71s/it, gpt_loss=0.698, lr=1.24e-6][A[2025-04-24 02:55:11,940] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  47%|████▋     | 2919/6250 [3:02:33<3:25:53,  3.71s/it, gpt_loss=0.441, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2920/6250 [3:02:33<3:20:51,  3.62s/it, gpt_loss=0.441, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2920/6250 [3:02:36<3:20:51,  3.62s/it, gpt_loss=0.67, lr=1.24e-6] [A
Train step of epoch 0:  47%|████▋     | 2921/6250 [3:02:36<3:20:27,  3.61s/it, gpt_loss=0.67, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2921/6250 [3:02:40<3:20:27,  3.61s/it, gpt_loss=0.699, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2922/6250 [3:02:40<3:13:53,  3.50s/it, gpt_loss=0.699, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2922/6250 [3:02:44<3:13:53,  3.50s/it, gpt_loss=0.712, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2923/6250 [3:02:44<3:27:55,  3.75s/it, gpt_loss=0.712, lr=1.24e-6][A[2025-04-24 02:55:27,341] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  47%|████▋     | 2923/6250 [3:02:48<3:27:55,  3.75s/it, gpt_loss=0.578, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2924/6250 [3:02:48<3:35:59,  3.90s/it, gpt_loss=0.578, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2924/6250 [3:02:52<3:35:59,  3.90s/it, gpt_loss=0.662, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2925/6250 [3:02:52<3:34:27,  3.87s/it, gpt_loss=0.662, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2925/6250 [3:02:57<3:34:27,  3.87s/it, gpt_loss=0.622, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2926/6250 [3:02:57<3:48:44,  4.13s/it, gpt_loss=0.622, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2926/6250 [3:03:01<3:48:44,  4.13s/it, gpt_loss=0.588, lr=1.24e-6][A
Train step of epoch 0:  47%|████▋     | 2927/6250 [3:03:01<3:48:05,  4.12s/it, gpt_loss=0.588, lr=1.24e-6][A[2025-04-24 02:55:44,618] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  47%|████▋     | 2927/6250 [3:03:05<3:48:05,  4.12s/it, gpt_loss=0.643, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2928/6250 [3:03:05<3:56:42,  4.28s/it, gpt_loss=0.643, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2928/6250 [3:03:09<3:56:42,  4.28s/it, gpt_loss=0.596, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2929/6250 [3:03:09<3:46:12,  4.09s/it, gpt_loss=0.596, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2929/6250 [3:03:13<3:46:12,  4.09s/it, gpt_loss=0.768, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2930/6250 [3:03:13<3:52:21,  4.20s/it, gpt_loss=0.768, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2930/6250 [3:03:18<3:52:21,  4.20s/it, gpt_loss=0.733, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2931/6250 [3:03:18<3:49:38,  4.15s/it, gpt_loss=0.733, lr=1.23e-6][A[2025-04-24 02:55:59,414] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  47%|████▋     | 2931/6250 [3:03:20<3:49:38,  4.15s/it, gpt_loss=0.632, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2932/6250 [3:03:20<3:24:38,  3.70s/it, gpt_loss=0.632, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2932/6250 [3:03:24<3:24:38,  3.70s/it, gpt_loss=0.669, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2933/6250 [3:03:24<3:29:27,  3.79s/it, gpt_loss=0.669, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2933/6250 [3:03:28<3:29:27,  3.79s/it, gpt_loss=0.596, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2934/6250 [3:03:28<3:31:13,  3.82s/it, gpt_loss=0.596, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2934/6250 [3:03:32<3:31:13,  3.82s/it, gpt_loss=0.634, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2935/6250 [3:03:32<3:27:09,  3.75s/it, gpt_loss=0.634, lr=1.23e-6][A[2025-04-24 02:56:15,391] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  47%|████▋     | 2935/6250 [3:03:36<3:27:09,  3.75s/it, gpt_loss=0.878, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2936/6250 [3:03:36<3:39:34,  3.98s/it, gpt_loss=0.878, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2936/6250 [3:03:39<3:39:34,  3.98s/it, gpt_loss=0.597, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2937/6250 [3:03:39<3:24:50,  3.71s/it, gpt_loss=0.597, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2937/6250 [3:03:43<3:24:50,  3.71s/it, gpt_loss=0.529, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2938/6250 [3:03:43<3:19:41,  3.62s/it, gpt_loss=0.529, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2938/6250 [3:03:47<3:19:41,  3.62s/it, gpt_loss=0.667, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2939/6250 [3:03:47<3:36:50,  3.93s/it, gpt_loss=0.667, lr=1.23e-6][A[2025-04-24 02:56:30,285] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  47%|████▋     | 2939/6250 [3:03:51<3:36:50,  3.93s/it, gpt_loss=0.555, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2940/6250 [3:03:51<3:33:42,  3.87s/it, gpt_loss=0.555, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2940/6250 [3:03:55<3:33:42,  3.87s/it, gpt_loss=0.632, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2941/6250 [3:03:55<3:35:41,  3.91s/it, gpt_loss=0.632, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2941/6250 [3:03:58<3:35:41,  3.91s/it, gpt_loss=0.546, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2942/6250 [3:03:58<3:13:11,  3.50s/it, gpt_loss=0.546, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2942/6250 [3:04:02<3:13:11,  3.50s/it, gpt_loss=0.544, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2943/6250 [3:04:02<3:21:35,  3.66s/it, gpt_loss=0.544, lr=1.23e-6][A[2025-04-24 02:56:45,116] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  47%|████▋     | 2943/6250 [3:04:06<3:21:35,  3.66s/it, gpt_loss=0.749, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2944/6250 [3:04:06<3:31:32,  3.84s/it, gpt_loss=0.749, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2944/6250 [3:04:10<3:31:32,  3.84s/it, gpt_loss=0.538, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2945/6250 [3:04:10<3:28:54,  3.79s/it, gpt_loss=0.538, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2945/6250 [3:04:13<3:28:54,  3.79s/it, gpt_loss=0.692, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2946/6250 [3:04:13<3:22:42,  3.68s/it, gpt_loss=0.692, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2946/6250 [3:04:17<3:22:42,  3.68s/it, gpt_loss=0.617, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2947/6250 [3:04:17<3:33:55,  3.89s/it, gpt_loss=0.617, lr=1.23e-6][A[2025-04-24 02:57:00,489] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  47%|████▋     | 2947/6250 [3:04:21<3:33:55,  3.89s/it, gpt_loss=0.739, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2948/6250 [3:04:21<3:34:09,  3.89s/it, gpt_loss=0.739, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2948/6250 [3:04:25<3:34:09,  3.89s/it, gpt_loss=0.586, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2949/6250 [3:04:25<3:26:54,  3.76s/it, gpt_loss=0.586, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2949/6250 [3:04:28<3:26:54,  3.76s/it, gpt_loss=0.621, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2950/6250 [3:04:28<3:22:07,  3.67s/it, gpt_loss=0.621, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2950/6250 [3:04:31<3:22:07,  3.67s/it, gpt_loss=0.462, lr=1.23e-6][A
Train step of epoch 0:  47%|████▋     | 2951/6250 [3:04:31<3:07:18,  3.41s/it, gpt_loss=0.462, lr=1.23e-6][A[2025-04-24 02:57:14,200] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  47%|████▋     | 2951/6250 [3:04:35<3:07:18,  3.41s/it, gpt_loss=0.454, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2952/6250 [3:04:35<3:17:02,  3.58s/it, gpt_loss=0.454, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2952/6250 [3:04:39<3:17:02,  3.58s/it, gpt_loss=0.578, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2953/6250 [3:04:39<3:32:37,  3.87s/it, gpt_loss=0.578, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2953/6250 [3:04:43<3:32:37,  3.87s/it, gpt_loss=0.537, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2954/6250 [3:04:43<3:32:51,  3.87s/it, gpt_loss=0.537, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2954/6250 [3:04:47<3:32:51,  3.87s/it, gpt_loss=0.571, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2955/6250 [3:04:47<3:25:32,  3.74s/it, gpt_loss=0.571, lr=1.22e-6][A[2025-04-24 02:57:30,256] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  47%|████▋     | 2955/6250 [3:04:51<3:25:32,  3.74s/it, gpt_loss=0.549, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2956/6250 [3:04:51<3:32:59,  3.88s/it, gpt_loss=0.549, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2956/6250 [3:04:55<3:32:59,  3.88s/it, gpt_loss=0.727, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2957/6250 [3:04:55<3:37:35,  3.96s/it, gpt_loss=0.727, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2957/6250 [3:04:58<3:37:35,  3.96s/it, gpt_loss=0.598, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2958/6250 [3:04:58<3:23:11,  3.70s/it, gpt_loss=0.598, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2958/6250 [3:05:02<3:23:11,  3.70s/it, gpt_loss=0.793, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2959/6250 [3:05:02<3:27:04,  3.78s/it, gpt_loss=0.793, lr=1.22e-6][A[2025-04-24 02:57:44,803] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  47%|████▋     | 2959/6250 [3:05:06<3:27:04,  3.78s/it, gpt_loss=0.723, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2960/6250 [3:05:06<3:19:58,  3.65s/it, gpt_loss=0.723, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2960/6250 [3:05:10<3:19:58,  3.65s/it, gpt_loss=0.747, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2961/6250 [3:05:10<3:30:43,  3.84s/it, gpt_loss=0.747, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2961/6250 [3:05:13<3:30:43,  3.84s/it, gpt_loss=0.665, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2962/6250 [3:05:13<3:20:29,  3.66s/it, gpt_loss=0.665, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2962/6250 [3:05:17<3:20:29,  3.66s/it, gpt_loss=0.484, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2963/6250 [3:05:17<3:23:42,  3.72s/it, gpt_loss=0.484, lr=1.22e-6][A[2025-04-24 02:57:59,812] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  47%|████▋     | 2963/6250 [3:05:21<3:23:42,  3.72s/it, gpt_loss=0.623, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2964/6250 [3:05:21<3:22:02,  3.69s/it, gpt_loss=0.623, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2964/6250 [3:05:24<3:22:02,  3.69s/it, gpt_loss=0.68, lr=1.22e-6] [A
Train step of epoch 0:  47%|████▋     | 2965/6250 [3:05:24<3:19:00,  3.63s/it, gpt_loss=0.68, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2965/6250 [3:05:28<3:19:00,  3.63s/it, gpt_loss=0.646, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2966/6250 [3:05:28<3:19:07,  3.64s/it, gpt_loss=0.646, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2966/6250 [3:05:32<3:19:07,  3.64s/it, gpt_loss=0.766, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2967/6250 [3:05:32<3:23:26,  3.72s/it, gpt_loss=0.766, lr=1.22e-6][A[2025-04-24 02:58:14,322] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  47%|████▋     | 2967/6250 [3:05:35<3:23:26,  3.72s/it, gpt_loss=0.671, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2968/6250 [3:05:35<3:19:00,  3.64s/it, gpt_loss=0.671, lr=1.22e-6][A
Train step of epoch 0:  47%|████▋     | 2968/6250 [3:05:39<3:19:00,  3.64s/it, gpt_loss=0.604, lr=1.22e-6][A
Train step of epoch 0:  48%|████▊     | 2969/6250 [3:05:39<3:22:12,  3.70s/it, gpt_loss=0.604, lr=1.22e-6][A
Train step of epoch 0:  48%|████▊     | 2969/6250 [3:05:42<3:22:12,  3.70s/it, gpt_loss=0.506, lr=1.22e-6][A
Train step of epoch 0:  48%|████▊     | 2970/6250 [3:05:42<3:20:06,  3.66s/it, gpt_loss=0.506, lr=1.22e-6][A
Train step of epoch 0:  48%|████▊     | 2970/6250 [3:05:46<3:20:06,  3.66s/it, gpt_loss=0.7, lr=1.22e-6]  [A
Train step of epoch 0:  48%|████▊     | 2971/6250 [3:05:46<3:11:18,  3.50s/it, gpt_loss=0.7, lr=1.22e-6][A[2025-04-24 02:58:29,491] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  48%|████▊     | 2971/6250 [3:05:50<3:11:18,  3.50s/it, gpt_loss=0.569, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2972/6250 [3:05:50<3:29:46,  3.84s/it, gpt_loss=0.569, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2972/6250 [3:05:54<3:29:46,  3.84s/it, gpt_loss=0.553, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2973/6250 [3:05:54<3:23:47,  3.73s/it, gpt_loss=0.553, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2973/6250 [3:05:56<3:23:47,  3.73s/it, gpt_loss=0.57, lr=1.21e-6] [A
Train step of epoch 0:  48%|████▊     | 2974/6250 [3:05:56<3:07:56,  3.44s/it, gpt_loss=0.57, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2974/6250 [3:06:00<3:07:56,  3.44s/it, gpt_loss=0.601, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2975/6250 [3:06:00<3:09:52,  3.48s/it, gpt_loss=0.601, lr=1.21e-6][A[2025-04-24 02:58:42,237] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  48%|████▊     | 2975/6250 [3:06:03<3:09:52,  3.48s/it, gpt_loss=0.578, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2976/6250 [3:06:03<3:00:57,  3.32s/it, gpt_loss=0.578, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2976/6250 [3:06:07<3:00:57,  3.32s/it, gpt_loss=0.596, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2977/6250 [3:06:07<3:11:08,  3.50s/it, gpt_loss=0.596, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2977/6250 [3:06:10<3:11:08,  3.50s/it, gpt_loss=0.615, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2978/6250 [3:06:10<3:05:32,  3.40s/it, gpt_loss=0.615, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2978/6250 [3:06:14<3:05:32,  3.40s/it, gpt_loss=0.716, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2979/6250 [3:06:14<3:07:01,  3.43s/it, gpt_loss=0.716, lr=1.21e-6][A[2025-04-24 02:58:56,397] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  48%|████▊     | 2979/6250 [3:06:17<3:07:01,  3.43s/it, gpt_loss=0.589, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2980/6250 [3:06:17<3:09:00,  3.47s/it, gpt_loss=0.589, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2980/6250 [3:06:21<3:09:00,  3.47s/it, gpt_loss=0.766, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2981/6250 [3:06:21<3:14:49,  3.58s/it, gpt_loss=0.766, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2981/6250 [3:06:25<3:14:49,  3.58s/it, gpt_loss=0.644, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2982/6250 [3:06:25<3:26:02,  3.78s/it, gpt_loss=0.644, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2982/6250 [3:06:29<3:26:02,  3.78s/it, gpt_loss=0.702, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2983/6250 [3:06:29<3:19:45,  3.67s/it, gpt_loss=0.702, lr=1.21e-6][A[2025-04-24 02:59:11,019] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  48%|████▊     | 2983/6250 [3:06:32<3:19:45,  3.67s/it, gpt_loss=0.56, lr=1.21e-6] [A
Train step of epoch 0:  48%|████▊     | 2984/6250 [3:06:32<3:10:50,  3.51s/it, gpt_loss=0.56, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2984/6250 [3:06:36<3:10:50,  3.51s/it, gpt_loss=0.614, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2985/6250 [3:06:36<3:25:32,  3.78s/it, gpt_loss=0.614, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2985/6250 [3:06:40<3:25:32,  3.78s/it, gpt_loss=0.682, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2986/6250 [3:06:40<3:19:25,  3.67s/it, gpt_loss=0.682, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2986/6250 [3:06:44<3:19:25,  3.67s/it, gpt_loss=0.582, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2987/6250 [3:06:44<3:26:20,  3.79s/it, gpt_loss=0.582, lr=1.21e-6][A[2025-04-24 02:59:26,986] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  48%|████▊     | 2987/6250 [3:06:48<3:26:20,  3.79s/it, gpt_loss=0.672, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2988/6250 [3:06:48<3:30:34,  3.87s/it, gpt_loss=0.672, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2988/6250 [3:06:52<3:30:34,  3.87s/it, gpt_loss=0.575, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2989/6250 [3:06:52<3:30:17,  3.87s/it, gpt_loss=0.575, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2989/6250 [3:06:56<3:30:17,  3.87s/it, gpt_loss=0.497, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2990/6250 [3:06:56<3:37:54,  4.01s/it, gpt_loss=0.497, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2990/6250 [3:06:59<3:37:54,  4.01s/it, gpt_loss=0.607, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2991/6250 [3:06:59<3:16:37,  3.62s/it, gpt_loss=0.607, lr=1.21e-6][A[2025-04-24 02:59:41,807] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  48%|████▊     | 2991/6250 [3:07:03<3:16:37,  3.62s/it, gpt_loss=0.553, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2992/6250 [3:07:03<3:21:19,  3.71s/it, gpt_loss=0.553, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2992/6250 [3:07:07<3:21:19,  3.71s/it, gpt_loss=0.603, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2993/6250 [3:07:07<3:30:24,  3.88s/it, gpt_loss=0.603, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2993/6250 [3:07:10<3:30:24,  3.88s/it, gpt_loss=0.568, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2994/6250 [3:07:10<3:24:01,  3.76s/it, gpt_loss=0.568, lr=1.21e-6][A
Train step of epoch 0:  48%|████▊     | 2994/6250 [3:07:14<3:24:01,  3.76s/it, gpt_loss=0.61, lr=1.21e-6] [A
Train step of epoch 0:  48%|████▊     | 2995/6250 [3:07:14<3:15:46,  3.61s/it, gpt_loss=0.61, lr=1.21e-6][A[2025-04-24 02:59:56,507] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  48%|████▊     | 2995/6250 [3:07:17<3:15:46,  3.61s/it, gpt_loss=0.692, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 2996/6250 [3:07:17<3:16:58,  3.63s/it, gpt_loss=0.692, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 2996/6250 [3:07:21<3:16:58,  3.63s/it, gpt_loss=0.679, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 2997/6250 [3:07:21<3:23:07,  3.75s/it, gpt_loss=0.679, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 2997/6250 [3:07:27<3:23:07,  3.75s/it, gpt_loss=0.529, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 2998/6250 [3:07:27<3:47:37,  4.20s/it, gpt_loss=0.529, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 2998/6250 [3:07:29<3:47:37,  4.20s/it, gpt_loss=0.542, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 2999/6250 [3:07:29<3:26:19,  3.81s/it, gpt_loss=0.542, lr=1.2e-6][A[2025-04-24 03:00:12,995] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  48%|████▊     | 2999/6250 [3:07:34<3:26:19,  3.81s/it, gpt_loss=0.795, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3000/6250 [3:07:34<3:34:37,  3.96s/it, gpt_loss=0.795, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3000/6250 [3:07:38<3:34:37,  3.96s/it, gpt_loss=0.676, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3001/6250 [3:07:38<3:46:16,  4.18s/it, gpt_loss=0.676, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3001/6250 [3:07:42<3:46:16,  4.18s/it, gpt_loss=0.773, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3002/6250 [3:07:42<3:35:10,  3.97s/it, gpt_loss=0.773, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3002/6250 [3:07:45<3:35:10,  3.97s/it, gpt_loss=0.479, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3003/6250 [3:07:45<3:13:44,  3.58s/it, gpt_loss=0.479, lr=1.2e-6][A[2025-04-24 03:00:28,419] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  48%|████▊     | 3003/6250 [3:07:49<3:13:44,  3.58s/it, gpt_loss=0.598, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3004/6250 [3:07:49<3:29:57,  3.88s/it, gpt_loss=0.598, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3004/6250 [3:07:52<3:29:57,  3.88s/it, gpt_loss=0.499, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3005/6250 [3:07:52<3:20:42,  3.71s/it, gpt_loss=0.499, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3005/6250 [3:07:56<3:20:42,  3.71s/it, gpt_loss=0.569, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3006/6250 [3:07:56<3:24:51,  3.79s/it, gpt_loss=0.569, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3006/6250 [3:08:01<3:24:51,  3.79s/it, gpt_loss=0.608, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3007/6250 [3:08:01<3:41:19,  4.09s/it, gpt_loss=0.608, lr=1.2e-6][A[2025-04-24 03:00:43,697] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  48%|████▊     | 3007/6250 [3:08:04<3:41:19,  4.09s/it, gpt_loss=0.602, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3008/6250 [3:08:04<3:26:29,  3.82s/it, gpt_loss=0.602, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3008/6250 [3:08:09<3:26:29,  3.82s/it, gpt_loss=0.627, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3009/6250 [3:08:09<3:41:43,  4.10s/it, gpt_loss=0.627, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3009/6250 [3:08:12<3:41:43,  4.10s/it, gpt_loss=0.599, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3010/6250 [3:08:12<3:23:22,  3.77s/it, gpt_loss=0.599, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3010/6250 [3:08:17<3:23:22,  3.77s/it, gpt_loss=0.772, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3011/6250 [3:08:17<3:32:45,  3.94s/it, gpt_loss=0.772, lr=1.2e-6][A[2025-04-24 03:00:59,682] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  48%|████▊     | 3011/6250 [3:08:20<3:32:45,  3.94s/it, gpt_loss=0.471, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3012/6250 [3:08:20<3:31:55,  3.93s/it, gpt_loss=0.471, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3012/6250 [3:08:24<3:31:55,  3.93s/it, gpt_loss=0.597, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3013/6250 [3:08:24<3:21:11,  3.73s/it, gpt_loss=0.597, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3013/6250 [3:08:28<3:21:11,  3.73s/it, gpt_loss=0.542, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3014/6250 [3:08:28<3:31:13,  3.92s/it, gpt_loss=0.542, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3014/6250 [3:08:32<3:31:13,  3.92s/it, gpt_loss=0.661, lr=1.2e-6][A
Train step of epoch 0:  48%|████▊     | 3015/6250 [3:08:32<3:27:56,  3.86s/it, gpt_loss=0.661, lr=1.2e-6][A[2025-04-24 03:01:13,619] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  48%|████▊     | 3015/6250 [3:08:34<3:27:56,  3.86s/it, gpt_loss=0.448, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3016/6250 [3:08:34<3:07:32,  3.48s/it, gpt_loss=0.448, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3016/6250 [3:08:39<3:07:32,  3.48s/it, gpt_loss=0.699, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3017/6250 [3:08:39<3:18:52,  3.69s/it, gpt_loss=0.699, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3017/6250 [3:08:41<3:18:52,  3.69s/it, gpt_loss=0.529, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3018/6250 [3:08:41<3:04:50,  3.43s/it, gpt_loss=0.529, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3018/6250 [3:08:45<3:04:50,  3.43s/it, gpt_loss=0.555, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3019/6250 [3:08:45<3:10:29,  3.54s/it, gpt_loss=0.555, lr=1.19e-6][A[2025-04-24 03:01:28,067] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  48%|████▊     | 3019/6250 [3:08:49<3:10:29,  3.54s/it, gpt_loss=0.545, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3020/6250 [3:08:49<3:12:17,  3.57s/it, gpt_loss=0.545, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3020/6250 [3:08:53<3:12:17,  3.57s/it, gpt_loss=0.71, lr=1.19e-6] [A
Train step of epoch 0:  48%|████▊     | 3021/6250 [3:08:53<3:21:02,  3.74s/it, gpt_loss=0.71, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3021/6250 [3:08:57<3:21:02,  3.74s/it, gpt_loss=0.596, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3022/6250 [3:08:57<3:28:43,  3.88s/it, gpt_loss=0.596, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3022/6250 [3:09:00<3:28:43,  3.88s/it, gpt_loss=0.699, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3023/6250 [3:09:00<3:12:26,  3.58s/it, gpt_loss=0.699, lr=1.19e-6][A[2025-04-24 03:01:42,442] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  48%|████▊     | 3023/6250 [3:09:03<3:12:26,  3.58s/it, gpt_loss=0.64, lr=1.19e-6] [A
Train step of epoch 0:  48%|████▊     | 3024/6250 [3:09:03<3:05:46,  3.46s/it, gpt_loss=0.64, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3024/6250 [3:09:06<3:05:46,  3.46s/it, gpt_loss=0.498, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3025/6250 [3:09:06<2:55:58,  3.27s/it, gpt_loss=0.498, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3025/6250 [3:09:10<2:55:58,  3.27s/it, gpt_loss=0.622, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3026/6250 [3:09:10<3:04:42,  3.44s/it, gpt_loss=0.622, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3026/6250 [3:09:13<3:04:42,  3.44s/it, gpt_loss=0.519, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3027/6250 [3:09:13<3:05:49,  3.46s/it, gpt_loss=0.519, lr=1.19e-6][A[2025-04-24 03:01:56,048] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  48%|████▊     | 3027/6250 [3:09:17<3:05:49,  3.46s/it, gpt_loss=0.553, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3028/6250 [3:09:17<3:05:12,  3.45s/it, gpt_loss=0.553, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3028/6250 [3:09:21<3:05:12,  3.45s/it, gpt_loss=0.638, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3029/6250 [3:09:21<3:09:16,  3.53s/it, gpt_loss=0.638, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3029/6250 [3:09:23<3:09:16,  3.53s/it, gpt_loss=0.616, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3030/6250 [3:09:23<2:58:10,  3.32s/it, gpt_loss=0.616, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3030/6250 [3:09:28<2:58:10,  3.32s/it, gpt_loss=0.809, lr=1.19e-6][A
Train step of epoch 0:  48%|████▊     | 3031/6250 [3:09:28<3:16:07,  3.66s/it, gpt_loss=0.809, lr=1.19e-6][A[2025-04-24 03:02:10,184] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  48%|████▊     | 3031/6250 [3:09:31<3:16:07,  3.66s/it, gpt_loss=0.615, lr=1.19e-6][A
Train step of epoch 0:  49%|████▊     | 3032/6250 [3:09:31<3:07:57,  3.50s/it, gpt_loss=0.615, lr=1.19e-6][A
Train step of epoch 0:  49%|████▊     | 3032/6250 [3:09:34<3:07:57,  3.50s/it, gpt_loss=0.371, lr=1.19e-6][A
Train step of epoch 0:  49%|████▊     | 3033/6250 [3:09:34<2:59:27,  3.35s/it, gpt_loss=0.371, lr=1.19e-6][A
Train step of epoch 0:  49%|████▊     | 3033/6250 [3:09:37<2:59:27,  3.35s/it, gpt_loss=0.491, lr=1.19e-6][A
Train step of epoch 0:  49%|████▊     | 3034/6250 [3:09:37<2:49:20,  3.16s/it, gpt_loss=0.491, lr=1.19e-6][A
Train step of epoch 0:  49%|████▊     | 3034/6250 [3:09:40<2:49:20,  3.16s/it, gpt_loss=0.479, lr=1.19e-6][A
Train step of epoch 0:  49%|████▊     | 3035/6250 [3:09:40<2:54:12,  3.25s/it, gpt_loss=0.479, lr=1.19e-6][A[2025-04-24 03:02:23,299] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  49%|████▊     | 3035/6250 [3:09:44<2:54:12,  3.25s/it, gpt_loss=0.546, lr=1.18e-6][A
Train step of epoch 0:  49%|████▊     | 3036/6250 [3:09:44<3:05:22,  3.46s/it, gpt_loss=0.546, lr=1.18e-6][A
Train step of epoch 0:  49%|████▊     | 3036/6250 [3:09:48<3:05:22,  3.46s/it, gpt_loss=0.662, lr=1.18e-6][A
Train step of epoch 0:  49%|████▊     | 3037/6250 [3:09:48<3:06:52,  3.49s/it, gpt_loss=0.662, lr=1.18e-6][A
Train step of epoch 0:  49%|████▊     | 3037/6250 [3:09:51<3:06:52,  3.49s/it, gpt_loss=0.484, lr=1.18e-6][A
Train step of epoch 0:  49%|████▊     | 3038/6250 [3:09:51<2:58:06,  3.33s/it, gpt_loss=0.484, lr=1.18e-6][A
Train step of epoch 0:  49%|████▊     | 3038/6250 [3:09:55<2:58:06,  3.33s/it, gpt_loss=0.603, lr=1.18e-6][A
Train step of epoch 0:  49%|████▊     | 3039/6250 [3:09:55<3:10:07,  3.55s/it, gpt_loss=0.603, lr=1.18e-6][A[2025-04-24 03:02:37,141] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  49%|████▊     | 3039/6250 [3:09:58<3:10:07,  3.55s/it, gpt_loss=0.603, lr=1.18e-6][A
Train step of epoch 0:  49%|████▊     | 3040/6250 [3:09:58<3:05:20,  3.46s/it, gpt_loss=0.603, lr=1.18e-6][A
Train step of epoch 0:  49%|████▊     | 3040/6250 [3:10:01<3:05:20,  3.46s/it, gpt_loss=0.572, lr=1.18e-6][A
Train step of epoch 0:  49%|████▊     | 3041/6250 [3:10:01<2:58:11,  3.33s/it, gpt_loss=0.572, lr=1.18e-6][A
Train step of epoch 0:  49%|████▊     | 3041/6250 [3:10:05<2:58:11,  3.33s/it, gpt_loss=0.676, lr=1.18e-6][A
Train step of epoch 0:  49%|████▊     | 3042/6250 [3:10:05<3:09:55,  3.55s/it, gpt_loss=0.676, lr=1.18e-6][A
Train step of epoch 0:  49%|████▊     | 3042/6250 [3:10:09<3:09:55,  3.55s/it, gpt_loss=0.644, lr=1.18e-6][A
Train step of epoch 0:  49%|████▊     | 3043/6250 [3:10:09<3:16:30,  3.68s/it, gpt_loss=0.644, lr=1.18e-6][A[2025-04-24 03:02:52,706] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  49%|████▊     | 3043/6250 [3:10:13<3:16:30,  3.68s/it, gpt_loss=0.605, lr=1.18e-6][A
Train step of epoch 0:  49%|████▊     | 3044/6250 [3:10:13<3:29:47,  3.93s/it, gpt_loss=0.605, lr=1.18e-6][A
Train step of epoch 0:  49%|████▊     | 3044/6250 [3:10:17<3:29:47,  3.93s/it, gpt_loss=0.66, lr=1.18e-6] [A
Train step of epoch 0:  49%|████▊     | 3045/6250 [3:10:17<3:19:47,  3.74s/it, gpt_loss=0.66, lr=1.18e-6][A
Train step of epoch 0:  49%|████▊     | 3045/6250 [3:10:20<3:19:47,  3.74s/it, gpt_loss=0.755, lr=1.18e-6][A
Train step of epoch 0:  49%|████▊     | 3046/6250 [3:10:20<3:19:02,  3.73s/it, gpt_loss=0.755, lr=1.18e-6][A
Train step of epoch 0:  49%|████▊     | 3046/6250 [3:10:24<3:19:02,  3.73s/it, gpt_loss=0.763, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3047/6250 [3:10:24<3:14:53,  3.65s/it, gpt_loss=0.763, lr=1.18e-6][A[2025-04-24 03:03:06,263] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  49%|████▉     | 3047/6250 [3:10:27<3:14:53,  3.65s/it, gpt_loss=0.76, lr=1.18e-6] [A
Train step of epoch 0:  49%|████▉     | 3048/6250 [3:10:27<3:05:42,  3.48s/it, gpt_loss=0.76, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3048/6250 [3:10:30<3:05:42,  3.48s/it, gpt_loss=0.47, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3049/6250 [3:10:30<2:58:29,  3.35s/it, gpt_loss=0.47, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3049/6250 [3:10:34<2:58:29,  3.35s/it, gpt_loss=0.756, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3050/6250 [3:10:34<3:07:51,  3.52s/it, gpt_loss=0.756, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3050/6250 [3:10:38<3:07:51,  3.52s/it, gpt_loss=0.545, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3051/6250 [3:10:38<3:09:04,  3.55s/it, gpt_loss=0.545, lr=1.18e-6][A[2025-04-24 03:03:20,598] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  49%|████▉     | 3051/6250 [3:10:41<3:09:04,  3.55s/it, gpt_loss=0.436, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3052/6250 [3:10:41<3:12:31,  3.61s/it, gpt_loss=0.436, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3052/6250 [3:10:45<3:12:31,  3.61s/it, gpt_loss=0.514, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3053/6250 [3:10:45<3:16:24,  3.69s/it, gpt_loss=0.514, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3053/6250 [3:10:49<3:16:24,  3.69s/it, gpt_loss=0.649, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3054/6250 [3:10:49<3:23:49,  3.83s/it, gpt_loss=0.649, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3054/6250 [3:10:53<3:23:49,  3.83s/it, gpt_loss=0.523, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3055/6250 [3:10:53<3:20:00,  3.76s/it, gpt_loss=0.523, lr=1.18e-6][A[2025-04-24 03:03:35,390] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  49%|████▉     | 3055/6250 [3:10:56<3:20:00,  3.76s/it, gpt_loss=0.472, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3056/6250 [3:10:56<3:10:52,  3.59s/it, gpt_loss=0.472, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3056/6250 [3:11:01<3:10:52,  3.59s/it, gpt_loss=0.655, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3057/6250 [3:11:01<3:32:15,  3.99s/it, gpt_loss=0.655, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3057/6250 [3:11:05<3:32:15,  3.99s/it, gpt_loss=0.637, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3058/6250 [3:11:05<3:34:45,  4.04s/it, gpt_loss=0.637, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3058/6250 [3:11:09<3:34:45,  4.04s/it, gpt_loss=0.501, lr=1.18e-6][A
Train step of epoch 0:  49%|████▉     | 3059/6250 [3:11:09<3:25:18,  3.86s/it, gpt_loss=0.501, lr=1.18e-6][A[2025-04-24 03:03:51,860] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  49%|████▉     | 3059/6250 [3:11:13<3:25:18,  3.86s/it, gpt_loss=0.673, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3060/6250 [3:11:13<3:26:32,  3.88s/it, gpt_loss=0.673, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3060/6250 [3:11:16<3:26:32,  3.88s/it, gpt_loss=0.665, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3061/6250 [3:11:16<3:16:02,  3.69s/it, gpt_loss=0.665, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3061/6250 [3:11:21<3:16:02,  3.69s/it, gpt_loss=0.637, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3062/6250 [3:11:21<3:35:42,  4.06s/it, gpt_loss=0.637, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3062/6250 [3:11:24<3:35:42,  4.06s/it, gpt_loss=0.637, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3063/6250 [3:11:24<3:26:58,  3.90s/it, gpt_loss=0.637, lr=1.17e-6][A[2025-04-24 03:04:07,524] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  49%|████▉     | 3063/6250 [3:11:28<3:26:58,  3.90s/it, gpt_loss=0.648, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3064/6250 [3:11:28<3:28:25,  3.93s/it, gpt_loss=0.648, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3064/6250 [3:11:32<3:28:25,  3.93s/it, gpt_loss=0.676, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3065/6250 [3:11:32<3:28:51,  3.93s/it, gpt_loss=0.676, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3065/6250 [3:11:36<3:28:51,  3.93s/it, gpt_loss=0.668, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3066/6250 [3:11:36<3:20:01,  3.77s/it, gpt_loss=0.668, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3066/6250 [3:11:39<3:20:01,  3.77s/it, gpt_loss=0.423, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3067/6250 [3:11:39<3:12:30,  3.63s/it, gpt_loss=0.423, lr=1.17e-6][A[2025-04-24 03:04:22,373] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  49%|████▉     | 3067/6250 [3:11:43<3:12:30,  3.63s/it, gpt_loss=0.587, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3068/6250 [3:11:43<3:21:39,  3.80s/it, gpt_loss=0.587, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3068/6250 [3:11:47<3:21:39,  3.80s/it, gpt_loss=0.706, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3069/6250 [3:11:47<3:28:06,  3.93s/it, gpt_loss=0.706, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3069/6250 [3:11:51<3:28:06,  3.93s/it, gpt_loss=0.741, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3070/6250 [3:11:51<3:27:26,  3.91s/it, gpt_loss=0.741, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3070/6250 [3:11:55<3:27:26,  3.91s/it, gpt_loss=0.649, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3071/6250 [3:11:55<3:28:42,  3.94s/it, gpt_loss=0.649, lr=1.17e-6][A[2025-04-24 03:04:38,960] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  49%|████▉     | 3071/6250 [3:12:00<3:28:42,  3.94s/it, gpt_loss=0.551, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3072/6250 [3:12:00<3:37:24,  4.10s/it, gpt_loss=0.551, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3072/6250 [3:12:03<3:37:24,  4.10s/it, gpt_loss=0.645, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3073/6250 [3:12:03<3:29:27,  3.96s/it, gpt_loss=0.645, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3073/6250 [3:12:07<3:29:27,  3.96s/it, gpt_loss=0.585, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3074/6250 [3:12:07<3:18:48,  3.76s/it, gpt_loss=0.585, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3074/6250 [3:12:10<3:18:48,  3.76s/it, gpt_loss=0.601, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3075/6250 [3:12:10<3:17:55,  3.74s/it, gpt_loss=0.601, lr=1.17e-6][A[2025-04-24 03:04:53,707] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  49%|████▉     | 3075/6250 [3:12:14<3:17:55,  3.74s/it, gpt_loss=0.604, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3076/6250 [3:12:14<3:24:17,  3.86s/it, gpt_loss=0.604, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3076/6250 [3:12:18<3:24:17,  3.86s/it, gpt_loss=0.65, lr=1.17e-6] [A
Train step of epoch 0:  49%|████▉     | 3077/6250 [3:12:18<3:23:02,  3.84s/it, gpt_loss=0.65, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3077/6250 [3:12:22<3:23:02,  3.84s/it, gpt_loss=0.553, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3078/6250 [3:12:22<3:28:50,  3.95s/it, gpt_loss=0.553, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3078/6250 [3:12:27<3:28:50,  3.95s/it, gpt_loss=0.625, lr=1.17e-6][A
Train step of epoch 0:  49%|████▉     | 3079/6250 [3:12:27<3:34:59,  4.07s/it, gpt_loss=0.625, lr=1.17e-6][A[2025-04-24 03:05:09,450] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  49%|████▉     | 3079/6250 [3:12:30<3:34:59,  4.07s/it, gpt_loss=0.517, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3080/6250 [3:12:30<3:24:23,  3.87s/it, gpt_loss=0.517, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3080/6250 [3:12:34<3:24:23,  3.87s/it, gpt_loss=0.653, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3081/6250 [3:12:34<3:23:05,  3.85s/it, gpt_loss=0.653, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3081/6250 [3:12:37<3:23:05,  3.85s/it, gpt_loss=0.84, lr=1.16e-6] [A
Train step of epoch 0:  49%|████▉     | 3082/6250 [3:12:37<3:13:00,  3.66s/it, gpt_loss=0.84, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3082/6250 [3:12:41<3:13:00,  3.66s/it, gpt_loss=0.723, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3083/6250 [3:12:41<3:13:28,  3.67s/it, gpt_loss=0.723, lr=1.16e-6][A[2025-04-24 03:05:24,313] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  49%|████▉     | 3083/6250 [3:12:45<3:13:28,  3.67s/it, gpt_loss=0.622, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3084/6250 [3:12:45<3:21:25,  3.82s/it, gpt_loss=0.622, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3084/6250 [3:12:49<3:21:25,  3.82s/it, gpt_loss=0.85, lr=1.16e-6] [A
Train step of epoch 0:  49%|████▉     | 3085/6250 [3:12:49<3:24:01,  3.87s/it, gpt_loss=0.85, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3085/6250 [3:12:52<3:24:01,  3.87s/it, gpt_loss=0.65, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3086/6250 [3:12:52<3:14:24,  3.69s/it, gpt_loss=0.65, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3086/6250 [3:12:57<3:14:24,  3.69s/it, gpt_loss=0.565, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3087/6250 [3:12:57<3:28:36,  3.96s/it, gpt_loss=0.565, lr=1.16e-6][A[2025-04-24 03:05:39,944] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  49%|████▉     | 3087/6250 [3:13:01<3:28:36,  3.96s/it, gpt_loss=0.627, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3088/6250 [3:13:01<3:25:56,  3.91s/it, gpt_loss=0.627, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3088/6250 [3:13:05<3:25:56,  3.91s/it, gpt_loss=0.475, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3089/6250 [3:13:05<3:32:05,  4.03s/it, gpt_loss=0.475, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3089/6250 [3:13:08<3:32:05,  4.03s/it, gpt_loss=0.564, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3090/6250 [3:13:08<3:16:48,  3.74s/it, gpt_loss=0.564, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3090/6250 [3:13:12<3:16:48,  3.74s/it, gpt_loss=0.589, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3091/6250 [3:13:12<3:19:23,  3.79s/it, gpt_loss=0.589, lr=1.16e-6][A[2025-04-24 03:05:54,514] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  49%|████▉     | 3091/6250 [3:13:15<3:19:23,  3.79s/it, gpt_loss=0.454, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3092/6250 [3:13:15<3:11:40,  3.64s/it, gpt_loss=0.454, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3092/6250 [3:13:19<3:11:40,  3.64s/it, gpt_loss=0.77, lr=1.16e-6] [A
Train step of epoch 0:  49%|████▉     | 3093/6250 [3:13:19<3:19:12,  3.79s/it, gpt_loss=0.77, lr=1.16e-6][A
Train step of epoch 0:  49%|████▉     | 3093/6250 [3:13:23<3:19:12,  3.79s/it, gpt_loss=0.664, lr=1.16e-6][A
Train step of epoch 0:  50%|████▉     | 3094/6250 [3:13:23<3:15:55,  3.72s/it, gpt_loss=0.664, lr=1.16e-6][A
Train step of epoch 0:  50%|████▉     | 3094/6250 [3:13:27<3:15:55,  3.72s/it, gpt_loss=0.615, lr=1.16e-6][A
Train step of epoch 0:  50%|████▉     | 3095/6250 [3:13:27<3:25:36,  3.91s/it, gpt_loss=0.615, lr=1.16e-6][A[2025-04-24 03:06:10,643] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  50%|████▉     | 3095/6250 [3:13:31<3:25:36,  3.91s/it, gpt_loss=0.665, lr=1.16e-6][A
Train step of epoch 0:  50%|████▉     | 3096/6250 [3:13:31<3:28:14,  3.96s/it, gpt_loss=0.665, lr=1.16e-6][A
Train step of epoch 0:  50%|████▉     | 3096/6250 [3:13:35<3:28:14,  3.96s/it, gpt_loss=0.767, lr=1.16e-6][A
Train step of epoch 0:  50%|████▉     | 3097/6250 [3:13:35<3:27:19,  3.95s/it, gpt_loss=0.767, lr=1.16e-6][A
Train step of epoch 0:  50%|████▉     | 3097/6250 [3:13:39<3:27:19,  3.95s/it, gpt_loss=0.478, lr=1.16e-6][A
Train step of epoch 0:  50%|████▉     | 3098/6250 [3:13:39<3:20:58,  3.83s/it, gpt_loss=0.478, lr=1.16e-6][A
Train step of epoch 0:  50%|████▉     | 3098/6250 [3:13:43<3:20:58,  3.83s/it, gpt_loss=0.545, lr=1.16e-6][A
Train step of epoch 0:  50%|████▉     | 3099/6250 [3:13:43<3:21:59,  3.85s/it, gpt_loss=0.545, lr=1.16e-6][A[2025-04-24 03:06:25,649] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  50%|████▉     | 3099/6250 [3:13:46<3:21:59,  3.85s/it, gpt_loss=0.654, lr=1.16e-6][A
Train step of epoch 0:  50%|████▉     | 3100/6250 [3:13:46<3:18:57,  3.79s/it, gpt_loss=0.654, lr=1.16e-6][A
Train step of epoch 0:  50%|████▉     | 3100/6250 [3:13:50<3:18:57,  3.79s/it, gpt_loss=0.512, lr=1.16e-6][A
Train step of epoch 0:  50%|████▉     | 3101/6250 [3:13:50<3:19:34,  3.80s/it, gpt_loss=0.512, lr=1.16e-6][A
Train step of epoch 0:  50%|████▉     | 3101/6250 [3:13:54<3:19:34,  3.80s/it, gpt_loss=0.695, lr=1.16e-6][A
Train step of epoch 0:  50%|████▉     | 3102/6250 [3:13:54<3:14:52,  3.71s/it, gpt_loss=0.695, lr=1.16e-6][A
Train step of epoch 0:  50%|████▉     | 3102/6250 [3:13:58<3:14:52,  3.71s/it, gpt_loss=0.558, lr=1.16e-6][A
Train step of epoch 0:  50%|████▉     | 3103/6250 [3:13:58<3:21:16,  3.84s/it, gpt_loss=0.558, lr=1.16e-6][A[2025-04-24 03:06:40,641] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  50%|████▉     | 3103/6250 [3:14:01<3:21:16,  3.84s/it, gpt_loss=0.668, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3104/6250 [3:14:01<3:16:19,  3.74s/it, gpt_loss=0.668, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3104/6250 [3:14:05<3:16:19,  3.74s/it, gpt_loss=0.576, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3105/6250 [3:14:05<3:15:21,  3.73s/it, gpt_loss=0.576, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3105/6250 [3:14:09<3:15:21,  3.73s/it, gpt_loss=0.755, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3106/6250 [3:14:09<3:23:33,  3.88s/it, gpt_loss=0.755, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3106/6250 [3:14:13<3:23:33,  3.88s/it, gpt_loss=0.711, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3107/6250 [3:14:13<3:19:40,  3.81s/it, gpt_loss=0.711, lr=1.15e-6][A[2025-04-24 03:06:55,285] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  50%|████▉     | 3107/6250 [3:14:16<3:19:40,  3.81s/it, gpt_loss=0.704, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3108/6250 [3:14:16<3:07:50,  3.59s/it, gpt_loss=0.704, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3108/6250 [3:14:20<3:07:50,  3.59s/it, gpt_loss=0.552, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3109/6250 [3:14:20<3:15:45,  3.74s/it, gpt_loss=0.552, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3109/6250 [3:14:25<3:15:45,  3.74s/it, gpt_loss=0.58, lr=1.15e-6] [A
Train step of epoch 0:  50%|████▉     | 3110/6250 [3:14:25<3:27:29,  3.96s/it, gpt_loss=0.58, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3110/6250 [3:14:29<3:27:29,  3.96s/it, gpt_loss=0.543, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3111/6250 [3:14:29<3:25:56,  3.94s/it, gpt_loss=0.543, lr=1.15e-6][A[2025-04-24 03:07:11,706] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  50%|████▉     | 3111/6250 [3:14:32<3:25:56,  3.94s/it, gpt_loss=0.491, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3112/6250 [3:14:32<3:26:19,  3.95s/it, gpt_loss=0.491, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3112/6250 [3:14:36<3:26:19,  3.95s/it, gpt_loss=0.79, lr=1.15e-6] [A
Train step of epoch 0:  50%|████▉     | 3113/6250 [3:14:36<3:13:59,  3.71s/it, gpt_loss=0.79, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3113/6250 [3:14:39<3:13:59,  3.71s/it, gpt_loss=0.596, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3114/6250 [3:14:39<3:11:14,  3.66s/it, gpt_loss=0.596, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3114/6250 [3:14:42<3:11:14,  3.66s/it, gpt_loss=0.426, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3115/6250 [3:14:42<2:57:52,  3.40s/it, gpt_loss=0.426, lr=1.15e-6][A[2025-04-24 03:07:25,244] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  50%|████▉     | 3115/6250 [3:14:46<2:57:52,  3.40s/it, gpt_loss=0.442, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3116/6250 [3:14:46<3:07:33,  3.59s/it, gpt_loss=0.442, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3116/6250 [3:14:50<3:07:33,  3.59s/it, gpt_loss=0.612, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3117/6250 [3:14:50<3:16:31,  3.76s/it, gpt_loss=0.612, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3117/6250 [3:14:53<3:16:31,  3.76s/it, gpt_loss=0.483, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3118/6250 [3:14:53<3:00:04,  3.45s/it, gpt_loss=0.483, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3118/6250 [3:14:56<3:00:04,  3.45s/it, gpt_loss=0.452, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3119/6250 [3:14:56<3:01:58,  3.49s/it, gpt_loss=0.452, lr=1.15e-6][A[2025-04-24 03:07:40,715] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  50%|████▉     | 3119/6250 [3:15:01<3:01:58,  3.49s/it, gpt_loss=0.682, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3120/6250 [3:15:01<3:25:46,  3.94s/it, gpt_loss=0.682, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3120/6250 [3:15:06<3:25:46,  3.94s/it, gpt_loss=0.773, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3121/6250 [3:15:06<3:34:09,  4.11s/it, gpt_loss=0.773, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3121/6250 [3:15:09<3:34:09,  4.11s/it, gpt_loss=0.716, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3122/6250 [3:15:09<3:20:25,  3.84s/it, gpt_loss=0.716, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3122/6250 [3:15:13<3:20:25,  3.84s/it, gpt_loss=0.709, lr=1.15e-6][A
Train step of epoch 0:  50%|████▉     | 3123/6250 [3:15:13<3:15:16,  3.75s/it, gpt_loss=0.709, lr=1.15e-6][A[2025-04-24 03:07:56,455] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  50%|████▉     | 3123/6250 [3:15:17<3:15:16,  3.75s/it, gpt_loss=0.647, lr=1.14e-6][A
Train step of epoch 0:  50%|████▉     | 3124/6250 [3:15:17<3:27:02,  3.97s/it, gpt_loss=0.647, lr=1.14e-6][A
Train step of epoch 0:  50%|████▉     | 3124/6250 [3:15:21<3:27:02,  3.97s/it, gpt_loss=0.7, lr=1.14e-6]  [A
Train step of epoch 0:  50%|█████     | 3125/6250 [3:15:21<3:29:58,  4.03s/it, gpt_loss=0.7, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3125/6250 [3:15:24<3:29:58,  4.03s/it, gpt_loss=0.662, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3126/6250 [3:15:24<3:13:15,  3.71s/it, gpt_loss=0.662, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3126/6250 [3:15:28<3:13:15,  3.71s/it, gpt_loss=0.514, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3127/6250 [3:15:28<3:11:41,  3.68s/it, gpt_loss=0.514, lr=1.14e-6][A[2025-04-24 03:08:11,299] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  50%|█████     | 3127/6250 [3:15:32<3:11:41,  3.68s/it, gpt_loss=0.569, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3128/6250 [3:15:32<3:18:06,  3.81s/it, gpt_loss=0.569, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3128/6250 [3:15:35<3:18:06,  3.81s/it, gpt_loss=0.458, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3129/6250 [3:15:35<3:11:12,  3.68s/it, gpt_loss=0.458, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3129/6250 [3:15:40<3:11:12,  3.68s/it, gpt_loss=0.515, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3130/6250 [3:15:40<3:17:36,  3.80s/it, gpt_loss=0.515, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3130/6250 [3:15:43<3:17:36,  3.80s/it, gpt_loss=0.675, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3131/6250 [3:15:43<3:07:55,  3.62s/it, gpt_loss=0.675, lr=1.14e-6][A[2025-04-24 03:08:25,575] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  50%|█████     | 3131/6250 [3:15:46<3:07:55,  3.62s/it, gpt_loss=0.48, lr=1.14e-6] [A
Train step of epoch 0:  50%|█████     | 3132/6250 [3:15:46<3:08:08,  3.62s/it, gpt_loss=0.48, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3132/6250 [3:15:50<3:08:08,  3.62s/it, gpt_loss=0.568, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3133/6250 [3:15:50<3:08:46,  3.63s/it, gpt_loss=0.568, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3133/6250 [3:15:54<3:08:46,  3.63s/it, gpt_loss=0.678, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3134/6250 [3:15:54<3:16:25,  3.78s/it, gpt_loss=0.678, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3134/6250 [3:15:57<3:16:25,  3.78s/it, gpt_loss=0.583, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3135/6250 [3:15:57<3:07:28,  3.61s/it, gpt_loss=0.583, lr=1.14e-6][A[2025-04-24 03:08:39,983] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  50%|█████     | 3135/6250 [3:16:01<3:07:28,  3.61s/it, gpt_loss=0.568, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3136/6250 [3:16:01<3:04:09,  3.55s/it, gpt_loss=0.568, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3136/6250 [3:16:04<3:04:09,  3.55s/it, gpt_loss=0.706, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3137/6250 [3:16:04<3:02:30,  3.52s/it, gpt_loss=0.706, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3137/6250 [3:16:09<3:02:30,  3.52s/it, gpt_loss=0.547, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3138/6250 [3:16:09<3:15:33,  3.77s/it, gpt_loss=0.547, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3138/6250 [3:16:13<3:15:33,  3.77s/it, gpt_loss=0.689, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3139/6250 [3:16:13<3:22:07,  3.90s/it, gpt_loss=0.689, lr=1.14e-6][A[2025-04-24 03:08:55,317] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  50%|█████     | 3139/6250 [3:16:16<3:22:07,  3.90s/it, gpt_loss=0.52, lr=1.14e-6] [A
Train step of epoch 0:  50%|█████     | 3140/6250 [3:16:16<3:13:15,  3.73s/it, gpt_loss=0.52, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3140/6250 [3:16:20<3:13:15,  3.73s/it, gpt_loss=0.516, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3141/6250 [3:16:20<3:12:47,  3.72s/it, gpt_loss=0.516, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3141/6250 [3:16:24<3:12:47,  3.72s/it, gpt_loss=0.537, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3142/6250 [3:16:24<3:16:23,  3.79s/it, gpt_loss=0.537, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3142/6250 [3:16:27<3:16:23,  3.79s/it, gpt_loss=0.839, lr=1.14e-6][A
Train step of epoch 0:  50%|█████     | 3143/6250 [3:16:27<3:13:23,  3.73s/it, gpt_loss=0.839, lr=1.14e-6][A[2025-04-24 03:09:09,951] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  50%|█████     | 3143/6250 [3:16:31<3:13:23,  3.73s/it, gpt_loss=0.476, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3144/6250 [3:16:31<3:07:42,  3.63s/it, gpt_loss=0.476, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3144/6250 [3:16:34<3:07:42,  3.63s/it, gpt_loss=0.577, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3145/6250 [3:16:34<3:07:46,  3.63s/it, gpt_loss=0.577, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3145/6250 [3:16:38<3:07:46,  3.63s/it, gpt_loss=0.515, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3146/6250 [3:16:38<3:04:48,  3.57s/it, gpt_loss=0.515, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3146/6250 [3:16:42<3:04:48,  3.57s/it, gpt_loss=0.654, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3147/6250 [3:16:42<3:10:56,  3.69s/it, gpt_loss=0.654, lr=1.13e-6][A[2025-04-24 03:09:25,263] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  50%|█████     | 3147/6250 [3:16:46<3:10:56,  3.69s/it, gpt_loss=0.501, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3148/6250 [3:16:46<3:19:46,  3.86s/it, gpt_loss=0.501, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3148/6250 [3:16:49<3:19:46,  3.86s/it, gpt_loss=0.74, lr=1.13e-6] [A
Train step of epoch 0:  50%|█████     | 3149/6250 [3:16:49<3:13:31,  3.74s/it, gpt_loss=0.74, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3149/6250 [3:16:53<3:13:31,  3.74s/it, gpt_loss=0.578, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3150/6250 [3:16:53<3:04:31,  3.57s/it, gpt_loss=0.578, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3150/6250 [3:16:57<3:04:31,  3.57s/it, gpt_loss=0.594, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3151/6250 [3:16:57<3:13:55,  3.75s/it, gpt_loss=0.594, lr=1.13e-6][A[2025-04-24 03:09:40,262] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  50%|█████     | 3151/6250 [3:17:01<3:13:55,  3.75s/it, gpt_loss=0.684, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3152/6250 [3:17:01<3:20:30,  3.88s/it, gpt_loss=0.684, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3152/6250 [3:17:05<3:20:30,  3.88s/it, gpt_loss=0.609, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3153/6250 [3:17:05<3:19:59,  3.87s/it, gpt_loss=0.609, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3153/6250 [3:17:08<3:19:59,  3.87s/it, gpt_loss=0.526, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3154/6250 [3:17:08<3:04:18,  3.57s/it, gpt_loss=0.526, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3154/6250 [3:17:12<3:04:18,  3.57s/it, gpt_loss=0.503, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3155/6250 [3:17:12<3:13:55,  3.76s/it, gpt_loss=0.503, lr=1.13e-6][A[2025-04-24 03:09:54,836] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  50%|█████     | 3155/6250 [3:17:16<3:13:55,  3.76s/it, gpt_loss=0.487, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3156/6250 [3:17:16<3:12:16,  3.73s/it, gpt_loss=0.487, lr=1.13e-6][A
Train step of epoch 0:  50%|█████     | 3156/6250 [3:17:20<3:12:16,  3.73s/it, gpt_loss=0.534, lr=1.13e-6][A
Train step of epoch 0:  51%|█████     | 3157/6250 [3:17:20<3:16:59,  3.82s/it, gpt_loss=0.534, lr=1.13e-6][A
Train step of epoch 0:  51%|█████     | 3157/6250 [3:17:23<3:16:59,  3.82s/it, gpt_loss=0.622, lr=1.13e-6][A
Train step of epoch 0:  51%|█████     | 3158/6250 [3:17:23<3:03:09,  3.55s/it, gpt_loss=0.622, lr=1.13e-6][A
Train step of epoch 0:  51%|█████     | 3158/6250 [3:17:26<3:03:09,  3.55s/it, gpt_loss=0.579, lr=1.13e-6][A
Train step of epoch 0:  51%|█████     | 3159/6250 [3:17:26<3:08:50,  3.67s/it, gpt_loss=0.579, lr=1.13e-6][A[2025-04-24 03:10:09,038] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  51%|█████     | 3159/6250 [3:17:30<3:08:50,  3.67s/it, gpt_loss=0.599, lr=1.13e-6][A
Train step of epoch 0:  51%|█████     | 3160/6250 [3:17:30<3:03:15,  3.56s/it, gpt_loss=0.599, lr=1.13e-6][A
Train step of epoch 0:  51%|█████     | 3160/6250 [3:17:33<3:03:15,  3.56s/it, gpt_loss=0.479, lr=1.13e-6][A
Train step of epoch 0:  51%|█████     | 3161/6250 [3:17:33<3:03:02,  3.56s/it, gpt_loss=0.479, lr=1.13e-6][A
Train step of epoch 0:  51%|█████     | 3161/6250 [3:17:38<3:03:02,  3.56s/it, gpt_loss=0.591, lr=1.13e-6][A
Train step of epoch 0:  51%|█████     | 3162/6250 [3:17:38<3:14:16,  3.77s/it, gpt_loss=0.591, lr=1.13e-6][A
Train step of epoch 0:  51%|█████     | 3162/6250 [3:17:41<3:14:16,  3.77s/it, gpt_loss=0.614, lr=1.13e-6][A
Train step of epoch 0:  51%|█████     | 3163/6250 [3:17:41<3:05:17,  3.60s/it, gpt_loss=0.614, lr=1.13e-6][A[2025-04-24 03:10:23,072] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  51%|█████     | 3163/6250 [3:17:44<3:05:17,  3.60s/it, gpt_loss=0.704, lr=1.13e-6][A
Train step of epoch 0:  51%|█████     | 3164/6250 [3:17:44<2:55:59,  3.42s/it, gpt_loss=0.704, lr=1.13e-6][A
Train step of epoch 0:  51%|█████     | 3164/6250 [3:17:48<2:55:59,  3.42s/it, gpt_loss=0.549, lr=1.13e-6][A
Train step of epoch 0:  51%|█████     | 3165/6250 [3:17:48<3:03:54,  3.58s/it, gpt_loss=0.549, lr=1.13e-6][A
Train step of epoch 0:  51%|█████     | 3165/6250 [3:17:51<3:03:54,  3.58s/it, gpt_loss=0.507, lr=1.13e-6][A
Train step of epoch 0:  51%|█████     | 3166/6250 [3:17:51<2:54:35,  3.40s/it, gpt_loss=0.507, lr=1.13e-6][A
Train step of epoch 0:  51%|█████     | 3166/6250 [3:17:55<2:54:35,  3.40s/it, gpt_loss=0.717, lr=1.13e-6][A
Train step of epoch 0:  51%|█████     | 3167/6250 [3:17:55<3:10:53,  3.72s/it, gpt_loss=0.717, lr=1.13e-6][A[2025-04-24 03:10:38,036] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  51%|█████     | 3167/6250 [3:17:59<3:10:53,  3.72s/it, gpt_loss=0.652, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3168/6250 [3:17:59<3:08:54,  3.68s/it, gpt_loss=0.652, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3168/6250 [3:18:03<3:08:54,  3.68s/it, gpt_loss=0.696, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3169/6250 [3:18:03<3:14:42,  3.79s/it, gpt_loss=0.696, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3169/6250 [3:18:06<3:14:42,  3.79s/it, gpt_loss=0.531, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3170/6250 [3:18:06<2:58:44,  3.48s/it, gpt_loss=0.531, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3170/6250 [3:18:09<2:58:44,  3.48s/it, gpt_loss=0.578, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3171/6250 [3:18:09<2:58:53,  3.49s/it, gpt_loss=0.578, lr=1.12e-6][A[2025-04-24 03:10:52,365] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  51%|█████     | 3171/6250 [3:18:13<2:58:53,  3.49s/it, gpt_loss=0.502, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3172/6250 [3:18:13<3:07:00,  3.65s/it, gpt_loss=0.502, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3172/6250 [3:18:17<3:07:00,  3.65s/it, gpt_loss=0.448, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3173/6250 [3:18:17<3:11:49,  3.74s/it, gpt_loss=0.448, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3173/6250 [3:18:21<3:11:49,  3.74s/it, gpt_loss=0.588, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3174/6250 [3:18:21<3:18:56,  3.88s/it, gpt_loss=0.588, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3174/6250 [3:18:24<3:18:56,  3.88s/it, gpt_loss=0.515, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3175/6250 [3:18:24<3:04:35,  3.60s/it, gpt_loss=0.515, lr=1.12e-6][A[2025-04-24 03:11:07,878] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  51%|█████     | 3175/6250 [3:18:29<3:04:35,  3.60s/it, gpt_loss=0.639, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3176/6250 [3:18:29<3:16:40,  3.84s/it, gpt_loss=0.639, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3176/6250 [3:18:33<3:16:40,  3.84s/it, gpt_loss=0.607, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3177/6250 [3:18:33<3:24:06,  3.99s/it, gpt_loss=0.607, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3177/6250 [3:18:38<3:24:06,  3.99s/it, gpt_loss=0.85, lr=1.12e-6] [A
Train step of epoch 0:  51%|█████     | 3178/6250 [3:18:38<3:36:44,  4.23s/it, gpt_loss=0.85, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3178/6250 [3:18:40<3:36:44,  4.23s/it, gpt_loss=0.606, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3179/6250 [3:18:40<3:13:27,  3.78s/it, gpt_loss=0.606, lr=1.12e-6][A[2025-04-24 03:11:23,532] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  51%|█████     | 3179/6250 [3:18:44<3:13:27,  3.78s/it, gpt_loss=0.634, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3180/6250 [3:18:44<3:13:35,  3.78s/it, gpt_loss=0.634, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3180/6250 [3:18:48<3:13:35,  3.78s/it, gpt_loss=0.607, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3181/6250 [3:18:48<3:12:21,  3.76s/it, gpt_loss=0.607, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3181/6250 [3:18:51<3:12:21,  3.76s/it, gpt_loss=0.754, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3182/6250 [3:18:51<3:06:35,  3.65s/it, gpt_loss=0.754, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3182/6250 [3:18:55<3:06:35,  3.65s/it, gpt_loss=0.678, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3183/6250 [3:18:55<2:58:53,  3.50s/it, gpt_loss=0.678, lr=1.12e-6][A[2025-04-24 03:11:37,694] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  51%|█████     | 3183/6250 [3:18:58<2:58:53,  3.50s/it, gpt_loss=0.68, lr=1.12e-6] [A
Train step of epoch 0:  51%|█████     | 3184/6250 [3:18:58<3:05:12,  3.62s/it, gpt_loss=0.68, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3184/6250 [3:19:02<3:05:12,  3.62s/it, gpt_loss=0.546, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3185/6250 [3:19:02<3:09:26,  3.71s/it, gpt_loss=0.546, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3185/6250 [3:19:06<3:09:26,  3.71s/it, gpt_loss=0.762, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3186/6250 [3:19:06<3:06:15,  3.65s/it, gpt_loss=0.762, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3186/6250 [3:19:09<3:06:15,  3.65s/it, gpt_loss=0.592, lr=1.12e-6][A
Train step of epoch 0:  51%|█████     | 3187/6250 [3:19:09<2:59:08,  3.51s/it, gpt_loss=0.592, lr=1.12e-6][A[2025-04-24 03:11:52,020] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  51%|█████     | 3187/6250 [3:19:13<2:59:08,  3.51s/it, gpt_loss=0.596, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3188/6250 [3:19:13<3:02:28,  3.58s/it, gpt_loss=0.596, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3188/6250 [3:19:16<3:02:28,  3.58s/it, gpt_loss=0.655, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3189/6250 [3:19:16<3:04:25,  3.62s/it, gpt_loss=0.655, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3189/6250 [3:19:20<3:04:25,  3.62s/it, gpt_loss=0.671, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3190/6250 [3:19:20<2:55:25,  3.44s/it, gpt_loss=0.671, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3190/6250 [3:19:23<2:55:25,  3.44s/it, gpt_loss=0.622, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3191/6250 [3:19:23<2:59:58,  3.53s/it, gpt_loss=0.622, lr=1.11e-6][A[2025-04-24 03:12:06,676] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  51%|█████     | 3191/6250 [3:19:27<2:59:58,  3.53s/it, gpt_loss=0.74, lr=1.11e-6] [A
Train step of epoch 0:  51%|█████     | 3192/6250 [3:19:27<3:09:48,  3.72s/it, gpt_loss=0.74, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3192/6250 [3:19:32<3:09:48,  3.72s/it, gpt_loss=0.686, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3193/6250 [3:19:32<3:16:13,  3.85s/it, gpt_loss=0.686, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3193/6250 [3:19:35<3:16:13,  3.85s/it, gpt_loss=0.494, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3194/6250 [3:19:35<3:11:53,  3.77s/it, gpt_loss=0.494, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3194/6250 [3:19:39<3:11:53,  3.77s/it, gpt_loss=0.597, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3195/6250 [3:19:39<3:13:41,  3.80s/it, gpt_loss=0.597, lr=1.11e-6][A[2025-04-24 03:12:21,282] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  51%|█████     | 3195/6250 [3:19:42<3:13:41,  3.80s/it, gpt_loss=0.692, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3196/6250 [3:19:42<3:01:17,  3.56s/it, gpt_loss=0.692, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3196/6250 [3:19:46<3:01:17,  3.56s/it, gpt_loss=0.625, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3197/6250 [3:19:46<3:05:00,  3.64s/it, gpt_loss=0.625, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3197/6250 [3:19:51<3:05:00,  3.64s/it, gpt_loss=0.671, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3198/6250 [3:19:51<3:24:11,  4.01s/it, gpt_loss=0.671, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3198/6250 [3:19:54<3:24:11,  4.01s/it, gpt_loss=0.511, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3199/6250 [3:19:54<3:11:17,  3.76s/it, gpt_loss=0.511, lr=1.11e-6][A[2025-04-24 03:12:35,780] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-04-24 03:12:35,780] [INFO] [logging.py:107:log_dist] [Rank 0] step=800, skipped=0, lr=[1.1083981951130096e-06, 1.1083981951130096e-06], mom=[(0.9, 0.95), (0.9, 0.95)]
[2025-04-24 03:12:35,781] [INFO] [timer.py:264:stop] epoch=0/micro_step=3200/global_step=800, RunningAvgSamplesPerSec=2.219977635175394, CurrSamplesPerSec=2.289333100709138, MemAllocated=36.57GB, MaxMemAllocated=60.14GB

Train step of epoch 0:  51%|█████     | 3199/6250 [3:19:57<3:11:17,  3.76s/it, gpt_loss=0.525, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3200/6250 [3:19:57<2:53:48,  3.42s/it, gpt_loss=0.525, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3200/6250 [3:20:00<2:53:48,  3.42s/it, gpt_loss=0.447, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3201/6250 [3:20:00<2:57:23,  3.49s/it, gpt_loss=0.447, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3201/6250 [3:20:04<2:57:23,  3.49s/it, gpt_loss=0.802, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3202/6250 [3:20:04<2:54:58,  3.44s/it, gpt_loss=0.802, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3202/6250 [3:20:07<2:54:58,  3.44s/it, gpt_loss=0.521, lr=1.11e-6][A
Train step of epoch 0:  51%|█████     | 3203/6250 [3:20:07<2:51:08,  3.37s/it, gpt_loss=0.521, lr=1.11e-6][A[2025-04-24 03:12:51,006] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  51%|█████     | 3203/6250 [3:20:12<2:51:08,  3.37s/it, gpt_loss=0.675, lr=1.11e-6][A
Train step of epoch 0:  51%|█████▏    | 3204/6250 [3:20:12<3:16:27,  3.87s/it, gpt_loss=0.675, lr=1.11e-6][A
Train step of epoch 0:  51%|█████▏    | 3204/6250 [3:20:15<3:16:27,  3.87s/it, gpt_loss=0.427, lr=1.11e-6][A
Train step of epoch 0:  51%|█████▏    | 3205/6250 [3:20:15<3:13:19,  3.81s/it, gpt_loss=0.427, lr=1.11e-6][A
Train step of epoch 0:  51%|█████▏    | 3205/6250 [3:20:19<3:13:19,  3.81s/it, gpt_loss=0.616, lr=1.11e-6][A
Train step of epoch 0:  51%|█████▏    | 3206/6250 [3:20:19<3:10:34,  3.76s/it, gpt_loss=0.616, lr=1.11e-6][A
Train step of epoch 0:  51%|█████▏    | 3206/6250 [3:20:22<3:10:34,  3.76s/it, gpt_loss=0.463, lr=1.11e-6][A
Train step of epoch 0:  51%|█████▏    | 3207/6250 [3:20:22<2:57:02,  3.49s/it, gpt_loss=0.463, lr=1.11e-6][A[2025-04-24 03:13:04,344] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  51%|█████▏    | 3207/6250 [3:20:25<2:57:02,  3.49s/it, gpt_loss=0.649, lr=1.1e-6] [A
Train step of epoch 0:  51%|█████▏    | 3208/6250 [3:20:25<2:52:01,  3.39s/it, gpt_loss=0.649, lr=1.1e-6][A
Train step of epoch 0:  51%|█████▏    | 3208/6250 [3:20:29<2:52:01,  3.39s/it, gpt_loss=0.54, lr=1.1e-6] [A
Train step of epoch 0:  51%|█████▏    | 3209/6250 [3:20:29<2:53:17,  3.42s/it, gpt_loss=0.54, lr=1.1e-6][A
Train step of epoch 0:  51%|█████▏    | 3209/6250 [3:20:32<2:53:17,  3.42s/it, gpt_loss=0.693, lr=1.1e-6][A
Train step of epoch 0:  51%|█████▏    | 3210/6250 [3:20:32<2:55:49,  3.47s/it, gpt_loss=0.693, lr=1.1e-6][A
Train step of epoch 0:  51%|█████▏    | 3210/6250 [3:20:36<2:55:49,  3.47s/it, gpt_loss=0.641, lr=1.1e-6][A
Train step of epoch 0:  51%|█████▏    | 3211/6250 [3:20:36<2:56:15,  3.48s/it, gpt_loss=0.641, lr=1.1e-6][A[2025-04-24 03:13:17,359] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  51%|█████▏    | 3211/6250 [3:20:38<2:56:15,  3.48s/it, gpt_loss=0.8, lr=1.1e-6]  [A
Train step of epoch 0:  51%|█████▏    | 3212/6250 [3:20:38<2:40:26,  3.17s/it, gpt_loss=0.8, lr=1.1e-6][A
Train step of epoch 0:  51%|█████▏    | 3212/6250 [3:20:42<2:40:26,  3.17s/it, gpt_loss=0.585, lr=1.1e-6][A
Train step of epoch 0:  51%|█████▏    | 3213/6250 [3:20:42<2:46:36,  3.29s/it, gpt_loss=0.585, lr=1.1e-6][A
Train step of epoch 0:  51%|█████▏    | 3213/6250 [3:20:45<2:46:36,  3.29s/it, gpt_loss=0.497, lr=1.1e-6][A
Train step of epoch 0:  51%|█████▏    | 3214/6250 [3:20:45<2:46:10,  3.28s/it, gpt_loss=0.497, lr=1.1e-6][A
Train step of epoch 0:  51%|█████▏    | 3214/6250 [3:20:48<2:46:10,  3.28s/it, gpt_loss=0.598, lr=1.1e-6][A
Train step of epoch 0:  51%|█████▏    | 3215/6250 [3:20:48<2:49:44,  3.36s/it, gpt_loss=0.598, lr=1.1e-6][A[2025-04-24 03:13:31,531] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  51%|█████▏    | 3215/6250 [3:20:52<2:49:44,  3.36s/it, gpt_loss=0.816, lr=1.1e-6][A
Train step of epoch 0:  51%|█████▏    | 3216/6250 [3:20:52<2:56:30,  3.49s/it, gpt_loss=0.816, lr=1.1e-6][A
Train step of epoch 0:  51%|█████▏    | 3216/6250 [3:20:56<2:56:30,  3.49s/it, gpt_loss=0.668, lr=1.1e-6][A
Train step of epoch 0:  51%|█████▏    | 3217/6250 [3:20:56<3:01:05,  3.58s/it, gpt_loss=0.668, lr=1.1e-6][A
Train step of epoch 0:  51%|█████▏    | 3217/6250 [3:20:59<3:01:05,  3.58s/it, gpt_loss=0.458, lr=1.1e-6][A
Train step of epoch 0:  51%|█████▏    | 3218/6250 [3:20:59<2:54:54,  3.46s/it, gpt_loss=0.458, lr=1.1e-6][A
Train step of epoch 0:  51%|█████▏    | 3218/6250 [3:21:03<2:54:54,  3.46s/it, gpt_loss=0.58, lr=1.1e-6] [A
Train step of epoch 0:  52%|█████▏    | 3219/6250 [3:21:03<2:56:18,  3.49s/it, gpt_loss=0.58, lr=1.1e-6][A[2025-04-24 03:13:45,758] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  52%|█████▏    | 3219/6250 [3:21:07<2:56:18,  3.49s/it, gpt_loss=0.636, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3220/6250 [3:21:07<2:59:20,  3.55s/it, gpt_loss=0.636, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3220/6250 [3:21:09<2:59:20,  3.55s/it, gpt_loss=0.553, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3221/6250 [3:21:09<2:47:28,  3.32s/it, gpt_loss=0.553, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3221/6250 [3:21:13<2:47:28,  3.32s/it, gpt_loss=0.658, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3222/6250 [3:21:13<2:50:21,  3.38s/it, gpt_loss=0.658, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3222/6250 [3:21:16<2:50:21,  3.38s/it, gpt_loss=0.449, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3223/6250 [3:21:16<2:49:34,  3.36s/it, gpt_loss=0.449, lr=1.1e-6][A[2025-04-24 03:13:58,049] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  52%|█████▏    | 3223/6250 [3:21:19<2:49:34,  3.36s/it, gpt_loss=0.478, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3224/6250 [3:21:19<2:39:13,  3.16s/it, gpt_loss=0.478, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3224/6250 [3:21:24<2:39:13,  3.16s/it, gpt_loss=0.684, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3225/6250 [3:21:24<3:03:23,  3.64s/it, gpt_loss=0.684, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3225/6250 [3:21:26<3:03:23,  3.64s/it, gpt_loss=0.553, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3226/6250 [3:21:26<2:49:15,  3.36s/it, gpt_loss=0.553, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3226/6250 [3:21:30<2:49:15,  3.36s/it, gpt_loss=0.621, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3227/6250 [3:21:30<2:49:44,  3.37s/it, gpt_loss=0.621, lr=1.1e-6][A[2025-04-24 03:14:13,094] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  52%|█████▏    | 3227/6250 [3:21:34<2:49:44,  3.37s/it, gpt_loss=0.772, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3228/6250 [3:21:34<3:02:01,  3.61s/it, gpt_loss=0.772, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3228/6250 [3:21:38<3:02:01,  3.61s/it, gpt_loss=0.681, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3229/6250 [3:21:38<3:07:44,  3.73s/it, gpt_loss=0.681, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3229/6250 [3:21:42<3:07:44,  3.73s/it, gpt_loss=0.588, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3230/6250 [3:21:42<3:08:23,  3.74s/it, gpt_loss=0.588, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3230/6250 [3:21:45<3:08:23,  3.74s/it, gpt_loss=0.628, lr=1.1e-6][A
Train step of epoch 0:  52%|█████▏    | 3231/6250 [3:21:45<3:02:00,  3.62s/it, gpt_loss=0.628, lr=1.1e-6][A[2025-04-24 03:14:28,154] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  52%|█████▏    | 3231/6250 [3:21:49<3:02:00,  3.62s/it, gpt_loss=0.455, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3232/6250 [3:21:49<3:07:09,  3.72s/it, gpt_loss=0.455, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3232/6250 [3:21:54<3:07:09,  3.72s/it, gpt_loss=0.622, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3233/6250 [3:21:54<3:20:36,  3.99s/it, gpt_loss=0.622, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3233/6250 [3:21:57<3:20:36,  3.99s/it, gpt_loss=0.586, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3234/6250 [3:21:57<3:08:25,  3.75s/it, gpt_loss=0.586, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3234/6250 [3:22:02<3:08:25,  3.75s/it, gpt_loss=0.695, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3235/6250 [3:22:02<3:24:21,  4.07s/it, gpt_loss=0.695, lr=1.09e-6][A[2025-04-24 03:14:44,521] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  52%|█████▏    | 3235/6250 [3:22:05<3:24:21,  4.07s/it, gpt_loss=0.621, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3236/6250 [3:22:05<3:19:36,  3.97s/it, gpt_loss=0.621, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3236/6250 [3:22:10<3:19:36,  3.97s/it, gpt_loss=0.675, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3237/6250 [3:22:10<3:25:43,  4.10s/it, gpt_loss=0.675, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3237/6250 [3:22:13<3:25:43,  4.10s/it, gpt_loss=0.494, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3238/6250 [3:22:13<3:12:09,  3.83s/it, gpt_loss=0.494, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3238/6250 [3:22:17<3:12:09,  3.83s/it, gpt_loss=0.692, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3239/6250 [3:22:17<3:22:26,  4.03s/it, gpt_loss=0.692, lr=1.09e-6][A[2025-04-24 03:15:02,732] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  52%|█████▏    | 3239/6250 [3:22:23<3:22:26,  4.03s/it, gpt_loss=0.806, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3240/6250 [3:22:23<3:53:37,  4.66s/it, gpt_loss=0.806, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3240/6250 [3:22:28<3:53:37,  4.66s/it, gpt_loss=0.603, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3241/6250 [3:22:28<3:48:19,  4.55s/it, gpt_loss=0.603, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3241/6250 [3:22:31<3:48:19,  4.55s/it, gpt_loss=0.578, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3242/6250 [3:22:31<3:31:33,  4.22s/it, gpt_loss=0.578, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3242/6250 [3:22:35<3:31:33,  4.22s/it, gpt_loss=0.658, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3243/6250 [3:22:35<3:21:30,  4.02s/it, gpt_loss=0.658, lr=1.09e-6][A[2025-04-24 03:15:18,136] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  52%|█████▏    | 3243/6250 [3:22:39<3:21:30,  4.02s/it, gpt_loss=0.664, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3244/6250 [3:22:39<3:22:34,  4.04s/it, gpt_loss=0.664, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3244/6250 [3:22:43<3:22:34,  4.04s/it, gpt_loss=0.564, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3245/6250 [3:22:43<3:16:13,  3.92s/it, gpt_loss=0.564, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3245/6250 [3:22:46<3:16:13,  3.92s/it, gpt_loss=0.811, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3246/6250 [3:22:46<3:09:01,  3.78s/it, gpt_loss=0.811, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3246/6250 [3:22:49<3:09:01,  3.78s/it, gpt_loss=0.796, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3247/6250 [3:22:49<3:01:14,  3.62s/it, gpt_loss=0.796, lr=1.09e-6][A[2025-04-24 03:15:31,801] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  52%|█████▏    | 3247/6250 [3:22:53<3:01:14,  3.62s/it, gpt_loss=0.501, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3248/6250 [3:22:53<2:56:51,  3.53s/it, gpt_loss=0.501, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3248/6250 [3:22:56<2:56:51,  3.53s/it, gpt_loss=0.711, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3249/6250 [3:22:56<3:01:22,  3.63s/it, gpt_loss=0.711, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3249/6250 [3:23:00<3:01:22,  3.63s/it, gpt_loss=0.591, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3250/6250 [3:23:00<3:03:05,  3.66s/it, gpt_loss=0.591, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3250/6250 [3:23:04<3:03:05,  3.66s/it, gpt_loss=0.577, lr=1.09e-6][A
Train step of epoch 0:  52%|█████▏    | 3251/6250 [3:23:04<3:10:14,  3.81s/it, gpt_loss=0.577, lr=1.09e-6][A[2025-04-24 03:15:45,888] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  52%|█████▏    | 3251/6250 [3:23:07<3:10:14,  3.81s/it, gpt_loss=0.551, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3252/6250 [3:23:07<2:48:30,  3.37s/it, gpt_loss=0.551, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3252/6250 [3:23:10<2:48:30,  3.37s/it, gpt_loss=0.625, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3253/6250 [3:23:10<2:55:31,  3.51s/it, gpt_loss=0.625, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3253/6250 [3:23:14<2:55:31,  3.51s/it, gpt_loss=0.548, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3254/6250 [3:23:14<2:49:52,  3.40s/it, gpt_loss=0.548, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3254/6250 [3:23:17<2:49:52,  3.40s/it, gpt_loss=0.557, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3255/6250 [3:23:17<2:52:47,  3.46s/it, gpt_loss=0.557, lr=1.08e-6][A[2025-04-24 03:16:00,209] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  52%|█████▏    | 3255/6250 [3:23:21<2:52:47,  3.46s/it, gpt_loss=0.638, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3256/6250 [3:23:21<2:56:49,  3.54s/it, gpt_loss=0.638, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3256/6250 [3:23:24<2:56:49,  3.54s/it, gpt_loss=0.501, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3257/6250 [3:23:24<2:45:21,  3.31s/it, gpt_loss=0.501, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3257/6250 [3:23:27<2:45:21,  3.31s/it, gpt_loss=0.429, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3258/6250 [3:23:27<2:50:18,  3.42s/it, gpt_loss=0.429, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3258/6250 [3:23:32<2:50:18,  3.42s/it, gpt_loss=0.699, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3259/6250 [3:23:32<3:01:53,  3.65s/it, gpt_loss=0.699, lr=1.08e-6][A[2025-04-24 03:16:14,961] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  52%|█████▏    | 3259/6250 [3:23:36<3:01:53,  3.65s/it, gpt_loss=0.551, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3260/6250 [3:23:36<3:08:59,  3.79s/it, gpt_loss=0.551, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3260/6250 [3:23:40<3:08:59,  3.79s/it, gpt_loss=0.68, lr=1.08e-6] [A
Train step of epoch 0:  52%|█████▏    | 3261/6250 [3:23:40<3:10:59,  3.83s/it, gpt_loss=0.68, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3261/6250 [3:23:44<3:10:59,  3.83s/it, gpt_loss=0.738, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3262/6250 [3:23:44<3:14:50,  3.91s/it, gpt_loss=0.738, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3262/6250 [3:23:47<3:14:50,  3.91s/it, gpt_loss=0.733, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3263/6250 [3:23:47<3:02:57,  3.68s/it, gpt_loss=0.733, lr=1.08e-6][A[2025-04-24 03:16:30,091] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  52%|█████▏    | 3263/6250 [3:23:51<3:02:57,  3.68s/it, gpt_loss=0.523, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3264/6250 [3:23:51<3:07:29,  3.77s/it, gpt_loss=0.523, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3264/6250 [3:23:55<3:07:29,  3.77s/it, gpt_loss=0.701, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3265/6250 [3:23:55<3:05:54,  3.74s/it, gpt_loss=0.701, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3265/6250 [3:23:58<3:05:54,  3.74s/it, gpt_loss=0.586, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3266/6250 [3:23:58<3:08:00,  3.78s/it, gpt_loss=0.586, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3266/6250 [3:24:03<3:08:00,  3.78s/it, gpt_loss=0.475, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3267/6250 [3:24:03<3:21:30,  4.05s/it, gpt_loss=0.475, lr=1.08e-6][A[2025-04-24 03:16:46,294] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  52%|█████▏    | 3267/6250 [3:24:07<3:21:30,  4.05s/it, gpt_loss=0.568, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3268/6250 [3:24:07<3:20:08,  4.03s/it, gpt_loss=0.568, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3268/6250 [3:24:10<3:20:08,  4.03s/it, gpt_loss=0.488, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3269/6250 [3:24:10<3:05:04,  3.73s/it, gpt_loss=0.488, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3269/6250 [3:24:14<3:05:04,  3.73s/it, gpt_loss=0.666, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3270/6250 [3:24:14<3:07:22,  3.77s/it, gpt_loss=0.666, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3270/6250 [3:24:18<3:07:22,  3.77s/it, gpt_loss=0.795, lr=1.08e-6][A
Train step of epoch 0:  52%|█████▏    | 3271/6250 [3:24:18<3:05:32,  3.74s/it, gpt_loss=0.795, lr=1.08e-6][A[2025-04-24 03:17:01,242] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  52%|█████▏    | 3271/6250 [3:24:22<3:05:32,  3.74s/it, gpt_loss=0.522, lr=1.07e-6][A
Train step of epoch 0:  52%|█████▏    | 3272/6250 [3:24:22<3:15:11,  3.93s/it, gpt_loss=0.522, lr=1.07e-6][A
Train step of epoch 0:  52%|█████▏    | 3272/6250 [3:24:27<3:15:11,  3.93s/it, gpt_loss=0.733, lr=1.07e-6][A
Train step of epoch 0:  52%|█████▏    | 3273/6250 [3:24:27<3:25:48,  4.15s/it, gpt_loss=0.733, lr=1.07e-6][A
Train step of epoch 0:  52%|█████▏    | 3273/6250 [3:24:30<3:25:48,  4.15s/it, gpt_loss=0.58, lr=1.07e-6] [A
Train step of epoch 0:  52%|█████▏    | 3274/6250 [3:24:30<3:16:54,  3.97s/it, gpt_loss=0.58, lr=1.07e-6][A
Train step of epoch 0:  52%|█████▏    | 3274/6250 [3:24:33<3:16:54,  3.97s/it, gpt_loss=0.417, lr=1.07e-6][A
Train step of epoch 0:  52%|█████▏    | 3275/6250 [3:24:33<3:02:21,  3.68s/it, gpt_loss=0.417, lr=1.07e-6][A[2025-04-24 03:17:17,009] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  52%|█████▏    | 3275/6250 [3:24:38<3:02:21,  3.68s/it, gpt_loss=0.426, lr=1.07e-6][A
Train step of epoch 0:  52%|█████▏    | 3276/6250 [3:24:38<3:15:30,  3.94s/it, gpt_loss=0.426, lr=1.07e-6][A
Train step of epoch 0:  52%|█████▏    | 3276/6250 [3:24:41<3:15:30,  3.94s/it, gpt_loss=0.73, lr=1.07e-6] [A
Train step of epoch 0:  52%|█████▏    | 3277/6250 [3:24:41<3:11:21,  3.86s/it, gpt_loss=0.73, lr=1.07e-6][A
Train step of epoch 0:  52%|█████▏    | 3277/6250 [3:24:45<3:11:21,  3.86s/it, gpt_loss=0.88, lr=1.07e-6][A
Train step of epoch 0:  52%|█████▏    | 3278/6250 [3:24:45<3:06:41,  3.77s/it, gpt_loss=0.88, lr=1.07e-6][A
Train step of epoch 0:  52%|█████▏    | 3278/6250 [3:24:48<3:06:41,  3.77s/it, gpt_loss=0.694, lr=1.07e-6][A
Train step of epoch 0:  52%|█████▏    | 3279/6250 [3:24:48<3:00:02,  3.64s/it, gpt_loss=0.694, lr=1.07e-6][A[2025-04-24 03:17:31,631] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  52%|█████▏    | 3279/6250 [3:24:52<3:00:02,  3.64s/it, gpt_loss=0.589, lr=1.07e-6][A
Train step of epoch 0:  52%|█████▏    | 3280/6250 [3:24:52<3:06:29,  3.77s/it, gpt_loss=0.589, lr=1.07e-6][A
Train step of epoch 0:  52%|█████▏    | 3280/6250 [3:24:56<3:06:29,  3.77s/it, gpt_loss=0.628, lr=1.07e-6][A
Train step of epoch 0:  52%|█████▏    | 3281/6250 [3:24:56<3:00:01,  3.64s/it, gpt_loss=0.628, lr=1.07e-6][A
Train step of epoch 0:  52%|█████▏    | 3281/6250 [3:25:00<3:00:01,  3.64s/it, gpt_loss=0.552, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3282/6250 [3:25:00<3:03:35,  3.71s/it, gpt_loss=0.552, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3282/6250 [3:25:03<3:03:35,  3.71s/it, gpt_loss=0.622, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3283/6250 [3:25:03<3:03:52,  3.72s/it, gpt_loss=0.622, lr=1.07e-6][A[2025-04-24 03:17:46,126] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  53%|█████▎    | 3283/6250 [3:25:07<3:03:52,  3.72s/it, gpt_loss=0.492, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3284/6250 [3:25:07<3:01:11,  3.67s/it, gpt_loss=0.492, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3284/6250 [3:25:11<3:01:11,  3.67s/it, gpt_loss=0.632, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3285/6250 [3:25:11<3:04:27,  3.73s/it, gpt_loss=0.632, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3285/6250 [3:25:15<3:04:27,  3.73s/it, gpt_loss=0.495, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3286/6250 [3:25:15<3:17:35,  4.00s/it, gpt_loss=0.495, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3286/6250 [3:25:19<3:17:35,  4.00s/it, gpt_loss=0.377, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3287/6250 [3:25:19<3:12:52,  3.91s/it, gpt_loss=0.377, lr=1.07e-6][A[2025-04-24 03:18:02,258] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  53%|█████▎    | 3287/6250 [3:25:23<3:12:52,  3.91s/it, gpt_loss=0.6, lr=1.07e-6]  [A
Train step of epoch 0:  53%|█████▎    | 3288/6250 [3:25:23<3:13:12,  3.91s/it, gpt_loss=0.6, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3288/6250 [3:25:27<3:13:12,  3.91s/it, gpt_loss=0.535, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3289/6250 [3:25:27<3:14:42,  3.95s/it, gpt_loss=0.535, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3289/6250 [3:25:30<3:14:42,  3.95s/it, gpt_loss=0.453, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3290/6250 [3:25:30<3:06:47,  3.79s/it, gpt_loss=0.453, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3290/6250 [3:25:35<3:06:47,  3.79s/it, gpt_loss=0.732, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3291/6250 [3:25:35<3:15:37,  3.97s/it, gpt_loss=0.732, lr=1.07e-6][A[2025-04-24 03:18:17,670] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  53%|█████▎    | 3291/6250 [3:25:38<3:15:37,  3.97s/it, gpt_loss=0.595, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3292/6250 [3:25:38<3:09:59,  3.85s/it, gpt_loss=0.595, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3292/6250 [3:25:42<3:09:59,  3.85s/it, gpt_loss=0.486, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3293/6250 [3:25:42<3:00:42,  3.67s/it, gpt_loss=0.486, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3293/6250 [3:25:46<3:00:42,  3.67s/it, gpt_loss=0.501, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3294/6250 [3:25:46<3:07:02,  3.80s/it, gpt_loss=0.501, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3294/6250 [3:25:49<3:07:02,  3.80s/it, gpt_loss=0.496, lr=1.07e-6][A
Train step of epoch 0:  53%|█████▎    | 3295/6250 [3:25:49<3:00:45,  3.67s/it, gpt_loss=0.496, lr=1.07e-6][A[2025-04-24 03:18:32,343] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  53%|█████▎    | 3295/6250 [3:25:53<3:00:45,  3.67s/it, gpt_loss=0.725, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3296/6250 [3:25:53<3:05:05,  3.76s/it, gpt_loss=0.725, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3296/6250 [3:25:57<3:05:05,  3.76s/it, gpt_loss=0.535, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3297/6250 [3:25:57<3:06:38,  3.79s/it, gpt_loss=0.535, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3297/6250 [3:26:01<3:06:38,  3.79s/it, gpt_loss=0.469, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3298/6250 [3:26:01<3:03:37,  3.73s/it, gpt_loss=0.469, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3298/6250 [3:26:04<3:03:37,  3.73s/it, gpt_loss=0.619, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3299/6250 [3:26:04<2:58:53,  3.64s/it, gpt_loss=0.619, lr=1.06e-6][A[2025-04-24 03:18:46,495] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  53%|█████▎    | 3299/6250 [3:26:07<2:58:53,  3.64s/it, gpt_loss=0.645, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3300/6250 [3:26:07<2:53:29,  3.53s/it, gpt_loss=0.645, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3300/6250 [3:26:10<2:53:29,  3.53s/it, gpt_loss=0.657, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3301/6250 [3:26:10<2:48:40,  3.43s/it, gpt_loss=0.657, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3301/6250 [3:26:14<2:48:40,  3.43s/it, gpt_loss=0.528, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3302/6250 [3:26:14<2:55:52,  3.58s/it, gpt_loss=0.528, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3302/6250 [3:26:18<2:55:52,  3.58s/it, gpt_loss=0.704, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3303/6250 [3:26:18<2:54:28,  3.55s/it, gpt_loss=0.704, lr=1.06e-6][A[2025-04-24 03:19:00,951] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  53%|█████▎    | 3303/6250 [3:26:22<2:54:28,  3.55s/it, gpt_loss=0.616, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3304/6250 [3:26:22<2:58:36,  3.64s/it, gpt_loss=0.616, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3304/6250 [3:26:26<2:58:36,  3.64s/it, gpt_loss=0.68, lr=1.06e-6] [A
Train step of epoch 0:  53%|█████▎    | 3305/6250 [3:26:26<3:06:05,  3.79s/it, gpt_loss=0.68, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3305/6250 [3:26:29<3:06:05,  3.79s/it, gpt_loss=0.709, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3306/6250 [3:26:29<2:59:09,  3.65s/it, gpt_loss=0.709, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3306/6250 [3:26:34<2:59:09,  3.65s/it, gpt_loss=0.582, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3307/6250 [3:26:34<3:14:31,  3.97s/it, gpt_loss=0.582, lr=1.06e-6][A[2025-04-24 03:19:16,439] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  53%|█████▎    | 3307/6250 [3:26:37<3:14:31,  3.97s/it, gpt_loss=0.727, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3308/6250 [3:26:37<3:04:52,  3.77s/it, gpt_loss=0.727, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3308/6250 [3:26:41<3:04:52,  3.77s/it, gpt_loss=0.68, lr=1.06e-6] [A
Train step of epoch 0:  53%|█████▎    | 3309/6250 [3:26:41<3:01:31,  3.70s/it, gpt_loss=0.68, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3309/6250 [3:26:44<3:01:31,  3.70s/it, gpt_loss=0.658, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3310/6250 [3:26:44<2:52:08,  3.51s/it, gpt_loss=0.658, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3310/6250 [3:26:47<2:52:08,  3.51s/it, gpt_loss=0.728, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3311/6250 [3:26:47<2:48:11,  3.43s/it, gpt_loss=0.728, lr=1.06e-6][A[2025-04-24 03:19:30,210] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  53%|█████▎    | 3311/6250 [3:26:51<2:48:11,  3.43s/it, gpt_loss=0.568, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3312/6250 [3:26:51<2:55:04,  3.58s/it, gpt_loss=0.568, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3312/6250 [3:26:55<2:55:04,  3.58s/it, gpt_loss=0.643, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3313/6250 [3:26:55<3:03:18,  3.74s/it, gpt_loss=0.643, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3313/6250 [3:26:59<3:03:18,  3.74s/it, gpt_loss=0.431, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3314/6250 [3:26:59<3:07:20,  3.83s/it, gpt_loss=0.431, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3314/6250 [3:27:03<3:07:20,  3.83s/it, gpt_loss=0.589, lr=1.06e-6][A
Train step of epoch 0:  53%|█████▎    | 3315/6250 [3:27:03<3:04:02,  3.76s/it, gpt_loss=0.589, lr=1.06e-6][A[2025-04-24 03:19:45,378] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  53%|█████▎    | 3315/6250 [3:27:06<3:04:02,  3.76s/it, gpt_loss=0.794, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3316/6250 [3:27:06<2:58:36,  3.65s/it, gpt_loss=0.794, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3316/6250 [3:27:10<2:58:36,  3.65s/it, gpt_loss=0.695, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3317/6250 [3:27:10<3:04:27,  3.77s/it, gpt_loss=0.695, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3317/6250 [3:27:14<3:04:27,  3.77s/it, gpt_loss=0.56, lr=1.05e-6] [A
Train step of epoch 0:  53%|█████▎    | 3318/6250 [3:27:14<3:06:28,  3.82s/it, gpt_loss=0.56, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3318/6250 [3:27:18<3:06:28,  3.82s/it, gpt_loss=0.574, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3319/6250 [3:27:18<3:03:45,  3.76s/it, gpt_loss=0.574, lr=1.05e-6][A[2025-04-24 03:20:00,601] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  53%|█████▎    | 3319/6250 [3:27:21<3:03:45,  3.76s/it, gpt_loss=0.703, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3320/6250 [3:27:21<3:01:36,  3.72s/it, gpt_loss=0.703, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3320/6250 [3:27:25<3:01:36,  3.72s/it, gpt_loss=0.693, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3321/6250 [3:27:25<3:00:39,  3.70s/it, gpt_loss=0.693, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3321/6250 [3:27:28<3:00:39,  3.70s/it, gpt_loss=0.564, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3322/6250 [3:27:28<2:53:23,  3.55s/it, gpt_loss=0.564, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3322/6250 [3:27:31<2:53:23,  3.55s/it, gpt_loss=0.526, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3323/6250 [3:27:31<2:44:39,  3.38s/it, gpt_loss=0.526, lr=1.05e-6][A[2025-04-24 03:20:14,534] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  53%|█████▎    | 3323/6250 [3:27:35<2:44:39,  3.38s/it, gpt_loss=0.536, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3324/6250 [3:27:35<2:55:15,  3.59s/it, gpt_loss=0.536, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3324/6250 [3:27:39<2:55:15,  3.59s/it, gpt_loss=0.673, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3325/6250 [3:27:39<2:58:39,  3.66s/it, gpt_loss=0.673, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3325/6250 [3:27:43<2:58:39,  3.66s/it, gpt_loss=0.648, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3326/6250 [3:27:43<3:01:09,  3.72s/it, gpt_loss=0.648, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3326/6250 [3:27:45<3:01:09,  3.72s/it, gpt_loss=0.608, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3327/6250 [3:27:45<2:40:01,  3.28s/it, gpt_loss=0.608, lr=1.05e-6][A[2025-04-24 03:20:29,052] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  53%|█████▎    | 3327/6250 [3:27:50<2:40:01,  3.28s/it, gpt_loss=0.63, lr=1.05e-6] [A
Train step of epoch 0:  53%|█████▎    | 3328/6250 [3:27:50<2:58:46,  3.67s/it, gpt_loss=0.63, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3328/6250 [3:27:53<2:58:46,  3.67s/it, gpt_loss=0.706, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3329/6250 [3:27:53<2:58:44,  3.67s/it, gpt_loss=0.706, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3329/6250 [3:27:57<2:58:44,  3.67s/it, gpt_loss=0.536, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3330/6250 [3:27:57<2:54:44,  3.59s/it, gpt_loss=0.536, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3330/6250 [3:28:01<2:54:44,  3.59s/it, gpt_loss=0.571, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3331/6250 [3:28:01<2:56:22,  3.63s/it, gpt_loss=0.571, lr=1.05e-6][A[2025-04-24 03:20:43,637] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  53%|█████▎    | 3331/6250 [3:28:04<2:56:22,  3.63s/it, gpt_loss=0.547, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3332/6250 [3:28:04<2:58:54,  3.68s/it, gpt_loss=0.547, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3332/6250 [3:28:08<2:58:54,  3.68s/it, gpt_loss=0.762, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3333/6250 [3:28:08<2:55:00,  3.60s/it, gpt_loss=0.762, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3333/6250 [3:28:12<2:55:00,  3.60s/it, gpt_loss=0.779, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3334/6250 [3:28:12<3:03:40,  3.78s/it, gpt_loss=0.779, lr=1.05e-6][A
Train step of epoch 0:  53%|█████▎    | 3334/6250 [3:28:15<3:03:40,  3.78s/it, gpt_loss=0.51, lr=1.05e-6] [A
Train step of epoch 0:  53%|█████▎    | 3335/6250 [3:28:15<2:51:15,  3.53s/it, gpt_loss=0.51, lr=1.05e-6][A[2025-04-24 03:20:58,443] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  53%|█████▎    | 3335/6250 [3:28:19<2:51:15,  3.53s/it, gpt_loss=0.664, lr=1.04e-6][A
Train step of epoch 0:  53%|█████▎    | 3336/6250 [3:28:19<3:01:55,  3.75s/it, gpt_loss=0.664, lr=1.04e-6][A
Train step of epoch 0:  53%|█████▎    | 3336/6250 [3:28:23<3:01:55,  3.75s/it, gpt_loss=0.616, lr=1.04e-6][A
Train step of epoch 0:  53%|█████▎    | 3337/6250 [3:28:23<3:04:12,  3.79s/it, gpt_loss=0.616, lr=1.04e-6][A
Train step of epoch 0:  53%|█████▎    | 3337/6250 [3:28:27<3:04:12,  3.79s/it, gpt_loss=0.646, lr=1.04e-6][A
Train step of epoch 0:  53%|█████▎    | 3338/6250 [3:28:27<3:03:20,  3.78s/it, gpt_loss=0.646, lr=1.04e-6][A
Train step of epoch 0:  53%|█████▎    | 3338/6250 [3:28:30<3:03:20,  3.78s/it, gpt_loss=0.606, lr=1.04e-6][A
Train step of epoch 0:  53%|█████▎    | 3339/6250 [3:28:30<2:49:09,  3.49s/it, gpt_loss=0.606, lr=1.04e-6][A[2025-04-24 03:21:13,428] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  53%|█████▎    | 3339/6250 [3:28:34<2:49:09,  3.49s/it, gpt_loss=0.727, lr=1.04e-6][A
Train step of epoch 0:  53%|█████▎    | 3340/6250 [3:28:34<3:04:17,  3.80s/it, gpt_loss=0.727, lr=1.04e-6][A
Train step of epoch 0:  53%|█████▎    | 3340/6250 [3:28:38<3:04:17,  3.80s/it, gpt_loss=0.668, lr=1.04e-6][A
Train step of epoch 0:  53%|█████▎    | 3341/6250 [3:28:38<3:05:39,  3.83s/it, gpt_loss=0.668, lr=1.04e-6][A
Train step of epoch 0:  53%|█████▎    | 3341/6250 [3:28:42<3:05:39,  3.83s/it, gpt_loss=0.695, lr=1.04e-6][A
Train step of epoch 0:  53%|█████▎    | 3342/6250 [3:28:42<3:09:56,  3.92s/it, gpt_loss=0.695, lr=1.04e-6][A
Train step of epoch 0:  53%|█████▎    | 3342/6250 [3:28:45<3:09:56,  3.92s/it, gpt_loss=0.536, lr=1.04e-6][A
Train step of epoch 0:  53%|█████▎    | 3343/6250 [3:28:45<2:58:23,  3.68s/it, gpt_loss=0.536, lr=1.04e-6][A[2025-04-24 03:21:28,641] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  53%|█████▎    | 3343/6250 [3:28:49<2:58:23,  3.68s/it, gpt_loss=0.547, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3344/6250 [3:28:49<3:03:47,  3.79s/it, gpt_loss=0.547, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3344/6250 [3:28:53<3:03:47,  3.79s/it, gpt_loss=0.573, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3345/6250 [3:28:53<3:06:20,  3.85s/it, gpt_loss=0.573, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3345/6250 [3:28:58<3:06:20,  3.85s/it, gpt_loss=0.439, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3346/6250 [3:28:58<3:21:31,  4.16s/it, gpt_loss=0.439, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3346/6250 [3:29:02<3:21:31,  4.16s/it, gpt_loss=0.547, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3347/6250 [3:29:02<3:08:07,  3.89s/it, gpt_loss=0.547, lr=1.04e-6][A[2025-04-24 03:21:44,804] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  54%|█████▎    | 3347/6250 [3:29:06<3:08:07,  3.89s/it, gpt_loss=0.447, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3348/6250 [3:29:06<3:10:19,  3.94s/it, gpt_loss=0.447, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3348/6250 [3:29:09<3:10:19,  3.94s/it, gpt_loss=0.561, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3349/6250 [3:29:09<3:01:37,  3.76s/it, gpt_loss=0.561, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3349/6250 [3:29:12<3:01:37,  3.76s/it, gpt_loss=0.629, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3350/6250 [3:29:12<2:50:54,  3.54s/it, gpt_loss=0.629, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3350/6250 [3:29:16<2:50:54,  3.54s/it, gpt_loss=0.578, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3351/6250 [3:29:16<2:59:50,  3.72s/it, gpt_loss=0.578, lr=1.04e-6][A[2025-04-24 03:21:59,454] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  54%|█████▎    | 3351/6250 [3:29:20<2:59:50,  3.72s/it, gpt_loss=0.76, lr=1.04e-6] [A
Train step of epoch 0:  54%|█████▎    | 3352/6250 [3:29:20<3:05:42,  3.84s/it, gpt_loss=0.76, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3352/6250 [3:29:24<3:05:42,  3.84s/it, gpt_loss=0.422, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3353/6250 [3:29:24<3:05:37,  3.84s/it, gpt_loss=0.422, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3353/6250 [3:29:28<3:05:37,  3.84s/it, gpt_loss=0.613, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3354/6250 [3:29:28<3:05:42,  3.85s/it, gpt_loss=0.613, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3354/6250 [3:29:31<3:05:42,  3.85s/it, gpt_loss=0.571, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3355/6250 [3:29:31<2:56:08,  3.65s/it, gpt_loss=0.571, lr=1.04e-6][A[2025-04-24 03:22:14,832] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  54%|█████▎    | 3355/6250 [3:29:36<2:56:08,  3.65s/it, gpt_loss=0.606, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3356/6250 [3:29:36<3:08:12,  3.90s/it, gpt_loss=0.606, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3356/6250 [3:29:38<3:08:12,  3.90s/it, gpt_loss=0.607, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3357/6250 [3:29:38<2:53:38,  3.60s/it, gpt_loss=0.607, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3357/6250 [3:29:42<2:53:38,  3.60s/it, gpt_loss=0.489, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3358/6250 [3:29:42<2:52:45,  3.58s/it, gpt_loss=0.489, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3358/6250 [3:29:45<2:52:45,  3.58s/it, gpt_loss=0.595, lr=1.04e-6][A
Train step of epoch 0:  54%|█████▎    | 3359/6250 [3:29:45<2:45:13,  3.43s/it, gpt_loss=0.595, lr=1.04e-6][A[2025-04-24 03:22:27,706] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  54%|█████▎    | 3359/6250 [3:29:48<2:45:13,  3.43s/it, gpt_loss=0.723, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3360/6250 [3:29:48<2:44:12,  3.41s/it, gpt_loss=0.723, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3360/6250 [3:29:52<2:44:12,  3.41s/it, gpt_loss=0.673, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3361/6250 [3:29:52<2:49:35,  3.52s/it, gpt_loss=0.673, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3361/6250 [3:29:55<2:49:35,  3.52s/it, gpt_loss=0.649, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3362/6250 [3:29:55<2:43:02,  3.39s/it, gpt_loss=0.649, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3362/6250 [3:29:59<2:43:02,  3.39s/it, gpt_loss=0.714, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3363/6250 [3:29:59<2:41:35,  3.36s/it, gpt_loss=0.714, lr=1.03e-6][A[2025-04-24 03:22:41,098] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  54%|█████▍    | 3363/6250 [3:30:02<2:41:35,  3.36s/it, gpt_loss=0.539, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3364/6250 [3:30:02<2:39:52,  3.32s/it, gpt_loss=0.539, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3364/6250 [3:30:06<2:39:52,  3.32s/it, gpt_loss=0.582, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3365/6250 [3:30:06<2:47:45,  3.49s/it, gpt_loss=0.582, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3365/6250 [3:30:10<2:47:45,  3.49s/it, gpt_loss=0.639, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3366/6250 [3:30:10<2:55:31,  3.65s/it, gpt_loss=0.639, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3366/6250 [3:30:13<2:55:31,  3.65s/it, gpt_loss=0.583, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3367/6250 [3:30:13<2:46:29,  3.46s/it, gpt_loss=0.583, lr=1.03e-6][A[2025-04-24 03:22:55,439] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  54%|█████▍    | 3367/6250 [3:30:16<2:46:29,  3.46s/it, gpt_loss=0.65, lr=1.03e-6] [A
Train step of epoch 0:  54%|█████▍    | 3368/6250 [3:30:16<2:45:34,  3.45s/it, gpt_loss=0.65, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3368/6250 [3:30:20<2:45:34,  3.45s/it, gpt_loss=0.552, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3369/6250 [3:30:20<2:57:36,  3.70s/it, gpt_loss=0.552, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3369/6250 [3:30:23<2:57:36,  3.70s/it, gpt_loss=0.571, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3370/6250 [3:30:23<2:44:45,  3.43s/it, gpt_loss=0.571, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3370/6250 [3:30:26<2:44:45,  3.43s/it, gpt_loss=0.531, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3371/6250 [3:30:26<2:40:13,  3.34s/it, gpt_loss=0.531, lr=1.03e-6][A[2025-04-24 03:23:08,913] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  54%|█████▍    | 3371/6250 [3:30:30<2:40:13,  3.34s/it, gpt_loss=0.393, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3372/6250 [3:30:30<2:38:59,  3.31s/it, gpt_loss=0.393, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3372/6250 [3:30:34<2:38:59,  3.31s/it, gpt_loss=0.716, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3373/6250 [3:30:34<2:51:07,  3.57s/it, gpt_loss=0.716, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3373/6250 [3:30:37<2:51:07,  3.57s/it, gpt_loss=0.684, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3374/6250 [3:30:37<2:49:01,  3.53s/it, gpt_loss=0.684, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3374/6250 [3:30:40<2:49:01,  3.53s/it, gpt_loss=0.51, lr=1.03e-6] [A
Train step of epoch 0:  54%|█████▍    | 3375/6250 [3:30:40<2:43:58,  3.42s/it, gpt_loss=0.51, lr=1.03e-6][A[2025-04-24 03:23:24,359] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  54%|█████▍    | 3375/6250 [3:30:45<2:43:58,  3.42s/it, gpt_loss=0.563, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3376/6250 [3:30:45<3:01:56,  3.80s/it, gpt_loss=0.563, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3376/6250 [3:30:48<3:01:56,  3.80s/it, gpt_loss=0.549, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3377/6250 [3:30:48<2:51:46,  3.59s/it, gpt_loss=0.549, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3377/6250 [3:30:51<2:51:46,  3.59s/it, gpt_loss=0.665, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3378/6250 [3:30:51<2:46:23,  3.48s/it, gpt_loss=0.665, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3378/6250 [3:30:55<2:46:23,  3.48s/it, gpt_loss=0.513, lr=1.03e-6][A
Train step of epoch 0:  54%|█████▍    | 3379/6250 [3:30:55<2:47:10,  3.49s/it, gpt_loss=0.513, lr=1.03e-6][A[2025-04-24 03:23:38,008] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  54%|█████▍    | 3379/6250 [3:30:59<2:47:10,  3.49s/it, gpt_loss=0.623, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3380/6250 [3:30:59<2:51:33,  3.59s/it, gpt_loss=0.623, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3380/6250 [3:31:03<2:51:33,  3.59s/it, gpt_loss=0.632, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3381/6250 [3:31:03<2:56:21,  3.69s/it, gpt_loss=0.632, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3381/6250 [3:31:06<2:56:21,  3.69s/it, gpt_loss=0.792, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3382/6250 [3:31:06<2:57:26,  3.71s/it, gpt_loss=0.792, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3382/6250 [3:31:11<2:57:26,  3.71s/it, gpt_loss=0.493, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3383/6250 [3:31:11<3:04:29,  3.86s/it, gpt_loss=0.493, lr=1.02e-6][A[2025-04-24 03:23:53,309] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  54%|█████▍    | 3383/6250 [3:31:14<3:04:29,  3.86s/it, gpt_loss=0.716, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3384/6250 [3:31:14<2:57:47,  3.72s/it, gpt_loss=0.716, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3384/6250 [3:31:18<2:57:47,  3.72s/it, gpt_loss=0.536, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3385/6250 [3:31:18<3:03:10,  3.84s/it, gpt_loss=0.536, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3385/6250 [3:31:22<3:03:10,  3.84s/it, gpt_loss=0.526, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3386/6250 [3:31:22<3:06:15,  3.90s/it, gpt_loss=0.526, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3386/6250 [3:31:26<3:06:15,  3.90s/it, gpt_loss=0.656, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3387/6250 [3:31:26<2:59:39,  3.76s/it, gpt_loss=0.656, lr=1.02e-6][A[2025-04-24 03:24:08,585] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  54%|█████▍    | 3387/6250 [3:31:29<2:59:39,  3.76s/it, gpt_loss=0.598, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3388/6250 [3:31:29<2:58:16,  3.74s/it, gpt_loss=0.598, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3388/6250 [3:31:33<2:58:16,  3.74s/it, gpt_loss=0.476, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3389/6250 [3:31:33<2:55:55,  3.69s/it, gpt_loss=0.476, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3389/6250 [3:31:37<2:55:55,  3.69s/it, gpt_loss=0.519, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3390/6250 [3:31:37<2:55:11,  3.68s/it, gpt_loss=0.519, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3390/6250 [3:31:40<2:55:11,  3.68s/it, gpt_loss=0.813, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3391/6250 [3:31:40<2:53:19,  3.64s/it, gpt_loss=0.813, lr=1.02e-6][A[2025-04-24 03:24:23,114] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  54%|█████▍    | 3391/6250 [3:31:44<2:53:19,  3.64s/it, gpt_loss=0.512, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3392/6250 [3:31:44<2:55:00,  3.67s/it, gpt_loss=0.512, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3392/6250 [3:31:47<2:55:00,  3.67s/it, gpt_loss=0.486, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3393/6250 [3:31:47<2:47:16,  3.51s/it, gpt_loss=0.486, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3393/6250 [3:31:51<2:47:16,  3.51s/it, gpt_loss=0.64, lr=1.02e-6] [A
Train step of epoch 0:  54%|█████▍    | 3394/6250 [3:31:51<2:52:15,  3.62s/it, gpt_loss=0.64, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3394/6250 [3:31:55<2:52:15,  3.62s/it, gpt_loss=0.687, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3395/6250 [3:31:55<3:06:06,  3.91s/it, gpt_loss=0.687, lr=1.02e-6][A[2025-04-24 03:24:39,125] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  54%|█████▍    | 3395/6250 [3:32:00<3:06:06,  3.91s/it, gpt_loss=0.662, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3396/6250 [3:32:00<3:13:13,  4.06s/it, gpt_loss=0.662, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3396/6250 [3:32:04<3:13:13,  4.06s/it, gpt_loss=0.461, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3397/6250 [3:32:04<3:12:31,  4.05s/it, gpt_loss=0.461, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3397/6250 [3:32:07<3:12:31,  4.05s/it, gpt_loss=0.594, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3398/6250 [3:32:07<2:58:45,  3.76s/it, gpt_loss=0.594, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3398/6250 [3:32:10<2:58:45,  3.76s/it, gpt_loss=0.68, lr=1.02e-6] [A
Train step of epoch 0:  54%|█████▍    | 3399/6250 [3:32:10<2:53:52,  3.66s/it, gpt_loss=0.68, lr=1.02e-6][A[2025-04-24 03:24:53,836] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  54%|█████▍    | 3399/6250 [3:32:15<2:53:52,  3.66s/it, gpt_loss=0.836, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3400/6250 [3:32:15<3:01:17,  3.82s/it, gpt_loss=0.836, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3400/6250 [3:32:18<3:01:17,  3.82s/it, gpt_loss=0.664, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3401/6250 [3:32:18<2:54:52,  3.68s/it, gpt_loss=0.664, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3401/6250 [3:32:22<2:54:52,  3.68s/it, gpt_loss=0.514, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3402/6250 [3:32:22<3:03:09,  3.86s/it, gpt_loss=0.514, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3402/6250 [3:32:26<3:03:09,  3.86s/it, gpt_loss=0.626, lr=1.02e-6][A
Train step of epoch 0:  54%|█████▍    | 3403/6250 [3:32:26<3:02:52,  3.85s/it, gpt_loss=0.626, lr=1.02e-6][A[2025-04-24 03:25:07,966] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  54%|█████▍    | 3403/6250 [3:32:29<3:02:52,  3.85s/it, gpt_loss=0.497, lr=1.01e-6][A
Train step of epoch 0:  54%|█████▍    | 3404/6250 [3:32:29<2:45:37,  3.49s/it, gpt_loss=0.497, lr=1.01e-6][A
Train step of epoch 0:  54%|█████▍    | 3404/6250 [3:32:33<2:45:37,  3.49s/it, gpt_loss=0.482, lr=1.01e-6][A
Train step of epoch 0:  54%|█████▍    | 3405/6250 [3:32:33<2:52:51,  3.65s/it, gpt_loss=0.482, lr=1.01e-6][A
Train step of epoch 0:  54%|█████▍    | 3405/6250 [3:32:37<2:52:51,  3.65s/it, gpt_loss=0.627, lr=1.01e-6][A
Train step of epoch 0:  54%|█████▍    | 3406/6250 [3:32:37<2:57:10,  3.74s/it, gpt_loss=0.627, lr=1.01e-6][A
Train step of epoch 0:  54%|█████▍    | 3406/6250 [3:32:39<2:57:10,  3.74s/it, gpt_loss=0.499, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3407/6250 [3:32:39<2:35:47,  3.29s/it, gpt_loss=0.499, lr=1.01e-6][A[2025-04-24 03:25:23,005] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  55%|█████▍    | 3407/6250 [3:32:44<2:35:47,  3.29s/it, gpt_loss=0.445, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3408/6250 [3:32:44<2:57:49,  3.75s/it, gpt_loss=0.445, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3408/6250 [3:32:47<2:57:49,  3.75s/it, gpt_loss=0.512, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3409/6250 [3:32:47<2:47:37,  3.54s/it, gpt_loss=0.512, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3409/6250 [3:32:50<2:47:37,  3.54s/it, gpt_loss=0.46, lr=1.01e-6] [A
Train step of epoch 0:  55%|█████▍    | 3410/6250 [3:32:50<2:42:07,  3.43s/it, gpt_loss=0.46, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3410/6250 [3:32:54<2:42:07,  3.43s/it, gpt_loss=0.701, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3411/6250 [3:32:54<2:47:42,  3.54s/it, gpt_loss=0.701, lr=1.01e-6][A[2025-04-24 03:25:37,103] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  55%|█████▍    | 3411/6250 [3:32:58<2:47:42,  3.54s/it, gpt_loss=0.614, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3412/6250 [3:32:58<2:55:14,  3.70s/it, gpt_loss=0.614, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3412/6250 [3:33:02<2:55:14,  3.70s/it, gpt_loss=0.581, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3413/6250 [3:33:02<2:54:15,  3.69s/it, gpt_loss=0.581, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3413/6250 [3:33:05<2:54:15,  3.69s/it, gpt_loss=0.561, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3414/6250 [3:33:05<2:48:45,  3.57s/it, gpt_loss=0.561, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3414/6250 [3:33:08<2:48:45,  3.57s/it, gpt_loss=0.652, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3415/6250 [3:33:08<2:39:00,  3.37s/it, gpt_loss=0.652, lr=1.01e-6][A[2025-04-24 03:25:50,584] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  55%|█████▍    | 3415/6250 [3:33:11<2:39:00,  3.37s/it, gpt_loss=0.722, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3416/6250 [3:33:11<2:42:59,  3.45s/it, gpt_loss=0.722, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3416/6250 [3:33:16<2:42:59,  3.45s/it, gpt_loss=0.558, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3417/6250 [3:33:16<2:59:37,  3.80s/it, gpt_loss=0.558, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3417/6250 [3:33:20<2:59:37,  3.80s/it, gpt_loss=0.571, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3418/6250 [3:33:20<2:56:14,  3.73s/it, gpt_loss=0.571, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3418/6250 [3:33:23<2:56:14,  3.73s/it, gpt_loss=0.683, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3419/6250 [3:33:23<2:51:44,  3.64s/it, gpt_loss=0.683, lr=1.01e-6][A[2025-04-24 03:26:05,996] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  55%|█████▍    | 3419/6250 [3:33:27<2:51:44,  3.64s/it, gpt_loss=0.642, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3420/6250 [3:33:27<2:53:51,  3.69s/it, gpt_loss=0.642, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3420/6250 [3:33:30<2:53:51,  3.69s/it, gpt_loss=0.591, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3421/6250 [3:33:30<2:43:32,  3.47s/it, gpt_loss=0.591, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3421/6250 [3:33:33<2:43:32,  3.47s/it, gpt_loss=0.617, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3422/6250 [3:33:33<2:47:46,  3.56s/it, gpt_loss=0.617, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3422/6250 [3:33:37<2:47:46,  3.56s/it, gpt_loss=0.478, lr=1.01e-6][A
Train step of epoch 0:  55%|█████▍    | 3423/6250 [3:33:37<2:47:53,  3.56s/it, gpt_loss=0.478, lr=1.01e-6][A[2025-04-24 03:26:19,802] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  55%|█████▍    | 3423/6250 [3:33:41<2:47:53,  3.56s/it, gpt_loss=0.683, lr=1e-6]   [A
Train step of epoch 0:  55%|█████▍    | 3424/6250 [3:33:41<2:46:57,  3.54s/it, gpt_loss=0.683, lr=1e-6][A
Train step of epoch 0:  55%|█████▍    | 3424/6250 [3:33:44<2:46:57,  3.54s/it, gpt_loss=0.601, lr=1e-6][A
Train step of epoch 0:  55%|█████▍    | 3425/6250 [3:33:44<2:38:45,  3.37s/it, gpt_loss=0.601, lr=1e-6][A
Train step of epoch 0:  55%|█████▍    | 3425/6250 [3:33:48<2:38:45,  3.37s/it, gpt_loss=0.783, lr=1e-6][A
Train step of epoch 0:  55%|█████▍    | 3426/6250 [3:33:48<2:48:54,  3.59s/it, gpt_loss=0.783, lr=1e-6][A
Train step of epoch 0:  55%|█████▍    | 3426/6250 [3:33:51<2:48:54,  3.59s/it, gpt_loss=0.578, lr=1e-6][A
Train step of epoch 0:  55%|█████▍    | 3427/6250 [3:33:51<2:45:53,  3.53s/it, gpt_loss=0.578, lr=1e-6][A[2025-04-24 03:26:33,880] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  55%|█████▍    | 3427/6250 [3:33:55<2:45:53,  3.53s/it, gpt_loss=0.639, lr=1e-6][A
Train step of epoch 0:  55%|█████▍    | 3428/6250 [3:33:55<2:47:22,  3.56s/it, gpt_loss=0.639, lr=1e-6][A
Train step of epoch 0:  55%|█████▍    | 3428/6250 [3:33:58<2:47:22,  3.56s/it, gpt_loss=0.534, lr=1e-6][A
Train step of epoch 0:  55%|█████▍    | 3429/6250 [3:33:58<2:47:16,  3.56s/it, gpt_loss=0.534, lr=1e-6][A
Train step of epoch 0:  55%|█████▍    | 3429/6250 [3:34:03<2:47:16,  3.56s/it, gpt_loss=0.551, lr=1e-6][A
Train step of epoch 0:  55%|█████▍    | 3430/6250 [3:34:03<2:58:42,  3.80s/it, gpt_loss=0.551, lr=1e-6][A
Train step of epoch 0:  55%|█████▍    | 3430/6250 [3:34:06<2:58:42,  3.80s/it, gpt_loss=0.71, lr=1e-6] [A
Train step of epoch 0:  55%|█████▍    | 3431/6250 [3:34:06<2:50:32,  3.63s/it, gpt_loss=0.71, lr=1e-6][A[2025-04-24 03:26:48,650] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  55%|█████▍    | 3431/6250 [3:34:09<2:50:32,  3.63s/it, gpt_loss=0.65, lr=1e-6][A
Train step of epoch 0:  55%|█████▍    | 3432/6250 [3:34:09<2:50:15,  3.63s/it, gpt_loss=0.65, lr=1e-6][A
Train step of epoch 0:  55%|█████▍    | 3432/6250 [3:34:14<2:50:15,  3.63s/it, gpt_loss=0.596, lr=1e-6][A
Train step of epoch 0:  55%|█████▍    | 3433/6250 [3:34:14<3:06:11,  3.97s/it, gpt_loss=0.596, lr=1e-6][A
Train step of epoch 0:  55%|█████▍    | 3433/6250 [3:34:18<3:06:11,  3.97s/it, gpt_loss=0.554, lr=1e-6][A
Train step of epoch 0:  55%|█████▍    | 3434/6250 [3:34:18<3:00:11,  3.84s/it, gpt_loss=0.554, lr=1e-6][A
Train step of epoch 0:  55%|█████▍    | 3434/6250 [3:34:21<3:00:11,  3.84s/it, gpt_loss=0.509, lr=1e-6][A
Train step of epoch 0:  55%|█████▍    | 3435/6250 [3:34:21<2:54:36,  3.72s/it, gpt_loss=0.509, lr=1e-6][A[2025-04-24 03:27:04,111] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  55%|█████▍    | 3435/6250 [3:34:25<2:54:36,  3.72s/it, gpt_loss=0.804, lr=9.99e-7][A
Train step of epoch 0:  55%|█████▍    | 3436/6250 [3:34:25<2:54:21,  3.72s/it, gpt_loss=0.804, lr=9.99e-7][A
Train step of epoch 0:  55%|█████▍    | 3436/6250 [3:34:29<2:54:21,  3.72s/it, gpt_loss=0.75, lr=9.99e-7] [A
Train step of epoch 0:  55%|█████▍    | 3437/6250 [3:34:29<2:57:47,  3.79s/it, gpt_loss=0.75, lr=9.99e-7][A
Train step of epoch 0:  55%|█████▍    | 3437/6250 [3:34:33<2:57:47,  3.79s/it, gpt_loss=0.608, lr=9.99e-7][A
Train step of epoch 0:  55%|█████▌    | 3438/6250 [3:34:33<2:56:16,  3.76s/it, gpt_loss=0.608, lr=9.99e-7][A
Train step of epoch 0:  55%|█████▌    | 3438/6250 [3:34:36<2:56:16,  3.76s/it, gpt_loss=0.694, lr=9.99e-7][A
Train step of epoch 0:  55%|█████▌    | 3439/6250 [3:34:36<2:56:20,  3.76s/it, gpt_loss=0.694, lr=9.99e-7][A[2025-04-24 03:27:18,918] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  55%|█████▌    | 3439/6250 [3:34:40<2:56:20,  3.76s/it, gpt_loss=0.564, lr=9.97e-7][A
Train step of epoch 0:  55%|█████▌    | 3440/6250 [3:34:40<2:50:54,  3.65s/it, gpt_loss=0.564, lr=9.97e-7][A
Train step of epoch 0:  55%|█████▌    | 3440/6250 [3:34:44<2:50:54,  3.65s/it, gpt_loss=0.521, lr=9.97e-7][A
Train step of epoch 0:  55%|█████▌    | 3441/6250 [3:34:44<3:01:26,  3.88s/it, gpt_loss=0.521, lr=9.97e-7][A
Train step of epoch 0:  55%|█████▌    | 3441/6250 [3:34:48<3:01:26,  3.88s/it, gpt_loss=0.647, lr=9.97e-7][A
Train step of epoch 0:  55%|█████▌    | 3442/6250 [3:34:48<3:01:47,  3.88s/it, gpt_loss=0.647, lr=9.97e-7][A
Train step of epoch 0:  55%|█████▌    | 3442/6250 [3:34:52<3:01:47,  3.88s/it, gpt_loss=0.524, lr=9.97e-7][A
Train step of epoch 0:  55%|█████▌    | 3443/6250 [3:34:52<2:56:42,  3.78s/it, gpt_loss=0.524, lr=9.97e-7][A[2025-04-24 03:27:34,588] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  55%|█████▌    | 3443/6250 [3:34:55<2:56:42,  3.78s/it, gpt_loss=0.542, lr=9.95e-7][A
Train step of epoch 0:  55%|█████▌    | 3444/6250 [3:34:55<2:57:27,  3.79s/it, gpt_loss=0.542, lr=9.95e-7][A
Train step of epoch 0:  55%|█████▌    | 3444/6250 [3:35:00<2:57:27,  3.79s/it, gpt_loss=0.612, lr=9.95e-7][A
Train step of epoch 0:  55%|█████▌    | 3445/6250 [3:35:00<3:09:51,  4.06s/it, gpt_loss=0.612, lr=9.95e-7][A
Train step of epoch 0:  55%|█████▌    | 3445/6250 [3:35:03<3:09:51,  4.06s/it, gpt_loss=0.688, lr=9.95e-7][A
Train step of epoch 0:  55%|█████▌    | 3446/6250 [3:35:03<2:51:13,  3.66s/it, gpt_loss=0.688, lr=9.95e-7][A
Train step of epoch 0:  55%|█████▌    | 3446/6250 [3:35:07<2:51:13,  3.66s/it, gpt_loss=0.749, lr=9.95e-7][A
Train step of epoch 0:  55%|█████▌    | 3447/6250 [3:35:07<3:05:42,  3.98s/it, gpt_loss=0.749, lr=9.95e-7][A[2025-04-24 03:27:50,977] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  55%|█████▌    | 3447/6250 [3:35:12<3:05:42,  3.98s/it, gpt_loss=0.691, lr=9.93e-7][A
Train step of epoch 0:  55%|█████▌    | 3448/6250 [3:35:12<3:09:43,  4.06s/it, gpt_loss=0.691, lr=9.93e-7][A
Train step of epoch 0:  55%|█████▌    | 3448/6250 [3:35:16<3:09:43,  4.06s/it, gpt_loss=0.546, lr=9.93e-7][A
Train step of epoch 0:  55%|█████▌    | 3449/6250 [3:35:16<3:14:09,  4.16s/it, gpt_loss=0.546, lr=9.93e-7][A
Train step of epoch 0:  55%|█████▌    | 3449/6250 [3:35:20<3:14:09,  4.16s/it, gpt_loss=0.636, lr=9.93e-7][A
Train step of epoch 0:  55%|█████▌    | 3450/6250 [3:35:20<3:16:33,  4.21s/it, gpt_loss=0.636, lr=9.93e-7][A
Train step of epoch 0:  55%|█████▌    | 3450/6250 [3:35:24<3:16:33,  4.21s/it, gpt_loss=0.786, lr=9.93e-7][A
Train step of epoch 0:  55%|█████▌    | 3451/6250 [3:35:24<3:07:47,  4.03s/it, gpt_loss=0.786, lr=9.93e-7][A[2025-04-24 03:28:07,167] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  55%|█████▌    | 3451/6250 [3:35:28<3:07:47,  4.03s/it, gpt_loss=0.632, lr=9.91e-7][A
Train step of epoch 0:  55%|█████▌    | 3452/6250 [3:35:28<3:05:40,  3.98s/it, gpt_loss=0.632, lr=9.91e-7][A
Train step of epoch 0:  55%|█████▌    | 3452/6250 [3:35:32<3:05:40,  3.98s/it, gpt_loss=0.551, lr=9.91e-7][A
Train step of epoch 0:  55%|█████▌    | 3453/6250 [3:35:32<3:08:40,  4.05s/it, gpt_loss=0.551, lr=9.91e-7][A
Train step of epoch 0:  55%|█████▌    | 3453/6250 [3:35:36<3:08:40,  4.05s/it, gpt_loss=0.738, lr=9.91e-7][A
Train step of epoch 0:  55%|█████▌    | 3454/6250 [3:35:36<3:03:31,  3.94s/it, gpt_loss=0.738, lr=9.91e-7][A
Train step of epoch 0:  55%|█████▌    | 3454/6250 [3:35:39<3:03:31,  3.94s/it, gpt_loss=0.633, lr=9.91e-7][A
Train step of epoch 0:  55%|█████▌    | 3455/6250 [3:35:39<2:59:51,  3.86s/it, gpt_loss=0.633, lr=9.91e-7][A[2025-04-24 03:28:21,994] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  55%|█████▌    | 3455/6250 [3:35:43<2:59:51,  3.86s/it, gpt_loss=0.541, lr=9.89e-7][A
Train step of epoch 0:  55%|█████▌    | 3456/6250 [3:35:43<2:51:26,  3.68s/it, gpt_loss=0.541, lr=9.89e-7][A
Train step of epoch 0:  55%|█████▌    | 3456/6250 [3:35:47<2:51:26,  3.68s/it, gpt_loss=0.74, lr=9.89e-7] [A
Train step of epoch 0:  55%|█████▌    | 3457/6250 [3:35:47<2:58:01,  3.82s/it, gpt_loss=0.74, lr=9.89e-7][A
Train step of epoch 0:  55%|█████▌    | 3457/6250 [3:35:50<2:58:01,  3.82s/it, gpt_loss=0.539, lr=9.89e-7][A
Train step of epoch 0:  55%|█████▌    | 3458/6250 [3:35:50<2:49:10,  3.64s/it, gpt_loss=0.539, lr=9.89e-7][A
Train step of epoch 0:  55%|█████▌    | 3458/6250 [3:35:54<2:49:10,  3.64s/it, gpt_loss=0.442, lr=9.89e-7][A
Train step of epoch 0:  55%|█████▌    | 3459/6250 [3:35:54<2:51:45,  3.69s/it, gpt_loss=0.442, lr=9.89e-7][A[2025-04-24 03:28:37,593] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  55%|█████▌    | 3459/6250 [3:35:58<2:51:45,  3.69s/it, gpt_loss=0.439, lr=9.87e-7][A
Train step of epoch 0:  55%|█████▌    | 3460/6250 [3:35:58<3:01:51,  3.91s/it, gpt_loss=0.439, lr=9.87e-7][A
Train step of epoch 0:  55%|█████▌    | 3460/6250 [3:36:02<3:01:51,  3.91s/it, gpt_loss=0.716, lr=9.87e-7][A
Train step of epoch 0:  55%|█████▌    | 3461/6250 [3:36:02<3:03:38,  3.95s/it, gpt_loss=0.716, lr=9.87e-7][A
Train step of epoch 0:  55%|█████▌    | 3461/6250 [3:36:05<3:03:38,  3.95s/it, gpt_loss=0.422, lr=9.87e-7][A
Train step of epoch 0:  55%|█████▌    | 3462/6250 [3:36:05<2:49:07,  3.64s/it, gpt_loss=0.422, lr=9.87e-7][A
Train step of epoch 0:  55%|█████▌    | 3462/6250 [3:36:09<2:49:07,  3.64s/it, gpt_loss=0.622, lr=9.87e-7][A
Train step of epoch 0:  55%|█████▌    | 3463/6250 [3:36:09<2:47:48,  3.61s/it, gpt_loss=0.622, lr=9.87e-7][A[2025-04-24 03:28:51,414] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  55%|█████▌    | 3463/6250 [3:36:12<2:47:48,  3.61s/it, gpt_loss=0.656, lr=9.86e-7][A
Train step of epoch 0:  55%|█████▌    | 3464/6250 [3:36:12<2:43:35,  3.52s/it, gpt_loss=0.656, lr=9.86e-7][A
Train step of epoch 0:  55%|█████▌    | 3464/6250 [3:36:16<2:43:35,  3.52s/it, gpt_loss=0.446, lr=9.86e-7][A
Train step of epoch 0:  55%|█████▌    | 3465/6250 [3:36:16<2:52:03,  3.71s/it, gpt_loss=0.446, lr=9.86e-7][A
Train step of epoch 0:  55%|█████▌    | 3465/6250 [3:36:19<2:52:03,  3.71s/it, gpt_loss=0.475, lr=9.86e-7][A
Train step of epoch 0:  55%|█████▌    | 3466/6250 [3:36:19<2:37:03,  3.38s/it, gpt_loss=0.475, lr=9.86e-7][A
Train step of epoch 0:  55%|█████▌    | 3466/6250 [3:36:23<2:37:03,  3.38s/it, gpt_loss=0.675, lr=9.86e-7][A
Train step of epoch 0:  55%|█████▌    | 3467/6250 [3:36:23<2:41:15,  3.48s/it, gpt_loss=0.675, lr=9.86e-7][A[2025-04-24 03:29:05,600] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  55%|█████▌    | 3467/6250 [3:36:26<2:41:15,  3.48s/it, gpt_loss=0.619, lr=9.84e-7][A
Train step of epoch 0:  55%|█████▌    | 3468/6250 [3:36:26<2:44:40,  3.55s/it, gpt_loss=0.619, lr=9.84e-7][A
Train step of epoch 0:  55%|█████▌    | 3468/6250 [3:36:31<2:44:40,  3.55s/it, gpt_loss=0.545, lr=9.84e-7][A
Train step of epoch 0:  56%|█████▌    | 3469/6250 [3:36:31<2:53:48,  3.75s/it, gpt_loss=0.545, lr=9.84e-7][A
Train step of epoch 0:  56%|█████▌    | 3469/6250 [3:36:34<2:53:48,  3.75s/it, gpt_loss=0.597, lr=9.84e-7][A
Train step of epoch 0:  56%|█████▌    | 3470/6250 [3:36:34<2:47:55,  3.62s/it, gpt_loss=0.597, lr=9.84e-7][A
Train step of epoch 0:  56%|█████▌    | 3470/6250 [3:36:38<2:47:55,  3.62s/it, gpt_loss=0.474, lr=9.84e-7][A
Train step of epoch 0:  56%|█████▌    | 3471/6250 [3:36:38<2:51:54,  3.71s/it, gpt_loss=0.474, lr=9.84e-7][A[2025-04-24 03:29:22,168] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  56%|█████▌    | 3471/6250 [3:36:43<2:51:54,  3.71s/it, gpt_loss=0.691, lr=9.82e-7][A
Train step of epoch 0:  56%|█████▌    | 3472/6250 [3:36:43<3:11:15,  4.13s/it, gpt_loss=0.691, lr=9.82e-7][A
Train step of epoch 0:  56%|█████▌    | 3472/6250 [3:36:46<3:11:15,  4.13s/it, gpt_loss=0.517, lr=9.82e-7][A
Train step of epoch 0:  56%|█████▌    | 3473/6250 [3:36:46<3:01:55,  3.93s/it, gpt_loss=0.517, lr=9.82e-7][A
Train step of epoch 0:  56%|█████▌    | 3473/6250 [3:36:50<3:01:55,  3.93s/it, gpt_loss=0.737, lr=9.82e-7][A
Train step of epoch 0:  56%|█████▌    | 3474/6250 [3:36:50<3:02:06,  3.94s/it, gpt_loss=0.737, lr=9.82e-7][A
Train step of epoch 0:  56%|█████▌    | 3474/6250 [3:36:54<3:02:06,  3.94s/it, gpt_loss=0.525, lr=9.82e-7][A
Train step of epoch 0:  56%|█████▌    | 3475/6250 [3:36:54<2:53:08,  3.74s/it, gpt_loss=0.525, lr=9.82e-7][A[2025-04-24 03:29:36,236] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  56%|█████▌    | 3475/6250 [3:36:57<2:53:08,  3.74s/it, gpt_loss=0.558, lr=9.8e-7] [A
Train step of epoch 0:  56%|█████▌    | 3476/6250 [3:36:57<2:47:45,  3.63s/it, gpt_loss=0.558, lr=9.8e-7][A
Train step of epoch 0:  56%|█████▌    | 3476/6250 [3:37:02<2:47:45,  3.63s/it, gpt_loss=0.458, lr=9.8e-7][A
Train step of epoch 0:  56%|█████▌    | 3477/6250 [3:37:02<3:01:03,  3.92s/it, gpt_loss=0.458, lr=9.8e-7][A
Train step of epoch 0:  56%|█████▌    | 3477/6250 [3:37:05<3:01:03,  3.92s/it, gpt_loss=0.54, lr=9.8e-7] [A
Train step of epoch 0:  56%|█████▌    | 3478/6250 [3:37:05<2:50:35,  3.69s/it, gpt_loss=0.54, lr=9.8e-7][A
Train step of epoch 0:  56%|█████▌    | 3478/6250 [3:37:08<2:50:35,  3.69s/it, gpt_loss=0.511, lr=9.8e-7][A
Train step of epoch 0:  56%|█████▌    | 3479/6250 [3:37:08<2:49:28,  3.67s/it, gpt_loss=0.511, lr=9.8e-7][A[2025-04-24 03:29:50,833] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  56%|█████▌    | 3479/6250 [3:37:12<2:49:28,  3.67s/it, gpt_loss=0.556, lr=9.78e-7][A
Train step of epoch 0:  56%|█████▌    | 3480/6250 [3:37:12<2:43:13,  3.54s/it, gpt_loss=0.556, lr=9.78e-7][A
Train step of epoch 0:  56%|█████▌    | 3480/6250 [3:37:16<2:43:13,  3.54s/it, gpt_loss=0.677, lr=9.78e-7][A
Train step of epoch 0:  56%|█████▌    | 3481/6250 [3:37:16<2:54:00,  3.77s/it, gpt_loss=0.677, lr=9.78e-7][A
Train step of epoch 0:  56%|█████▌    | 3481/6250 [3:37:20<2:54:00,  3.77s/it, gpt_loss=0.809, lr=9.78e-7][A
Train step of epoch 0:  56%|█████▌    | 3482/6250 [3:37:20<2:55:35,  3.81s/it, gpt_loss=0.809, lr=9.78e-7][A
Train step of epoch 0:  56%|█████▌    | 3482/6250 [3:37:25<2:55:35,  3.81s/it, gpt_loss=0.44, lr=9.78e-7] [A
Train step of epoch 0:  56%|█████▌    | 3483/6250 [3:37:25<3:21:02,  4.36s/it, gpt_loss=0.44, lr=9.78e-7][A[2025-04-24 03:30:08,612] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  56%|█████▌    | 3483/6250 [3:37:29<3:21:02,  4.36s/it, gpt_loss=0.7, lr=9.76e-7] [A
Train step of epoch 0:  56%|█████▌    | 3484/6250 [3:37:29<3:14:53,  4.23s/it, gpt_loss=0.7, lr=9.76e-7][A
Train step of epoch 0:  56%|█████▌    | 3484/6250 [3:37:34<3:14:53,  4.23s/it, gpt_loss=0.627, lr=9.76e-7][A
Train step of epoch 0:  56%|█████▌    | 3485/6250 [3:37:34<3:16:12,  4.26s/it, gpt_loss=0.627, lr=9.76e-7][A
Train step of epoch 0:  56%|█████▌    | 3485/6250 [3:37:37<3:16:12,  4.26s/it, gpt_loss=0.563, lr=9.76e-7][A
Train step of epoch 0:  56%|█████▌    | 3486/6250 [3:37:37<3:07:39,  4.07s/it, gpt_loss=0.563, lr=9.76e-7][A
Train step of epoch 0:  56%|█████▌    | 3486/6250 [3:37:41<3:07:39,  4.07s/it, gpt_loss=0.61, lr=9.76e-7] [A
Train step of epoch 0:  56%|█████▌    | 3487/6250 [3:37:41<3:04:12,  4.00s/it, gpt_loss=0.61, lr=9.76e-7][A[2025-04-24 03:30:23,936] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  56%|█████▌    | 3487/6250 [3:37:45<3:04:12,  4.00s/it, gpt_loss=0.605, lr=9.74e-7][A
Train step of epoch 0:  56%|█████▌    | 3488/6250 [3:37:45<2:57:33,  3.86s/it, gpt_loss=0.605, lr=9.74e-7][A
Train step of epoch 0:  56%|█████▌    | 3488/6250 [3:37:49<2:57:33,  3.86s/it, gpt_loss=0.584, lr=9.74e-7][A
Train step of epoch 0:  56%|█████▌    | 3489/6250 [3:37:49<2:58:04,  3.87s/it, gpt_loss=0.584, lr=9.74e-7][A
Train step of epoch 0:  56%|█████▌    | 3489/6250 [3:37:52<2:58:04,  3.87s/it, gpt_loss=0.689, lr=9.74e-7][A
Train step of epoch 0:  56%|█████▌    | 3490/6250 [3:37:52<2:54:43,  3.80s/it, gpt_loss=0.689, lr=9.74e-7][A
Train step of epoch 0:  56%|█████▌    | 3490/6250 [3:37:55<2:54:43,  3.80s/it, gpt_loss=0.624, lr=9.74e-7][A
Train step of epoch 0:  56%|█████▌    | 3491/6250 [3:37:55<2:44:05,  3.57s/it, gpt_loss=0.624, lr=9.74e-7][A[2025-04-24 03:30:37,825] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  56%|█████▌    | 3491/6250 [3:37:59<2:44:05,  3.57s/it, gpt_loss=0.622, lr=9.73e-7][A
Train step of epoch 0:  56%|█████▌    | 3492/6250 [3:37:59<2:40:40,  3.50s/it, gpt_loss=0.622, lr=9.73e-7][A
Train step of epoch 0:  56%|█████▌    | 3492/6250 [3:38:03<2:40:40,  3.50s/it, gpt_loss=0.613, lr=9.73e-7][A
Train step of epoch 0:  56%|█████▌    | 3493/6250 [3:38:03<2:57:33,  3.86s/it, gpt_loss=0.613, lr=9.73e-7][A
Train step of epoch 0:  56%|█████▌    | 3493/6250 [3:38:07<2:57:33,  3.86s/it, gpt_loss=0.618, lr=9.73e-7][A
Train step of epoch 0:  56%|█████▌    | 3494/6250 [3:38:07<2:54:42,  3.80s/it, gpt_loss=0.618, lr=9.73e-7][A
Train step of epoch 0:  56%|█████▌    | 3494/6250 [3:38:11<2:54:42,  3.80s/it, gpt_loss=0.537, lr=9.73e-7][A
Train step of epoch 0:  56%|█████▌    | 3495/6250 [3:38:11<2:51:56,  3.74s/it, gpt_loss=0.537, lr=9.73e-7][A[2025-04-24 03:30:53,322] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  56%|█████▌    | 3495/6250 [3:38:14<2:51:56,  3.74s/it, gpt_loss=0.577, lr=9.71e-7][A
Train step of epoch 0:  56%|█████▌    | 3496/6250 [3:38:14<2:48:34,  3.67s/it, gpt_loss=0.577, lr=9.71e-7][A
Train step of epoch 0:  56%|█████▌    | 3496/6250 [3:38:18<2:48:34,  3.67s/it, gpt_loss=0.793, lr=9.71e-7][A
Train step of epoch 0:  56%|█████▌    | 3497/6250 [3:38:18<2:52:27,  3.76s/it, gpt_loss=0.793, lr=9.71e-7][A
Train step of epoch 0:  56%|█████▌    | 3497/6250 [3:38:22<2:52:27,  3.76s/it, gpt_loss=0.694, lr=9.71e-7][A
Train step of epoch 0:  56%|█████▌    | 3498/6250 [3:38:22<2:54:14,  3.80s/it, gpt_loss=0.694, lr=9.71e-7][A
Train step of epoch 0:  56%|█████▌    | 3498/6250 [3:38:25<2:54:14,  3.80s/it, gpt_loss=0.441, lr=9.71e-7][A
Train step of epoch 0:  56%|█████▌    | 3499/6250 [3:38:25<2:38:03,  3.45s/it, gpt_loss=0.441, lr=9.71e-7][A[2025-04-24 03:31:07,051] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  56%|█████▌    | 3499/6250 [3:38:28<2:38:03,  3.45s/it, gpt_loss=0.548, lr=9.69e-7][A
Train step of epoch 0:  56%|█████▌    | 3500/6250 [3:38:28<2:35:16,  3.39s/it, gpt_loss=0.548, lr=9.69e-7][A
Train step of epoch 0:  56%|█████▌    | 3500/6250 [3:38:30<2:35:16,  3.39s/it, gpt_loss=0.35, lr=9.69e-7] [A
Train step of epoch 0:  56%|█████▌    | 3501/6250 [3:38:30<2:19:41,  3.05s/it, gpt_loss=0.35, lr=9.69e-7][A
Train step of epoch 0:  56%|█████▌    | 3501/6250 [3:38:34<2:19:41,  3.05s/it, gpt_loss=0.556, lr=9.69e-7][A
Train step of epoch 0:  56%|█████▌    | 3502/6250 [3:38:34<2:29:59,  3.28s/it, gpt_loss=0.556, lr=9.69e-7][A
Train step of epoch 0:  56%|█████▌    | 3502/6250 [3:38:37<2:29:59,  3.28s/it, gpt_loss=0.657, lr=9.69e-7][A
Train step of epoch 0:  56%|█████▌    | 3503/6250 [3:38:37<2:29:13,  3.26s/it, gpt_loss=0.657, lr=9.69e-7][A[2025-04-24 03:31:20,288] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  56%|█████▌    | 3503/6250 [3:38:41<2:29:13,  3.26s/it, gpt_loss=0.545, lr=9.67e-7][A
Train step of epoch 0:  56%|█████▌    | 3504/6250 [3:38:41<2:38:41,  3.47s/it, gpt_loss=0.545, lr=9.67e-7][A
Train step of epoch 0:  56%|█████▌    | 3504/6250 [3:38:45<2:38:41,  3.47s/it, gpt_loss=0.547, lr=9.67e-7][A
Train step of epoch 0:  56%|█████▌    | 3505/6250 [3:38:45<2:42:34,  3.55s/it, gpt_loss=0.547, lr=9.67e-7][A
Train step of epoch 0:  56%|█████▌    | 3505/6250 [3:38:48<2:42:34,  3.55s/it, gpt_loss=0.49, lr=9.67e-7] [A
Train step of epoch 0:  56%|█████▌    | 3506/6250 [3:38:48<2:41:47,  3.54s/it, gpt_loss=0.49, lr=9.67e-7][A
Train step of epoch 0:  56%|█████▌    | 3506/6250 [3:38:53<2:41:47,  3.54s/it, gpt_loss=0.524, lr=9.67e-7][A
Train step of epoch 0:  56%|█████▌    | 3507/6250 [3:38:53<2:54:12,  3.81s/it, gpt_loss=0.524, lr=9.67e-7][A[2025-04-24 03:31:37,146] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  56%|█████▌    | 3507/6250 [3:38:58<2:54:12,  3.81s/it, gpt_loss=0.631, lr=9.65e-7][A
Train step of epoch 0:  56%|█████▌    | 3508/6250 [3:38:58<3:12:35,  4.21s/it, gpt_loss=0.631, lr=9.65e-7][A
Train step of epoch 0:  56%|█████▌    | 3508/6250 [3:39:02<3:12:35,  4.21s/it, gpt_loss=0.445, lr=9.65e-7][A
Train step of epoch 0:  56%|█████▌    | 3509/6250 [3:39:02<3:16:11,  4.29s/it, gpt_loss=0.445, lr=9.65e-7][A
Train step of epoch 0:  56%|█████▌    | 3509/6250 [3:39:07<3:16:11,  4.29s/it, gpt_loss=0.624, lr=9.65e-7][A
Train step of epoch 0:  56%|█████▌    | 3510/6250 [3:39:07<3:13:53,  4.25s/it, gpt_loss=0.624, lr=9.65e-7][A
Train step of epoch 0:  56%|█████▌    | 3510/6250 [3:39:10<3:13:53,  4.25s/it, gpt_loss=0.409, lr=9.65e-7][A
Train step of epoch 0:  56%|█████▌    | 3511/6250 [3:39:10<2:58:35,  3.91s/it, gpt_loss=0.409, lr=9.65e-7][A[2025-04-24 03:31:52,301] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  56%|█████▌    | 3511/6250 [3:39:13<2:58:35,  3.91s/it, gpt_loss=0.684, lr=9.63e-7][A
Train step of epoch 0:  56%|█████▌    | 3512/6250 [3:39:13<2:51:36,  3.76s/it, gpt_loss=0.684, lr=9.63e-7][A
Train step of epoch 0:  56%|█████▌    | 3512/6250 [3:39:17<2:51:36,  3.76s/it, gpt_loss=0.613, lr=9.63e-7][A
Train step of epoch 0:  56%|█████▌    | 3513/6250 [3:39:17<2:56:06,  3.86s/it, gpt_loss=0.613, lr=9.63e-7][A
Train step of epoch 0:  56%|█████▌    | 3513/6250 [3:39:21<2:56:06,  3.86s/it, gpt_loss=0.6, lr=9.63e-7]  [A
Train step of epoch 0:  56%|█████▌    | 3514/6250 [3:39:21<2:49:05,  3.71s/it, gpt_loss=0.6, lr=9.63e-7][A
Train step of epoch 0:  56%|█████▌    | 3514/6250 [3:39:23<2:49:05,  3.71s/it, gpt_loss=0.603, lr=9.63e-7][A
Train step of epoch 0:  56%|█████▌    | 3515/6250 [3:39:23<2:37:59,  3.47s/it, gpt_loss=0.603, lr=9.63e-7][A[2025-04-24 03:32:06,203] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  56%|█████▌    | 3515/6250 [3:39:27<2:37:59,  3.47s/it, gpt_loss=0.651, lr=9.62e-7][A
Train step of epoch 0:  56%|█████▋    | 3516/6250 [3:39:27<2:39:08,  3.49s/it, gpt_loss=0.651, lr=9.62e-7][A
Train step of epoch 0:  56%|█████▋    | 3516/6250 [3:39:31<2:39:08,  3.49s/it, gpt_loss=0.562, lr=9.62e-7][A
Train step of epoch 0:  56%|█████▋    | 3517/6250 [3:39:31<2:50:16,  3.74s/it, gpt_loss=0.562, lr=9.62e-7][A
Train step of epoch 0:  56%|█████▋    | 3517/6250 [3:39:36<2:50:16,  3.74s/it, gpt_loss=0.464, lr=9.62e-7][A
Train step of epoch 0:  56%|█████▋    | 3518/6250 [3:39:36<2:58:19,  3.92s/it, gpt_loss=0.464, lr=9.62e-7][A
Train step of epoch 0:  56%|█████▋    | 3518/6250 [3:39:39<2:58:19,  3.92s/it, gpt_loss=0.588, lr=9.62e-7][A
Train step of epoch 0:  56%|█████▋    | 3519/6250 [3:39:39<2:48:35,  3.70s/it, gpt_loss=0.588, lr=9.62e-7][A[2025-04-24 03:32:22,181] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  56%|█████▋    | 3519/6250 [3:39:43<2:48:35,  3.70s/it, gpt_loss=0.474, lr=9.6e-7] [A
Train step of epoch 0:  56%|█████▋    | 3520/6250 [3:39:43<2:54:18,  3.83s/it, gpt_loss=0.474, lr=9.6e-7][A
Train step of epoch 0:  56%|█████▋    | 3520/6250 [3:39:47<2:54:18,  3.83s/it, gpt_loss=0.649, lr=9.6e-7][A
Train step of epoch 0:  56%|█████▋    | 3521/6250 [3:39:47<2:55:37,  3.86s/it, gpt_loss=0.649, lr=9.6e-7][A
Train step of epoch 0:  56%|█████▋    | 3521/6250 [3:39:50<2:55:37,  3.86s/it, gpt_loss=0.568, lr=9.6e-7][A
Train step of epoch 0:  56%|█████▋    | 3522/6250 [3:39:50<2:46:25,  3.66s/it, gpt_loss=0.568, lr=9.6e-7][A
Train step of epoch 0:  56%|█████▋    | 3522/6250 [3:39:54<2:46:25,  3.66s/it, gpt_loss=0.682, lr=9.6e-7][A
Train step of epoch 0:  56%|█████▋    | 3523/6250 [3:39:54<2:52:51,  3.80s/it, gpt_loss=0.682, lr=9.6e-7][A[2025-04-24 03:32:37,248] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  56%|█████▋    | 3523/6250 [3:39:58<2:52:51,  3.80s/it, gpt_loss=0.591, lr=9.58e-7][A
Train step of epoch 0:  56%|█████▋    | 3524/6250 [3:39:58<2:52:51,  3.80s/it, gpt_loss=0.591, lr=9.58e-7][A
Train step of epoch 0:  56%|█████▋    | 3524/6250 [3:40:02<2:52:51,  3.80s/it, gpt_loss=0.543, lr=9.58e-7][A
Train step of epoch 0:  56%|█████▋    | 3525/6250 [3:40:02<2:54:46,  3.85s/it, gpt_loss=0.543, lr=9.58e-7][A
Train step of epoch 0:  56%|█████▋    | 3525/6250 [3:40:06<2:54:46,  3.85s/it, gpt_loss=0.61, lr=9.58e-7] [A
Train step of epoch 0:  56%|█████▋    | 3526/6250 [3:40:06<2:55:18,  3.86s/it, gpt_loss=0.61, lr=9.58e-7][A
Train step of epoch 0:  56%|█████▋    | 3526/6250 [3:40:09<2:55:18,  3.86s/it, gpt_loss=0.658, lr=9.58e-7][A
Train step of epoch 0:  56%|█████▋    | 3527/6250 [3:40:09<2:43:30,  3.60s/it, gpt_loss=0.658, lr=9.58e-7][A[2025-04-24 03:32:53,231] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  56%|█████▋    | 3527/6250 [3:40:14<2:43:30,  3.60s/it, gpt_loss=0.609, lr=9.56e-7][A
Train step of epoch 0:  56%|█████▋    | 3528/6250 [3:40:14<3:04:21,  4.06s/it, gpt_loss=0.609, lr=9.56e-7][A
Train step of epoch 0:  56%|█████▋    | 3528/6250 [3:40:17<3:04:21,  4.06s/it, gpt_loss=0.512, lr=9.56e-7][A
Train step of epoch 0:  56%|█████▋    | 3529/6250 [3:40:17<2:55:44,  3.88s/it, gpt_loss=0.512, lr=9.56e-7][A
Train step of epoch 0:  56%|█████▋    | 3529/6250 [3:40:20<2:55:44,  3.88s/it, gpt_loss=0.601, lr=9.56e-7][A
Train step of epoch 0:  56%|█████▋    | 3530/6250 [3:40:20<2:41:01,  3.55s/it, gpt_loss=0.601, lr=9.56e-7][A
Train step of epoch 0:  56%|█████▋    | 3530/6250 [3:40:24<2:41:01,  3.55s/it, gpt_loss=0.564, lr=9.56e-7][A
Train step of epoch 0:  56%|█████▋    | 3531/6250 [3:40:24<2:42:12,  3.58s/it, gpt_loss=0.564, lr=9.56e-7][A[2025-04-24 03:33:07,066] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  56%|█████▋    | 3531/6250 [3:40:28<2:42:12,  3.58s/it, gpt_loss=0.475, lr=9.54e-7][A
Train step of epoch 0:  57%|█████▋    | 3532/6250 [3:40:28<2:47:18,  3.69s/it, gpt_loss=0.475, lr=9.54e-7][A
Train step of epoch 0:  57%|█████▋    | 3532/6250 [3:40:32<2:47:18,  3.69s/it, gpt_loss=0.605, lr=9.54e-7][A
Train step of epoch 0:  57%|█████▋    | 3533/6250 [3:40:32<2:54:32,  3.85s/it, gpt_loss=0.605, lr=9.54e-7][A
Train step of epoch 0:  57%|█████▋    | 3533/6250 [3:40:36<2:54:32,  3.85s/it, gpt_loss=0.667, lr=9.54e-7][A
Train step of epoch 0:  57%|█████▋    | 3534/6250 [3:40:36<2:59:59,  3.98s/it, gpt_loss=0.667, lr=9.54e-7][A
Train step of epoch 0:  57%|█████▋    | 3534/6250 [3:40:40<2:59:59,  3.98s/it, gpt_loss=0.737, lr=9.54e-7][A
Train step of epoch 0:  57%|█████▋    | 3535/6250 [3:40:40<2:53:30,  3.83s/it, gpt_loss=0.737, lr=9.54e-7][A[2025-04-24 03:33:20,852] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  57%|█████▋    | 3535/6250 [3:40:42<2:53:30,  3.83s/it, gpt_loss=0.517, lr=9.52e-7][A
Train step of epoch 0:  57%|█████▋    | 3536/6250 [3:40:42<2:25:43,  3.22s/it, gpt_loss=0.517, lr=9.52e-7][A
Train step of epoch 0:  57%|█████▋    | 3536/6250 [3:40:45<2:25:43,  3.22s/it, gpt_loss=0.59, lr=9.52e-7] [A
Train step of epoch 0:  57%|█████▋    | 3537/6250 [3:40:45<2:34:42,  3.42s/it, gpt_loss=0.59, lr=9.52e-7][A
Train step of epoch 0:  57%|█████▋    | 3537/6250 [3:40:50<2:34:42,  3.42s/it, gpt_loss=0.573, lr=9.52e-7][A
Train step of epoch 0:  57%|█████▋    | 3538/6250 [3:40:50<2:50:46,  3.78s/it, gpt_loss=0.573, lr=9.52e-7][A
Train step of epoch 0:  57%|█████▋    | 3538/6250 [3:40:54<2:50:46,  3.78s/it, gpt_loss=0.687, lr=9.52e-7][A
Train step of epoch 0:  57%|█████▋    | 3539/6250 [3:40:54<2:47:59,  3.72s/it, gpt_loss=0.687, lr=9.52e-7][A[2025-04-24 03:33:35,392] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  57%|█████▋    | 3539/6250 [3:40:56<2:47:59,  3.72s/it, gpt_loss=0.379, lr=9.5e-7] [A
Train step of epoch 0:  57%|█████▋    | 3540/6250 [3:40:56<2:30:55,  3.34s/it, gpt_loss=0.379, lr=9.5e-7][A
Train step of epoch 0:  57%|█████▋    | 3540/6250 [3:41:00<2:30:55,  3.34s/it, gpt_loss=0.682, lr=9.5e-7][A
Train step of epoch 0:  57%|█████▋    | 3541/6250 [3:41:00<2:38:28,  3.51s/it, gpt_loss=0.682, lr=9.5e-7][A
Train step of epoch 0:  57%|█████▋    | 3541/6250 [3:41:04<2:38:28,  3.51s/it, gpt_loss=0.563, lr=9.5e-7][A
Train step of epoch 0:  57%|█████▋    | 3542/6250 [3:41:04<2:48:51,  3.74s/it, gpt_loss=0.563, lr=9.5e-7][A
Train step of epoch 0:  57%|█████▋    | 3542/6250 [3:41:07<2:48:51,  3.74s/it, gpt_loss=0.645, lr=9.5e-7][A
Train step of epoch 0:  57%|█████▋    | 3543/6250 [3:41:07<2:37:33,  3.49s/it, gpt_loss=0.645, lr=9.5e-7][A[2025-04-24 03:33:49,951] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  57%|█████▋    | 3543/6250 [3:41:11<2:37:33,  3.49s/it, gpt_loss=0.637, lr=9.49e-7][A
Train step of epoch 0:  57%|█████▋    | 3544/6250 [3:41:11<2:37:07,  3.48s/it, gpt_loss=0.637, lr=9.49e-7][A
Train step of epoch 0:  57%|█████▋    | 3544/6250 [3:41:14<2:37:07,  3.48s/it, gpt_loss=0.573, lr=9.49e-7][A
Train step of epoch 0:  57%|█████▋    | 3545/6250 [3:41:14<2:37:20,  3.49s/it, gpt_loss=0.573, lr=9.49e-7][A
Train step of epoch 0:  57%|█████▋    | 3545/6250 [3:41:17<2:37:20,  3.49s/it, gpt_loss=0.662, lr=9.49e-7][A
Train step of epoch 0:  57%|█████▋    | 3546/6250 [3:41:17<2:33:25,  3.40s/it, gpt_loss=0.662, lr=9.49e-7][A
Train step of epoch 0:  57%|█████▋    | 3546/6250 [3:41:21<2:33:25,  3.40s/it, gpt_loss=0.613, lr=9.49e-7][A
Train step of epoch 0:  57%|█████▋    | 3547/6250 [3:41:21<2:35:07,  3.44s/it, gpt_loss=0.613, lr=9.49e-7][A[2025-04-24 03:34:03,529] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  57%|█████▋    | 3547/6250 [3:41:24<2:35:07,  3.44s/it, gpt_loss=0.711, lr=9.47e-7][A
Train step of epoch 0:  57%|█████▋    | 3548/6250 [3:41:24<2:33:36,  3.41s/it, gpt_loss=0.711, lr=9.47e-7][A
Train step of epoch 0:  57%|█████▋    | 3548/6250 [3:41:28<2:33:36,  3.41s/it, gpt_loss=0.471, lr=9.47e-7][A
Train step of epoch 0:  57%|█████▋    | 3549/6250 [3:41:28<2:31:30,  3.37s/it, gpt_loss=0.471, lr=9.47e-7][A
Train step of epoch 0:  57%|█████▋    | 3549/6250 [3:41:30<2:31:30,  3.37s/it, gpt_loss=0.344, lr=9.47e-7][A
Train step of epoch 0:  57%|█████▋    | 3550/6250 [3:41:30<2:21:43,  3.15s/it, gpt_loss=0.344, lr=9.47e-7][A
Train step of epoch 0:  57%|█████▋    | 3550/6250 [3:41:34<2:21:43,  3.15s/it, gpt_loss=0.539, lr=9.47e-7][A
Train step of epoch 0:  57%|█████▋    | 3551/6250 [3:41:34<2:31:17,  3.36s/it, gpt_loss=0.539, lr=9.47e-7][A[2025-04-24 03:34:16,741] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  57%|█████▋    | 3551/6250 [3:41:38<2:31:17,  3.36s/it, gpt_loss=0.624, lr=9.45e-7][A
Train step of epoch 0:  57%|█████▋    | 3552/6250 [3:41:38<2:32:19,  3.39s/it, gpt_loss=0.624, lr=9.45e-7][A
Train step of epoch 0:  57%|█████▋    | 3552/6250 [3:41:42<2:32:19,  3.39s/it, gpt_loss=0.875, lr=9.45e-7][A
Train step of epoch 0:  57%|█████▋    | 3553/6250 [3:41:42<2:46:06,  3.70s/it, gpt_loss=0.875, lr=9.45e-7][A
Train step of epoch 0:  57%|█████▋    | 3553/6250 [3:41:46<2:46:06,  3.70s/it, gpt_loss=0.6, lr=9.45e-7]  [A
Train step of epoch 0:  57%|█████▋    | 3554/6250 [3:41:46<2:44:46,  3.67s/it, gpt_loss=0.6, lr=9.45e-7][A
Train step of epoch 0:  57%|█████▋    | 3554/6250 [3:41:49<2:44:46,  3.67s/it, gpt_loss=0.608, lr=9.45e-7][A
Train step of epoch 0:  57%|█████▋    | 3555/6250 [3:41:49<2:39:27,  3.55s/it, gpt_loss=0.608, lr=9.45e-7][A[2025-04-24 03:34:31,414] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  57%|█████▋    | 3555/6250 [3:41:52<2:39:27,  3.55s/it, gpt_loss=0.53, lr=9.43e-7] [A
Train step of epoch 0:  57%|█████▋    | 3556/6250 [3:41:52<2:37:07,  3.50s/it, gpt_loss=0.53, lr=9.43e-7][A
Train step of epoch 0:  57%|█████▋    | 3556/6250 [3:41:56<2:37:07,  3.50s/it, gpt_loss=0.745, lr=9.43e-7][A
Train step of epoch 0:  57%|█████▋    | 3557/6250 [3:41:56<2:41:46,  3.60s/it, gpt_loss=0.745, lr=9.43e-7][A
Train step of epoch 0:  57%|█████▋    | 3557/6250 [3:41:59<2:41:46,  3.60s/it, gpt_loss=0.487, lr=9.43e-7][A
Train step of epoch 0:  57%|█████▋    | 3558/6250 [3:41:59<2:32:54,  3.41s/it, gpt_loss=0.487, lr=9.43e-7][A
Train step of epoch 0:  57%|█████▋    | 3558/6250 [3:42:03<2:32:54,  3.41s/it, gpt_loss=0.532, lr=9.43e-7][A
Train step of epoch 0:  57%|█████▋    | 3559/6250 [3:42:03<2:34:37,  3.45s/it, gpt_loss=0.532, lr=9.43e-7][A[2025-04-24 03:34:44,793] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  57%|█████▋    | 3559/6250 [3:42:06<2:34:37,  3.45s/it, gpt_loss=0.616, lr=9.41e-7][A
Train step of epoch 0:  57%|█████▋    | 3560/6250 [3:42:06<2:29:04,  3.33s/it, gpt_loss=0.616, lr=9.41e-7][A
Train step of epoch 0:  57%|█████▋    | 3560/6250 [3:42:10<2:29:04,  3.33s/it, gpt_loss=0.677, lr=9.41e-7][A
Train step of epoch 0:  57%|█████▋    | 3561/6250 [3:42:10<2:39:05,  3.55s/it, gpt_loss=0.677, lr=9.41e-7][A
Train step of epoch 0:  57%|█████▋    | 3561/6250 [3:42:15<2:39:05,  3.55s/it, gpt_loss=0.669, lr=9.41e-7][A
Train step of epoch 0:  57%|█████▋    | 3562/6250 [3:42:15<2:57:51,  3.97s/it, gpt_loss=0.669, lr=9.41e-7][A
Train step of epoch 0:  57%|█████▋    | 3562/6250 [3:42:18<2:57:51,  3.97s/it, gpt_loss=0.582, lr=9.41e-7][A
Train step of epoch 0:  57%|█████▋    | 3563/6250 [3:42:18<2:47:24,  3.74s/it, gpt_loss=0.582, lr=9.41e-7][A[2025-04-24 03:35:00,914] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  57%|█████▋    | 3563/6250 [3:42:22<2:47:24,  3.74s/it, gpt_loss=0.461, lr=9.39e-7][A
Train step of epoch 0:  57%|█████▋    | 3564/6250 [3:42:22<2:49:31,  3.79s/it, gpt_loss=0.461, lr=9.39e-7][A
Train step of epoch 0:  57%|█████▋    | 3564/6250 [3:42:26<2:49:31,  3.79s/it, gpt_loss=0.565, lr=9.39e-7][A
Train step of epoch 0:  57%|█████▋    | 3565/6250 [3:42:26<2:51:25,  3.83s/it, gpt_loss=0.565, lr=9.39e-7][A
Train step of epoch 0:  57%|█████▋    | 3565/6250 [3:42:29<2:51:25,  3.83s/it, gpt_loss=0.735, lr=9.39e-7][A
Train step of epoch 0:  57%|█████▋    | 3566/6250 [3:42:29<2:42:16,  3.63s/it, gpt_loss=0.735, lr=9.39e-7][A
Train step of epoch 0:  57%|█████▋    | 3566/6250 [3:42:33<2:42:16,  3.63s/it, gpt_loss=0.67, lr=9.39e-7] [A
Train step of epoch 0:  57%|█████▋    | 3567/6250 [3:42:33<2:46:18,  3.72s/it, gpt_loss=0.67, lr=9.39e-7][A[2025-04-24 03:35:15,860] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  57%|█████▋    | 3567/6250 [3:42:37<2:46:18,  3.72s/it, gpt_loss=0.618, lr=9.38e-7][A
Train step of epoch 0:  57%|█████▋    | 3568/6250 [3:42:37<2:49:00,  3.78s/it, gpt_loss=0.618, lr=9.38e-7][A
Train step of epoch 0:  57%|█████▋    | 3568/6250 [3:42:40<2:49:00,  3.78s/it, gpt_loss=0.654, lr=9.38e-7][A
Train step of epoch 0:  57%|█████▋    | 3569/6250 [3:42:40<2:40:22,  3.59s/it, gpt_loss=0.654, lr=9.38e-7][A
Train step of epoch 0:  57%|█████▋    | 3569/6250 [3:42:44<2:40:22,  3.59s/it, gpt_loss=0.743, lr=9.38e-7][A
Train step of epoch 0:  57%|█████▋    | 3570/6250 [3:42:44<2:49:15,  3.79s/it, gpt_loss=0.743, lr=9.38e-7][A
Train step of epoch 0:  57%|█████▋    | 3570/6250 [3:42:47<2:49:15,  3.79s/it, gpt_loss=0.622, lr=9.38e-7][A
Train step of epoch 0:  57%|█████▋    | 3571/6250 [3:42:47<2:43:39,  3.67s/it, gpt_loss=0.622, lr=9.38e-7][A[2025-04-24 03:35:30,217] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  57%|█████▋    | 3571/6250 [3:42:51<2:43:39,  3.67s/it, gpt_loss=0.633, lr=9.36e-7][A
Train step of epoch 0:  57%|█████▋    | 3572/6250 [3:42:51<2:42:29,  3.64s/it, gpt_loss=0.633, lr=9.36e-7][A
Train step of epoch 0:  57%|█████▋    | 3572/6250 [3:42:54<2:42:29,  3.64s/it, gpt_loss=0.661, lr=9.36e-7][A
Train step of epoch 0:  57%|█████▋    | 3573/6250 [3:42:54<2:38:59,  3.56s/it, gpt_loss=0.661, lr=9.36e-7][A
Train step of epoch 0:  57%|█████▋    | 3573/6250 [3:42:59<2:38:59,  3.56s/it, gpt_loss=0.517, lr=9.36e-7][A
Train step of epoch 0:  57%|█████▋    | 3574/6250 [3:42:59<2:47:23,  3.75s/it, gpt_loss=0.517, lr=9.36e-7][A
Train step of epoch 0:  57%|█████▋    | 3574/6250 [3:43:03<2:47:23,  3.75s/it, gpt_loss=0.63, lr=9.36e-7] [A
Train step of epoch 0:  57%|█████▋    | 3575/6250 [3:43:03<2:50:41,  3.83s/it, gpt_loss=0.63, lr=9.36e-7][A[2025-04-24 03:35:45,416] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  57%|█████▋    | 3575/6250 [3:43:06<2:50:41,  3.83s/it, gpt_loss=0.41, lr=9.34e-7][A
Train step of epoch 0:  57%|█████▋    | 3576/6250 [3:43:06<2:47:46,  3.76s/it, gpt_loss=0.41, lr=9.34e-7][A
Train step of epoch 0:  57%|█████▋    | 3576/6250 [3:43:10<2:47:46,  3.76s/it, gpt_loss=0.58, lr=9.34e-7][A
Train step of epoch 0:  57%|█████▋    | 3577/6250 [3:43:10<2:51:09,  3.84s/it, gpt_loss=0.58, lr=9.34e-7][A
Train step of epoch 0:  57%|█████▋    | 3577/6250 [3:43:14<2:51:09,  3.84s/it, gpt_loss=0.626, lr=9.34e-7][A
Train step of epoch 0:  57%|█████▋    | 3578/6250 [3:43:14<2:48:43,  3.79s/it, gpt_loss=0.626, lr=9.34e-7][A
Train step of epoch 0:  57%|█████▋    | 3578/6250 [3:43:18<2:48:43,  3.79s/it, gpt_loss=0.596, lr=9.34e-7][A
Train step of epoch 0:  57%|█████▋    | 3579/6250 [3:43:18<2:53:42,  3.90s/it, gpt_loss=0.596, lr=9.34e-7][A[2025-04-24 03:36:00,754] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  57%|█████▋    | 3579/6250 [3:43:22<2:53:42,  3.90s/it, gpt_loss=0.439, lr=9.32e-7][A
Train step of epoch 0:  57%|█████▋    | 3580/6250 [3:43:22<2:48:03,  3.78s/it, gpt_loss=0.439, lr=9.32e-7][A
Train step of epoch 0:  57%|█████▋    | 3580/6250 [3:43:25<2:48:03,  3.78s/it, gpt_loss=0.73, lr=9.32e-7] [A
Train step of epoch 0:  57%|█████▋    | 3581/6250 [3:43:25<2:48:54,  3.80s/it, gpt_loss=0.73, lr=9.32e-7][A
Train step of epoch 0:  57%|█████▋    | 3581/6250 [3:43:29<2:48:54,  3.80s/it, gpt_loss=0.426, lr=9.32e-7][A
Train step of epoch 0:  57%|█████▋    | 3582/6250 [3:43:29<2:42:32,  3.66s/it, gpt_loss=0.426, lr=9.32e-7][A
Train step of epoch 0:  57%|█████▋    | 3582/6250 [3:43:32<2:42:32,  3.66s/it, gpt_loss=0.544, lr=9.32e-7][A
Train step of epoch 0:  57%|█████▋    | 3583/6250 [3:43:32<2:35:46,  3.50s/it, gpt_loss=0.544, lr=9.32e-7][A[2025-04-24 03:36:15,208] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  57%|█████▋    | 3583/6250 [3:43:36<2:35:46,  3.50s/it, gpt_loss=0.685, lr=9.3e-7] [A
Train step of epoch 0:  57%|█████▋    | 3584/6250 [3:43:36<2:44:04,  3.69s/it, gpt_loss=0.685, lr=9.3e-7][A
Train step of epoch 0:  57%|█████▋    | 3584/6250 [3:43:40<2:44:04,  3.69s/it, gpt_loss=0.557, lr=9.3e-7][A
Train step of epoch 0:  57%|█████▋    | 3585/6250 [3:43:40<2:42:18,  3.65s/it, gpt_loss=0.557, lr=9.3e-7][A
Train step of epoch 0:  57%|█████▋    | 3585/6250 [3:43:43<2:42:18,  3.65s/it, gpt_loss=0.602, lr=9.3e-7][A
Train step of epoch 0:  57%|█████▋    | 3586/6250 [3:43:43<2:44:07,  3.70s/it, gpt_loss=0.602, lr=9.3e-7][A
Train step of epoch 0:  57%|█████▋    | 3586/6250 [3:43:47<2:44:07,  3.70s/it, gpt_loss=0.614, lr=9.3e-7][A
Train step of epoch 0:  57%|█████▋    | 3587/6250 [3:43:47<2:39:32,  3.59s/it, gpt_loss=0.614, lr=9.3e-7][A[2025-04-24 03:36:30,207] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  57%|█████▋    | 3587/6250 [3:43:51<2:39:32,  3.59s/it, gpt_loss=0.594, lr=9.28e-7][A
Train step of epoch 0:  57%|█████▋    | 3588/6250 [3:43:51<2:48:38,  3.80s/it, gpt_loss=0.594, lr=9.28e-7][A
Train step of epoch 0:  57%|█████▋    | 3588/6250 [3:43:56<2:48:38,  3.80s/it, gpt_loss=0.796, lr=9.28e-7][A
Train step of epoch 0:  57%|█████▋    | 3589/6250 [3:43:56<3:05:32,  4.18s/it, gpt_loss=0.796, lr=9.28e-7][A
Train step of epoch 0:  57%|█████▋    | 3589/6250 [3:43:59<3:05:32,  4.18s/it, gpt_loss=0.499, lr=9.28e-7][A
Train step of epoch 0:  57%|█████▋    | 3590/6250 [3:43:59<2:54:34,  3.94s/it, gpt_loss=0.499, lr=9.28e-7][A
Train step of epoch 0:  57%|█████▋    | 3590/6250 [3:44:03<2:54:34,  3.94s/it, gpt_loss=0.572, lr=9.28e-7][A
Train step of epoch 0:  57%|█████▋    | 3591/6250 [3:44:03<2:48:35,  3.80s/it, gpt_loss=0.572, lr=9.28e-7][A[2025-04-24 03:36:45,830] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  57%|█████▋    | 3591/6250 [3:44:07<2:48:35,  3.80s/it, gpt_loss=0.598, lr=9.27e-7][A
Train step of epoch 0:  57%|█████▋    | 3592/6250 [3:44:07<2:47:00,  3.77s/it, gpt_loss=0.598, lr=9.27e-7][A
Train step of epoch 0:  57%|█████▋    | 3592/6250 [3:44:10<2:47:00,  3.77s/it, gpt_loss=0.474, lr=9.27e-7][A
Train step of epoch 0:  57%|█████▋    | 3593/6250 [3:44:10<2:36:50,  3.54s/it, gpt_loss=0.474, lr=9.27e-7][A
Train step of epoch 0:  57%|█████▋    | 3593/6250 [3:44:13<2:36:50,  3.54s/it, gpt_loss=0.534, lr=9.27e-7][A
Train step of epoch 0:  58%|█████▊    | 3594/6250 [3:44:13<2:40:46,  3.63s/it, gpt_loss=0.534, lr=9.27e-7][A
Train step of epoch 0:  58%|█████▊    | 3594/6250 [3:44:18<2:40:46,  3.63s/it, gpt_loss=0.521, lr=9.27e-7][A
Train step of epoch 0:  58%|█████▊    | 3595/6250 [3:44:18<2:49:44,  3.84s/it, gpt_loss=0.521, lr=9.27e-7][A[2025-04-24 03:37:00,249] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  58%|█████▊    | 3595/6250 [3:44:21<2:49:44,  3.84s/it, gpt_loss=0.487, lr=9.25e-7][A
Train step of epoch 0:  58%|█████▊    | 3596/6250 [3:44:21<2:41:58,  3.66s/it, gpt_loss=0.487, lr=9.25e-7][A
Train step of epoch 0:  58%|█████▊    | 3596/6250 [3:44:25<2:41:58,  3.66s/it, gpt_loss=0.632, lr=9.25e-7][A
Train step of epoch 0:  58%|█████▊    | 3597/6250 [3:44:25<2:41:09,  3.64s/it, gpt_loss=0.632, lr=9.25e-7][A
Train step of epoch 0:  58%|█████▊    | 3597/6250 [3:44:28<2:41:09,  3.64s/it, gpt_loss=0.452, lr=9.25e-7][A
Train step of epoch 0:  58%|█████▊    | 3598/6250 [3:44:28<2:40:57,  3.64s/it, gpt_loss=0.452, lr=9.25e-7][A
Train step of epoch 0:  58%|█████▊    | 3598/6250 [3:44:32<2:40:57,  3.64s/it, gpt_loss=0.67, lr=9.25e-7] [A
Train step of epoch 0:  58%|█████▊    | 3599/6250 [3:44:32<2:43:33,  3.70s/it, gpt_loss=0.67, lr=9.25e-7][A[2025-04-24 03:37:15,989] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-04-24 03:37:15,989] [INFO] [logging.py:107:log_dist] [Rank 0] step=900, skipped=0, lr=[9.229317337964641e-07, 9.229317337964641e-07], mom=[(0.9, 0.95), (0.9, 0.95)]
[2025-04-24 03:37:15,990] [INFO] [timer.py:264:stop] epoch=0/micro_step=3600/global_step=900, RunningAvgSamplesPerSec=2.2232751892414093, CurrSamplesPerSec=2.1102653805050724, MemAllocated=40.57GB, MaxMemAllocated=60.14GB

Train step of epoch 0:  58%|█████▊    | 3599/6250 [3:44:37<2:43:33,  3.70s/it, gpt_loss=0.579, lr=9.23e-7][A
Train step of epoch 0:  58%|█████▊    | 3600/6250 [3:44:37<2:56:10,  3.99s/it, gpt_loss=0.579, lr=9.23e-7][A
Train step of epoch 0:  58%|█████▊    | 3600/6250 [3:44:40<2:56:10,  3.99s/it, gpt_loss=0.66, lr=9.23e-7] [A
Train step of epoch 0:  58%|█████▊    | 3601/6250 [3:44:40<2:50:52,  3.87s/it, gpt_loss=0.66, lr=9.23e-7][A
Train step of epoch 0:  58%|█████▊    | 3601/6250 [3:44:45<2:50:52,  3.87s/it, gpt_loss=0.616, lr=9.23e-7][A
Train step of epoch 0:  58%|█████▊    | 3602/6250 [3:44:45<2:58:52,  4.05s/it, gpt_loss=0.616, lr=9.23e-7][A
Train step of epoch 0:  58%|█████▊    | 3602/6250 [3:44:49<2:58:52,  4.05s/it, gpt_loss=0.526, lr=9.23e-7][A
Train step of epoch 0:  58%|█████▊    | 3603/6250 [3:44:49<2:59:46,  4.08s/it, gpt_loss=0.526, lr=9.23e-7][A[2025-04-24 03:37:31,384] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  58%|█████▊    | 3603/6250 [3:44:52<2:59:46,  4.08s/it, gpt_loss=0.583, lr=9.21e-7][A
Train step of epoch 0:  58%|█████▊    | 3604/6250 [3:44:52<2:48:04,  3.81s/it, gpt_loss=0.583, lr=9.21e-7][A
Train step of epoch 0:  58%|█████▊    | 3604/6250 [3:44:56<2:48:04,  3.81s/it, gpt_loss=0.628, lr=9.21e-7][A
Train step of epoch 0:  58%|█████▊    | 3605/6250 [3:44:56<2:50:18,  3.86s/it, gpt_loss=0.628, lr=9.21e-7][A
Train step of epoch 0:  58%|█████▊    | 3605/6250 [3:45:00<2:50:18,  3.86s/it, gpt_loss=0.501, lr=9.21e-7][A
Train step of epoch 0:  58%|█████▊    | 3606/6250 [3:45:00<2:51:11,  3.88s/it, gpt_loss=0.501, lr=9.21e-7][A
Train step of epoch 0:  58%|█████▊    | 3606/6250 [3:45:04<2:51:11,  3.88s/it, gpt_loss=0.527, lr=9.21e-7][A
Train step of epoch 0:  58%|█████▊    | 3607/6250 [3:45:04<2:52:21,  3.91s/it, gpt_loss=0.527, lr=9.21e-7][A[2025-04-24 03:37:47,591] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  58%|█████▊    | 3607/6250 [3:45:08<2:52:21,  3.91s/it, gpt_loss=0.838, lr=9.19e-7][A
Train step of epoch 0:  58%|█████▊    | 3608/6250 [3:45:08<2:57:31,  4.03s/it, gpt_loss=0.838, lr=9.19e-7][A
Train step of epoch 0:  58%|█████▊    | 3608/6250 [3:45:12<2:57:31,  4.03s/it, gpt_loss=0.625, lr=9.19e-7][A
Train step of epoch 0:  58%|█████▊    | 3609/6250 [3:45:12<2:49:59,  3.86s/it, gpt_loss=0.625, lr=9.19e-7][A
Train step of epoch 0:  58%|█████▊    | 3609/6250 [3:45:15<2:49:59,  3.86s/it, gpt_loss=0.534, lr=9.19e-7][A
Train step of epoch 0:  58%|█████▊    | 3610/6250 [3:45:15<2:36:14,  3.55s/it, gpt_loss=0.534, lr=9.19e-7][A
Train step of epoch 0:  58%|█████▊    | 3610/6250 [3:45:18<2:36:14,  3.55s/it, gpt_loss=0.573, lr=9.19e-7][A
Train step of epoch 0:  58%|█████▊    | 3611/6250 [3:45:18<2:32:08,  3.46s/it, gpt_loss=0.573, lr=9.19e-7][A[2025-04-24 03:38:00,923] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  58%|█████▊    | 3611/6250 [3:45:22<2:32:08,  3.46s/it, gpt_loss=0.654, lr=9.17e-7][A
Train step of epoch 0:  58%|█████▊    | 3612/6250 [3:45:22<2:36:31,  3.56s/it, gpt_loss=0.654, lr=9.17e-7][A
Train step of epoch 0:  58%|█████▊    | 3612/6250 [3:45:25<2:36:31,  3.56s/it, gpt_loss=0.594, lr=9.17e-7][A
Train step of epoch 0:  58%|█████▊    | 3613/6250 [3:45:25<2:33:51,  3.50s/it, gpt_loss=0.594, lr=9.17e-7][A
Train step of epoch 0:  58%|█████▊    | 3613/6250 [3:45:29<2:33:51,  3.50s/it, gpt_loss=0.594, lr=9.17e-7][A
Train step of epoch 0:  58%|█████▊    | 3614/6250 [3:45:29<2:40:50,  3.66s/it, gpt_loss=0.594, lr=9.17e-7][A
Train step of epoch 0:  58%|█████▊    | 3614/6250 [3:45:33<2:40:50,  3.66s/it, gpt_loss=0.524, lr=9.17e-7][A
Train step of epoch 0:  58%|█████▊    | 3615/6250 [3:45:33<2:38:25,  3.61s/it, gpt_loss=0.524, lr=9.17e-7][A[2025-04-24 03:38:15,991] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  58%|█████▊    | 3615/6250 [3:45:37<2:38:25,  3.61s/it, gpt_loss=0.774, lr=9.16e-7][A
Train step of epoch 0:  58%|█████▊    | 3616/6250 [3:45:37<2:46:00,  3.78s/it, gpt_loss=0.774, lr=9.16e-7][A
Train step of epoch 0:  58%|█████▊    | 3616/6250 [3:45:41<2:46:00,  3.78s/it, gpt_loss=0.762, lr=9.16e-7][A
Train step of epoch 0:  58%|█████▊    | 3617/6250 [3:45:41<2:49:12,  3.86s/it, gpt_loss=0.762, lr=9.16e-7][A
Train step of epoch 0:  58%|█████▊    | 3617/6250 [3:45:45<2:49:12,  3.86s/it, gpt_loss=0.699, lr=9.16e-7][A
Train step of epoch 0:  58%|█████▊    | 3618/6250 [3:45:45<2:49:30,  3.86s/it, gpt_loss=0.699, lr=9.16e-7][A
Train step of epoch 0:  58%|█████▊    | 3618/6250 [3:45:50<2:49:30,  3.86s/it, gpt_loss=0.697, lr=9.16e-7][A
Train step of epoch 0:  58%|█████▊    | 3619/6250 [3:45:50<3:05:01,  4.22s/it, gpt_loss=0.697, lr=9.16e-7][A[2025-04-24 03:38:33,350] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  58%|█████▊    | 3619/6250 [3:45:54<3:05:01,  4.22s/it, gpt_loss=0.611, lr=9.14e-7][A
Train step of epoch 0:  58%|█████▊    | 3620/6250 [3:45:54<3:07:18,  4.27s/it, gpt_loss=0.611, lr=9.14e-7][A
Train step of epoch 0:  58%|█████▊    | 3620/6250 [3:45:58<3:07:18,  4.27s/it, gpt_loss=0.54, lr=9.14e-7] [A
Train step of epoch 0:  58%|█████▊    | 3621/6250 [3:45:58<3:06:08,  4.25s/it, gpt_loss=0.54, lr=9.14e-7][A
Train step of epoch 0:  58%|█████▊    | 3621/6250 [3:46:03<3:06:08,  4.25s/it, gpt_loss=0.701, lr=9.14e-7][A
Train step of epoch 0:  58%|█████▊    | 3622/6250 [3:46:03<3:10:39,  4.35s/it, gpt_loss=0.701, lr=9.14e-7][A
Train step of epoch 0:  58%|█████▊    | 3622/6250 [3:46:06<3:10:39,  4.35s/it, gpt_loss=0.635, lr=9.14e-7][A
Train step of epoch 0:  58%|█████▊    | 3623/6250 [3:46:06<3:00:00,  4.11s/it, gpt_loss=0.635, lr=9.14e-7][A[2025-04-24 03:38:49,837] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  58%|█████▊    | 3623/6250 [3:46:11<3:00:00,  4.11s/it, gpt_loss=0.685, lr=9.12e-7][A
Train step of epoch 0:  58%|█████▊    | 3624/6250 [3:46:11<3:00:30,  4.12s/it, gpt_loss=0.685, lr=9.12e-7][A
Train step of epoch 0:  58%|█████▊    | 3624/6250 [3:46:14<3:00:30,  4.12s/it, gpt_loss=0.802, lr=9.12e-7][A
Train step of epoch 0:  58%|█████▊    | 3625/6250 [3:46:14<2:57:02,  4.05s/it, gpt_loss=0.802, lr=9.12e-7][A
Train step of epoch 0:  58%|█████▊    | 3625/6250 [3:46:18<2:57:02,  4.05s/it, gpt_loss=0.569, lr=9.12e-7][A
Train step of epoch 0:  58%|█████▊    | 3626/6250 [3:46:18<2:45:45,  3.79s/it, gpt_loss=0.569, lr=9.12e-7][A
Train step of epoch 0:  58%|█████▊    | 3626/6250 [3:46:22<2:45:45,  3.79s/it, gpt_loss=0.658, lr=9.12e-7][A
Train step of epoch 0:  58%|█████▊    | 3627/6250 [3:46:22<2:49:00,  3.87s/it, gpt_loss=0.658, lr=9.12e-7][A[2025-04-24 03:39:04,113] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  58%|█████▊    | 3627/6250 [3:46:25<2:49:00,  3.87s/it, gpt_loss=0.796, lr=9.1e-7] [A
Train step of epoch 0:  58%|█████▊    | 3628/6250 [3:46:25<2:39:52,  3.66s/it, gpt_loss=0.796, lr=9.1e-7][A
Train step of epoch 0:  58%|█████▊    | 3628/6250 [3:46:29<2:39:52,  3.66s/it, gpt_loss=0.607, lr=9.1e-7][A
Train step of epoch 0:  58%|█████▊    | 3629/6250 [3:46:29<2:41:33,  3.70s/it, gpt_loss=0.607, lr=9.1e-7][A
Train step of epoch 0:  58%|█████▊    | 3629/6250 [3:46:32<2:41:33,  3.70s/it, gpt_loss=0.64, lr=9.1e-7] [A
Train step of epoch 0:  58%|█████▊    | 3630/6250 [3:46:32<2:34:35,  3.54s/it, gpt_loss=0.64, lr=9.1e-7][A
Train step of epoch 0:  58%|█████▊    | 3630/6250 [3:46:35<2:34:35,  3.54s/it, gpt_loss=0.72, lr=9.1e-7][A
Train step of epoch 0:  58%|█████▊    | 3631/6250 [3:46:35<2:34:41,  3.54s/it, gpt_loss=0.72, lr=9.1e-7][A[2025-04-24 03:39:22,078] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  58%|█████▊    | 3631/6250 [3:46:43<2:34:41,  3.54s/it, gpt_loss=0.467, lr=9.08e-7][A
Train step of epoch 0:  58%|█████▊    | 3632/6250 [3:46:43<3:25:46,  4.72s/it, gpt_loss=0.467, lr=9.08e-7][A
Train step of epoch 0:  58%|█████▊    | 3632/6250 [3:46:46<3:25:46,  4.72s/it, gpt_loss=0.577, lr=9.08e-7][A
Train step of epoch 0:  58%|█████▊    | 3633/6250 [3:46:46<3:07:20,  4.30s/it, gpt_loss=0.577, lr=9.08e-7][A
Train step of epoch 0:  58%|█████▊    | 3633/6250 [3:46:49<3:07:20,  4.30s/it, gpt_loss=0.7, lr=9.08e-7]  [A
Train step of epoch 0:  58%|█████▊    | 3634/6250 [3:46:49<2:52:34,  3.96s/it, gpt_loss=0.7, lr=9.08e-7][A
Train step of epoch 0:  58%|█████▊    | 3634/6250 [3:46:53<2:52:34,  3.96s/it, gpt_loss=0.548, lr=9.08e-7][A
Train step of epoch 0:  58%|█████▊    | 3635/6250 [3:46:53<2:51:17,  3.93s/it, gpt_loss=0.548, lr=9.08e-7][A[2025-04-24 03:39:36,013] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  58%|█████▊    | 3635/6250 [3:46:57<2:51:17,  3.93s/it, gpt_loss=0.665, lr=9.06e-7][A
Train step of epoch 0:  58%|█████▊    | 3636/6250 [3:46:57<2:46:41,  3.83s/it, gpt_loss=0.665, lr=9.06e-7][A
Train step of epoch 0:  58%|█████▊    | 3636/6250 [3:47:00<2:46:41,  3.83s/it, gpt_loss=0.579, lr=9.06e-7][A
Train step of epoch 0:  58%|█████▊    | 3637/6250 [3:47:00<2:43:14,  3.75s/it, gpt_loss=0.579, lr=9.06e-7][A
Train step of epoch 0:  58%|█████▊    | 3637/6250 [3:47:04<2:43:14,  3.75s/it, gpt_loss=0.556, lr=9.06e-7][A
Train step of epoch 0:  58%|█████▊    | 3638/6250 [3:47:04<2:41:28,  3.71s/it, gpt_loss=0.556, lr=9.06e-7][A
Train step of epoch 0:  58%|█████▊    | 3638/6250 [3:47:07<2:41:28,  3.71s/it, gpt_loss=0.577, lr=9.06e-7][A
Train step of epoch 0:  58%|█████▊    | 3639/6250 [3:47:07<2:39:02,  3.65s/it, gpt_loss=0.577, lr=9.06e-7][A[2025-04-24 03:39:50,500] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  58%|█████▊    | 3639/6250 [3:47:11<2:39:02,  3.65s/it, gpt_loss=0.529, lr=9.05e-7][A
Train step of epoch 0:  58%|█████▊    | 3640/6250 [3:47:11<2:40:32,  3.69s/it, gpt_loss=0.529, lr=9.05e-7][A
Train step of epoch 0:  58%|█████▊    | 3640/6250 [3:47:15<2:40:32,  3.69s/it, gpt_loss=0.631, lr=9.05e-7][A
Train step of epoch 0:  58%|█████▊    | 3641/6250 [3:47:15<2:42:24,  3.73s/it, gpt_loss=0.631, lr=9.05e-7][A
Train step of epoch 0:  58%|█████▊    | 3641/6250 [3:47:18<2:42:24,  3.73s/it, gpt_loss=0.71, lr=9.05e-7] [A
Train step of epoch 0:  58%|█████▊    | 3642/6250 [3:47:18<2:29:41,  3.44s/it, gpt_loss=0.71, lr=9.05e-7][A
Train step of epoch 0:  58%|█████▊    | 3642/6250 [3:47:22<2:29:41,  3.44s/it, gpt_loss=0.545, lr=9.05e-7][A
Train step of epoch 0:  58%|█████▊    | 3643/6250 [3:47:22<2:35:40,  3.58s/it, gpt_loss=0.545, lr=9.05e-7][A[2025-04-24 03:40:05,090] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  58%|█████▊    | 3643/6250 [3:47:26<2:35:40,  3.58s/it, gpt_loss=0.601, lr=9.03e-7][A
Train step of epoch 0:  58%|█████▊    | 3644/6250 [3:47:26<2:42:06,  3.73s/it, gpt_loss=0.601, lr=9.03e-7][A
Train step of epoch 0:  58%|█████▊    | 3644/6250 [3:47:30<2:42:06,  3.73s/it, gpt_loss=0.785, lr=9.03e-7][A
Train step of epoch 0:  58%|█████▊    | 3645/6250 [3:47:30<2:44:07,  3.78s/it, gpt_loss=0.785, lr=9.03e-7][A
Train step of epoch 0:  58%|█████▊    | 3645/6250 [3:47:33<2:44:07,  3.78s/it, gpt_loss=0.437, lr=9.03e-7][A
Train step of epoch 0:  58%|█████▊    | 3646/6250 [3:47:33<2:34:28,  3.56s/it, gpt_loss=0.437, lr=9.03e-7][A
Train step of epoch 0:  58%|█████▊    | 3646/6250 [3:47:37<2:34:28,  3.56s/it, gpt_loss=0.677, lr=9.03e-7][A
Train step of epoch 0:  58%|█████▊    | 3647/6250 [3:47:37<2:42:30,  3.75s/it, gpt_loss=0.677, lr=9.03e-7][A[2025-04-24 03:40:19,672] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  58%|█████▊    | 3647/6250 [3:47:40<2:42:30,  3.75s/it, gpt_loss=0.621, lr=9.01e-7][A
Train step of epoch 0:  58%|█████▊    | 3648/6250 [3:47:40<2:38:46,  3.66s/it, gpt_loss=0.621, lr=9.01e-7][A
Train step of epoch 0:  58%|█████▊    | 3648/6250 [3:47:44<2:38:46,  3.66s/it, gpt_loss=0.639, lr=9.01e-7][A
Train step of epoch 0:  58%|█████▊    | 3649/6250 [3:47:44<2:39:51,  3.69s/it, gpt_loss=0.639, lr=9.01e-7][A
Train step of epoch 0:  58%|█████▊    | 3649/6250 [3:47:47<2:39:51,  3.69s/it, gpt_loss=0.503, lr=9.01e-7][A
Train step of epoch 0:  58%|█████▊    | 3650/6250 [3:47:47<2:30:34,  3.47s/it, gpt_loss=0.503, lr=9.01e-7][A
Train step of epoch 0:  58%|█████▊    | 3650/6250 [3:47:51<2:30:34,  3.47s/it, gpt_loss=0.627, lr=9.01e-7][A
Train step of epoch 0:  58%|█████▊    | 3651/6250 [3:47:51<2:39:28,  3.68s/it, gpt_loss=0.627, lr=9.01e-7][A[2025-04-24 03:40:35,278] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  58%|█████▊    | 3651/6250 [3:47:56<2:39:28,  3.68s/it, gpt_loss=0.523, lr=8.99e-7][A
Train step of epoch 0:  58%|█████▊    | 3652/6250 [3:47:56<2:52:50,  3.99s/it, gpt_loss=0.523, lr=8.99e-7][A
Train step of epoch 0:  58%|█████▊    | 3652/6250 [3:48:00<2:52:50,  3.99s/it, gpt_loss=0.768, lr=8.99e-7][A
Train step of epoch 0:  58%|█████▊    | 3653/6250 [3:48:00<2:55:10,  4.05s/it, gpt_loss=0.768, lr=8.99e-7][A
Train step of epoch 0:  58%|█████▊    | 3653/6250 [3:48:04<2:55:10,  4.05s/it, gpt_loss=0.464, lr=8.99e-7][A
Train step of epoch 0:  58%|█████▊    | 3654/6250 [3:48:04<2:50:22,  3.94s/it, gpt_loss=0.464, lr=8.99e-7][A
Train step of epoch 0:  58%|█████▊    | 3654/6250 [3:48:08<2:50:22,  3.94s/it, gpt_loss=0.548, lr=8.99e-7][A
Train step of epoch 0:  58%|█████▊    | 3655/6250 [3:48:08<2:47:42,  3.88s/it, gpt_loss=0.548, lr=8.99e-7][A[2025-04-24 03:40:50,705] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  58%|█████▊    | 3655/6250 [3:48:11<2:47:42,  3.88s/it, gpt_loss=0.613, lr=8.97e-7][A
Train step of epoch 0:  58%|█████▊    | 3656/6250 [3:48:11<2:47:01,  3.86s/it, gpt_loss=0.613, lr=8.97e-7][A
Train step of epoch 0:  58%|█████▊    | 3656/6250 [3:48:16<2:47:01,  3.86s/it, gpt_loss=0.628, lr=8.97e-7][A
Train step of epoch 0:  59%|█████▊    | 3657/6250 [3:48:16<2:52:58,  4.00s/it, gpt_loss=0.628, lr=8.97e-7][A
Train step of epoch 0:  59%|█████▊    | 3657/6250 [3:48:20<2:52:58,  4.00s/it, gpt_loss=0.675, lr=8.97e-7][A
Train step of epoch 0:  59%|█████▊    | 3658/6250 [3:48:20<2:50:06,  3.94s/it, gpt_loss=0.675, lr=8.97e-7][A
Train step of epoch 0:  59%|█████▊    | 3658/6250 [3:48:24<2:50:06,  3.94s/it, gpt_loss=0.559, lr=8.97e-7][A
Train step of epoch 0:  59%|█████▊    | 3659/6250 [3:48:24<2:50:07,  3.94s/it, gpt_loss=0.559, lr=8.97e-7][A[2025-04-24 03:41:05,898] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  59%|█████▊    | 3659/6250 [3:48:27<2:50:07,  3.94s/it, gpt_loss=0.561, lr=8.96e-7][A
Train step of epoch 0:  59%|█████▊    | 3660/6250 [3:48:27<2:39:39,  3.70s/it, gpt_loss=0.561, lr=8.96e-7][A
Train step of epoch 0:  59%|█████▊    | 3660/6250 [3:48:30<2:39:39,  3.70s/it, gpt_loss=0.404, lr=8.96e-7][A
Train step of epoch 0:  59%|█████▊    | 3661/6250 [3:48:30<2:33:23,  3.55s/it, gpt_loss=0.404, lr=8.96e-7][A
Train step of epoch 0:  59%|█████▊    | 3661/6250 [3:48:33<2:33:23,  3.55s/it, gpt_loss=0.592, lr=8.96e-7][A
Train step of epoch 0:  59%|█████▊    | 3662/6250 [3:48:33<2:28:03,  3.43s/it, gpt_loss=0.592, lr=8.96e-7][A
Train step of epoch 0:  59%|█████▊    | 3662/6250 [3:48:37<2:28:03,  3.43s/it, gpt_loss=0.488, lr=8.96e-7][A
Train step of epoch 0:  59%|█████▊    | 3663/6250 [3:48:37<2:32:27,  3.54s/it, gpt_loss=0.488, lr=8.96e-7][A[2025-04-24 03:41:19,035] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  59%|█████▊    | 3663/6250 [3:48:40<2:32:27,  3.54s/it, gpt_loss=0.392, lr=8.94e-7][A
Train step of epoch 0:  59%|█████▊    | 3664/6250 [3:48:40<2:25:21,  3.37s/it, gpt_loss=0.392, lr=8.94e-7][A
Train step of epoch 0:  59%|█████▊    | 3664/6250 [3:48:44<2:25:21,  3.37s/it, gpt_loss=0.709, lr=8.94e-7][A
Train step of epoch 0:  59%|█████▊    | 3665/6250 [3:48:44<2:34:46,  3.59s/it, gpt_loss=0.709, lr=8.94e-7][A
Train step of epoch 0:  59%|█████▊    | 3665/6250 [3:48:47<2:34:46,  3.59s/it, gpt_loss=0.682, lr=8.94e-7][A
Train step of epoch 0:  59%|█████▊    | 3666/6250 [3:48:47<2:30:39,  3.50s/it, gpt_loss=0.682, lr=8.94e-7][A
Train step of epoch 0:  59%|█████▊    | 3666/6250 [3:48:51<2:30:39,  3.50s/it, gpt_loss=0.716, lr=8.94e-7][A
Train step of epoch 0:  59%|█████▊    | 3667/6250 [3:48:51<2:33:53,  3.57s/it, gpt_loss=0.716, lr=8.94e-7][A[2025-04-24 03:41:34,040] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  59%|█████▊    | 3667/6250 [3:48:55<2:33:53,  3.57s/it, gpt_loss=0.716, lr=8.92e-7][A
Train step of epoch 0:  59%|█████▊    | 3668/6250 [3:48:55<2:37:37,  3.66s/it, gpt_loss=0.716, lr=8.92e-7][A
Train step of epoch 0:  59%|█████▊    | 3668/6250 [3:48:59<2:37:37,  3.66s/it, gpt_loss=0.623, lr=8.92e-7][A
Train step of epoch 0:  59%|█████▊    | 3669/6250 [3:48:59<2:48:16,  3.91s/it, gpt_loss=0.623, lr=8.92e-7][A
Train step of epoch 0:  59%|█████▊    | 3669/6250 [3:49:03<2:48:16,  3.91s/it, gpt_loss=0.649, lr=8.92e-7][A
Train step of epoch 0:  59%|█████▊    | 3670/6250 [3:49:03<2:46:57,  3.88s/it, gpt_loss=0.649, lr=8.92e-7][A
Train step of epoch 0:  59%|█████▊    | 3670/6250 [3:49:07<2:46:57,  3.88s/it, gpt_loss=0.62, lr=8.92e-7] [A
Train step of epoch 0:  59%|█████▊    | 3671/6250 [3:49:07<2:40:48,  3.74s/it, gpt_loss=0.62, lr=8.92e-7][A[2025-04-24 03:41:49,642] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  59%|█████▊    | 3671/6250 [3:49:10<2:40:48,  3.74s/it, gpt_loss=0.648, lr=8.9e-7][A
Train step of epoch 0:  59%|█████▉    | 3672/6250 [3:49:10<2:42:35,  3.78s/it, gpt_loss=0.648, lr=8.9e-7][A
Train step of epoch 0:  59%|█████▉    | 3672/6250 [3:49:14<2:42:35,  3.78s/it, gpt_loss=0.614, lr=8.9e-7][A
Train step of epoch 0:  59%|█████▉    | 3673/6250 [3:49:14<2:45:43,  3.86s/it, gpt_loss=0.614, lr=8.9e-7][A
Train step of epoch 0:  59%|█████▉    | 3673/6250 [3:49:17<2:45:43,  3.86s/it, gpt_loss=0.683, lr=8.9e-7][A
Train step of epoch 0:  59%|█████▉    | 3674/6250 [3:49:17<2:30:31,  3.51s/it, gpt_loss=0.683, lr=8.9e-7][A
Train step of epoch 0:  59%|█████▉    | 3674/6250 [3:49:21<2:30:31,  3.51s/it, gpt_loss=0.67, lr=8.9e-7] [A
Train step of epoch 0:  59%|█████▉    | 3675/6250 [3:49:21<2:30:23,  3.50s/it, gpt_loss=0.67, lr=8.9e-7][A[2025-04-24 03:42:03,924] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  59%|█████▉    | 3675/6250 [3:49:25<2:30:23,  3.50s/it, gpt_loss=0.469, lr=8.88e-7][A
Train step of epoch 0:  59%|█████▉    | 3676/6250 [3:49:25<2:37:34,  3.67s/it, gpt_loss=0.469, lr=8.88e-7][A
Train step of epoch 0:  59%|█████▉    | 3676/6250 [3:49:27<2:37:34,  3.67s/it, gpt_loss=0.481, lr=8.88e-7][A
Train step of epoch 0:  59%|█████▉    | 3677/6250 [3:49:27<2:19:01,  3.24s/it, gpt_loss=0.481, lr=8.88e-7][A
Train step of epoch 0:  59%|█████▉    | 3677/6250 [3:49:31<2:19:01,  3.24s/it, gpt_loss=0.762, lr=8.88e-7][A
Train step of epoch 0:  59%|█████▉    | 3678/6250 [3:49:31<2:23:52,  3.36s/it, gpt_loss=0.762, lr=8.88e-7][A
Train step of epoch 0:  59%|█████▉    | 3678/6250 [3:49:34<2:23:52,  3.36s/it, gpt_loss=0.581, lr=8.88e-7][A
Train step of epoch 0:  59%|█████▉    | 3679/6250 [3:49:34<2:28:16,  3.46s/it, gpt_loss=0.581, lr=8.88e-7][A[2025-04-24 03:42:17,508] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  59%|█████▉    | 3679/6250 [3:49:38<2:28:16,  3.46s/it, gpt_loss=0.603, lr=8.86e-7][A
Train step of epoch 0:  59%|█████▉    | 3680/6250 [3:49:38<2:35:25,  3.63s/it, gpt_loss=0.603, lr=8.86e-7][A
Train step of epoch 0:  59%|█████▉    | 3680/6250 [3:49:43<2:35:25,  3.63s/it, gpt_loss=0.603, lr=8.86e-7][A
Train step of epoch 0:  59%|█████▉    | 3681/6250 [3:49:43<2:44:20,  3.84s/it, gpt_loss=0.603, lr=8.86e-7][A
Train step of epoch 0:  59%|█████▉    | 3681/6250 [3:49:46<2:44:20,  3.84s/it, gpt_loss=0.567, lr=8.86e-7][A
Train step of epoch 0:  59%|█████▉    | 3682/6250 [3:49:46<2:38:17,  3.70s/it, gpt_loss=0.567, lr=8.86e-7][A
Train step of epoch 0:  59%|█████▉    | 3682/6250 [3:49:49<2:38:17,  3.70s/it, gpt_loss=0.614, lr=8.86e-7][A
Train step of epoch 0:  59%|█████▉    | 3683/6250 [3:49:49<2:35:38,  3.64s/it, gpt_loss=0.614, lr=8.86e-7][A[2025-04-24 03:42:32,538] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  59%|█████▉    | 3683/6250 [3:49:53<2:35:38,  3.64s/it, gpt_loss=0.836, lr=8.85e-7][A
Train step of epoch 0:  59%|█████▉    | 3684/6250 [3:49:53<2:38:05,  3.70s/it, gpt_loss=0.836, lr=8.85e-7][A
Train step of epoch 0:  59%|█████▉    | 3684/6250 [3:49:57<2:38:05,  3.70s/it, gpt_loss=0.692, lr=8.85e-7][A
Train step of epoch 0:  59%|█████▉    | 3685/6250 [3:49:57<2:36:56,  3.67s/it, gpt_loss=0.692, lr=8.85e-7][A
Train step of epoch 0:  59%|█████▉    | 3685/6250 [3:50:00<2:36:56,  3.67s/it, gpt_loss=0.462, lr=8.85e-7][A
Train step of epoch 0:  59%|█████▉    | 3686/6250 [3:50:00<2:24:11,  3.37s/it, gpt_loss=0.462, lr=8.85e-7][A
Train step of epoch 0:  59%|█████▉    | 3686/6250 [3:50:04<2:24:11,  3.37s/it, gpt_loss=0.55, lr=8.85e-7] [A
Train step of epoch 0:  59%|█████▉    | 3687/6250 [3:50:04<2:36:18,  3.66s/it, gpt_loss=0.55, lr=8.85e-7][A[2025-04-24 03:42:47,246] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  59%|█████▉    | 3687/6250 [3:50:08<2:36:18,  3.66s/it, gpt_loss=0.6, lr=8.83e-7] [A
Train step of epoch 0:  59%|█████▉    | 3688/6250 [3:50:08<2:41:46,  3.79s/it, gpt_loss=0.6, lr=8.83e-7][A
Train step of epoch 0:  59%|█████▉    | 3688/6250 [3:50:12<2:41:46,  3.79s/it, gpt_loss=0.662, lr=8.83e-7][A
Train step of epoch 0:  59%|█████▉    | 3689/6250 [3:50:12<2:45:34,  3.88s/it, gpt_loss=0.662, lr=8.83e-7][A
Train step of epoch 0:  59%|█████▉    | 3689/6250 [3:50:16<2:45:34,  3.88s/it, gpt_loss=0.59, lr=8.83e-7] [A
Train step of epoch 0:  59%|█████▉    | 3690/6250 [3:50:16<2:46:18,  3.90s/it, gpt_loss=0.59, lr=8.83e-7][A
Train step of epoch 0:  59%|█████▉    | 3690/6250 [3:50:19<2:46:18,  3.90s/it, gpt_loss=0.435, lr=8.83e-7][A
Train step of epoch 0:  59%|█████▉    | 3691/6250 [3:50:19<2:35:47,  3.65s/it, gpt_loss=0.435, lr=8.83e-7][A[2025-04-24 03:43:02,808] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  59%|█████▉    | 3691/6250 [3:50:24<2:35:47,  3.65s/it, gpt_loss=0.697, lr=8.81e-7][A
Train step of epoch 0:  59%|█████▉    | 3692/6250 [3:50:24<2:45:54,  3.89s/it, gpt_loss=0.697, lr=8.81e-7][A
Train step of epoch 0:  59%|█████▉    | 3692/6250 [3:50:27<2:45:54,  3.89s/it, gpt_loss=0.401, lr=8.81e-7][A
Train step of epoch 0:  59%|█████▉    | 3693/6250 [3:50:27<2:44:00,  3.85s/it, gpt_loss=0.401, lr=8.81e-7][A
Train step of epoch 0:  59%|█████▉    | 3693/6250 [3:50:31<2:44:00,  3.85s/it, gpt_loss=0.705, lr=8.81e-7][A
Train step of epoch 0:  59%|█████▉    | 3694/6250 [3:50:31<2:41:07,  3.78s/it, gpt_loss=0.705, lr=8.81e-7][A
Train step of epoch 0:  59%|█████▉    | 3694/6250 [3:50:34<2:41:07,  3.78s/it, gpt_loss=0.725, lr=8.81e-7][A
Train step of epoch 0:  59%|█████▉    | 3695/6250 [3:50:34<2:37:18,  3.69s/it, gpt_loss=0.725, lr=8.81e-7][A[2025-04-24 03:43:16,802] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  59%|█████▉    | 3695/6250 [3:50:38<2:37:18,  3.69s/it, gpt_loss=0.737, lr=8.79e-7][A
Train step of epoch 0:  59%|█████▉    | 3696/6250 [3:50:38<2:30:02,  3.52s/it, gpt_loss=0.737, lr=8.79e-7][A
Train step of epoch 0:  59%|█████▉    | 3696/6250 [3:50:41<2:30:02,  3.52s/it, gpt_loss=0.72, lr=8.79e-7] [A
Train step of epoch 0:  59%|█████▉    | 3697/6250 [3:50:41<2:31:33,  3.56s/it, gpt_loss=0.72, lr=8.79e-7][A
Train step of epoch 0:  59%|█████▉    | 3697/6250 [3:50:45<2:31:33,  3.56s/it, gpt_loss=0.584, lr=8.79e-7][A
Train step of epoch 0:  59%|█████▉    | 3698/6250 [3:50:45<2:28:40,  3.50s/it, gpt_loss=0.584, lr=8.79e-7][A
Train step of epoch 0:  59%|█████▉    | 3698/6250 [3:50:49<2:28:40,  3.50s/it, gpt_loss=0.563, lr=8.79e-7][A
Train step of epoch 0:  59%|█████▉    | 3699/6250 [3:50:49<2:42:50,  3.83s/it, gpt_loss=0.563, lr=8.79e-7][A[2025-04-24 03:43:32,590] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  59%|█████▉    | 3699/6250 [3:50:53<2:42:50,  3.83s/it, gpt_loss=0.631, lr=8.77e-7][A
Train step of epoch 0:  59%|█████▉    | 3700/6250 [3:50:53<2:47:20,  3.94s/it, gpt_loss=0.631, lr=8.77e-7][A
Train step of epoch 0:  59%|█████▉    | 3700/6250 [3:50:57<2:47:20,  3.94s/it, gpt_loss=0.619, lr=8.77e-7][A
Train step of epoch 0:  59%|█████▉    | 3701/6250 [3:50:57<2:49:55,  4.00s/it, gpt_loss=0.619, lr=8.77e-7][A
Train step of epoch 0:  59%|█████▉    | 3701/6250 [3:51:01<2:49:55,  4.00s/it, gpt_loss=0.597, lr=8.77e-7][A
Train step of epoch 0:  59%|█████▉    | 3702/6250 [3:51:01<2:38:58,  3.74s/it, gpt_loss=0.597, lr=8.77e-7][A
Train step of epoch 0:  59%|█████▉    | 3702/6250 [3:51:04<2:38:58,  3.74s/it, gpt_loss=0.63, lr=8.77e-7] [A
Train step of epoch 0:  59%|█████▉    | 3703/6250 [3:51:04<2:39:09,  3.75s/it, gpt_loss=0.63, lr=8.77e-7][A[2025-04-24 03:43:48,155] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  59%|█████▉    | 3703/6250 [3:51:09<2:39:09,  3.75s/it, gpt_loss=0.537, lr=8.76e-7][A
Train step of epoch 0:  59%|█████▉    | 3704/6250 [3:51:09<2:48:48,  3.98s/it, gpt_loss=0.537, lr=8.76e-7][A
Train step of epoch 0:  59%|█████▉    | 3704/6250 [3:51:13<2:48:48,  3.98s/it, gpt_loss=0.532, lr=8.76e-7][A
Train step of epoch 0:  59%|█████▉    | 3705/6250 [3:51:13<2:49:53,  4.01s/it, gpt_loss=0.532, lr=8.76e-7][A
Train step of epoch 0:  59%|█████▉    | 3705/6250 [3:51:17<2:49:53,  4.01s/it, gpt_loss=0.571, lr=8.76e-7][A
Train step of epoch 0:  59%|█████▉    | 3706/6250 [3:51:17<2:48:23,  3.97s/it, gpt_loss=0.571, lr=8.76e-7][A
Train step of epoch 0:  59%|█████▉    | 3706/6250 [3:51:21<2:48:23,  3.97s/it, gpt_loss=0.631, lr=8.76e-7][A
Train step of epoch 0:  59%|█████▉    | 3707/6250 [3:51:21<2:44:51,  3.89s/it, gpt_loss=0.631, lr=8.76e-7][A[2025-04-24 03:44:04,313] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  59%|█████▉    | 3707/6250 [3:51:25<2:44:51,  3.89s/it, gpt_loss=0.622, lr=8.74e-7][A
Train step of epoch 0:  59%|█████▉    | 3708/6250 [3:51:25<2:52:31,  4.07s/it, gpt_loss=0.622, lr=8.74e-7][A
Train step of epoch 0:  59%|█████▉    | 3708/6250 [3:51:28<2:52:31,  4.07s/it, gpt_loss=0.497, lr=8.74e-7][A
Train step of epoch 0:  59%|█████▉    | 3709/6250 [3:51:28<2:41:23,  3.81s/it, gpt_loss=0.497, lr=8.74e-7][A
Train step of epoch 0:  59%|█████▉    | 3709/6250 [3:51:31<2:41:23,  3.81s/it, gpt_loss=0.734, lr=8.74e-7][A
Train step of epoch 0:  59%|█████▉    | 3710/6250 [3:51:31<2:33:32,  3.63s/it, gpt_loss=0.734, lr=8.74e-7][A
Train step of epoch 0:  59%|█████▉    | 3710/6250 [3:51:36<2:33:32,  3.63s/it, gpt_loss=0.587, lr=8.74e-7][A
Train step of epoch 0:  59%|█████▉    | 3711/6250 [3:51:36<2:43:40,  3.87s/it, gpt_loss=0.587, lr=8.74e-7][A[2025-04-24 03:44:19,956] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  59%|█████▉    | 3711/6250 [3:51:41<2:43:40,  3.87s/it, gpt_loss=0.845, lr=8.72e-7][A
Train step of epoch 0:  59%|█████▉    | 3712/6250 [3:51:41<2:55:36,  4.15s/it, gpt_loss=0.845, lr=8.72e-7][A
Train step of epoch 0:  59%|█████▉    | 3712/6250 [3:51:45<2:55:36,  4.15s/it, gpt_loss=0.733, lr=8.72e-7][A
Train step of epoch 0:  59%|█████▉    | 3713/6250 [3:51:45<2:53:47,  4.11s/it, gpt_loss=0.733, lr=8.72e-7][A
Train step of epoch 0:  59%|█████▉    | 3713/6250 [3:51:46<2:53:47,  4.11s/it, gpt_loss=0.559, lr=8.72e-7][A
Train step of epoch 0:  59%|█████▉    | 3714/6250 [3:51:46<2:19:27,  3.30s/it, gpt_loss=0.559, lr=8.72e-7][A
Train step of epoch 0:  59%|█████▉    | 3714/6250 [3:51:50<2:19:27,  3.30s/it, gpt_loss=0.626, lr=8.72e-7][A
Train step of epoch 0:  59%|█████▉    | 3715/6250 [3:51:50<2:32:06,  3.60s/it, gpt_loss=0.626, lr=8.72e-7][A[2025-04-24 03:44:33,005] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  59%|█████▉    | 3715/6250 [3:51:54<2:32:06,  3.60s/it, gpt_loss=0.447, lr=8.7e-7] [A
Train step of epoch 0:  59%|█████▉    | 3716/6250 [3:51:54<2:28:34,  3.52s/it, gpt_loss=0.447, lr=8.7e-7][A
Train step of epoch 0:  59%|█████▉    | 3716/6250 [3:51:58<2:28:34,  3.52s/it, gpt_loss=0.629, lr=8.7e-7][A
Train step of epoch 0:  59%|█████▉    | 3717/6250 [3:51:58<2:38:16,  3.75s/it, gpt_loss=0.629, lr=8.7e-7][A
Train step of epoch 0:  59%|█████▉    | 3717/6250 [3:52:02<2:38:16,  3.75s/it, gpt_loss=0.647, lr=8.7e-7][A
Train step of epoch 0:  59%|█████▉    | 3718/6250 [3:52:02<2:42:08,  3.84s/it, gpt_loss=0.647, lr=8.7e-7][A
Train step of epoch 0:  59%|█████▉    | 3718/6250 [3:52:06<2:42:08,  3.84s/it, gpt_loss=0.446, lr=8.7e-7][A
Train step of epoch 0:  60%|█████▉    | 3719/6250 [3:52:06<2:44:55,  3.91s/it, gpt_loss=0.446, lr=8.7e-7][A[2025-04-24 03:44:49,005] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  60%|█████▉    | 3719/6250 [3:52:10<2:44:55,  3.91s/it, gpt_loss=0.61, lr=8.68e-7][A
Train step of epoch 0:  60%|█████▉    | 3720/6250 [3:52:10<2:40:44,  3.81s/it, gpt_loss=0.61, lr=8.68e-7][A
Train step of epoch 0:  60%|█████▉    | 3720/6250 [3:52:13<2:40:44,  3.81s/it, gpt_loss=0.468, lr=8.68e-7][A
Train step of epoch 0:  60%|█████▉    | 3721/6250 [3:52:13<2:35:15,  3.68s/it, gpt_loss=0.468, lr=8.68e-7][A
Train step of epoch 0:  60%|█████▉    | 3721/6250 [3:52:17<2:35:15,  3.68s/it, gpt_loss=0.737, lr=8.68e-7][A
Train step of epoch 0:  60%|█████▉    | 3722/6250 [3:52:17<2:43:35,  3.88s/it, gpt_loss=0.737, lr=8.68e-7][A
Train step of epoch 0:  60%|█████▉    | 3722/6250 [3:52:21<2:43:35,  3.88s/it, gpt_loss=0.54, lr=8.68e-7] [A
Train step of epoch 0:  60%|█████▉    | 3723/6250 [3:52:21<2:36:16,  3.71s/it, gpt_loss=0.54, lr=8.68e-7][A[2025-04-24 03:45:03,334] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  60%|█████▉    | 3723/6250 [3:52:24<2:36:16,  3.71s/it, gpt_loss=0.564, lr=8.67e-7][A
Train step of epoch 0:  60%|█████▉    | 3724/6250 [3:52:24<2:30:53,  3.58s/it, gpt_loss=0.564, lr=8.67e-7][A
Train step of epoch 0:  60%|█████▉    | 3724/6250 [3:52:28<2:30:53,  3.58s/it, gpt_loss=0.459, lr=8.67e-7][A
Train step of epoch 0:  60%|█████▉    | 3725/6250 [3:52:28<2:31:54,  3.61s/it, gpt_loss=0.459, lr=8.67e-7][A
Train step of epoch 0:  60%|█████▉    | 3725/6250 [3:52:32<2:31:54,  3.61s/it, gpt_loss=0.523, lr=8.67e-7][A
Train step of epoch 0:  60%|█████▉    | 3726/6250 [3:52:32<2:43:21,  3.88s/it, gpt_loss=0.523, lr=8.67e-7][A
Train step of epoch 0:  60%|█████▉    | 3726/6250 [3:52:36<2:43:21,  3.88s/it, gpt_loss=0.555, lr=8.67e-7][A
Train step of epoch 0:  60%|█████▉    | 3727/6250 [3:52:36<2:36:36,  3.72s/it, gpt_loss=0.555, lr=8.67e-7][A[2025-04-24 03:45:19,283] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  60%|█████▉    | 3727/6250 [3:52:40<2:36:36,  3.72s/it, gpt_loss=0.622, lr=8.65e-7][A
Train step of epoch 0:  60%|█████▉    | 3728/6250 [3:52:40<2:45:07,  3.93s/it, gpt_loss=0.622, lr=8.65e-7][A
Train step of epoch 0:  60%|█████▉    | 3728/6250 [3:52:44<2:45:07,  3.93s/it, gpt_loss=0.627, lr=8.65e-7][A
Train step of epoch 0:  60%|█████▉    | 3729/6250 [3:52:44<2:46:31,  3.96s/it, gpt_loss=0.627, lr=8.65e-7][A
Train step of epoch 0:  60%|█████▉    | 3729/6250 [3:52:47<2:46:31,  3.96s/it, gpt_loss=0.544, lr=8.65e-7][A
Train step of epoch 0:  60%|█████▉    | 3730/6250 [3:52:47<2:27:38,  3.52s/it, gpt_loss=0.544, lr=8.65e-7][A
Train step of epoch 0:  60%|█████▉    | 3730/6250 [3:52:51<2:27:38,  3.52s/it, gpt_loss=0.726, lr=8.65e-7][A
Train step of epoch 0:  60%|█████▉    | 3731/6250 [3:52:51<2:36:33,  3.73s/it, gpt_loss=0.726, lr=8.65e-7][A[2025-04-24 03:45:34,346] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  60%|█████▉    | 3731/6250 [3:52:55<2:36:33,  3.73s/it, gpt_loss=0.762, lr=8.63e-7][A
Train step of epoch 0:  60%|█████▉    | 3732/6250 [3:52:55<2:43:55,  3.91s/it, gpt_loss=0.762, lr=8.63e-7][A
Train step of epoch 0:  60%|█████▉    | 3732/6250 [3:53:00<2:43:55,  3.91s/it, gpt_loss=0.619, lr=8.63e-7][A
Train step of epoch 0:  60%|█████▉    | 3733/6250 [3:53:00<2:50:10,  4.06s/it, gpt_loss=0.619, lr=8.63e-7][A
Train step of epoch 0:  60%|█████▉    | 3733/6250 [3:53:03<2:50:10,  4.06s/it, gpt_loss=0.563, lr=8.63e-7][A
Train step of epoch 0:  60%|█████▉    | 3734/6250 [3:53:03<2:38:51,  3.79s/it, gpt_loss=0.563, lr=8.63e-7][A
Train step of epoch 0:  60%|█████▉    | 3734/6250 [3:53:07<2:38:51,  3.79s/it, gpt_loss=0.841, lr=8.63e-7][A
Train step of epoch 0:  60%|█████▉    | 3735/6250 [3:53:07<2:45:23,  3.95s/it, gpt_loss=0.841, lr=8.63e-7][A[2025-04-24 03:45:50,205] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  60%|█████▉    | 3735/6250 [3:53:11<2:45:23,  3.95s/it, gpt_loss=0.648, lr=8.61e-7][A
Train step of epoch 0:  60%|█████▉    | 3736/6250 [3:53:11<2:45:42,  3.95s/it, gpt_loss=0.648, lr=8.61e-7][A
Train step of epoch 0:  60%|█████▉    | 3736/6250 [3:53:15<2:45:42,  3.95s/it, gpt_loss=0.642, lr=8.61e-7][A
Train step of epoch 0:  60%|█████▉    | 3737/6250 [3:53:15<2:43:09,  3.90s/it, gpt_loss=0.642, lr=8.61e-7][A
Train step of epoch 0:  60%|█████▉    | 3737/6250 [3:53:18<2:43:09,  3.90s/it, gpt_loss=0.677, lr=8.61e-7][A
Train step of epoch 0:  60%|█████▉    | 3738/6250 [3:53:18<2:35:10,  3.71s/it, gpt_loss=0.677, lr=8.61e-7][A
Train step of epoch 0:  60%|█████▉    | 3738/6250 [3:53:21<2:35:10,  3.71s/it, gpt_loss=0.626, lr=8.61e-7][A
Train step of epoch 0:  60%|█████▉    | 3739/6250 [3:53:21<2:29:34,  3.57s/it, gpt_loss=0.626, lr=8.61e-7][A[2025-04-24 03:46:05,258] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  60%|█████▉    | 3739/6250 [3:53:26<2:29:34,  3.57s/it, gpt_loss=0.579, lr=8.59e-7][A
Train step of epoch 0:  60%|█████▉    | 3740/6250 [3:53:26<2:44:28,  3.93s/it, gpt_loss=0.579, lr=8.59e-7][A
Train step of epoch 0:  60%|█████▉    | 3740/6250 [3:53:31<2:44:28,  3.93s/it, gpt_loss=0.575, lr=8.59e-7][A
Train step of epoch 0:  60%|█████▉    | 3741/6250 [3:53:31<2:57:03,  4.23s/it, gpt_loss=0.575, lr=8.59e-7][A
Train step of epoch 0:  60%|█████▉    | 3741/6250 [3:53:34<2:57:03,  4.23s/it, gpt_loss=0.663, lr=8.59e-7][A
Train step of epoch 0:  60%|█████▉    | 3742/6250 [3:53:34<2:41:14,  3.86s/it, gpt_loss=0.663, lr=8.59e-7][A
Train step of epoch 0:  60%|█████▉    | 3742/6250 [3:53:38<2:41:14,  3.86s/it, gpt_loss=0.623, lr=8.59e-7][A
Train step of epoch 0:  60%|█████▉    | 3743/6250 [3:53:38<2:41:21,  3.86s/it, gpt_loss=0.623, lr=8.59e-7][A[2025-04-24 03:46:20,011] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  60%|█████▉    | 3743/6250 [3:53:41<2:41:21,  3.86s/it, gpt_loss=0.476, lr=8.58e-7][A
Train step of epoch 0:  60%|█████▉    | 3744/6250 [3:53:41<2:30:00,  3.59s/it, gpt_loss=0.476, lr=8.58e-7][A
Train step of epoch 0:  60%|█████▉    | 3744/6250 [3:53:45<2:30:00,  3.59s/it, gpt_loss=0.414, lr=8.58e-7][A
Train step of epoch 0:  60%|█████▉    | 3745/6250 [3:53:45<2:38:43,  3.80s/it, gpt_loss=0.414, lr=8.58e-7][A
Train step of epoch 0:  60%|█████▉    | 3745/6250 [3:53:49<2:38:43,  3.80s/it, gpt_loss=0.595, lr=8.58e-7][A
Train step of epoch 0:  60%|█████▉    | 3746/6250 [3:53:49<2:43:42,  3.92s/it, gpt_loss=0.595, lr=8.58e-7][A
Train step of epoch 0:  60%|█████▉    | 3746/6250 [3:53:54<2:43:42,  3.92s/it, gpt_loss=0.626, lr=8.58e-7][A
Train step of epoch 0:  60%|█████▉    | 3747/6250 [3:53:54<2:50:04,  4.08s/it, gpt_loss=0.626, lr=8.58e-7][A[2025-04-24 03:46:37,056] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  60%|█████▉    | 3747/6250 [3:53:58<2:50:04,  4.08s/it, gpt_loss=0.577, lr=8.56e-7][A
Train step of epoch 0:  60%|█████▉    | 3748/6250 [3:53:58<2:50:26,  4.09s/it, gpt_loss=0.577, lr=8.56e-7][A
Train step of epoch 0:  60%|█████▉    | 3748/6250 [3:54:02<2:50:26,  4.09s/it, gpt_loss=0.587, lr=8.56e-7][A
Train step of epoch 0:  60%|█████▉    | 3749/6250 [3:54:02<2:51:30,  4.11s/it, gpt_loss=0.587, lr=8.56e-7][A
Train step of epoch 0:  60%|█████▉    | 3749/6250 [3:54:05<2:51:30,  4.11s/it, gpt_loss=0.642, lr=8.56e-7][A
Train step of epoch 0:  60%|██████    | 3750/6250 [3:54:05<2:39:01,  3.82s/it, gpt_loss=0.642, lr=8.56e-7][A
Train step of epoch 0:  60%|██████    | 3750/6250 [3:54:09<2:39:01,  3.82s/it, gpt_loss=0.605, lr=8.56e-7][A
Train step of epoch 0:  60%|██████    | 3751/6250 [3:54:09<2:34:27,  3.71s/it, gpt_loss=0.605, lr=8.56e-7][A[2025-04-24 03:46:52,138] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  60%|██████    | 3751/6250 [3:54:13<2:34:27,  3.71s/it, gpt_loss=0.632, lr=8.54e-7][A
Train step of epoch 0:  60%|██████    | 3752/6250 [3:54:13<2:42:07,  3.89s/it, gpt_loss=0.632, lr=8.54e-7][A
Train step of epoch 0:  60%|██████    | 3752/6250 [3:54:16<2:42:07,  3.89s/it, gpt_loss=0.589, lr=8.54e-7][A
Train step of epoch 0:  60%|██████    | 3753/6250 [3:54:16<2:26:44,  3.53s/it, gpt_loss=0.589, lr=8.54e-7][A
Train step of epoch 0:  60%|██████    | 3753/6250 [3:54:20<2:26:44,  3.53s/it, gpt_loss=0.611, lr=8.54e-7][A
Train step of epoch 0:  60%|██████    | 3754/6250 [3:54:20<2:33:11,  3.68s/it, gpt_loss=0.611, lr=8.54e-7][A
Train step of epoch 0:  60%|██████    | 3754/6250 [3:54:23<2:33:11,  3.68s/it, gpt_loss=0.69, lr=8.54e-7] [A
Train step of epoch 0:  60%|██████    | 3755/6250 [3:54:23<2:27:42,  3.55s/it, gpt_loss=0.69, lr=8.54e-7][A[2025-04-24 03:47:05,827] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  60%|██████    | 3755/6250 [3:54:27<2:27:42,  3.55s/it, gpt_loss=0.424, lr=8.52e-7][A
Train step of epoch 0:  60%|██████    | 3756/6250 [3:54:27<2:29:49,  3.60s/it, gpt_loss=0.424, lr=8.52e-7][A
Train step of epoch 0:  60%|██████    | 3756/6250 [3:54:31<2:29:49,  3.60s/it, gpt_loss=0.484, lr=8.52e-7][A
Train step of epoch 0:  60%|██████    | 3757/6250 [3:54:31<2:38:55,  3.82s/it, gpt_loss=0.484, lr=8.52e-7][A
Train step of epoch 0:  60%|██████    | 3757/6250 [3:54:35<2:38:55,  3.82s/it, gpt_loss=0.749, lr=8.52e-7][A
Train step of epoch 0:  60%|██████    | 3758/6250 [3:54:35<2:37:44,  3.80s/it, gpt_loss=0.749, lr=8.52e-7][A
Train step of epoch 0:  60%|██████    | 3758/6250 [3:54:38<2:37:44,  3.80s/it, gpt_loss=0.672, lr=8.52e-7][A
Train step of epoch 0:  60%|██████    | 3759/6250 [3:54:38<2:28:15,  3.57s/it, gpt_loss=0.672, lr=8.52e-7][A[2025-04-24 03:47:20,625] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  60%|██████    | 3759/6250 [3:54:41<2:28:15,  3.57s/it, gpt_loss=0.688, lr=8.5e-7] [A
Train step of epoch 0:  60%|██████    | 3760/6250 [3:54:41<2:29:34,  3.60s/it, gpt_loss=0.688, lr=8.5e-7][A
Train step of epoch 0:  60%|██████    | 3760/6250 [3:54:45<2:29:34,  3.60s/it, gpt_loss=0.626, lr=8.5e-7][A
Train step of epoch 0:  60%|██████    | 3761/6250 [3:54:45<2:25:41,  3.51s/it, gpt_loss=0.626, lr=8.5e-7][A
Train step of epoch 0:  60%|██████    | 3761/6250 [3:54:49<2:25:41,  3.51s/it, gpt_loss=0.687, lr=8.5e-7][A
Train step of epoch 0:  60%|██████    | 3762/6250 [3:54:49<2:35:37,  3.75s/it, gpt_loss=0.687, lr=8.5e-7][A
Train step of epoch 0:  60%|██████    | 3762/6250 [3:54:52<2:35:37,  3.75s/it, gpt_loss=0.551, lr=8.5e-7][A
Train step of epoch 0:  60%|██████    | 3763/6250 [3:54:52<2:29:19,  3.60s/it, gpt_loss=0.551, lr=8.5e-7][A[2025-04-24 03:47:35,746] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  60%|██████    | 3763/6250 [3:54:57<2:29:19,  3.60s/it, gpt_loss=0.534, lr=8.49e-7][A
Train step of epoch 0:  60%|██████    | 3764/6250 [3:54:57<2:37:24,  3.80s/it, gpt_loss=0.534, lr=8.49e-7][A
Train step of epoch 0:  60%|██████    | 3764/6250 [3:55:01<2:37:24,  3.80s/it, gpt_loss=0.654, lr=8.49e-7][A
Train step of epoch 0:  60%|██████    | 3765/6250 [3:55:01<2:45:26,  3.99s/it, gpt_loss=0.654, lr=8.49e-7][A
Train step of epoch 0:  60%|██████    | 3765/6250 [3:55:04<2:45:26,  3.99s/it, gpt_loss=0.456, lr=8.49e-7][A
Train step of epoch 0:  60%|██████    | 3766/6250 [3:55:04<2:38:52,  3.84s/it, gpt_loss=0.456, lr=8.49e-7][A
Train step of epoch 0:  60%|██████    | 3766/6250 [3:55:08<2:38:52,  3.84s/it, gpt_loss=0.569, lr=8.49e-7][A
Train step of epoch 0:  60%|██████    | 3767/6250 [3:55:08<2:37:13,  3.80s/it, gpt_loss=0.569, lr=8.49e-7][A[2025-04-24 03:47:50,923] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  60%|██████    | 3767/6250 [3:55:12<2:37:13,  3.80s/it, gpt_loss=0.784, lr=8.47e-7][A
Train step of epoch 0:  60%|██████    | 3768/6250 [3:55:12<2:34:00,  3.72s/it, gpt_loss=0.784, lr=8.47e-7][A
Train step of epoch 0:  60%|██████    | 3768/6250 [3:55:15<2:34:00,  3.72s/it, gpt_loss=0.572, lr=8.47e-7][A
Train step of epoch 0:  60%|██████    | 3769/6250 [3:55:15<2:33:02,  3.70s/it, gpt_loss=0.572, lr=8.47e-7][A
Train step of epoch 0:  60%|██████    | 3769/6250 [3:55:19<2:33:02,  3.70s/it, gpt_loss=0.556, lr=8.47e-7][A
Train step of epoch 0:  60%|██████    | 3770/6250 [3:55:19<2:37:54,  3.82s/it, gpt_loss=0.556, lr=8.47e-7][A
Train step of epoch 0:  60%|██████    | 3770/6250 [3:55:24<2:37:54,  3.82s/it, gpt_loss=0.493, lr=8.47e-7][A
Train step of epoch 0:  60%|██████    | 3771/6250 [3:55:24<2:41:12,  3.90s/it, gpt_loss=0.493, lr=8.47e-7][A[2025-04-24 03:48:06,036] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  60%|██████    | 3771/6250 [3:55:27<2:41:12,  3.90s/it, gpt_loss=0.508, lr=8.45e-7][A
Train step of epoch 0:  60%|██████    | 3772/6250 [3:55:27<2:33:21,  3.71s/it, gpt_loss=0.508, lr=8.45e-7][A
Train step of epoch 0:  60%|██████    | 3772/6250 [3:55:32<2:33:21,  3.71s/it, gpt_loss=0.567, lr=8.45e-7][A
Train step of epoch 0:  60%|██████    | 3773/6250 [3:55:32<2:48:50,  4.09s/it, gpt_loss=0.567, lr=8.45e-7][A
Train step of epoch 0:  60%|██████    | 3773/6250 [3:55:35<2:48:50,  4.09s/it, gpt_loss=0.444, lr=8.45e-7][A
Train step of epoch 0:  60%|██████    | 3774/6250 [3:55:35<2:36:53,  3.80s/it, gpt_loss=0.444, lr=8.45e-7][A
Train step of epoch 0:  60%|██████    | 3774/6250 [3:55:38<2:36:53,  3.80s/it, gpt_loss=0.496, lr=8.45e-7][A
Train step of epoch 0:  60%|██████    | 3775/6250 [3:55:38<2:33:05,  3.71s/it, gpt_loss=0.496, lr=8.45e-7][A[2025-04-24 03:48:22,234] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  60%|██████    | 3775/6250 [3:55:43<2:33:05,  3.71s/it, gpt_loss=0.885, lr=8.43e-7][A
Train step of epoch 0:  60%|██████    | 3776/6250 [3:55:43<2:44:01,  3.98s/it, gpt_loss=0.885, lr=8.43e-7][A
Train step of epoch 0:  60%|██████    | 3776/6250 [3:55:48<2:44:01,  3.98s/it, gpt_loss=0.597, lr=8.43e-7][A
Train step of epoch 0:  60%|██████    | 3777/6250 [3:55:48<2:51:59,  4.17s/it, gpt_loss=0.597, lr=8.43e-7][A
Train step of epoch 0:  60%|██████    | 3777/6250 [3:55:51<2:51:59,  4.17s/it, gpt_loss=0.745, lr=8.43e-7][A
Train step of epoch 0:  60%|██████    | 3778/6250 [3:55:51<2:47:07,  4.06s/it, gpt_loss=0.745, lr=8.43e-7][A
Train step of epoch 0:  60%|██████    | 3778/6250 [3:55:55<2:47:07,  4.06s/it, gpt_loss=0.595, lr=8.43e-7][A
Train step of epoch 0:  60%|██████    | 3779/6250 [3:55:55<2:40:46,  3.90s/it, gpt_loss=0.595, lr=8.43e-7][A[2025-04-24 03:48:38,888] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  60%|██████    | 3779/6250 [3:56:00<2:40:46,  3.90s/it, gpt_loss=0.575, lr=8.41e-7][A
Train step of epoch 0:  60%|██████    | 3780/6250 [3:56:00<2:50:26,  4.14s/it, gpt_loss=0.575, lr=8.41e-7][A
Train step of epoch 0:  60%|██████    | 3780/6250 [3:56:04<2:50:26,  4.14s/it, gpt_loss=0.695, lr=8.41e-7][A
Train step of epoch 0:  60%|██████    | 3781/6250 [3:56:04<2:57:12,  4.31s/it, gpt_loss=0.695, lr=8.41e-7][A
Train step of epoch 0:  60%|██████    | 3781/6250 [3:56:09<2:57:12,  4.31s/it, gpt_loss=0.572, lr=8.41e-7][A
Train step of epoch 0:  61%|██████    | 3782/6250 [3:56:09<2:55:27,  4.27s/it, gpt_loss=0.572, lr=8.41e-7][A
Train step of epoch 0:  61%|██████    | 3782/6250 [3:56:12<2:55:27,  4.27s/it, gpt_loss=0.608, lr=8.41e-7][A
Train step of epoch 0:  61%|██████    | 3783/6250 [3:56:12<2:50:15,  4.14s/it, gpt_loss=0.608, lr=8.41e-7][A[2025-04-24 03:48:55,229] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  61%|██████    | 3783/6250 [3:56:16<2:50:15,  4.14s/it, gpt_loss=0.56, lr=8.4e-7]  [A
Train step of epoch 0:  61%|██████    | 3784/6250 [3:56:16<2:43:51,  3.99s/it, gpt_loss=0.56, lr=8.4e-7][A
Train step of epoch 0:  61%|██████    | 3784/6250 [3:56:20<2:43:51,  3.99s/it, gpt_loss=0.673, lr=8.4e-7][A
Train step of epoch 0:  61%|██████    | 3785/6250 [3:56:20<2:48:37,  4.10s/it, gpt_loss=0.673, lr=8.4e-7][A
Train step of epoch 0:  61%|██████    | 3785/6250 [3:56:24<2:48:37,  4.10s/it, gpt_loss=0.766, lr=8.4e-7][A
Train step of epoch 0:  61%|██████    | 3786/6250 [3:56:24<2:40:15,  3.90s/it, gpt_loss=0.766, lr=8.4e-7][A
Train step of epoch 0:  61%|██████    | 3786/6250 [3:56:27<2:40:15,  3.90s/it, gpt_loss=0.466, lr=8.4e-7][A
Train step of epoch 0:  61%|██████    | 3787/6250 [3:56:27<2:30:49,  3.67s/it, gpt_loss=0.466, lr=8.4e-7][A[2025-04-24 03:49:09,683] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  61%|██████    | 3787/6250 [3:56:30<2:30:49,  3.67s/it, gpt_loss=0.534, lr=8.38e-7][A
Train step of epoch 0:  61%|██████    | 3788/6250 [3:56:30<2:28:38,  3.62s/it, gpt_loss=0.534, lr=8.38e-7][A
Train step of epoch 0:  61%|██████    | 3788/6250 [3:56:34<2:28:38,  3.62s/it, gpt_loss=0.607, lr=8.38e-7][A
Train step of epoch 0:  61%|██████    | 3789/6250 [3:56:34<2:24:18,  3.52s/it, gpt_loss=0.607, lr=8.38e-7][A
Train step of epoch 0:  61%|██████    | 3789/6250 [3:56:37<2:24:18,  3.52s/it, gpt_loss=0.596, lr=8.38e-7][A
Train step of epoch 0:  61%|██████    | 3790/6250 [3:56:37<2:15:36,  3.31s/it, gpt_loss=0.596, lr=8.38e-7][A
Train step of epoch 0:  61%|██████    | 3790/6250 [3:56:39<2:15:36,  3.31s/it, gpt_loss=0.567, lr=8.38e-7][A
Train step of epoch 0:  61%|██████    | 3791/6250 [3:56:39<2:05:38,  3.07s/it, gpt_loss=0.567, lr=8.38e-7][A[2025-04-24 03:49:22,353] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  61%|██████    | 3791/6250 [3:56:43<2:05:38,  3.07s/it, gpt_loss=0.505, lr=8.36e-7][A
Train step of epoch 0:  61%|██████    | 3792/6250 [3:56:43<2:18:01,  3.37s/it, gpt_loss=0.505, lr=8.36e-7][A
Train step of epoch 0:  61%|██████    | 3792/6250 [3:56:47<2:18:01,  3.37s/it, gpt_loss=0.725, lr=8.36e-7][A
Train step of epoch 0:  61%|██████    | 3793/6250 [3:56:47<2:28:01,  3.61s/it, gpt_loss=0.725, lr=8.36e-7][A
Train step of epoch 0:  61%|██████    | 3793/6250 [3:56:50<2:28:01,  3.61s/it, gpt_loss=0.743, lr=8.36e-7][A
Train step of epoch 0:  61%|██████    | 3794/6250 [3:56:50<2:19:31,  3.41s/it, gpt_loss=0.743, lr=8.36e-7][A
Train step of epoch 0:  61%|██████    | 3794/6250 [3:56:53<2:19:31,  3.41s/it, gpt_loss=0.462, lr=8.36e-7][A
Train step of epoch 0:  61%|██████    | 3795/6250 [3:56:53<2:07:50,  3.12s/it, gpt_loss=0.462, lr=8.36e-7][A[2025-04-24 03:49:36,025] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  61%|██████    | 3795/6250 [3:56:57<2:07:50,  3.12s/it, gpt_loss=0.621, lr=8.34e-7][A
Train step of epoch 0:  61%|██████    | 3796/6250 [3:56:57<2:19:43,  3.42s/it, gpt_loss=0.621, lr=8.34e-7][A
Train step of epoch 0:  61%|██████    | 3796/6250 [3:57:00<2:19:43,  3.42s/it, gpt_loss=0.608, lr=8.34e-7][A
Train step of epoch 0:  61%|██████    | 3797/6250 [3:57:00<2:18:50,  3.40s/it, gpt_loss=0.608, lr=8.34e-7][A
Train step of epoch 0:  61%|██████    | 3797/6250 [3:57:04<2:18:50,  3.40s/it, gpt_loss=0.523, lr=8.34e-7][A
Train step of epoch 0:  61%|██████    | 3798/6250 [3:57:04<2:25:50,  3.57s/it, gpt_loss=0.523, lr=8.34e-7][A
Train step of epoch 0:  61%|██████    | 3798/6250 [3:57:08<2:25:50,  3.57s/it, gpt_loss=0.585, lr=8.34e-7][A
Train step of epoch 0:  61%|██████    | 3799/6250 [3:57:08<2:24:37,  3.54s/it, gpt_loss=0.585, lr=8.34e-7][A[2025-04-24 03:49:50,270] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  61%|██████    | 3799/6250 [3:57:11<2:24:37,  3.54s/it, gpt_loss=0.568, lr=8.33e-7][A
Train step of epoch 0:  61%|██████    | 3800/6250 [3:57:11<2:23:26,  3.51s/it, gpt_loss=0.568, lr=8.33e-7][A
Train step of epoch 0:  61%|██████    | 3800/6250 [3:57:15<2:23:26,  3.51s/it, gpt_loss=0.579, lr=8.33e-7][A
Train step of epoch 0:  61%|██████    | 3801/6250 [3:57:15<2:23:44,  3.52s/it, gpt_loss=0.579, lr=8.33e-7][A
Train step of epoch 0:  61%|██████    | 3801/6250 [3:57:17<2:23:44,  3.52s/it, gpt_loss=0.461, lr=8.33e-7][A
Train step of epoch 0:  61%|██████    | 3802/6250 [3:57:17<2:15:31,  3.32s/it, gpt_loss=0.461, lr=8.33e-7][A
Train step of epoch 0:  61%|██████    | 3802/6250 [3:57:21<2:15:31,  3.32s/it, gpt_loss=0.621, lr=8.33e-7][A
Train step of epoch 0:  61%|██████    | 3803/6250 [3:57:21<2:22:11,  3.49s/it, gpt_loss=0.621, lr=8.33e-7][A[2025-04-24 03:50:03,839] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  61%|██████    | 3803/6250 [3:57:25<2:22:11,  3.49s/it, gpt_loss=0.817, lr=8.31e-7][A
Train step of epoch 0:  61%|██████    | 3804/6250 [3:57:25<2:19:51,  3.43s/it, gpt_loss=0.817, lr=8.31e-7][A
Train step of epoch 0:  61%|██████    | 3804/6250 [3:57:28<2:19:51,  3.43s/it, gpt_loss=0.468, lr=8.31e-7][A
Train step of epoch 0:  61%|██████    | 3805/6250 [3:57:28<2:21:25,  3.47s/it, gpt_loss=0.468, lr=8.31e-7][A
Train step of epoch 0:  61%|██████    | 3805/6250 [3:57:31<2:21:25,  3.47s/it, gpt_loss=0.436, lr=8.31e-7][A
Train step of epoch 0:  61%|██████    | 3806/6250 [3:57:31<2:10:40,  3.21s/it, gpt_loss=0.436, lr=8.31e-7][A
Train step of epoch 0:  61%|██████    | 3806/6250 [3:57:34<2:10:40,  3.21s/it, gpt_loss=0.55, lr=8.31e-7] [A
Train step of epoch 0:  61%|██████    | 3807/6250 [3:57:34<2:12:09,  3.25s/it, gpt_loss=0.55, lr=8.31e-7][A[2025-04-24 03:50:17,747] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  61%|██████    | 3807/6250 [3:57:39<2:12:09,  3.25s/it, gpt_loss=0.659, lr=8.29e-7][A
Train step of epoch 0:  61%|██████    | 3808/6250 [3:57:39<2:26:22,  3.60s/it, gpt_loss=0.659, lr=8.29e-7][A
Train step of epoch 0:  61%|██████    | 3808/6250 [3:57:42<2:26:22,  3.60s/it, gpt_loss=0.679, lr=8.29e-7][A
Train step of epoch 0:  61%|██████    | 3809/6250 [3:57:42<2:30:56,  3.71s/it, gpt_loss=0.679, lr=8.29e-7][A
Train step of epoch 0:  61%|██████    | 3809/6250 [3:57:47<2:30:56,  3.71s/it, gpt_loss=0.52, lr=8.29e-7] [A
Train step of epoch 0:  61%|██████    | 3810/6250 [3:57:47<2:38:05,  3.89s/it, gpt_loss=0.52, lr=8.29e-7][A
Train step of epoch 0:  61%|██████    | 3810/6250 [3:57:51<2:38:05,  3.89s/it, gpt_loss=0.598, lr=8.29e-7][A
Train step of epoch 0:  61%|██████    | 3811/6250 [3:57:51<2:36:17,  3.84s/it, gpt_loss=0.598, lr=8.29e-7][A[2025-04-24 03:50:33,740] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  61%|██████    | 3811/6250 [3:57:55<2:36:17,  3.84s/it, gpt_loss=0.572, lr=8.27e-7][A
Train step of epoch 0:  61%|██████    | 3812/6250 [3:57:55<2:37:46,  3.88s/it, gpt_loss=0.572, lr=8.27e-7][A
Train step of epoch 0:  61%|██████    | 3812/6250 [3:57:58<2:37:46,  3.88s/it, gpt_loss=0.692, lr=8.27e-7][A
Train step of epoch 0:  61%|██████    | 3813/6250 [3:57:58<2:36:32,  3.85s/it, gpt_loss=0.692, lr=8.27e-7][A
Train step of epoch 0:  61%|██████    | 3813/6250 [3:58:02<2:36:32,  3.85s/it, gpt_loss=0.567, lr=8.27e-7][A
Train step of epoch 0:  61%|██████    | 3814/6250 [3:58:02<2:33:03,  3.77s/it, gpt_loss=0.567, lr=8.27e-7][A
Train step of epoch 0:  61%|██████    | 3814/6250 [3:58:05<2:33:03,  3.77s/it, gpt_loss=0.604, lr=8.27e-7][A
Train step of epoch 0:  61%|██████    | 3815/6250 [3:58:05<2:30:56,  3.72s/it, gpt_loss=0.604, lr=8.27e-7][A[2025-04-24 03:50:49,178] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  61%|██████    | 3815/6250 [3:58:10<2:30:56,  3.72s/it, gpt_loss=0.401, lr=8.25e-7][A
Train step of epoch 0:  61%|██████    | 3816/6250 [3:58:10<2:40:05,  3.95s/it, gpt_loss=0.401, lr=8.25e-7][A
Train step of epoch 0:  61%|██████    | 3816/6250 [3:58:15<2:40:05,  3.95s/it, gpt_loss=0.702, lr=8.25e-7][A
Train step of epoch 0:  61%|██████    | 3817/6250 [3:58:15<2:53:57,  4.29s/it, gpt_loss=0.702, lr=8.25e-7][A
Train step of epoch 0:  61%|██████    | 3817/6250 [3:58:19<2:53:57,  4.29s/it, gpt_loss=0.658, lr=8.25e-7][A
Train step of epoch 0:  61%|██████    | 3818/6250 [3:58:19<2:44:15,  4.05s/it, gpt_loss=0.658, lr=8.25e-7][A
Train step of epoch 0:  61%|██████    | 3818/6250 [3:58:23<2:44:15,  4.05s/it, gpt_loss=0.618, lr=8.25e-7][A
Train step of epoch 0:  61%|██████    | 3819/6250 [3:58:23<2:46:42,  4.11s/it, gpt_loss=0.618, lr=8.25e-7][A[2025-04-24 03:51:05,583] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  61%|██████    | 3819/6250 [3:58:26<2:46:42,  4.11s/it, gpt_loss=0.533, lr=8.24e-7][A
Train step of epoch 0:  61%|██████    | 3820/6250 [3:58:26<2:39:50,  3.95s/it, gpt_loss=0.533, lr=8.24e-7][A
Train step of epoch 0:  61%|██████    | 3820/6250 [3:58:31<2:39:50,  3.95s/it, gpt_loss=0.571, lr=8.24e-7][A
Train step of epoch 0:  61%|██████    | 3821/6250 [3:58:31<2:47:22,  4.13s/it, gpt_loss=0.571, lr=8.24e-7][A
Train step of epoch 0:  61%|██████    | 3821/6250 [3:58:35<2:47:22,  4.13s/it, gpt_loss=0.654, lr=8.24e-7][A
Train step of epoch 0:  61%|██████    | 3822/6250 [3:58:35<2:41:16,  3.99s/it, gpt_loss=0.654, lr=8.24e-7][A
Train step of epoch 0:  61%|██████    | 3822/6250 [3:58:39<2:41:16,  3.99s/it, gpt_loss=0.64, lr=8.24e-7] [A
Train step of epoch 0:  61%|██████    | 3823/6250 [3:58:39<2:48:59,  4.18s/it, gpt_loss=0.64, lr=8.24e-7][A[2025-04-24 03:51:22,918] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  61%|██████    | 3823/6250 [3:58:44<2:48:59,  4.18s/it, gpt_loss=0.508, lr=8.22e-7][A
Train step of epoch 0:  61%|██████    | 3824/6250 [3:58:44<2:52:48,  4.27s/it, gpt_loss=0.508, lr=8.22e-7][A
Train step of epoch 0:  61%|██████    | 3824/6250 [3:58:47<2:52:48,  4.27s/it, gpt_loss=0.558, lr=8.22e-7][A
Train step of epoch 0:  61%|██████    | 3825/6250 [3:58:47<2:40:09,  3.96s/it, gpt_loss=0.558, lr=8.22e-7][A
Train step of epoch 0:  61%|██████    | 3825/6250 [3:58:51<2:40:09,  3.96s/it, gpt_loss=0.506, lr=8.22e-7][A
Train step of epoch 0:  61%|██████    | 3826/6250 [3:58:51<2:43:15,  4.04s/it, gpt_loss=0.506, lr=8.22e-7][A
Train step of epoch 0:  61%|██████    | 3826/6250 [3:58:56<2:43:15,  4.04s/it, gpt_loss=0.653, lr=8.22e-7][A
Train step of epoch 0:  61%|██████    | 3827/6250 [3:58:56<2:47:53,  4.16s/it, gpt_loss=0.653, lr=8.22e-7][A[2025-04-24 03:51:38,909] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  61%|██████    | 3827/6250 [3:59:00<2:47:53,  4.16s/it, gpt_loss=0.643, lr=8.2e-7] [A
Train step of epoch 0:  61%|██████    | 3828/6250 [3:59:00<2:47:09,  4.14s/it, gpt_loss=0.643, lr=8.2e-7][A
Train step of epoch 0:  61%|██████    | 3828/6250 [3:59:02<2:47:09,  4.14s/it, gpt_loss=0.552, lr=8.2e-7][A
Train step of epoch 0:  61%|██████▏   | 3829/6250 [3:59:02<2:28:13,  3.67s/it, gpt_loss=0.552, lr=8.2e-7][A
Train step of epoch 0:  61%|██████▏   | 3829/6250 [3:59:06<2:28:13,  3.67s/it, gpt_loss=0.443, lr=8.2e-7][A
Train step of epoch 0:  61%|██████▏   | 3830/6250 [3:59:06<2:30:47,  3.74s/it, gpt_loss=0.443, lr=8.2e-7][A
Train step of epoch 0:  61%|██████▏   | 3830/6250 [3:59:10<2:30:47,  3.74s/it, gpt_loss=0.687, lr=8.2e-7][A
Train step of epoch 0:  61%|██████▏   | 3831/6250 [3:59:10<2:35:52,  3.87s/it, gpt_loss=0.687, lr=8.2e-7][A[2025-04-24 03:51:54,391] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  61%|██████▏   | 3831/6250 [3:59:15<2:35:52,  3.87s/it, gpt_loss=0.565, lr=8.18e-7][A
Train step of epoch 0:  61%|██████▏   | 3832/6250 [3:59:15<2:47:38,  4.16s/it, gpt_loss=0.565, lr=8.18e-7][A
Train step of epoch 0:  61%|██████▏   | 3832/6250 [3:59:18<2:47:38,  4.16s/it, gpt_loss=0.564, lr=8.18e-7][A
Train step of epoch 0:  61%|██████▏   | 3833/6250 [3:59:18<2:34:50,  3.84s/it, gpt_loss=0.564, lr=8.18e-7][A
Train step of epoch 0:  61%|██████▏   | 3833/6250 [3:59:23<2:34:50,  3.84s/it, gpt_loss=0.629, lr=8.18e-7][A
Train step of epoch 0:  61%|██████▏   | 3834/6250 [3:59:23<2:40:11,  3.98s/it, gpt_loss=0.629, lr=8.18e-7][A
Train step of epoch 0:  61%|██████▏   | 3834/6250 [3:59:26<2:40:11,  3.98s/it, gpt_loss=0.547, lr=8.18e-7][A
Train step of epoch 0:  61%|██████▏   | 3835/6250 [3:59:26<2:38:39,  3.94s/it, gpt_loss=0.547, lr=8.18e-7][A[2025-04-24 03:52:09,469] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  61%|██████▏   | 3835/6250 [3:59:30<2:38:39,  3.94s/it, gpt_loss=0.497, lr=8.17e-7][A
Train step of epoch 0:  61%|██████▏   | 3836/6250 [3:59:30<2:37:08,  3.91s/it, gpt_loss=0.497, lr=8.17e-7][A
Train step of epoch 0:  61%|██████▏   | 3836/6250 [3:59:34<2:37:08,  3.91s/it, gpt_loss=0.65, lr=8.17e-7] [A
Train step of epoch 0:  61%|██████▏   | 3837/6250 [3:59:34<2:35:35,  3.87s/it, gpt_loss=0.65, lr=8.17e-7][A
Train step of epoch 0:  61%|██████▏   | 3837/6250 [3:59:37<2:35:35,  3.87s/it, gpt_loss=0.671, lr=8.17e-7][A
Train step of epoch 0:  61%|██████▏   | 3838/6250 [3:59:37<2:22:10,  3.54s/it, gpt_loss=0.671, lr=8.17e-7][A
Train step of epoch 0:  61%|██████▏   | 3838/6250 [3:59:40<2:22:10,  3.54s/it, gpt_loss=0.594, lr=8.17e-7][A
Train step of epoch 0:  61%|██████▏   | 3839/6250 [3:59:40<2:20:41,  3.50s/it, gpt_loss=0.594, lr=8.17e-7][A[2025-04-24 03:52:22,741] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  61%|██████▏   | 3839/6250 [3:59:44<2:20:41,  3.50s/it, gpt_loss=0.539, lr=8.15e-7][A
Train step of epoch 0:  61%|██████▏   | 3840/6250 [3:59:44<2:18:19,  3.44s/it, gpt_loss=0.539, lr=8.15e-7][A
Train step of epoch 0:  61%|██████▏   | 3840/6250 [3:59:47<2:18:19,  3.44s/it, gpt_loss=0.545, lr=8.15e-7][A
Train step of epoch 0:  61%|██████▏   | 3841/6250 [3:59:47<2:19:14,  3.47s/it, gpt_loss=0.545, lr=8.15e-7][A
Train step of epoch 0:  61%|██████▏   | 3841/6250 [3:59:52<2:19:14,  3.47s/it, gpt_loss=0.77, lr=8.15e-7] [A
Train step of epoch 0:  61%|██████▏   | 3842/6250 [3:59:52<2:31:53,  3.78s/it, gpt_loss=0.77, lr=8.15e-7][A
Train step of epoch 0:  61%|██████▏   | 3842/6250 [3:59:56<2:31:53,  3.78s/it, gpt_loss=0.806, lr=8.15e-7][A
Train step of epoch 0:  61%|██████▏   | 3843/6250 [3:59:56<2:39:04,  3.97s/it, gpt_loss=0.806, lr=8.15e-7][A[2025-04-24 03:52:39,332] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  61%|██████▏   | 3843/6250 [4:00:00<2:39:04,  3.97s/it, gpt_loss=0.574, lr=8.13e-7][A
Train step of epoch 0:  62%|██████▏   | 3844/6250 [4:00:00<2:41:18,  4.02s/it, gpt_loss=0.574, lr=8.13e-7][A
Train step of epoch 0:  62%|██████▏   | 3844/6250 [4:00:03<2:41:18,  4.02s/it, gpt_loss=0.796, lr=8.13e-7][A
Train step of epoch 0:  62%|██████▏   | 3845/6250 [4:00:03<2:32:07,  3.80s/it, gpt_loss=0.796, lr=8.13e-7][A
Train step of epoch 0:  62%|██████▏   | 3845/6250 [4:00:07<2:32:07,  3.80s/it, gpt_loss=0.822, lr=8.13e-7][A
Train step of epoch 0:  62%|██████▏   | 3846/6250 [4:00:07<2:27:34,  3.68s/it, gpt_loss=0.822, lr=8.13e-7][A
Train step of epoch 0:  62%|██████▏   | 3846/6250 [4:00:10<2:27:34,  3.68s/it, gpt_loss=0.475, lr=8.13e-7][A
Train step of epoch 0:  62%|██████▏   | 3847/6250 [4:00:10<2:22:58,  3.57s/it, gpt_loss=0.475, lr=8.13e-7][A[2025-04-24 03:52:52,578] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  62%|██████▏   | 3847/6250 [4:00:13<2:22:58,  3.57s/it, gpt_loss=0.601, lr=8.11e-7][A
Train step of epoch 0:  62%|██████▏   | 3848/6250 [4:00:13<2:19:07,  3.48s/it, gpt_loss=0.601, lr=8.11e-7][A
Train step of epoch 0:  62%|██████▏   | 3848/6250 [4:00:18<2:19:07,  3.48s/it, gpt_loss=0.608, lr=8.11e-7][A
Train step of epoch 0:  62%|██████▏   | 3849/6250 [4:00:18<2:36:16,  3.91s/it, gpt_loss=0.608, lr=8.11e-7][A
Train step of epoch 0:  62%|██████▏   | 3849/6250 [4:00:23<2:36:16,  3.91s/it, gpt_loss=0.819, lr=8.11e-7][A
Train step of epoch 0:  62%|██████▏   | 3850/6250 [4:00:23<2:43:46,  4.09s/it, gpt_loss=0.819, lr=8.11e-7][A
Train step of epoch 0:  62%|██████▏   | 3850/6250 [4:00:26<2:43:46,  4.09s/it, gpt_loss=0.631, lr=8.11e-7][A
Train step of epoch 0:  62%|██████▏   | 3851/6250 [4:00:26<2:33:51,  3.85s/it, gpt_loss=0.631, lr=8.11e-7][A[2025-04-24 03:53:08,594] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  62%|██████▏   | 3851/6250 [4:00:29<2:33:51,  3.85s/it, gpt_loss=0.496, lr=8.09e-7][A
Train step of epoch 0:  62%|██████▏   | 3852/6250 [4:00:29<2:27:12,  3.68s/it, gpt_loss=0.496, lr=8.09e-7][A
Train step of epoch 0:  62%|██████▏   | 3852/6250 [4:00:34<2:27:12,  3.68s/it, gpt_loss=0.769, lr=8.09e-7][A
Train step of epoch 0:  62%|██████▏   | 3853/6250 [4:00:34<2:38:12,  3.96s/it, gpt_loss=0.769, lr=8.09e-7][A
Train step of epoch 0:  62%|██████▏   | 3853/6250 [4:00:37<2:38:12,  3.96s/it, gpt_loss=0.572, lr=8.09e-7][A
Train step of epoch 0:  62%|██████▏   | 3854/6250 [4:00:37<2:27:48,  3.70s/it, gpt_loss=0.572, lr=8.09e-7][A
Train step of epoch 0:  62%|██████▏   | 3854/6250 [4:00:42<2:27:48,  3.70s/it, gpt_loss=0.772, lr=8.09e-7][A
Train step of epoch 0:  62%|██████▏   | 3855/6250 [4:00:42<2:39:59,  4.01s/it, gpt_loss=0.772, lr=8.09e-7][A[2025-04-24 03:53:23,849] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  62%|██████▏   | 3855/6250 [4:00:45<2:39:59,  4.01s/it, gpt_loss=0.501, lr=8.08e-7][A
Train step of epoch 0:  62%|██████▏   | 3856/6250 [4:00:45<2:25:46,  3.65s/it, gpt_loss=0.501, lr=8.08e-7][A
Train step of epoch 0:  62%|██████▏   | 3856/6250 [4:00:48<2:25:46,  3.65s/it, gpt_loss=0.503, lr=8.08e-7][A
Train step of epoch 0:  62%|██████▏   | 3857/6250 [4:00:48<2:22:40,  3.58s/it, gpt_loss=0.503, lr=8.08e-7][A
Train step of epoch 0:  62%|██████▏   | 3857/6250 [4:00:52<2:22:40,  3.58s/it, gpt_loss=0.602, lr=8.08e-7][A
Train step of epoch 0:  62%|██████▏   | 3858/6250 [4:00:52<2:23:59,  3.61s/it, gpt_loss=0.602, lr=8.08e-7][A
Train step of epoch 0:  62%|██████▏   | 3858/6250 [4:00:55<2:23:59,  3.61s/it, gpt_loss=0.652, lr=8.08e-7][A
Train step of epoch 0:  62%|██████▏   | 3859/6250 [4:00:55<2:21:02,  3.54s/it, gpt_loss=0.652, lr=8.08e-7][A[2025-04-24 03:53:38,086] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  62%|██████▏   | 3859/6250 [4:00:59<2:21:02,  3.54s/it, gpt_loss=0.594, lr=8.06e-7][A
Train step of epoch 0:  62%|██████▏   | 3860/6250 [4:00:59<2:23:47,  3.61s/it, gpt_loss=0.594, lr=8.06e-7][A
Train step of epoch 0:  62%|██████▏   | 3860/6250 [4:01:03<2:23:47,  3.61s/it, gpt_loss=0.856, lr=8.06e-7][A
Train step of epoch 0:  62%|██████▏   | 3861/6250 [4:01:03<2:25:06,  3.64s/it, gpt_loss=0.856, lr=8.06e-7][A
Train step of epoch 0:  62%|██████▏   | 3861/6250 [4:01:07<2:25:06,  3.64s/it, gpt_loss=0.594, lr=8.06e-7][A
Train step of epoch 0:  62%|██████▏   | 3862/6250 [4:01:07<2:30:19,  3.78s/it, gpt_loss=0.594, lr=8.06e-7][A
Train step of epoch 0:  62%|██████▏   | 3862/6250 [4:01:10<2:30:19,  3.78s/it, gpt_loss=0.615, lr=8.06e-7][A
Train step of epoch 0:  62%|██████▏   | 3863/6250 [4:01:10<2:26:18,  3.68s/it, gpt_loss=0.615, lr=8.06e-7][A[2025-04-24 03:53:52,887] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  62%|██████▏   | 3863/6250 [4:01:14<2:26:18,  3.68s/it, gpt_loss=0.74, lr=8.04e-7] [A
Train step of epoch 0:  62%|██████▏   | 3864/6250 [4:01:14<2:24:39,  3.64s/it, gpt_loss=0.74, lr=8.04e-7][A
Train step of epoch 0:  62%|██████▏   | 3864/6250 [4:01:16<2:24:39,  3.64s/it, gpt_loss=0.59, lr=8.04e-7][A
Train step of epoch 0:  62%|██████▏   | 3865/6250 [4:01:16<2:15:12,  3.40s/it, gpt_loss=0.59, lr=8.04e-7][A
Train step of epoch 0:  62%|██████▏   | 3865/6250 [4:01:21<2:15:12,  3.40s/it, gpt_loss=0.524, lr=8.04e-7][A
Train step of epoch 0:  62%|██████▏   | 3866/6250 [4:01:21<2:24:48,  3.64s/it, gpt_loss=0.524, lr=8.04e-7][A
Train step of epoch 0:  62%|██████▏   | 3866/6250 [4:01:24<2:24:48,  3.64s/it, gpt_loss=0.594, lr=8.04e-7][A
Train step of epoch 0:  62%|██████▏   | 3867/6250 [4:01:24<2:22:43,  3.59s/it, gpt_loss=0.594, lr=8.04e-7][A[2025-04-24 03:54:07,086] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  62%|██████▏   | 3867/6250 [4:01:28<2:22:43,  3.59s/it, gpt_loss=0.654, lr=8.02e-7][A
Train step of epoch 0:  62%|██████▏   | 3868/6250 [4:01:28<2:23:28,  3.61s/it, gpt_loss=0.654, lr=8.02e-7][A
Train step of epoch 0:  62%|██████▏   | 3868/6250 [4:01:31<2:23:28,  3.61s/it, gpt_loss=0.617, lr=8.02e-7][A
Train step of epoch 0:  62%|██████▏   | 3869/6250 [4:01:31<2:19:45,  3.52s/it, gpt_loss=0.617, lr=8.02e-7][A
Train step of epoch 0:  62%|██████▏   | 3869/6250 [4:01:35<2:19:45,  3.52s/it, gpt_loss=0.63, lr=8.02e-7] [A
Train step of epoch 0:  62%|██████▏   | 3870/6250 [4:01:35<2:27:50,  3.73s/it, gpt_loss=0.63, lr=8.02e-7][A
Train step of epoch 0:  62%|██████▏   | 3870/6250 [4:01:39<2:27:50,  3.73s/it, gpt_loss=0.639, lr=8.02e-7][A
Train step of epoch 0:  62%|██████▏   | 3871/6250 [4:01:39<2:26:14,  3.69s/it, gpt_loss=0.639, lr=8.02e-7][A[2025-04-24 03:54:21,210] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  62%|██████▏   | 3871/6250 [4:01:42<2:26:14,  3.69s/it, gpt_loss=0.698, lr=8.01e-7][A
Train step of epoch 0:  62%|██████▏   | 3872/6250 [4:01:42<2:18:09,  3.49s/it, gpt_loss=0.698, lr=8.01e-7][A
Train step of epoch 0:  62%|██████▏   | 3872/6250 [4:01:47<2:18:09,  3.49s/it, gpt_loss=0.516, lr=8.01e-7][A
Train step of epoch 0:  62%|██████▏   | 3873/6250 [4:01:47<2:30:48,  3.81s/it, gpt_loss=0.516, lr=8.01e-7][A
Train step of epoch 0:  62%|██████▏   | 3873/6250 [4:01:51<2:30:48,  3.81s/it, gpt_loss=0.807, lr=8.01e-7][A
Train step of epoch 0:  62%|██████▏   | 3874/6250 [4:01:51<2:36:53,  3.96s/it, gpt_loss=0.807, lr=8.01e-7][A
Train step of epoch 0:  62%|██████▏   | 3874/6250 [4:01:55<2:36:53,  3.96s/it, gpt_loss=0.516, lr=8.01e-7][A
Train step of epoch 0:  62%|██████▏   | 3875/6250 [4:01:55<2:36:27,  3.95s/it, gpt_loss=0.516, lr=8.01e-7][A[2025-04-24 03:54:37,581] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  62%|██████▏   | 3875/6250 [4:01:58<2:36:27,  3.95s/it, gpt_loss=0.764, lr=7.99e-7][A
Train step of epoch 0:  62%|██████▏   | 3876/6250 [4:01:58<2:31:44,  3.83s/it, gpt_loss=0.764, lr=7.99e-7][A
Train step of epoch 0:  62%|██████▏   | 3876/6250 [4:02:03<2:31:44,  3.83s/it, gpt_loss=0.458, lr=7.99e-7][A
Train step of epoch 0:  62%|██████▏   | 3877/6250 [4:02:03<2:37:19,  3.98s/it, gpt_loss=0.458, lr=7.99e-7][A
Train step of epoch 0:  62%|██████▏   | 3877/6250 [4:02:07<2:37:19,  3.98s/it, gpt_loss=0.646, lr=7.99e-7][A
Train step of epoch 0:  62%|██████▏   | 3878/6250 [4:02:07<2:37:37,  3.99s/it, gpt_loss=0.646, lr=7.99e-7][A
Train step of epoch 0:  62%|██████▏   | 3878/6250 [4:02:10<2:37:37,  3.99s/it, gpt_loss=0.601, lr=7.99e-7][A
Train step of epoch 0:  62%|██████▏   | 3879/6250 [4:02:10<2:35:47,  3.94s/it, gpt_loss=0.601, lr=7.99e-7][A[2025-04-24 03:54:53,781] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  62%|██████▏   | 3879/6250 [4:02:15<2:35:47,  3.94s/it, gpt_loss=0.43, lr=7.97e-7] [A
Train step of epoch 0:  62%|██████▏   | 3880/6250 [4:02:15<2:36:54,  3.97s/it, gpt_loss=0.43, lr=7.97e-7][A
Train step of epoch 0:  62%|██████▏   | 3880/6250 [4:02:18<2:36:54,  3.97s/it, gpt_loss=0.745, lr=7.97e-7][A
Train step of epoch 0:  62%|██████▏   | 3881/6250 [4:02:18<2:34:26,  3.91s/it, gpt_loss=0.745, lr=7.97e-7][A
Train step of epoch 0:  62%|██████▏   | 3881/6250 [4:02:22<2:34:26,  3.91s/it, gpt_loss=0.559, lr=7.97e-7][A
Train step of epoch 0:  62%|██████▏   | 3882/6250 [4:02:22<2:27:19,  3.73s/it, gpt_loss=0.559, lr=7.97e-7][A
Train step of epoch 0:  62%|██████▏   | 3882/6250 [4:02:25<2:27:19,  3.73s/it, gpt_loss=0.574, lr=7.97e-7][A
Train step of epoch 0:  62%|██████▏   | 3883/6250 [4:02:25<2:21:21,  3.58s/it, gpt_loss=0.574, lr=7.97e-7][A[2025-04-24 03:55:08,596] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  62%|██████▏   | 3883/6250 [4:02:29<2:21:21,  3.58s/it, gpt_loss=0.626, lr=7.95e-7][A
Train step of epoch 0:  62%|██████▏   | 3884/6250 [4:02:29<2:32:05,  3.86s/it, gpt_loss=0.626, lr=7.95e-7][A
Train step of epoch 0:  62%|██████▏   | 3884/6250 [4:02:33<2:32:05,  3.86s/it, gpt_loss=0.594, lr=7.95e-7][A
Train step of epoch 0:  62%|██████▏   | 3885/6250 [4:02:33<2:28:54,  3.78s/it, gpt_loss=0.594, lr=7.95e-7][A
Train step of epoch 0:  62%|██████▏   | 3885/6250 [4:02:37<2:28:54,  3.78s/it, gpt_loss=0.752, lr=7.95e-7][A
Train step of epoch 0:  62%|██████▏   | 3886/6250 [4:02:37<2:31:58,  3.86s/it, gpt_loss=0.752, lr=7.95e-7][A
Train step of epoch 0:  62%|██████▏   | 3886/6250 [4:02:40<2:31:58,  3.86s/it, gpt_loss=0.557, lr=7.95e-7][A
Train step of epoch 0:  62%|██████▏   | 3887/6250 [4:02:40<2:22:54,  3.63s/it, gpt_loss=0.557, lr=7.95e-7][A[2025-04-24 03:55:23,477] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  62%|██████▏   | 3887/6250 [4:02:44<2:22:54,  3.63s/it, gpt_loss=0.561, lr=7.94e-7][A
Train step of epoch 0:  62%|██████▏   | 3888/6250 [4:02:44<2:29:00,  3.79s/it, gpt_loss=0.561, lr=7.94e-7][A
Train step of epoch 0:  62%|██████▏   | 3888/6250 [4:02:48<2:29:00,  3.79s/it, gpt_loss=0.943, lr=7.94e-7][A
Train step of epoch 0:  62%|██████▏   | 3889/6250 [4:02:48<2:27:41,  3.75s/it, gpt_loss=0.943, lr=7.94e-7][A
Train step of epoch 0:  62%|██████▏   | 3889/6250 [4:02:52<2:27:41,  3.75s/it, gpt_loss=0.534, lr=7.94e-7][A
Train step of epoch 0:  62%|██████▏   | 3890/6250 [4:02:52<2:32:47,  3.88s/it, gpt_loss=0.534, lr=7.94e-7][A
Train step of epoch 0:  62%|██████▏   | 3890/6250 [4:02:57<2:32:47,  3.88s/it, gpt_loss=0.591, lr=7.94e-7][A
Train step of epoch 0:  62%|██████▏   | 3891/6250 [4:02:57<2:45:24,  4.21s/it, gpt_loss=0.591, lr=7.94e-7][A[2025-04-24 03:55:40,793] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  62%|██████▏   | 3891/6250 [4:03:02<2:45:24,  4.21s/it, gpt_loss=0.51, lr=7.92e-7] [A
Train step of epoch 0:  62%|██████▏   | 3892/6250 [4:03:02<2:48:37,  4.29s/it, gpt_loss=0.51, lr=7.92e-7][A
Train step of epoch 0:  62%|██████▏   | 3892/6250 [4:03:05<2:48:37,  4.29s/it, gpt_loss=0.598, lr=7.92e-7][A
Train step of epoch 0:  62%|██████▏   | 3893/6250 [4:03:05<2:42:57,  4.15s/it, gpt_loss=0.598, lr=7.92e-7][A
Train step of epoch 0:  62%|██████▏   | 3893/6250 [4:03:09<2:42:57,  4.15s/it, gpt_loss=0.659, lr=7.92e-7][A
Train step of epoch 0:  62%|██████▏   | 3894/6250 [4:03:09<2:41:15,  4.11s/it, gpt_loss=0.659, lr=7.92e-7][A
Train step of epoch 0:  62%|██████▏   | 3894/6250 [4:03:12<2:41:15,  4.11s/it, gpt_loss=0.526, lr=7.92e-7][A
Train step of epoch 0:  62%|██████▏   | 3895/6250 [4:03:12<2:24:24,  3.68s/it, gpt_loss=0.526, lr=7.92e-7][A[2025-04-24 03:55:55,186] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  62%|██████▏   | 3895/6250 [4:03:16<2:24:24,  3.68s/it, gpt_loss=0.533, lr=7.9e-7] [A
Train step of epoch 0:  62%|██████▏   | 3896/6250 [4:03:16<2:26:46,  3.74s/it, gpt_loss=0.533, lr=7.9e-7][A
Train step of epoch 0:  62%|██████▏   | 3896/6250 [4:03:19<2:26:46,  3.74s/it, gpt_loss=0.615, lr=7.9e-7][A
Train step of epoch 0:  62%|██████▏   | 3897/6250 [4:03:19<2:13:13,  3.40s/it, gpt_loss=0.615, lr=7.9e-7][A
Train step of epoch 0:  62%|██████▏   | 3897/6250 [4:03:23<2:13:13,  3.40s/it, gpt_loss=0.684, lr=7.9e-7][A
Train step of epoch 0:  62%|██████▏   | 3898/6250 [4:03:23<2:21:41,  3.61s/it, gpt_loss=0.684, lr=7.9e-7][A
Train step of epoch 0:  62%|██████▏   | 3898/6250 [4:03:27<2:21:41,  3.61s/it, gpt_loss=0.7, lr=7.9e-7]  [A
Train step of epoch 0:  62%|██████▏   | 3899/6250 [4:03:27<2:28:36,  3.79s/it, gpt_loss=0.7, lr=7.9e-7][A[2025-04-24 03:56:10,582] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  62%|██████▏   | 3899/6250 [4:03:31<2:28:36,  3.79s/it, gpt_loss=0.638, lr=7.88e-7][A
Train step of epoch 0:  62%|██████▏   | 3900/6250 [4:03:31<2:36:31,  4.00s/it, gpt_loss=0.638, lr=7.88e-7][A
Train step of epoch 0:  62%|██████▏   | 3900/6250 [4:03:35<2:36:31,  4.00s/it, gpt_loss=0.538, lr=7.88e-7][A
Train step of epoch 0:  62%|██████▏   | 3901/6250 [4:03:35<2:34:17,  3.94s/it, gpt_loss=0.538, lr=7.88e-7][A
Train step of epoch 0:  62%|██████▏   | 3901/6250 [4:03:39<2:34:17,  3.94s/it, gpt_loss=0.822, lr=7.88e-7][A
Train step of epoch 0:  62%|██████▏   | 3902/6250 [4:03:39<2:28:03,  3.78s/it, gpt_loss=0.822, lr=7.88e-7][A
Train step of epoch 0:  62%|██████▏   | 3902/6250 [4:03:42<2:28:03,  3.78s/it, gpt_loss=0.816, lr=7.88e-7][A
Train step of epoch 0:  62%|██████▏   | 3903/6250 [4:03:42<2:22:49,  3.65s/it, gpt_loss=0.816, lr=7.88e-7][A[2025-04-24 03:56:24,995] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  62%|██████▏   | 3903/6250 [4:03:46<2:22:49,  3.65s/it, gpt_loss=0.698, lr=7.87e-7][A
Train step of epoch 0:  62%|██████▏   | 3904/6250 [4:03:46<2:25:00,  3.71s/it, gpt_loss=0.698, lr=7.87e-7][A
Train step of epoch 0:  62%|██████▏   | 3904/6250 [4:03:50<2:25:00,  3.71s/it, gpt_loss=0.523, lr=7.87e-7][A
Train step of epoch 0:  62%|██████▏   | 3905/6250 [4:03:50<2:30:05,  3.84s/it, gpt_loss=0.523, lr=7.87e-7][A
Train step of epoch 0:  62%|██████▏   | 3905/6250 [4:03:54<2:30:05,  3.84s/it, gpt_loss=0.66, lr=7.87e-7] [A
Train step of epoch 0:  62%|██████▏   | 3906/6250 [4:03:54<2:29:51,  3.84s/it, gpt_loss=0.66, lr=7.87e-7][A
Train step of epoch 0:  62%|██████▏   | 3906/6250 [4:03:57<2:29:51,  3.84s/it, gpt_loss=0.79, lr=7.87e-7][A
Train step of epoch 0:  63%|██████▎   | 3907/6250 [4:03:57<2:24:51,  3.71s/it, gpt_loss=0.79, lr=7.87e-7][A[2025-04-24 03:56:40,448] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  63%|██████▎   | 3907/6250 [4:04:01<2:24:51,  3.71s/it, gpt_loss=0.567, lr=7.85e-7][A
Train step of epoch 0:  63%|██████▎   | 3908/6250 [4:04:01<2:28:57,  3.82s/it, gpt_loss=0.567, lr=7.85e-7][A
Train step of epoch 0:  63%|██████▎   | 3908/6250 [4:04:05<2:28:57,  3.82s/it, gpt_loss=0.485, lr=7.85e-7][A
Train step of epoch 0:  63%|██████▎   | 3909/6250 [4:04:05<2:28:46,  3.81s/it, gpt_loss=0.485, lr=7.85e-7][A
Train step of epoch 0:  63%|██████▎   | 3909/6250 [4:04:09<2:28:46,  3.81s/it, gpt_loss=0.578, lr=7.85e-7][A
Train step of epoch 0:  63%|██████▎   | 3910/6250 [4:04:09<2:31:00,  3.87s/it, gpt_loss=0.578, lr=7.85e-7][A
Train step of epoch 0:  63%|██████▎   | 3910/6250 [4:04:12<2:31:00,  3.87s/it, gpt_loss=0.612, lr=7.85e-7][A
Train step of epoch 0:  63%|██████▎   | 3911/6250 [4:04:12<2:26:19,  3.75s/it, gpt_loss=0.612, lr=7.85e-7][A[2025-04-24 03:56:55,718] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  63%|██████▎   | 3911/6250 [4:04:16<2:26:19,  3.75s/it, gpt_loss=0.486, lr=7.83e-7][A
Train step of epoch 0:  63%|██████▎   | 3912/6250 [4:04:16<2:28:52,  3.82s/it, gpt_loss=0.486, lr=7.83e-7][A
Train step of epoch 0:  63%|██████▎   | 3912/6250 [4:04:20<2:28:52,  3.82s/it, gpt_loss=0.595, lr=7.83e-7][A
Train step of epoch 0:  63%|██████▎   | 3913/6250 [4:04:20<2:30:50,  3.87s/it, gpt_loss=0.595, lr=7.83e-7][A
Train step of epoch 0:  63%|██████▎   | 3913/6250 [4:04:25<2:30:50,  3.87s/it, gpt_loss=0.563, lr=7.83e-7][A
Train step of epoch 0:  63%|██████▎   | 3914/6250 [4:04:25<2:39:50,  4.11s/it, gpt_loss=0.563, lr=7.83e-7][A
Train step of epoch 0:  63%|██████▎   | 3914/6250 [4:04:30<2:39:50,  4.11s/it, gpt_loss=0.618, lr=7.83e-7][A
Train step of epoch 0:  63%|██████▎   | 3915/6250 [4:04:30<2:48:02,  4.32s/it, gpt_loss=0.618, lr=7.83e-7][A[2025-04-24 03:57:12,945] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  63%|██████▎   | 3915/6250 [4:04:34<2:48:02,  4.32s/it, gpt_loss=0.681, lr=7.81e-7][A
Train step of epoch 0:  63%|██████▎   | 3916/6250 [4:04:34<2:41:35,  4.15s/it, gpt_loss=0.681, lr=7.81e-7][A
Train step of epoch 0:  63%|██████▎   | 3916/6250 [4:04:37<2:41:35,  4.15s/it, gpt_loss=0.678, lr=7.81e-7][A
Train step of epoch 0:  63%|██████▎   | 3917/6250 [4:04:37<2:29:20,  3.84s/it, gpt_loss=0.678, lr=7.81e-7][A
Train step of epoch 0:  63%|██████▎   | 3917/6250 [4:04:41<2:29:20,  3.84s/it, gpt_loss=0.733, lr=7.81e-7][A
Train step of epoch 0:  63%|██████▎   | 3918/6250 [4:04:41<2:27:30,  3.80s/it, gpt_loss=0.733, lr=7.81e-7][A
Train step of epoch 0:  63%|██████▎   | 3918/6250 [4:04:45<2:27:30,  3.80s/it, gpt_loss=0.664, lr=7.81e-7][A
Train step of epoch 0:  63%|██████▎   | 3919/6250 [4:04:45<2:31:52,  3.91s/it, gpt_loss=0.664, lr=7.81e-7][A[2025-04-24 03:57:28,650] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  63%|██████▎   | 3919/6250 [4:04:49<2:31:52,  3.91s/it, gpt_loss=0.562, lr=7.8e-7] [A
Train step of epoch 0:  63%|██████▎   | 3920/6250 [4:04:49<2:41:22,  4.16s/it, gpt_loss=0.562, lr=7.8e-7][A
Train step of epoch 0:  63%|██████▎   | 3920/6250 [4:04:54<2:41:22,  4.16s/it, gpt_loss=0.725, lr=7.8e-7][A
Train step of epoch 0:  63%|██████▎   | 3921/6250 [4:04:54<2:45:24,  4.26s/it, gpt_loss=0.725, lr=7.8e-7][A
Train step of epoch 0:  63%|██████▎   | 3921/6250 [4:04:57<2:45:24,  4.26s/it, gpt_loss=0.453, lr=7.8e-7][A
Train step of epoch 0:  63%|██████▎   | 3922/6250 [4:04:57<2:36:40,  4.04s/it, gpt_loss=0.453, lr=7.8e-7][A
Train step of epoch 0:  63%|██████▎   | 3922/6250 [4:05:02<2:36:40,  4.04s/it, gpt_loss=0.576, lr=7.8e-7][A
Train step of epoch 0:  63%|██████▎   | 3923/6250 [4:05:02<2:42:54,  4.20s/it, gpt_loss=0.576, lr=7.8e-7][A[2025-04-24 03:57:44,799] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  63%|██████▎   | 3923/6250 [4:05:06<2:42:54,  4.20s/it, gpt_loss=0.623, lr=7.78e-7][A
Train step of epoch 0:  63%|██████▎   | 3924/6250 [4:05:06<2:35:12,  4.00s/it, gpt_loss=0.623, lr=7.78e-7][A
Train step of epoch 0:  63%|██████▎   | 3924/6250 [4:05:10<2:35:12,  4.00s/it, gpt_loss=0.788, lr=7.78e-7][A
Train step of epoch 0:  63%|██████▎   | 3925/6250 [4:05:10<2:40:21,  4.14s/it, gpt_loss=0.788, lr=7.78e-7][A
Train step of epoch 0:  63%|██████▎   | 3925/6250 [4:05:14<2:40:21,  4.14s/it, gpt_loss=0.71, lr=7.78e-7] [A
Train step of epoch 0:  63%|██████▎   | 3926/6250 [4:05:14<2:41:56,  4.18s/it, gpt_loss=0.71, lr=7.78e-7][A
Train step of epoch 0:  63%|██████▎   | 3926/6250 [4:05:17<2:41:56,  4.18s/it, gpt_loss=0.492, lr=7.78e-7][A
Train step of epoch 0:  63%|██████▎   | 3927/6250 [4:05:17<2:26:20,  3.78s/it, gpt_loss=0.492, lr=7.78e-7][A[2025-04-24 03:58:00,219] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  63%|██████▎   | 3927/6250 [4:05:21<2:26:20,  3.78s/it, gpt_loss=0.76, lr=7.76e-7] [A
Train step of epoch 0:  63%|██████▎   | 3928/6250 [4:05:21<2:27:00,  3.80s/it, gpt_loss=0.76, lr=7.76e-7][A
Train step of epoch 0:  63%|██████▎   | 3928/6250 [4:05:24<2:27:00,  3.80s/it, gpt_loss=0.545, lr=7.76e-7][A
Train step of epoch 0:  63%|██████▎   | 3929/6250 [4:05:24<2:21:15,  3.65s/it, gpt_loss=0.545, lr=7.76e-7][A
Train step of epoch 0:  63%|██████▎   | 3929/6250 [4:05:29<2:21:15,  3.65s/it, gpt_loss=0.638, lr=7.76e-7][A
Train step of epoch 0:  63%|██████▎   | 3930/6250 [4:05:29<2:28:38,  3.84s/it, gpt_loss=0.638, lr=7.76e-7][A
Train step of epoch 0:  63%|██████▎   | 3930/6250 [4:05:32<2:28:38,  3.84s/it, gpt_loss=0.521, lr=7.76e-7][A
Train step of epoch 0:  63%|██████▎   | 3931/6250 [4:05:32<2:27:28,  3.82s/it, gpt_loss=0.521, lr=7.76e-7][A[2025-04-24 03:58:14,604] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  63%|██████▎   | 3931/6250 [4:05:35<2:27:28,  3.82s/it, gpt_loss=0.67, lr=7.74e-7] [A
Train step of epoch 0:  63%|██████▎   | 3932/6250 [4:05:35<2:18:22,  3.58s/it, gpt_loss=0.67, lr=7.74e-7][A
Train step of epoch 0:  63%|██████▎   | 3932/6250 [4:05:39<2:18:22,  3.58s/it, gpt_loss=0.709, lr=7.74e-7][A
Train step of epoch 0:  63%|██████▎   | 3933/6250 [4:05:39<2:23:55,  3.73s/it, gpt_loss=0.709, lr=7.74e-7][A
Train step of epoch 0:  63%|██████▎   | 3933/6250 [4:05:43<2:23:55,  3.73s/it, gpt_loss=0.725, lr=7.74e-7][A
Train step of epoch 0:  63%|██████▎   | 3934/6250 [4:05:43<2:26:47,  3.80s/it, gpt_loss=0.725, lr=7.74e-7][A
Train step of epoch 0:  63%|██████▎   | 3934/6250 [4:05:47<2:26:47,  3.80s/it, gpt_loss=0.558, lr=7.74e-7][A
Train step of epoch 0:  63%|██████▎   | 3935/6250 [4:05:47<2:18:56,  3.60s/it, gpt_loss=0.558, lr=7.74e-7][A[2025-04-24 03:58:29,771] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  63%|██████▎   | 3935/6250 [4:05:51<2:18:56,  3.60s/it, gpt_loss=0.574, lr=7.73e-7][A
Train step of epoch 0:  63%|██████▎   | 3936/6250 [4:05:51<2:23:22,  3.72s/it, gpt_loss=0.574, lr=7.73e-7][A
Train step of epoch 0:  63%|██████▎   | 3936/6250 [4:05:55<2:23:22,  3.72s/it, gpt_loss=0.691, lr=7.73e-7][A
Train step of epoch 0:  63%|██████▎   | 3937/6250 [4:05:55<2:32:55,  3.97s/it, gpt_loss=0.691, lr=7.73e-7][A
Train step of epoch 0:  63%|██████▎   | 3937/6250 [4:05:57<2:32:55,  3.97s/it, gpt_loss=0.502, lr=7.73e-7][A
Train step of epoch 0:  63%|██████▎   | 3938/6250 [4:05:57<2:13:14,  3.46s/it, gpt_loss=0.502, lr=7.73e-7][A
Train step of epoch 0:  63%|██████▎   | 3938/6250 [4:06:01<2:13:14,  3.46s/it, gpt_loss=0.675, lr=7.73e-7][A
Train step of epoch 0:  63%|██████▎   | 3939/6250 [4:06:01<2:18:42,  3.60s/it, gpt_loss=0.675, lr=7.73e-7][A[2025-04-24 03:58:45,219] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  63%|██████▎   | 3939/6250 [4:06:06<2:18:42,  3.60s/it, gpt_loss=0.51, lr=7.71e-7] [A
Train step of epoch 0:  63%|██████▎   | 3940/6250 [4:06:06<2:31:15,  3.93s/it, gpt_loss=0.51, lr=7.71e-7][A
Train step of epoch 0:  63%|██████▎   | 3940/6250 [4:06:10<2:31:15,  3.93s/it, gpt_loss=0.516, lr=7.71e-7][A
Train step of epoch 0:  63%|██████▎   | 3941/6250 [4:06:10<2:35:09,  4.03s/it, gpt_loss=0.516, lr=7.71e-7][A
Train step of epoch 0:  63%|██████▎   | 3941/6250 [4:06:13<2:35:09,  4.03s/it, gpt_loss=0.512, lr=7.71e-7][A
Train step of epoch 0:  63%|██████▎   | 3942/6250 [4:06:13<2:20:43,  3.66s/it, gpt_loss=0.512, lr=7.71e-7][A
Train step of epoch 0:  63%|██████▎   | 3942/6250 [4:06:17<2:20:43,  3.66s/it, gpt_loss=0.502, lr=7.71e-7][A
Train step of epoch 0:  63%|██████▎   | 3943/6250 [4:06:17<2:20:25,  3.65s/it, gpt_loss=0.502, lr=7.71e-7][A[2025-04-24 03:58:59,988] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  63%|██████▎   | 3943/6250 [4:06:21<2:20:25,  3.65s/it, gpt_loss=0.683, lr=7.69e-7][A
Train step of epoch 0:  63%|██████▎   | 3944/6250 [4:06:21<2:25:12,  3.78s/it, gpt_loss=0.683, lr=7.69e-7][A
Train step of epoch 0:  63%|██████▎   | 3944/6250 [4:06:25<2:25:12,  3.78s/it, gpt_loss=0.56, lr=7.69e-7] [A
Train step of epoch 0:  63%|██████▎   | 3945/6250 [4:06:25<2:25:47,  3.80s/it, gpt_loss=0.56, lr=7.69e-7][A
Train step of epoch 0:  63%|██████▎   | 3945/6250 [4:06:28<2:25:47,  3.80s/it, gpt_loss=0.729, lr=7.69e-7][A
Train step of epoch 0:  63%|██████▎   | 3946/6250 [4:06:28<2:22:05,  3.70s/it, gpt_loss=0.729, lr=7.69e-7][A
Train step of epoch 0:  63%|██████▎   | 3946/6250 [4:06:33<2:22:05,  3.70s/it, gpt_loss=0.699, lr=7.69e-7][A
Train step of epoch 0:  63%|██████▎   | 3947/6250 [4:06:33<2:30:38,  3.92s/it, gpt_loss=0.699, lr=7.69e-7][A[2025-04-24 03:59:14,587] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  63%|██████▎   | 3947/6250 [4:06:35<2:30:38,  3.92s/it, gpt_loss=0.601, lr=7.67e-7][A
Train step of epoch 0:  63%|██████▎   | 3948/6250 [4:06:35<2:18:02,  3.60s/it, gpt_loss=0.601, lr=7.67e-7][A
Train step of epoch 0:  63%|██████▎   | 3948/6250 [4:06:39<2:18:02,  3.60s/it, gpt_loss=0.581, lr=7.67e-7][A
Train step of epoch 0:  63%|██████▎   | 3949/6250 [4:06:39<2:19:41,  3.64s/it, gpt_loss=0.581, lr=7.67e-7][A
Train step of epoch 0:  63%|██████▎   | 3949/6250 [4:06:43<2:19:41,  3.64s/it, gpt_loss=0.596, lr=7.67e-7][A
Train step of epoch 0:  63%|██████▎   | 3950/6250 [4:06:43<2:17:26,  3.59s/it, gpt_loss=0.596, lr=7.67e-7][A
Train step of epoch 0:  63%|██████▎   | 3950/6250 [4:06:46<2:17:26,  3.59s/it, gpt_loss=0.663, lr=7.67e-7][A
Train step of epoch 0:  63%|██████▎   | 3951/6250 [4:06:46<2:19:35,  3.64s/it, gpt_loss=0.663, lr=7.67e-7][A[2025-04-24 03:59:28,940] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  63%|██████▎   | 3951/6250 [4:06:50<2:19:35,  3.64s/it, gpt_loss=0.839, lr=7.66e-7][A
Train step of epoch 0:  63%|██████▎   | 3952/6250 [4:06:50<2:16:28,  3.56s/it, gpt_loss=0.839, lr=7.66e-7][A
Train step of epoch 0:  63%|██████▎   | 3952/6250 [4:06:53<2:16:28,  3.56s/it, gpt_loss=0.643, lr=7.66e-7][A
Train step of epoch 0:  63%|██████▎   | 3953/6250 [4:06:53<2:17:14,  3.58s/it, gpt_loss=0.643, lr=7.66e-7][A
Train step of epoch 0:  63%|██████▎   | 3953/6250 [4:06:57<2:17:14,  3.58s/it, gpt_loss=0.569, lr=7.66e-7][A
Train step of epoch 0:  63%|██████▎   | 3954/6250 [4:06:57<2:18:21,  3.62s/it, gpt_loss=0.569, lr=7.66e-7][A
Train step of epoch 0:  63%|██████▎   | 3954/6250 [4:07:01<2:18:21,  3.62s/it, gpt_loss=0.56, lr=7.66e-7] [A
Train step of epoch 0:  63%|██████▎   | 3955/6250 [4:07:01<2:24:43,  3.78s/it, gpt_loss=0.56, lr=7.66e-7][A[2025-04-24 03:59:43,659] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  63%|██████▎   | 3955/6250 [4:07:04<2:24:43,  3.78s/it, gpt_loss=0.57, lr=7.64e-7][A
Train step of epoch 0:  63%|██████▎   | 3956/6250 [4:07:04<2:18:12,  3.61s/it, gpt_loss=0.57, lr=7.64e-7][A
Train step of epoch 0:  63%|██████▎   | 3956/6250 [4:07:08<2:18:12,  3.61s/it, gpt_loss=0.663, lr=7.64e-7][A
Train step of epoch 0:  63%|██████▎   | 3957/6250 [4:07:08<2:23:20,  3.75s/it, gpt_loss=0.663, lr=7.64e-7][A
Train step of epoch 0:  63%|██████▎   | 3957/6250 [4:07:12<2:23:20,  3.75s/it, gpt_loss=0.574, lr=7.64e-7][A
Train step of epoch 0:  63%|██████▎   | 3958/6250 [4:07:12<2:19:38,  3.66s/it, gpt_loss=0.574, lr=7.64e-7][A
Train step of epoch 0:  63%|██████▎   | 3958/6250 [4:07:16<2:19:38,  3.66s/it, gpt_loss=0.592, lr=7.64e-7][A
Train step of epoch 0:  63%|██████▎   | 3959/6250 [4:07:16<2:23:50,  3.77s/it, gpt_loss=0.592, lr=7.64e-7][A[2025-04-24 03:59:58,195] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  63%|██████▎   | 3959/6250 [4:07:19<2:23:50,  3.77s/it, gpt_loss=0.626, lr=7.62e-7][A
Train step of epoch 0:  63%|██████▎   | 3960/6250 [4:07:19<2:15:04,  3.54s/it, gpt_loss=0.626, lr=7.62e-7][A
Train step of epoch 0:  63%|██████▎   | 3960/6250 [4:07:26<2:15:04,  3.54s/it, gpt_loss=0.722, lr=7.62e-7][A
Train step of epoch 0:  63%|██████▎   | 3961/6250 [4:07:26<2:50:35,  4.47s/it, gpt_loss=0.722, lr=7.62e-7][A
Train step of epoch 0:  63%|██████▎   | 3961/6250 [4:07:29<2:50:35,  4.47s/it, gpt_loss=0.616, lr=7.62e-7][A
Train step of epoch 0:  63%|██████▎   | 3962/6250 [4:07:29<2:35:33,  4.08s/it, gpt_loss=0.616, lr=7.62e-7][A
Train step of epoch 0:  63%|██████▎   | 3962/6250 [4:07:32<2:35:33,  4.08s/it, gpt_loss=0.451, lr=7.62e-7][A
Train step of epoch 0:  63%|██████▎   | 3963/6250 [4:07:32<2:25:48,  3.83s/it, gpt_loss=0.451, lr=7.62e-7][A[2025-04-24 04:00:14,938] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  63%|██████▎   | 3963/6250 [4:07:36<2:25:48,  3.83s/it, gpt_loss=0.551, lr=7.61e-7][A
Train step of epoch 0:  63%|██████▎   | 3964/6250 [4:07:36<2:24:18,  3.79s/it, gpt_loss=0.551, lr=7.61e-7][A
Train step of epoch 0:  63%|██████▎   | 3964/6250 [4:07:40<2:24:18,  3.79s/it, gpt_loss=0.662, lr=7.61e-7][A
Train step of epoch 0:  63%|██████▎   | 3965/6250 [4:07:40<2:34:11,  4.05s/it, gpt_loss=0.662, lr=7.61e-7][A
Train step of epoch 0:  63%|██████▎   | 3965/6250 [4:07:45<2:34:11,  4.05s/it, gpt_loss=0.577, lr=7.61e-7][A
Train step of epoch 0:  63%|██████▎   | 3966/6250 [4:07:45<2:40:15,  4.21s/it, gpt_loss=0.577, lr=7.61e-7][A
Train step of epoch 0:  63%|██████▎   | 3966/6250 [4:07:49<2:40:15,  4.21s/it, gpt_loss=0.601, lr=7.61e-7][A
Train step of epoch 0:  63%|██████▎   | 3967/6250 [4:07:49<2:37:51,  4.15s/it, gpt_loss=0.601, lr=7.61e-7][A[2025-04-24 04:00:32,909] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  63%|██████▎   | 3967/6250 [4:07:54<2:37:51,  4.15s/it, gpt_loss=0.56, lr=7.59e-7] [A
Train step of epoch 0:  63%|██████▎   | 3968/6250 [4:07:54<2:44:18,  4.32s/it, gpt_loss=0.56, lr=7.59e-7][A
Train step of epoch 0:  63%|██████▎   | 3968/6250 [4:07:58<2:44:18,  4.32s/it, gpt_loss=0.502, lr=7.59e-7][A
Train step of epoch 0:  64%|██████▎   | 3969/6250 [4:07:58<2:46:15,  4.37s/it, gpt_loss=0.502, lr=7.59e-7][A
Train step of epoch 0:  64%|██████▎   | 3969/6250 [4:08:02<2:46:15,  4.37s/it, gpt_loss=0.704, lr=7.59e-7][A
Train step of epoch 0:  64%|██████▎   | 3970/6250 [4:08:02<2:35:06,  4.08s/it, gpt_loss=0.704, lr=7.59e-7][A
Train step of epoch 0:  64%|██████▎   | 3970/6250 [4:08:06<2:35:06,  4.08s/it, gpt_loss=0.532, lr=7.59e-7][A
Train step of epoch 0:  64%|██████▎   | 3971/6250 [4:08:06<2:41:32,  4.25s/it, gpt_loss=0.532, lr=7.59e-7][A[2025-04-24 04:00:49,099] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  64%|██████▎   | 3971/6250 [4:08:10<2:41:32,  4.25s/it, gpt_loss=0.511, lr=7.57e-7][A
Train step of epoch 0:  64%|██████▎   | 3972/6250 [4:08:10<2:34:28,  4.07s/it, gpt_loss=0.511, lr=7.57e-7][A
Train step of epoch 0:  64%|██████▎   | 3972/6250 [4:08:15<2:34:28,  4.07s/it, gpt_loss=0.539, lr=7.57e-7][A
Train step of epoch 0:  64%|██████▎   | 3973/6250 [4:08:15<2:48:02,  4.43s/it, gpt_loss=0.539, lr=7.57e-7][A
Train step of epoch 0:  64%|██████▎   | 3973/6250 [4:08:19<2:48:02,  4.43s/it, gpt_loss=0.704, lr=7.57e-7][A
Train step of epoch 0:  64%|██████▎   | 3974/6250 [4:08:19<2:37:52,  4.16s/it, gpt_loss=0.704, lr=7.57e-7][A
Train step of epoch 0:  64%|██████▎   | 3974/6250 [4:08:23<2:37:52,  4.16s/it, gpt_loss=0.764, lr=7.57e-7][A
Train step of epoch 0:  64%|██████▎   | 3975/6250 [4:08:23<2:38:49,  4.19s/it, gpt_loss=0.764, lr=7.57e-7][A[2025-04-24 04:01:05,848] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  64%|██████▎   | 3975/6250 [4:08:27<2:38:49,  4.19s/it, gpt_loss=0.592, lr=7.55e-7][A
Train step of epoch 0:  64%|██████▎   | 3976/6250 [4:08:27<2:33:04,  4.04s/it, gpt_loss=0.592, lr=7.55e-7][A
Train step of epoch 0:  64%|██████▎   | 3976/6250 [4:08:30<2:33:04,  4.04s/it, gpt_loss=0.766, lr=7.55e-7][A
Train step of epoch 0:  64%|██████▎   | 3977/6250 [4:08:30<2:27:12,  3.89s/it, gpt_loss=0.766, lr=7.55e-7][A
Train step of epoch 0:  64%|██████▎   | 3977/6250 [4:08:34<2:27:12,  3.89s/it, gpt_loss=0.511, lr=7.55e-7][A
Train step of epoch 0:  64%|██████▎   | 3978/6250 [4:08:34<2:25:42,  3.85s/it, gpt_loss=0.511, lr=7.55e-7][A
Train step of epoch 0:  64%|██████▎   | 3978/6250 [4:08:38<2:25:42,  3.85s/it, gpt_loss=0.639, lr=7.55e-7][A
Train step of epoch 0:  64%|██████▎   | 3979/6250 [4:08:38<2:23:28,  3.79s/it, gpt_loss=0.639, lr=7.55e-7][A[2025-04-24 04:01:20,021] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  64%|██████▎   | 3979/6250 [4:08:41<2:23:28,  3.79s/it, gpt_loss=0.701, lr=7.54e-7][A
Train step of epoch 0:  64%|██████▎   | 3980/6250 [4:08:41<2:17:01,  3.62s/it, gpt_loss=0.701, lr=7.54e-7][A
Train step of epoch 0:  64%|██████▎   | 3980/6250 [4:08:45<2:17:01,  3.62s/it, gpt_loss=0.606, lr=7.54e-7][A
Train step of epoch 0:  64%|██████▎   | 3981/6250 [4:08:45<2:25:02,  3.84s/it, gpt_loss=0.606, lr=7.54e-7][A
Train step of epoch 0:  64%|██████▎   | 3981/6250 [4:08:50<2:25:02,  3.84s/it, gpt_loss=0.607, lr=7.54e-7][A
Train step of epoch 0:  64%|██████▎   | 3982/6250 [4:08:50<2:33:35,  4.06s/it, gpt_loss=0.607, lr=7.54e-7][A
Train step of epoch 0:  64%|██████▎   | 3982/6250 [4:08:54<2:33:35,  4.06s/it, gpt_loss=0.645, lr=7.54e-7][A
Train step of epoch 0:  64%|██████▎   | 3983/6250 [4:08:54<2:32:35,  4.04s/it, gpt_loss=0.645, lr=7.54e-7][A[2025-04-24 04:01:37,195] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  64%|██████▎   | 3983/6250 [4:08:58<2:32:35,  4.04s/it, gpt_loss=0.696, lr=7.52e-7][A
Train step of epoch 0:  64%|██████▎   | 3984/6250 [4:08:58<2:35:05,  4.11s/it, gpt_loss=0.696, lr=7.52e-7][A
Train step of epoch 0:  64%|██████▎   | 3984/6250 [4:09:02<2:35:05,  4.11s/it, gpt_loss=0.64, lr=7.52e-7] [A
Train step of epoch 0:  64%|██████▍   | 3985/6250 [4:09:02<2:34:21,  4.09s/it, gpt_loss=0.64, lr=7.52e-7][A
Train step of epoch 0:  64%|██████▍   | 3985/6250 [4:09:05<2:34:21,  4.09s/it, gpt_loss=0.682, lr=7.52e-7][A
Train step of epoch 0:  64%|██████▍   | 3986/6250 [4:09:05<2:27:34,  3.91s/it, gpt_loss=0.682, lr=7.52e-7][A
Train step of epoch 0:  64%|██████▍   | 3986/6250 [4:09:08<2:27:34,  3.91s/it, gpt_loss=0.5, lr=7.52e-7]  [A
Train step of epoch 0:  64%|██████▍   | 3987/6250 [4:09:08<2:11:21,  3.48s/it, gpt_loss=0.5, lr=7.52e-7][A[2025-04-24 04:01:51,702] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  64%|██████▍   | 3987/6250 [4:09:12<2:11:21,  3.48s/it, gpt_loss=0.503, lr=7.5e-7][A
Train step of epoch 0:  64%|██████▍   | 3988/6250 [4:09:12<2:22:34,  3.78s/it, gpt_loss=0.503, lr=7.5e-7][A
Train step of epoch 0:  64%|██████▍   | 3988/6250 [4:09:16<2:22:34,  3.78s/it, gpt_loss=0.646, lr=7.5e-7][A
Train step of epoch 0:  64%|██████▍   | 3989/6250 [4:09:16<2:19:07,  3.69s/it, gpt_loss=0.646, lr=7.5e-7][A
Train step of epoch 0:  64%|██████▍   | 3989/6250 [4:09:19<2:19:07,  3.69s/it, gpt_loss=0.563, lr=7.5e-7][A
Train step of epoch 0:  64%|██████▍   | 3990/6250 [4:09:19<2:17:00,  3.64s/it, gpt_loss=0.563, lr=7.5e-7][A
Train step of epoch 0:  64%|██████▍   | 3990/6250 [4:09:23<2:17:00,  3.64s/it, gpt_loss=0.448, lr=7.5e-7][A
Train step of epoch 0:  64%|██████▍   | 3991/6250 [4:09:23<2:17:29,  3.65s/it, gpt_loss=0.448, lr=7.5e-7][A[2025-04-24 04:02:07,123] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  64%|██████▍   | 3991/6250 [4:09:28<2:17:29,  3.65s/it, gpt_loss=0.564, lr=7.48e-7][A
Train step of epoch 0:  64%|██████▍   | 3992/6250 [4:09:28<2:29:44,  3.98s/it, gpt_loss=0.564, lr=7.48e-7][A
Train step of epoch 0:  64%|██████▍   | 3992/6250 [4:09:32<2:29:44,  3.98s/it, gpt_loss=0.423, lr=7.48e-7][A
Train step of epoch 0:  64%|██████▍   | 3993/6250 [4:09:32<2:27:24,  3.92s/it, gpt_loss=0.423, lr=7.48e-7][A
Train step of epoch 0:  64%|██████▍   | 3993/6250 [4:09:36<2:27:24,  3.92s/it, gpt_loss=0.659, lr=7.48e-7][A
Train step of epoch 0:  64%|██████▍   | 3994/6250 [4:09:36<2:29:40,  3.98s/it, gpt_loss=0.659, lr=7.48e-7][A
Train step of epoch 0:  64%|██████▍   | 3994/6250 [4:09:39<2:29:40,  3.98s/it, gpt_loss=0.532, lr=7.48e-7][A
Train step of epoch 0:  64%|██████▍   | 3995/6250 [4:09:39<2:22:36,  3.79s/it, gpt_loss=0.532, lr=7.48e-7][A[2025-04-24 04:02:21,450] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  64%|██████▍   | 3995/6250 [4:09:42<2:22:36,  3.79s/it, gpt_loss=0.678, lr=7.47e-7][A
Train step of epoch 0:  64%|██████▍   | 3996/6250 [4:09:42<2:14:18,  3.58s/it, gpt_loss=0.678, lr=7.47e-7][A
Train step of epoch 0:  64%|██████▍   | 3996/6250 [4:09:46<2:14:18,  3.58s/it, gpt_loss=0.788, lr=7.47e-7][A
Train step of epoch 0:  64%|██████▍   | 3997/6250 [4:09:46<2:17:42,  3.67s/it, gpt_loss=0.788, lr=7.47e-7][A
Train step of epoch 0:  64%|██████▍   | 3997/6250 [4:09:49<2:17:42,  3.67s/it, gpt_loss=0.562, lr=7.47e-7][A
Train step of epoch 0:  64%|██████▍   | 3998/6250 [4:09:49<2:14:08,  3.57s/it, gpt_loss=0.562, lr=7.47e-7][A
Train step of epoch 0:  64%|██████▍   | 3998/6250 [4:09:53<2:14:08,  3.57s/it, gpt_loss=0.698, lr=7.47e-7][A
Train step of epoch 0:  64%|██████▍   | 3999/6250 [4:09:53<2:12:14,  3.52s/it, gpt_loss=0.698, lr=7.47e-7][A[2025-04-24 04:02:36,142] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-04-24 04:02:36,143] [INFO] [logging.py:107:log_dist] [Rank 0] step=1000, skipped=0, lr=[7.450520685929243e-07, 7.450520685929243e-07], mom=[(0.9, 0.95), (0.9, 0.95)]
[2025-04-24 04:02:36,143] [INFO] [timer.py:264:stop] epoch=0/micro_step=4000/global_step=1000, RunningAvgSamplesPerSec=2.219705697411723, CurrSamplesPerSec=2.2619965847096424, MemAllocated=40.57GB, MaxMemAllocated=60.14GB

Train step of epoch 0:  64%|██████▍   | 3999/6250 [4:09:57<2:12:14,  3.52s/it, gpt_loss=0.701, lr=7.45e-7][A
Train step of epoch 0:  64%|██████▍   | 4000/6250 [4:09:57<2:18:01,  3.68s/it, gpt_loss=0.701, lr=7.45e-7][A
Train step of epoch 0:  64%|██████▍   | 4000/6250 [4:10:01<2:18:01,  3.68s/it, gpt_loss=0.539, lr=7.45e-7][A
Train step of epoch 0:  64%|██████▍   | 4001/6250 [4:10:01<2:20:03,  3.74s/it, gpt_loss=0.539, lr=7.45e-7][A
Train step of epoch 0:  64%|██████▍   | 4001/6250 [4:10:06<2:20:03,  3.74s/it, gpt_loss=0.663, lr=7.45e-7][A
Train step of epoch 0:  64%|██████▍   | 4002/6250 [4:10:06<2:34:53,  4.13s/it, gpt_loss=0.663, lr=7.45e-7][A
Train step of epoch 0:  64%|██████▍   | 4002/6250 [4:10:10<2:34:53,  4.13s/it, gpt_loss=0.646, lr=7.45e-7][A
Train step of epoch 0:  64%|██████▍   | 4003/6250 [4:10:10<2:31:44,  4.05s/it, gpt_loss=0.646, lr=7.45e-7][A[2025-04-24 04:02:52,191] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  64%|██████▍   | 4003/6250 [4:10:13<2:31:44,  4.05s/it, gpt_loss=0.481, lr=7.43e-7][A
Train step of epoch 0:  64%|██████▍   | 4004/6250 [4:10:13<2:22:46,  3.81s/it, gpt_loss=0.481, lr=7.43e-7][A
Train step of epoch 0:  64%|██████▍   | 4004/6250 [4:10:16<2:22:46,  3.81s/it, gpt_loss=0.445, lr=7.43e-7][A
Train step of epoch 0:  64%|██████▍   | 4005/6250 [4:10:16<2:13:02,  3.56s/it, gpt_loss=0.445, lr=7.43e-7][A
Train step of epoch 0:  64%|██████▍   | 4005/6250 [4:10:19<2:13:02,  3.56s/it, gpt_loss=0.513, lr=7.43e-7][A
Train step of epoch 0:  64%|██████▍   | 4006/6250 [4:10:19<2:09:23,  3.46s/it, gpt_loss=0.513, lr=7.43e-7][A
Train step of epoch 0:  64%|██████▍   | 4006/6250 [4:10:23<2:09:23,  3.46s/it, gpt_loss=0.6, lr=7.43e-7]  [A
Train step of epoch 0:  64%|██████▍   | 4007/6250 [4:10:23<2:10:30,  3.49s/it, gpt_loss=0.6, lr=7.43e-7][A[2025-04-24 04:03:06,436] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  64%|██████▍   | 4007/6250 [4:10:27<2:10:30,  3.49s/it, gpt_loss=0.663, lr=7.42e-7][A
Train step of epoch 0:  64%|██████▍   | 4008/6250 [4:10:27<2:21:40,  3.79s/it, gpt_loss=0.663, lr=7.42e-7][A
Train step of epoch 0:  64%|██████▍   | 4008/6250 [4:10:30<2:21:40,  3.79s/it, gpt_loss=0.495, lr=7.42e-7][A
Train step of epoch 0:  64%|██████▍   | 4009/6250 [4:10:30<2:12:47,  3.56s/it, gpt_loss=0.495, lr=7.42e-7][A
Train step of epoch 0:  64%|██████▍   | 4009/6250 [4:10:34<2:12:47,  3.56s/it, gpt_loss=0.655, lr=7.42e-7][A
Train step of epoch 0:  64%|██████▍   | 4010/6250 [4:10:34<2:14:56,  3.61s/it, gpt_loss=0.655, lr=7.42e-7][A
Train step of epoch 0:  64%|██████▍   | 4010/6250 [4:10:37<2:14:56,  3.61s/it, gpt_loss=0.536, lr=7.42e-7][A
Train step of epoch 0:  64%|██████▍   | 4011/6250 [4:10:37<2:08:49,  3.45s/it, gpt_loss=0.536, lr=7.42e-7][A[2025-04-24 04:03:19,785] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  64%|██████▍   | 4011/6250 [4:10:41<2:08:49,  3.45s/it, gpt_loss=0.682, lr=7.4e-7] [A
Train step of epoch 0:  64%|██████▍   | 4012/6250 [4:10:41<2:09:30,  3.47s/it, gpt_loss=0.682, lr=7.4e-7][A
Train step of epoch 0:  64%|██████▍   | 4012/6250 [4:10:45<2:09:30,  3.47s/it, gpt_loss=0.632, lr=7.4e-7][A
Train step of epoch 0:  64%|██████▍   | 4013/6250 [4:10:45<2:17:05,  3.68s/it, gpt_loss=0.632, lr=7.4e-7][A
Train step of epoch 0:  64%|██████▍   | 4013/6250 [4:10:48<2:17:05,  3.68s/it, gpt_loss=0.476, lr=7.4e-7][A
Train step of epoch 0:  64%|██████▍   | 4014/6250 [4:10:48<2:11:37,  3.53s/it, gpt_loss=0.476, lr=7.4e-7][A
Train step of epoch 0:  64%|██████▍   | 4014/6250 [4:10:51<2:11:37,  3.53s/it, gpt_loss=0.481, lr=7.4e-7][A
Train step of epoch 0:  64%|██████▍   | 4015/6250 [4:10:51<2:10:45,  3.51s/it, gpt_loss=0.481, lr=7.4e-7][A[2025-04-24 04:03:33,780] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  64%|██████▍   | 4015/6250 [4:10:55<2:10:45,  3.51s/it, gpt_loss=0.668, lr=7.38e-7][A
Train step of epoch 0:  64%|██████▍   | 4016/6250 [4:10:55<2:07:05,  3.41s/it, gpt_loss=0.668, lr=7.38e-7][A
Train step of epoch 0:  64%|██████▍   | 4016/6250 [4:10:58<2:07:05,  3.41s/it, gpt_loss=0.536, lr=7.38e-7][A
Train step of epoch 0:  64%|██████▍   | 4017/6250 [4:10:58<2:07:39,  3.43s/it, gpt_loss=0.536, lr=7.38e-7][A
Train step of epoch 0:  64%|██████▍   | 4017/6250 [4:11:02<2:07:39,  3.43s/it, gpt_loss=0.732, lr=7.38e-7][A
Train step of epoch 0:  64%|██████▍   | 4018/6250 [4:11:02<2:18:51,  3.73s/it, gpt_loss=0.732, lr=7.38e-7][A
Train step of epoch 0:  64%|██████▍   | 4018/6250 [4:11:05<2:18:51,  3.73s/it, gpt_loss=0.596, lr=7.38e-7][A
Train step of epoch 0:  64%|██████▍   | 4019/6250 [4:11:05<2:01:32,  3.27s/it, gpt_loss=0.596, lr=7.38e-7][A[2025-04-24 04:03:46,948] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  64%|██████▍   | 4019/6250 [4:11:08<2:01:32,  3.27s/it, gpt_loss=0.645, lr=7.36e-7][A
Train step of epoch 0:  64%|██████▍   | 4020/6250 [4:11:08<1:59:18,  3.21s/it, gpt_loss=0.645, lr=7.36e-7][A
Train step of epoch 0:  64%|██████▍   | 4020/6250 [4:11:12<1:59:18,  3.21s/it, gpt_loss=0.797, lr=7.36e-7][A
Train step of epoch 0:  64%|██████▍   | 4021/6250 [4:11:12<2:12:29,  3.57s/it, gpt_loss=0.797, lr=7.36e-7][A
Train step of epoch 0:  64%|██████▍   | 4021/6250 [4:11:16<2:12:29,  3.57s/it, gpt_loss=0.513, lr=7.36e-7][A
Train step of epoch 0:  64%|██████▍   | 4022/6250 [4:11:16<2:16:26,  3.67s/it, gpt_loss=0.513, lr=7.36e-7][A
Train step of epoch 0:  64%|██████▍   | 4022/6250 [4:11:20<2:16:26,  3.67s/it, gpt_loss=0.466, lr=7.36e-7][A
Train step of epoch 0:  64%|██████▍   | 4023/6250 [4:11:20<2:14:25,  3.62s/it, gpt_loss=0.466, lr=7.36e-7][A[2025-04-24 04:04:02,759] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  64%|██████▍   | 4023/6250 [4:11:24<2:14:25,  3.62s/it, gpt_loss=0.68, lr=7.35e-7] [A
Train step of epoch 0:  64%|██████▍   | 4024/6250 [4:11:24<2:18:26,  3.73s/it, gpt_loss=0.68, lr=7.35e-7][A
Train step of epoch 0:  64%|██████▍   | 4024/6250 [4:11:28<2:18:26,  3.73s/it, gpt_loss=0.694, lr=7.35e-7][A
Train step of epoch 0:  64%|██████▍   | 4025/6250 [4:11:28<2:24:09,  3.89s/it, gpt_loss=0.694, lr=7.35e-7][A
Train step of epoch 0:  64%|██████▍   | 4025/6250 [4:11:33<2:24:09,  3.89s/it, gpt_loss=0.596, lr=7.35e-7][A
Train step of epoch 0:  64%|██████▍   | 4026/6250 [4:11:33<2:34:58,  4.18s/it, gpt_loss=0.596, lr=7.35e-7][A
Train step of epoch 0:  64%|██████▍   | 4026/6250 [4:11:36<2:34:58,  4.18s/it, gpt_loss=0.449, lr=7.35e-7][A
Train step of epoch 0:  64%|██████▍   | 4027/6250 [4:11:36<2:25:13,  3.92s/it, gpt_loss=0.449, lr=7.35e-7][A[2025-04-24 04:04:18,471] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  64%|██████▍   | 4027/6250 [4:11:39<2:25:13,  3.92s/it, gpt_loss=0.454, lr=7.33e-7][A
Train step of epoch 0:  64%|██████▍   | 4028/6250 [4:11:39<2:18:06,  3.73s/it, gpt_loss=0.454, lr=7.33e-7][A
Train step of epoch 0:  64%|██████▍   | 4028/6250 [4:11:43<2:18:06,  3.73s/it, gpt_loss=0.675, lr=7.33e-7][A
Train step of epoch 0:  64%|██████▍   | 4029/6250 [4:11:43<2:16:38,  3.69s/it, gpt_loss=0.675, lr=7.33e-7][A
Train step of epoch 0:  64%|██████▍   | 4029/6250 [4:11:46<2:16:38,  3.69s/it, gpt_loss=0.704, lr=7.33e-7][A
Train step of epoch 0:  64%|██████▍   | 4030/6250 [4:11:46<2:13:04,  3.60s/it, gpt_loss=0.704, lr=7.33e-7][A
Train step of epoch 0:  64%|██████▍   | 4030/6250 [4:11:50<2:13:04,  3.60s/it, gpt_loss=0.689, lr=7.33e-7][A
Train step of epoch 0:  64%|██████▍   | 4031/6250 [4:11:50<2:15:39,  3.67s/it, gpt_loss=0.689, lr=7.33e-7][A[2025-04-24 04:04:33,355] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  64%|██████▍   | 4031/6250 [4:11:54<2:15:39,  3.67s/it, gpt_loss=0.759, lr=7.31e-7][A
Train step of epoch 0:  65%|██████▍   | 4032/6250 [4:11:54<2:20:03,  3.79s/it, gpt_loss=0.759, lr=7.31e-7][A
Train step of epoch 0:  65%|██████▍   | 4032/6250 [4:11:58<2:20:03,  3.79s/it, gpt_loss=0.638, lr=7.31e-7][A
Train step of epoch 0:  65%|██████▍   | 4033/6250 [4:11:58<2:22:07,  3.85s/it, gpt_loss=0.638, lr=7.31e-7][A
Train step of epoch 0:  65%|██████▍   | 4033/6250 [4:12:02<2:22:07,  3.85s/it, gpt_loss=0.673, lr=7.31e-7][A
Train step of epoch 0:  65%|██████▍   | 4034/6250 [4:12:02<2:19:36,  3.78s/it, gpt_loss=0.673, lr=7.31e-7][A
Train step of epoch 0:  65%|██████▍   | 4034/6250 [4:12:05<2:19:36,  3.78s/it, gpt_loss=0.644, lr=7.31e-7][A
Train step of epoch 0:  65%|██████▍   | 4035/6250 [4:12:05<2:18:57,  3.76s/it, gpt_loss=0.644, lr=7.31e-7][A[2025-04-24 04:04:48,904] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  65%|██████▍   | 4035/6250 [4:12:10<2:18:57,  3.76s/it, gpt_loss=0.577, lr=7.3e-7] [A
Train step of epoch 0:  65%|██████▍   | 4036/6250 [4:12:10<2:23:54,  3.90s/it, gpt_loss=0.577, lr=7.3e-7][A
Train step of epoch 0:  65%|██████▍   | 4036/6250 [4:12:14<2:23:54,  3.90s/it, gpt_loss=0.595, lr=7.3e-7][A
Train step of epoch 0:  65%|██████▍   | 4037/6250 [4:12:14<2:26:16,  3.97s/it, gpt_loss=0.595, lr=7.3e-7][A
Train step of epoch 0:  65%|██████▍   | 4037/6250 [4:12:16<2:26:16,  3.97s/it, gpt_loss=0.491, lr=7.3e-7][A
Train step of epoch 0:  65%|██████▍   | 4038/6250 [4:12:16<2:12:06,  3.58s/it, gpt_loss=0.491, lr=7.3e-7][A
Train step of epoch 0:  65%|██████▍   | 4038/6250 [4:12:20<2:12:06,  3.58s/it, gpt_loss=0.65, lr=7.3e-7] [A
Train step of epoch 0:  65%|██████▍   | 4039/6250 [4:12:20<2:09:36,  3.52s/it, gpt_loss=0.65, lr=7.3e-7][A[2025-04-24 04:05:02,197] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  65%|██████▍   | 4039/6250 [4:12:23<2:09:36,  3.52s/it, gpt_loss=0.445, lr=7.28e-7][A
Train step of epoch 0:  65%|██████▍   | 4040/6250 [4:12:23<2:05:09,  3.40s/it, gpt_loss=0.445, lr=7.28e-7][A
Train step of epoch 0:  65%|██████▍   | 4040/6250 [4:12:27<2:05:09,  3.40s/it, gpt_loss=0.609, lr=7.28e-7][A
Train step of epoch 0:  65%|██████▍   | 4041/6250 [4:12:27<2:10:54,  3.56s/it, gpt_loss=0.609, lr=7.28e-7][A
Train step of epoch 0:  65%|██████▍   | 4041/6250 [4:12:31<2:10:54,  3.56s/it, gpt_loss=0.656, lr=7.28e-7][A
Train step of epoch 0:  65%|██████▍   | 4042/6250 [4:12:31<2:13:46,  3.64s/it, gpt_loss=0.656, lr=7.28e-7][A
Train step of epoch 0:  65%|██████▍   | 4042/6250 [4:12:34<2:13:46,  3.64s/it, gpt_loss=0.503, lr=7.28e-7][A
Train step of epoch 0:  65%|██████▍   | 4043/6250 [4:12:34<2:09:31,  3.52s/it, gpt_loss=0.503, lr=7.28e-7][A[2025-04-24 04:05:17,462] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  65%|██████▍   | 4043/6250 [4:12:38<2:09:31,  3.52s/it, gpt_loss=0.581, lr=7.26e-7][A
Train step of epoch 0:  65%|██████▍   | 4044/6250 [4:12:38<2:17:40,  3.74s/it, gpt_loss=0.581, lr=7.26e-7][A
Train step of epoch 0:  65%|██████▍   | 4044/6250 [4:12:42<2:17:40,  3.74s/it, gpt_loss=0.555, lr=7.26e-7][A
Train step of epoch 0:  65%|██████▍   | 4045/6250 [4:12:42<2:15:01,  3.67s/it, gpt_loss=0.555, lr=7.26e-7][A
Train step of epoch 0:  65%|██████▍   | 4045/6250 [4:12:44<2:15:01,  3.67s/it, gpt_loss=0.544, lr=7.26e-7][A
Train step of epoch 0:  65%|██████▍   | 4046/6250 [4:12:44<2:02:42,  3.34s/it, gpt_loss=0.544, lr=7.26e-7][A
Train step of epoch 0:  65%|██████▍   | 4046/6250 [4:12:48<2:02:42,  3.34s/it, gpt_loss=0.514, lr=7.26e-7][A
Train step of epoch 0:  65%|██████▍   | 4047/6250 [4:12:48<2:08:04,  3.49s/it, gpt_loss=0.514, lr=7.26e-7][A[2025-04-24 04:05:29,959] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  65%|██████▍   | 4047/6250 [4:12:51<2:08:04,  3.49s/it, gpt_loss=0.674, lr=7.25e-7][A
Train step of epoch 0:  65%|██████▍   | 4048/6250 [4:12:51<1:58:09,  3.22s/it, gpt_loss=0.674, lr=7.25e-7][A
Train step of epoch 0:  65%|██████▍   | 4048/6250 [4:12:55<1:58:09,  3.22s/it, gpt_loss=0.789, lr=7.25e-7][A
Train step of epoch 0:  65%|██████▍   | 4049/6250 [4:12:55<2:11:02,  3.57s/it, gpt_loss=0.789, lr=7.25e-7][A
Train step of epoch 0:  65%|██████▍   | 4049/6250 [4:12:59<2:11:02,  3.57s/it, gpt_loss=0.656, lr=7.25e-7][A
Train step of epoch 0:  65%|██████▍   | 4050/6250 [4:12:59<2:17:09,  3.74s/it, gpt_loss=0.656, lr=7.25e-7][A
Train step of epoch 0:  65%|██████▍   | 4050/6250 [4:13:03<2:17:09,  3.74s/it, gpt_loss=0.634, lr=7.25e-7][A
Train step of epoch 0:  65%|██████▍   | 4051/6250 [4:13:03<2:12:47,  3.62s/it, gpt_loss=0.634, lr=7.25e-7][A[2025-04-24 04:05:45,000] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  65%|██████▍   | 4051/6250 [4:13:06<2:12:47,  3.62s/it, gpt_loss=0.461, lr=7.23e-7][A
Train step of epoch 0:  65%|██████▍   | 4052/6250 [4:13:06<2:07:40,  3.49s/it, gpt_loss=0.461, lr=7.23e-7][A
Train step of epoch 0:  65%|██████▍   | 4052/6250 [4:13:10<2:07:40,  3.49s/it, gpt_loss=0.53, lr=7.23e-7] [A
Train step of epoch 0:  65%|██████▍   | 4053/6250 [4:13:10<2:12:48,  3.63s/it, gpt_loss=0.53, lr=7.23e-7][A
Train step of epoch 0:  65%|██████▍   | 4053/6250 [4:13:13<2:12:48,  3.63s/it, gpt_loss=0.499, lr=7.23e-7][A
Train step of epoch 0:  65%|██████▍   | 4054/6250 [4:13:13<2:07:41,  3.49s/it, gpt_loss=0.499, lr=7.23e-7][A
Train step of epoch 0:  65%|██████▍   | 4054/6250 [4:13:16<2:07:41,  3.49s/it, gpt_loss=0.735, lr=7.23e-7][A
Train step of epoch 0:  65%|██████▍   | 4055/6250 [4:13:16<2:04:43,  3.41s/it, gpt_loss=0.735, lr=7.23e-7][A[2025-04-24 04:05:58,797] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  65%|██████▍   | 4055/6250 [4:13:20<2:04:43,  3.41s/it, gpt_loss=0.664, lr=7.21e-7][A
Train step of epoch 0:  65%|██████▍   | 4056/6250 [4:13:20<2:05:06,  3.42s/it, gpt_loss=0.664, lr=7.21e-7][A
Train step of epoch 0:  65%|██████▍   | 4056/6250 [4:13:23<2:05:06,  3.42s/it, gpt_loss=0.438, lr=7.21e-7][A
Train step of epoch 0:  65%|██████▍   | 4057/6250 [4:13:23<2:07:32,  3.49s/it, gpt_loss=0.438, lr=7.21e-7][A
Train step of epoch 0:  65%|██████▍   | 4057/6250 [4:13:27<2:07:32,  3.49s/it, gpt_loss=0.576, lr=7.21e-7][A
Train step of epoch 0:  65%|██████▍   | 4058/6250 [4:13:27<2:08:52,  3.53s/it, gpt_loss=0.576, lr=7.21e-7][A
Train step of epoch 0:  65%|██████▍   | 4058/6250 [4:13:32<2:08:52,  3.53s/it, gpt_loss=0.578, lr=7.21e-7][A
Train step of epoch 0:  65%|██████▍   | 4059/6250 [4:13:32<2:21:35,  3.88s/it, gpt_loss=0.578, lr=7.21e-7][A[2025-04-24 04:06:15,150] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  65%|██████▍   | 4059/6250 [4:13:36<2:21:35,  3.88s/it, gpt_loss=0.622, lr=7.2e-7] [A
Train step of epoch 0:  65%|██████▍   | 4060/6250 [4:13:36<2:27:11,  4.03s/it, gpt_loss=0.622, lr=7.2e-7][A
Train step of epoch 0:  65%|██████▍   | 4060/6250 [4:13:40<2:27:11,  4.03s/it, gpt_loss=0.656, lr=7.2e-7][A
Train step of epoch 0:  65%|██████▍   | 4061/6250 [4:13:40<2:22:49,  3.91s/it, gpt_loss=0.656, lr=7.2e-7][A
Train step of epoch 0:  65%|██████▍   | 4061/6250 [4:13:42<2:22:49,  3.91s/it, gpt_loss=0.463, lr=7.2e-7][A
Train step of epoch 0:  65%|██████▍   | 4062/6250 [4:13:42<2:12:11,  3.63s/it, gpt_loss=0.463, lr=7.2e-7][A
Train step of epoch 0:  65%|██████▍   | 4062/6250 [4:13:47<2:12:11,  3.63s/it, gpt_loss=0.66, lr=7.2e-7] [A
Train step of epoch 0:  65%|██████▌   | 4063/6250 [4:13:47<2:24:22,  3.96s/it, gpt_loss=0.66, lr=7.2e-7][A[2025-04-24 04:06:31,185] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  65%|██████▌   | 4063/6250 [4:13:52<2:24:22,  3.96s/it, gpt_loss=0.702, lr=7.18e-7][A
Train step of epoch 0:  65%|██████▌   | 4064/6250 [4:13:52<2:32:23,  4.18s/it, gpt_loss=0.702, lr=7.18e-7][A
Train step of epoch 0:  65%|██████▌   | 4064/6250 [4:13:56<2:32:23,  4.18s/it, gpt_loss=0.723, lr=7.18e-7][A
Train step of epoch 0:  65%|██████▌   | 4065/6250 [4:13:56<2:32:54,  4.20s/it, gpt_loss=0.723, lr=7.18e-7][A
Train step of epoch 0:  65%|██████▌   | 4065/6250 [4:14:00<2:32:54,  4.20s/it, gpt_loss=0.712, lr=7.18e-7][A
Train step of epoch 0:  65%|██████▌   | 4066/6250 [4:14:00<2:33:05,  4.21s/it, gpt_loss=0.712, lr=7.18e-7][A
Train step of epoch 0:  65%|██████▌   | 4066/6250 [4:14:03<2:33:05,  4.21s/it, gpt_loss=0.616, lr=7.18e-7][A
Train step of epoch 0:  65%|██████▌   | 4067/6250 [4:14:03<2:17:39,  3.78s/it, gpt_loss=0.616, lr=7.18e-7][A[2025-04-24 04:06:46,518] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  65%|██████▌   | 4067/6250 [4:14:07<2:17:39,  3.78s/it, gpt_loss=0.562, lr=7.16e-7][A
Train step of epoch 0:  65%|██████▌   | 4068/6250 [4:14:07<2:20:47,  3.87s/it, gpt_loss=0.562, lr=7.16e-7][A
Train step of epoch 0:  65%|██████▌   | 4068/6250 [4:14:11<2:20:47,  3.87s/it, gpt_loss=0.614, lr=7.16e-7][A
Train step of epoch 0:  65%|██████▌   | 4069/6250 [4:14:11<2:17:14,  3.78s/it, gpt_loss=0.614, lr=7.16e-7][A
Train step of epoch 0:  65%|██████▌   | 4069/6250 [4:14:15<2:17:14,  3.78s/it, gpt_loss=0.735, lr=7.16e-7][A
Train step of epoch 0:  65%|██████▌   | 4070/6250 [4:14:15<2:16:55,  3.77s/it, gpt_loss=0.735, lr=7.16e-7][A
Train step of epoch 0:  65%|██████▌   | 4070/6250 [4:14:18<2:16:55,  3.77s/it, gpt_loss=0.574, lr=7.16e-7][A
Train step of epoch 0:  65%|██████▌   | 4071/6250 [4:14:18<2:08:39,  3.54s/it, gpt_loss=0.574, lr=7.16e-7][A[2025-04-24 04:07:00,783] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  65%|██████▌   | 4071/6250 [4:14:22<2:08:39,  3.54s/it, gpt_loss=0.506, lr=7.14e-7][A
Train step of epoch 0:  65%|██████▌   | 4072/6250 [4:14:22<2:12:58,  3.66s/it, gpt_loss=0.506, lr=7.14e-7][A
Train step of epoch 0:  65%|██████▌   | 4072/6250 [4:14:25<2:12:58,  3.66s/it, gpt_loss=0.557, lr=7.14e-7][A
Train step of epoch 0:  65%|██████▌   | 4073/6250 [4:14:25<2:11:26,  3.62s/it, gpt_loss=0.557, lr=7.14e-7][A
Train step of epoch 0:  65%|██████▌   | 4073/6250 [4:14:29<2:11:26,  3.62s/it, gpt_loss=0.745, lr=7.14e-7][A
Train step of epoch 0:  65%|██████▌   | 4074/6250 [4:14:29<2:19:39,  3.85s/it, gpt_loss=0.745, lr=7.14e-7][A
Train step of epoch 0:  65%|██████▌   | 4074/6250 [4:14:33<2:19:39,  3.85s/it, gpt_loss=0.621, lr=7.14e-7][A
Train step of epoch 0:  65%|██████▌   | 4075/6250 [4:14:33<2:16:23,  3.76s/it, gpt_loss=0.621, lr=7.14e-7][A[2025-04-24 04:07:15,741] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  65%|██████▌   | 4075/6250 [4:14:37<2:16:23,  3.76s/it, gpt_loss=0.552, lr=7.13e-7][A
Train step of epoch 0:  65%|██████▌   | 4076/6250 [4:14:37<2:13:23,  3.68s/it, gpt_loss=0.552, lr=7.13e-7][A
Train step of epoch 0:  65%|██████▌   | 4076/6250 [4:14:40<2:13:23,  3.68s/it, gpt_loss=0.712, lr=7.13e-7][A
Train step of epoch 0:  65%|██████▌   | 4077/6250 [4:14:40<2:15:14,  3.73s/it, gpt_loss=0.712, lr=7.13e-7][A
Train step of epoch 0:  65%|██████▌   | 4077/6250 [4:14:43<2:15:14,  3.73s/it, gpt_loss=0.663, lr=7.13e-7][A
Train step of epoch 0:  65%|██████▌   | 4078/6250 [4:14:43<2:07:35,  3.52s/it, gpt_loss=0.663, lr=7.13e-7][A
Train step of epoch 0:  65%|██████▌   | 4078/6250 [4:14:48<2:07:35,  3.52s/it, gpt_loss=0.511, lr=7.13e-7][A
Train step of epoch 0:  65%|██████▌   | 4079/6250 [4:14:48<2:13:49,  3.70s/it, gpt_loss=0.511, lr=7.13e-7][A[2025-04-24 04:07:30,851] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  65%|██████▌   | 4079/6250 [4:14:52<2:13:49,  3.70s/it, gpt_loss=0.663, lr=7.11e-7][A
Train step of epoch 0:  65%|██████▌   | 4080/6250 [4:14:52<2:18:14,  3.82s/it, gpt_loss=0.663, lr=7.11e-7][A
Train step of epoch 0:  65%|██████▌   | 4080/6250 [4:14:55<2:18:14,  3.82s/it, gpt_loss=0.601, lr=7.11e-7][A
Train step of epoch 0:  65%|██████▌   | 4081/6250 [4:14:55<2:18:45,  3.84s/it, gpt_loss=0.601, lr=7.11e-7][A
Train step of epoch 0:  65%|██████▌   | 4081/6250 [4:14:59<2:18:45,  3.84s/it, gpt_loss=0.648, lr=7.11e-7][A
Train step of epoch 0:  65%|██████▌   | 4082/6250 [4:14:59<2:15:13,  3.74s/it, gpt_loss=0.648, lr=7.11e-7][A
Train step of epoch 0:  65%|██████▌   | 4082/6250 [4:15:03<2:15:13,  3.74s/it, gpt_loss=0.669, lr=7.11e-7][A
Train step of epoch 0:  65%|██████▌   | 4083/6250 [4:15:03<2:14:30,  3.72s/it, gpt_loss=0.669, lr=7.11e-7][A[2025-04-24 04:07:46,222] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  65%|██████▌   | 4083/6250 [4:15:07<2:14:30,  3.72s/it, gpt_loss=0.639, lr=7.09e-7][A
Train step of epoch 0:  65%|██████▌   | 4084/6250 [4:15:07<2:20:36,  3.90s/it, gpt_loss=0.639, lr=7.09e-7][A
Train step of epoch 0:  65%|██████▌   | 4084/6250 [4:15:11<2:20:36,  3.90s/it, gpt_loss=0.512, lr=7.09e-7][A
Train step of epoch 0:  65%|██████▌   | 4085/6250 [4:15:11<2:19:53,  3.88s/it, gpt_loss=0.512, lr=7.09e-7][A
Train step of epoch 0:  65%|██████▌   | 4085/6250 [4:15:14<2:19:53,  3.88s/it, gpt_loss=0.682, lr=7.09e-7][A
Train step of epoch 0:  65%|██████▌   | 4086/6250 [4:15:14<2:13:22,  3.70s/it, gpt_loss=0.682, lr=7.09e-7][A
Train step of epoch 0:  65%|██████▌   | 4086/6250 [4:15:18<2:13:22,  3.70s/it, gpt_loss=0.61, lr=7.09e-7] [A
Train step of epoch 0:  65%|██████▌   | 4087/6250 [4:15:18<2:10:39,  3.62s/it, gpt_loss=0.61, lr=7.09e-7][A[2025-04-24 04:08:01,129] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  65%|██████▌   | 4087/6250 [4:15:22<2:10:39,  3.62s/it, gpt_loss=0.648, lr=7.08e-7][A
Train step of epoch 0:  65%|██████▌   | 4088/6250 [4:15:22<2:18:19,  3.84s/it, gpt_loss=0.648, lr=7.08e-7][A
Train step of epoch 0:  65%|██████▌   | 4088/6250 [4:15:26<2:18:19,  3.84s/it, gpt_loss=0.82, lr=7.08e-7] [A
Train step of epoch 0:  65%|██████▌   | 4089/6250 [4:15:26<2:23:25,  3.98s/it, gpt_loss=0.82, lr=7.08e-7][A
Train step of epoch 0:  65%|██████▌   | 4089/6250 [4:15:29<2:23:25,  3.98s/it, gpt_loss=0.529, lr=7.08e-7][A
Train step of epoch 0:  65%|██████▌   | 4090/6250 [4:15:29<2:15:48,  3.77s/it, gpt_loss=0.529, lr=7.08e-7][A
Train step of epoch 0:  65%|██████▌   | 4090/6250 [4:15:33<2:15:48,  3.77s/it, gpt_loss=0.688, lr=7.08e-7][A
Train step of epoch 0:  65%|██████▌   | 4091/6250 [4:15:33<2:17:28,  3.82s/it, gpt_loss=0.688, lr=7.08e-7][A[2025-04-24 04:08:16,094] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  65%|██████▌   | 4091/6250 [4:15:37<2:17:28,  3.82s/it, gpt_loss=0.522, lr=7.06e-7][A
Train step of epoch 0:  65%|██████▌   | 4092/6250 [4:15:37<2:13:14,  3.70s/it, gpt_loss=0.522, lr=7.06e-7][A
Train step of epoch 0:  65%|██████▌   | 4092/6250 [4:15:41<2:13:14,  3.70s/it, gpt_loss=0.666, lr=7.06e-7][A
Train step of epoch 0:  65%|██████▌   | 4093/6250 [4:15:41<2:17:44,  3.83s/it, gpt_loss=0.666, lr=7.06e-7][A
Train step of epoch 0:  65%|██████▌   | 4093/6250 [4:15:45<2:17:44,  3.83s/it, gpt_loss=0.668, lr=7.06e-7][A
Train step of epoch 0:  66%|██████▌   | 4094/6250 [4:15:45<2:16:13,  3.79s/it, gpt_loss=0.668, lr=7.06e-7][A
Train step of epoch 0:  66%|██████▌   | 4094/6250 [4:15:48<2:16:13,  3.79s/it, gpt_loss=0.61, lr=7.06e-7] [A
Train step of epoch 0:  66%|██████▌   | 4095/6250 [4:15:48<2:16:18,  3.80s/it, gpt_loss=0.61, lr=7.06e-7][A[2025-04-24 04:08:32,203] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  66%|██████▌   | 4095/6250 [4:15:53<2:16:18,  3.80s/it, gpt_loss=0.578, lr=7.04e-7][A
Train step of epoch 0:  66%|██████▌   | 4096/6250 [4:15:53<2:23:36,  4.00s/it, gpt_loss=0.578, lr=7.04e-7][A
Train step of epoch 0:  66%|██████▌   | 4096/6250 [4:15:57<2:23:36,  4.00s/it, gpt_loss=0.633, lr=7.04e-7][A
Train step of epoch 0:  66%|██████▌   | 4097/6250 [4:15:57<2:27:25,  4.11s/it, gpt_loss=0.633, lr=7.04e-7][A
Train step of epoch 0:  66%|██████▌   | 4097/6250 [4:16:02<2:27:25,  4.11s/it, gpt_loss=0.681, lr=7.04e-7][A
Train step of epoch 0:  66%|██████▌   | 4098/6250 [4:16:02<2:31:43,  4.23s/it, gpt_loss=0.681, lr=7.04e-7][A
Train step of epoch 0:  66%|██████▌   | 4098/6250 [4:16:06<2:31:43,  4.23s/it, gpt_loss=0.518, lr=7.04e-7][A
Train step of epoch 0:  66%|██████▌   | 4099/6250 [4:16:06<2:28:14,  4.14s/it, gpt_loss=0.518, lr=7.04e-7][A[2025-04-24 04:08:49,725] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  66%|██████▌   | 4099/6250 [4:16:10<2:28:14,  4.14s/it, gpt_loss=0.491, lr=7.03e-7][A
Train step of epoch 0:  66%|██████▌   | 4100/6250 [4:16:10<2:34:36,  4.31s/it, gpt_loss=0.491, lr=7.03e-7][A
Train step of epoch 0:  66%|██████▌   | 4100/6250 [4:16:13<2:34:36,  4.31s/it, gpt_loss=0.434, lr=7.03e-7][A
Train step of epoch 0:  66%|██████▌   | 4101/6250 [4:16:13<2:18:45,  3.87s/it, gpt_loss=0.434, lr=7.03e-7][A
Train step of epoch 0:  66%|██████▌   | 4101/6250 [4:16:16<2:18:45,  3.87s/it, gpt_loss=0.478, lr=7.03e-7][A
Train step of epoch 0:  66%|██████▌   | 4102/6250 [4:16:16<2:06:45,  3.54s/it, gpt_loss=0.478, lr=7.03e-7][A
Train step of epoch 0:  66%|██████▌   | 4102/6250 [4:16:19<2:06:45,  3.54s/it, gpt_loss=0.42, lr=7.03e-7] [A
Train step of epoch 0:  66%|██████▌   | 4103/6250 [4:16:19<2:01:05,  3.38s/it, gpt_loss=0.42, lr=7.03e-7][A[2025-04-24 04:09:02,645] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  66%|██████▌   | 4103/6250 [4:16:23<2:01:05,  3.38s/it, gpt_loss=0.635, lr=7.01e-7][A
Train step of epoch 0:  66%|██████▌   | 4104/6250 [4:16:23<2:10:46,  3.66s/it, gpt_loss=0.635, lr=7.01e-7][A
Train step of epoch 0:  66%|██████▌   | 4104/6250 [4:16:27<2:10:46,  3.66s/it, gpt_loss=0.507, lr=7.01e-7][A
Train step of epoch 0:  66%|██████▌   | 4105/6250 [4:16:27<2:14:53,  3.77s/it, gpt_loss=0.507, lr=7.01e-7][A
Train step of epoch 0:  66%|██████▌   | 4105/6250 [4:16:31<2:14:53,  3.77s/it, gpt_loss=0.716, lr=7.01e-7][A
Train step of epoch 0:  66%|██████▌   | 4106/6250 [4:16:31<2:15:49,  3.80s/it, gpt_loss=0.716, lr=7.01e-7][A
Train step of epoch 0:  66%|██████▌   | 4106/6250 [4:16:34<2:15:49,  3.80s/it, gpt_loss=0.422, lr=7.01e-7][A
Train step of epoch 0:  66%|██████▌   | 4107/6250 [4:16:34<2:03:13,  3.45s/it, gpt_loss=0.422, lr=7.01e-7][A[2025-04-24 04:09:17,116] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  66%|██████▌   | 4107/6250 [4:16:38<2:03:13,  3.45s/it, gpt_loss=0.689, lr=6.99e-7][A
Train step of epoch 0:  66%|██████▌   | 4108/6250 [4:16:38<2:08:17,  3.59s/it, gpt_loss=0.689, lr=6.99e-7][A
Train step of epoch 0:  66%|██████▌   | 4108/6250 [4:16:42<2:08:17,  3.59s/it, gpt_loss=0.626, lr=6.99e-7][A
Train step of epoch 0:  66%|██████▌   | 4109/6250 [4:16:42<2:13:08,  3.73s/it, gpt_loss=0.626, lr=6.99e-7][A
Train step of epoch 0:  66%|██████▌   | 4109/6250 [4:16:46<2:13:08,  3.73s/it, gpt_loss=0.585, lr=6.99e-7][A
Train step of epoch 0:  66%|██████▌   | 4110/6250 [4:16:46<2:13:28,  3.74s/it, gpt_loss=0.585, lr=6.99e-7][A
Train step of epoch 0:  66%|██████▌   | 4110/6250 [4:16:49<2:13:28,  3.74s/it, gpt_loss=0.655, lr=6.99e-7][A
Train step of epoch 0:  66%|██████▌   | 4111/6250 [4:16:49<2:07:22,  3.57s/it, gpt_loss=0.655, lr=6.99e-7][A[2025-04-24 04:09:31,419] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  66%|██████▌   | 4111/6250 [4:16:52<2:07:22,  3.57s/it, gpt_loss=0.722, lr=6.98e-7][A
Train step of epoch 0:  66%|██████▌   | 4112/6250 [4:16:52<2:04:27,  3.49s/it, gpt_loss=0.722, lr=6.98e-7][A
Train step of epoch 0:  66%|██████▌   | 4112/6250 [4:16:56<2:04:27,  3.49s/it, gpt_loss=0.685, lr=6.98e-7][A
Train step of epoch 0:  66%|██████▌   | 4113/6250 [4:16:56<2:03:23,  3.46s/it, gpt_loss=0.685, lr=6.98e-7][A
Train step of epoch 0:  66%|██████▌   | 4113/6250 [4:16:58<2:03:23,  3.46s/it, gpt_loss=0.669, lr=6.98e-7][A
Train step of epoch 0:  66%|██████▌   | 4114/6250 [4:16:58<1:57:21,  3.30s/it, gpt_loss=0.669, lr=6.98e-7][A
Train step of epoch 0:  66%|██████▌   | 4114/6250 [4:17:03<1:57:21,  3.30s/it, gpt_loss=0.584, lr=6.98e-7][A
Train step of epoch 0:  66%|██████▌   | 4115/6250 [4:17:03<2:12:30,  3.72s/it, gpt_loss=0.584, lr=6.98e-7][A[2025-04-24 04:09:45,870] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  66%|██████▌   | 4115/6250 [4:17:07<2:12:30,  3.72s/it, gpt_loss=0.72, lr=6.96e-7] [A
Train step of epoch 0:  66%|██████▌   | 4116/6250 [4:17:07<2:09:16,  3.63s/it, gpt_loss=0.72, lr=6.96e-7][A
Train step of epoch 0:  66%|██████▌   | 4116/6250 [4:17:09<2:09:16,  3.63s/it, gpt_loss=0.686, lr=6.96e-7][A
Train step of epoch 0:  66%|██████▌   | 4117/6250 [4:17:09<2:00:46,  3.40s/it, gpt_loss=0.686, lr=6.96e-7][A
Train step of epoch 0:  66%|██████▌   | 4117/6250 [4:17:13<2:00:46,  3.40s/it, gpt_loss=0.522, lr=6.96e-7][A
Train step of epoch 0:  66%|██████▌   | 4118/6250 [4:17:13<2:01:58,  3.43s/it, gpt_loss=0.522, lr=6.96e-7][A
Train step of epoch 0:  66%|██████▌   | 4118/6250 [4:17:16<2:01:58,  3.43s/it, gpt_loss=0.57, lr=6.96e-7] [A
Train step of epoch 0:  66%|██████▌   | 4119/6250 [4:17:16<1:59:09,  3.35s/it, gpt_loss=0.57, lr=6.96e-7][A[2025-04-24 04:09:59,485] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  66%|██████▌   | 4119/6250 [4:17:20<1:59:09,  3.35s/it, gpt_loss=0.64, lr=6.94e-7][A
Train step of epoch 0:  66%|██████▌   | 4120/6250 [4:17:20<2:06:51,  3.57s/it, gpt_loss=0.64, lr=6.94e-7][A
Train step of epoch 0:  66%|██████▌   | 4120/6250 [4:17:23<2:06:51,  3.57s/it, gpt_loss=0.573, lr=6.94e-7][A
Train step of epoch 0:  66%|██████▌   | 4121/6250 [4:17:23<2:02:51,  3.46s/it, gpt_loss=0.573, lr=6.94e-7][A
Train step of epoch 0:  66%|██████▌   | 4121/6250 [4:17:27<2:02:51,  3.46s/it, gpt_loss=0.641, lr=6.94e-7][A
Train step of epoch 0:  66%|██████▌   | 4122/6250 [4:17:27<2:04:27,  3.51s/it, gpt_loss=0.641, lr=6.94e-7][A
Train step of epoch 0:  66%|██████▌   | 4122/6250 [4:17:30<2:04:27,  3.51s/it, gpt_loss=0.493, lr=6.94e-7][A
Train step of epoch 0:  66%|██████▌   | 4123/6250 [4:17:30<1:59:46,  3.38s/it, gpt_loss=0.493, lr=6.94e-7][A[2025-04-24 04:10:13,207] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  66%|██████▌   | 4123/6250 [4:17:34<1:59:46,  3.38s/it, gpt_loss=0.604, lr=6.93e-7][A
Train step of epoch 0:  66%|██████▌   | 4124/6250 [4:17:34<2:04:27,  3.51s/it, gpt_loss=0.604, lr=6.93e-7][A
Train step of epoch 0:  66%|██████▌   | 4124/6250 [4:17:37<2:04:27,  3.51s/it, gpt_loss=0.461, lr=6.93e-7][A
Train step of epoch 0:  66%|██████▌   | 4125/6250 [4:17:37<2:01:27,  3.43s/it, gpt_loss=0.461, lr=6.93e-7][A
Train step of epoch 0:  66%|██████▌   | 4125/6250 [4:17:41<2:01:27,  3.43s/it, gpt_loss=0.639, lr=6.93e-7][A
Train step of epoch 0:  66%|██████▌   | 4126/6250 [4:17:41<2:03:06,  3.48s/it, gpt_loss=0.639, lr=6.93e-7][A
Train step of epoch 0:  66%|██████▌   | 4126/6250 [4:17:44<2:03:06,  3.48s/it, gpt_loss=0.535, lr=6.93e-7][A
Train step of epoch 0:  66%|██████▌   | 4127/6250 [4:17:44<2:00:18,  3.40s/it, gpt_loss=0.535, lr=6.93e-7][A[2025-04-24 04:10:27,620] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  66%|██████▌   | 4127/6250 [4:17:48<2:00:18,  3.40s/it, gpt_loss=0.747, lr=6.91e-7][A
Train step of epoch 0:  66%|██████▌   | 4128/6250 [4:17:48<2:10:31,  3.69s/it, gpt_loss=0.747, lr=6.91e-7][A
Train step of epoch 0:  66%|██████▌   | 4128/6250 [4:17:52<2:10:31,  3.69s/it, gpt_loss=0.631, lr=6.91e-7][A
Train step of epoch 0:  66%|██████▌   | 4129/6250 [4:17:52<2:13:43,  3.78s/it, gpt_loss=0.631, lr=6.91e-7][A
Train step of epoch 0:  66%|██████▌   | 4129/6250 [4:17:56<2:13:43,  3.78s/it, gpt_loss=0.515, lr=6.91e-7][A
Train step of epoch 0:  66%|██████▌   | 4130/6250 [4:17:56<2:09:06,  3.65s/it, gpt_loss=0.515, lr=6.91e-7][A
Train step of epoch 0:  66%|██████▌   | 4130/6250 [4:17:59<2:09:06,  3.65s/it, gpt_loss=0.596, lr=6.91e-7][A
Train step of epoch 0:  66%|██████▌   | 4131/6250 [4:17:59<2:05:27,  3.55s/it, gpt_loss=0.596, lr=6.91e-7][A[2025-04-24 04:10:42,070] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  66%|██████▌   | 4131/6250 [4:18:03<2:05:27,  3.55s/it, gpt_loss=0.626, lr=6.89e-7][A
Train step of epoch 0:  66%|██████▌   | 4132/6250 [4:18:03<2:07:51,  3.62s/it, gpt_loss=0.626, lr=6.89e-7][A
Train step of epoch 0:  66%|██████▌   | 4132/6250 [4:18:06<2:07:51,  3.62s/it, gpt_loss=0.557, lr=6.89e-7][A
Train step of epoch 0:  66%|██████▌   | 4133/6250 [4:18:06<2:03:25,  3.50s/it, gpt_loss=0.557, lr=6.89e-7][A
Train step of epoch 0:  66%|██████▌   | 4133/6250 [4:18:09<2:03:25,  3.50s/it, gpt_loss=0.432, lr=6.89e-7][A
Train step of epoch 0:  66%|██████▌   | 4134/6250 [4:18:09<1:54:56,  3.26s/it, gpt_loss=0.432, lr=6.89e-7][A
Train step of epoch 0:  66%|██████▌   | 4134/6250 [4:18:12<1:54:56,  3.26s/it, gpt_loss=0.725, lr=6.89e-7][A
Train step of epoch 0:  66%|██████▌   | 4135/6250 [4:18:12<1:57:42,  3.34s/it, gpt_loss=0.725, lr=6.89e-7][A[2025-04-24 04:10:55,452] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  66%|██████▌   | 4135/6250 [4:18:16<1:57:42,  3.34s/it, gpt_loss=0.784, lr=6.88e-7][A
Train step of epoch 0:  66%|██████▌   | 4136/6250 [4:18:16<2:04:03,  3.52s/it, gpt_loss=0.784, lr=6.88e-7][A
Train step of epoch 0:  66%|██████▌   | 4136/6250 [4:18:20<2:04:03,  3.52s/it, gpt_loss=0.738, lr=6.88e-7][A
Train step of epoch 0:  66%|██████▌   | 4137/6250 [4:18:20<2:11:22,  3.73s/it, gpt_loss=0.738, lr=6.88e-7][A
Train step of epoch 0:  66%|██████▌   | 4137/6250 [4:18:24<2:11:22,  3.73s/it, gpt_loss=0.549, lr=6.88e-7][A
Train step of epoch 0:  66%|██████▌   | 4138/6250 [4:18:24<2:09:37,  3.68s/it, gpt_loss=0.549, lr=6.88e-7][A
Train step of epoch 0:  66%|██████▌   | 4138/6250 [4:18:27<2:09:37,  3.68s/it, gpt_loss=0.451, lr=6.88e-7][A
Train step of epoch 0:  66%|██████▌   | 4139/6250 [4:18:27<2:04:37,  3.54s/it, gpt_loss=0.451, lr=6.88e-7][A[2025-04-24 04:11:11,556] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  66%|██████▌   | 4139/6250 [4:18:32<2:04:37,  3.54s/it, gpt_loss=0.569, lr=6.86e-7][A
Train step of epoch 0:  66%|██████▌   | 4140/6250 [4:18:32<2:20:59,  4.01s/it, gpt_loss=0.569, lr=6.86e-7][A
Train step of epoch 0:  66%|██████▌   | 4140/6250 [4:18:36<2:20:59,  4.01s/it, gpt_loss=0.575, lr=6.86e-7][A
Train step of epoch 0:  66%|██████▋   | 4141/6250 [4:18:36<2:17:44,  3.92s/it, gpt_loss=0.575, lr=6.86e-7][A
Train step of epoch 0:  66%|██████▋   | 4141/6250 [4:18:39<2:17:44,  3.92s/it, gpt_loss=0.628, lr=6.86e-7][A
Train step of epoch 0:  66%|██████▋   | 4142/6250 [4:18:39<2:11:27,  3.74s/it, gpt_loss=0.628, lr=6.86e-7][A
Train step of epoch 0:  66%|██████▋   | 4142/6250 [4:18:43<2:11:27,  3.74s/it, gpt_loss=0.705, lr=6.86e-7][A
Train step of epoch 0:  66%|██████▋   | 4143/6250 [4:18:43<2:14:23,  3.83s/it, gpt_loss=0.705, lr=6.86e-7][A[2025-04-24 04:11:26,197] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  66%|██████▋   | 4143/6250 [4:18:47<2:14:23,  3.83s/it, gpt_loss=0.502, lr=6.84e-7][A
Train step of epoch 0:  66%|██████▋   | 4144/6250 [4:18:47<2:11:43,  3.75s/it, gpt_loss=0.502, lr=6.84e-7][A
Train step of epoch 0:  66%|██████▋   | 4144/6250 [4:18:50<2:11:43,  3.75s/it, gpt_loss=0.418, lr=6.84e-7][A
Train step of epoch 0:  66%|██████▋   | 4145/6250 [4:18:50<2:07:40,  3.64s/it, gpt_loss=0.418, lr=6.84e-7][A
Train step of epoch 0:  66%|██████▋   | 4145/6250 [4:18:55<2:07:40,  3.64s/it, gpt_loss=0.641, lr=6.84e-7][A
Train step of epoch 0:  66%|██████▋   | 4146/6250 [4:18:55<2:14:24,  3.83s/it, gpt_loss=0.641, lr=6.84e-7][A
Train step of epoch 0:  66%|██████▋   | 4146/6250 [4:18:59<2:14:24,  3.83s/it, gpt_loss=0.758, lr=6.84e-7][A
Train step of epoch 0:  66%|██████▋   | 4147/6250 [4:18:59<2:19:21,  3.98s/it, gpt_loss=0.758, lr=6.84e-7][A[2025-04-24 04:11:42,165] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  66%|██████▋   | 4147/6250 [4:19:03<2:19:21,  3.98s/it, gpt_loss=0.637, lr=6.83e-7][A
Train step of epoch 0:  66%|██████▋   | 4148/6250 [4:19:03<2:19:31,  3.98s/it, gpt_loss=0.637, lr=6.83e-7][A
Train step of epoch 0:  66%|██████▋   | 4148/6250 [4:19:06<2:19:31,  3.98s/it, gpt_loss=0.763, lr=6.83e-7][A
Train step of epoch 0:  66%|██████▋   | 4149/6250 [4:19:06<2:12:38,  3.79s/it, gpt_loss=0.763, lr=6.83e-7][A
Train step of epoch 0:  66%|██████▋   | 4149/6250 [4:19:10<2:12:38,  3.79s/it, gpt_loss=0.549, lr=6.83e-7][A
Train step of epoch 0:  66%|██████▋   | 4150/6250 [4:19:10<2:08:40,  3.68s/it, gpt_loss=0.549, lr=6.83e-7][A
Train step of epoch 0:  66%|██████▋   | 4150/6250 [4:19:14<2:08:40,  3.68s/it, gpt_loss=0.528, lr=6.83e-7][A
Train step of epoch 0:  66%|██████▋   | 4151/6250 [4:19:14<2:15:05,  3.86s/it, gpt_loss=0.528, lr=6.83e-7][A[2025-04-24 04:11:56,461] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  66%|██████▋   | 4151/6250 [4:19:17<2:15:05,  3.86s/it, gpt_loss=0.469, lr=6.81e-7][A
Train step of epoch 0:  66%|██████▋   | 4152/6250 [4:19:17<2:08:37,  3.68s/it, gpt_loss=0.469, lr=6.81e-7][A
Train step of epoch 0:  66%|██████▋   | 4152/6250 [4:19:22<2:08:37,  3.68s/it, gpt_loss=0.822, lr=6.81e-7][A
Train step of epoch 0:  66%|██████▋   | 4153/6250 [4:19:22<2:15:18,  3.87s/it, gpt_loss=0.822, lr=6.81e-7][A
Train step of epoch 0:  66%|██████▋   | 4153/6250 [4:19:26<2:15:18,  3.87s/it, gpt_loss=0.7, lr=6.81e-7]  [A
Train step of epoch 0:  66%|██████▋   | 4154/6250 [4:19:26<2:19:08,  3.98s/it, gpt_loss=0.7, lr=6.81e-7][A
Train step of epoch 0:  66%|██████▋   | 4154/6250 [4:19:29<2:19:08,  3.98s/it, gpt_loss=0.617, lr=6.81e-7][A
Train step of epoch 0:  66%|██████▋   | 4155/6250 [4:19:29<2:09:29,  3.71s/it, gpt_loss=0.617, lr=6.81e-7][A[2025-04-24 04:12:12,880] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  66%|██████▋   | 4155/6250 [4:19:34<2:09:29,  3.71s/it, gpt_loss=0.627, lr=6.79e-7][A
Train step of epoch 0:  66%|██████▋   | 4156/6250 [4:19:34<2:20:42,  4.03s/it, gpt_loss=0.627, lr=6.79e-7][A
Train step of epoch 0:  66%|██████▋   | 4156/6250 [4:19:37<2:20:42,  4.03s/it, gpt_loss=0.648, lr=6.79e-7][A
Train step of epoch 0:  67%|██████▋   | 4157/6250 [4:19:37<2:16:50,  3.92s/it, gpt_loss=0.648, lr=6.79e-7][A
Train step of epoch 0:  67%|██████▋   | 4157/6250 [4:19:40<2:16:50,  3.92s/it, gpt_loss=0.591, lr=6.79e-7][A
Train step of epoch 0:  67%|██████▋   | 4158/6250 [4:19:40<2:07:57,  3.67s/it, gpt_loss=0.591, lr=6.79e-7][A
Train step of epoch 0:  67%|██████▋   | 4158/6250 [4:19:44<2:07:57,  3.67s/it, gpt_loss=0.634, lr=6.79e-7][A
Train step of epoch 0:  67%|██████▋   | 4159/6250 [4:19:44<2:08:50,  3.70s/it, gpt_loss=0.634, lr=6.79e-7][A[2025-04-24 04:12:27,712] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  67%|██████▋   | 4159/6250 [4:19:48<2:08:50,  3.70s/it, gpt_loss=0.773, lr=6.78e-7][A
Train step of epoch 0:  67%|██████▋   | 4160/6250 [4:19:48<2:15:19,  3.88s/it, gpt_loss=0.773, lr=6.78e-7][A
Train step of epoch 0:  67%|██████▋   | 4160/6250 [4:19:52<2:15:19,  3.88s/it, gpt_loss=0.757, lr=6.78e-7][A
Train step of epoch 0:  67%|██████▋   | 4161/6250 [4:19:52<2:08:11,  3.68s/it, gpt_loss=0.757, lr=6.78e-7][A
Train step of epoch 0:  67%|██████▋   | 4161/6250 [4:19:55<2:08:11,  3.68s/it, gpt_loss=0.626, lr=6.78e-7][A
Train step of epoch 0:  67%|██████▋   | 4162/6250 [4:19:55<2:08:59,  3.71s/it, gpt_loss=0.626, lr=6.78e-7][A
Train step of epoch 0:  67%|██████▋   | 4162/6250 [4:19:59<2:08:59,  3.71s/it, gpt_loss=0.655, lr=6.78e-7][A
Train step of epoch 0:  67%|██████▋   | 4163/6250 [4:19:59<2:08:50,  3.70s/it, gpt_loss=0.655, lr=6.78e-7][A[2025-04-24 04:12:41,979] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  67%|██████▋   | 4163/6250 [4:20:03<2:08:50,  3.70s/it, gpt_loss=0.459, lr=6.76e-7][A
Train step of epoch 0:  67%|██████▋   | 4164/6250 [4:20:03<2:07:39,  3.67s/it, gpt_loss=0.459, lr=6.76e-7][A
Train step of epoch 0:  67%|██████▋   | 4164/6250 [4:20:07<2:07:39,  3.67s/it, gpt_loss=0.772, lr=6.76e-7][A
Train step of epoch 0:  67%|██████▋   | 4165/6250 [4:20:07<2:15:55,  3.91s/it, gpt_loss=0.772, lr=6.76e-7][A
Train step of epoch 0:  67%|██████▋   | 4165/6250 [4:20:11<2:15:55,  3.91s/it, gpt_loss=0.665, lr=6.76e-7][A
Train step of epoch 0:  67%|██████▋   | 4166/6250 [4:20:11<2:10:44,  3.76s/it, gpt_loss=0.665, lr=6.76e-7][A
Train step of epoch 0:  67%|██████▋   | 4166/6250 [4:20:14<2:10:44,  3.76s/it, gpt_loss=0.642, lr=6.76e-7][A
Train step of epoch 0:  67%|██████▋   | 4167/6250 [4:20:14<2:07:30,  3.67s/it, gpt_loss=0.642, lr=6.76e-7][A[2025-04-24 04:12:57,067] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  67%|██████▋   | 4167/6250 [4:20:18<2:07:30,  3.67s/it, gpt_loss=0.578, lr=6.74e-7][A
Train step of epoch 0:  67%|██████▋   | 4168/6250 [4:20:18<2:08:07,  3.69s/it, gpt_loss=0.578, lr=6.74e-7][A
Train step of epoch 0:  67%|██████▋   | 4168/6250 [4:20:22<2:08:07,  3.69s/it, gpt_loss=0.495, lr=6.74e-7][A
Train step of epoch 0:  67%|██████▋   | 4169/6250 [4:20:22<2:08:05,  3.69s/it, gpt_loss=0.495, lr=6.74e-7][A
Train step of epoch 0:  67%|██████▋   | 4169/6250 [4:20:25<2:08:05,  3.69s/it, gpt_loss=0.631, lr=6.74e-7][A
Train step of epoch 0:  67%|██████▋   | 4170/6250 [4:20:25<2:09:45,  3.74s/it, gpt_loss=0.631, lr=6.74e-7][A
Train step of epoch 0:  67%|██████▋   | 4170/6250 [4:20:29<2:09:45,  3.74s/it, gpt_loss=0.5, lr=6.74e-7]  [A
Train step of epoch 0:  67%|██████▋   | 4171/6250 [4:20:29<2:05:41,  3.63s/it, gpt_loss=0.5, lr=6.74e-7][A[2025-04-24 04:13:11,878] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  67%|██████▋   | 4171/6250 [4:20:33<2:05:41,  3.63s/it, gpt_loss=0.597, lr=6.73e-7][A
Train step of epoch 0:  67%|██████▋   | 4172/6250 [4:20:33<2:08:26,  3.71s/it, gpt_loss=0.597, lr=6.73e-7][A
Train step of epoch 0:  67%|██████▋   | 4172/6250 [4:20:36<2:08:26,  3.71s/it, gpt_loss=0.671, lr=6.73e-7][A
Train step of epoch 0:  67%|██████▋   | 4173/6250 [4:20:36<2:09:39,  3.75s/it, gpt_loss=0.671, lr=6.73e-7][A
Train step of epoch 0:  67%|██████▋   | 4173/6250 [4:20:40<2:09:39,  3.75s/it, gpt_loss=0.528, lr=6.73e-7][A
Train step of epoch 0:  67%|██████▋   | 4174/6250 [4:20:40<2:06:37,  3.66s/it, gpt_loss=0.528, lr=6.73e-7][A
Train step of epoch 0:  67%|██████▋   | 4174/6250 [4:20:43<2:06:37,  3.66s/it, gpt_loss=0.621, lr=6.73e-7][A
Train step of epoch 0:  67%|██████▋   | 4175/6250 [4:20:43<1:58:24,  3.42s/it, gpt_loss=0.621, lr=6.73e-7][A[2025-04-24 04:13:27,371] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  67%|██████▋   | 4175/6250 [4:20:48<1:58:24,  3.42s/it, gpt_loss=0.672, lr=6.71e-7][A
Train step of epoch 0:  67%|██████▋   | 4176/6250 [4:20:48<2:18:05,  4.00s/it, gpt_loss=0.672, lr=6.71e-7][A
Train step of epoch 0:  67%|██████▋   | 4176/6250 [4:20:52<2:18:05,  4.00s/it, gpt_loss=0.572, lr=6.71e-7][A
Train step of epoch 0:  67%|██████▋   | 4177/6250 [4:20:52<2:13:19,  3.86s/it, gpt_loss=0.572, lr=6.71e-7][A
Train step of epoch 0:  67%|██████▋   | 4177/6250 [4:20:56<2:13:19,  3.86s/it, gpt_loss=0.739, lr=6.71e-7][A
Train step of epoch 0:  67%|██████▋   | 4178/6250 [4:20:56<2:13:00,  3.85s/it, gpt_loss=0.739, lr=6.71e-7][A
Train step of epoch 0:  67%|██████▋   | 4178/6250 [4:21:00<2:13:00,  3.85s/it, gpt_loss=0.527, lr=6.71e-7][A
Train step of epoch 0:  67%|██████▋   | 4179/6250 [4:21:00<2:15:43,  3.93s/it, gpt_loss=0.527, lr=6.71e-7][A[2025-04-24 04:13:43,317] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  67%|██████▋   | 4179/6250 [4:21:04<2:15:43,  3.93s/it, gpt_loss=0.703, lr=6.7e-7] [A
Train step of epoch 0:  67%|██████▋   | 4180/6250 [4:21:04<2:21:01,  4.09s/it, gpt_loss=0.703, lr=6.7e-7][A
Train step of epoch 0:  67%|██████▋   | 4180/6250 [4:21:08<2:21:01,  4.09s/it, gpt_loss=0.574, lr=6.7e-7][A
Train step of epoch 0:  67%|██████▋   | 4181/6250 [4:21:08<2:17:16,  3.98s/it, gpt_loss=0.574, lr=6.7e-7][A
Train step of epoch 0:  67%|██████▋   | 4181/6250 [4:21:11<2:17:16,  3.98s/it, gpt_loss=0.512, lr=6.7e-7][A
Train step of epoch 0:  67%|██████▋   | 4182/6250 [4:21:11<2:09:51,  3.77s/it, gpt_loss=0.512, lr=6.7e-7][A
Train step of epoch 0:  67%|██████▋   | 4182/6250 [4:21:15<2:09:51,  3.77s/it, gpt_loss=0.692, lr=6.7e-7][A
Train step of epoch 0:  67%|██████▋   | 4183/6250 [4:21:15<2:11:19,  3.81s/it, gpt_loss=0.692, lr=6.7e-7][A[2025-04-24 04:13:58,434] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  67%|██████▋   | 4183/6250 [4:21:19<2:11:19,  3.81s/it, gpt_loss=0.637, lr=6.68e-7][A
Train step of epoch 0:  67%|██████▋   | 4184/6250 [4:21:19<2:15:16,  3.93s/it, gpt_loss=0.637, lr=6.68e-7][A
Train step of epoch 0:  67%|██████▋   | 4184/6250 [4:21:22<2:15:16,  3.93s/it, gpt_loss=0.5, lr=6.68e-7]  [A
Train step of epoch 0:  67%|██████▋   | 4185/6250 [4:21:22<2:07:20,  3.70s/it, gpt_loss=0.5, lr=6.68e-7][A
Train step of epoch 0:  67%|██████▋   | 4185/6250 [4:21:27<2:07:20,  3.70s/it, gpt_loss=0.741, lr=6.68e-7][A
Train step of epoch 0:  67%|██████▋   | 4186/6250 [4:21:27<2:14:47,  3.92s/it, gpt_loss=0.741, lr=6.68e-7][A
Train step of epoch 0:  67%|██████▋   | 4186/6250 [4:21:30<2:14:47,  3.92s/it, gpt_loss=0.638, lr=6.68e-7][A
Train step of epoch 0:  67%|██████▋   | 4187/6250 [4:21:30<2:09:42,  3.77s/it, gpt_loss=0.638, lr=6.68e-7][A[2025-04-24 04:14:12,950] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  67%|██████▋   | 4187/6250 [4:21:34<2:09:42,  3.77s/it, gpt_loss=0.589, lr=6.66e-7][A
Train step of epoch 0:  67%|██████▋   | 4188/6250 [4:21:34<2:06:42,  3.69s/it, gpt_loss=0.589, lr=6.66e-7][A
Train step of epoch 0:  67%|██████▋   | 4188/6250 [4:21:38<2:06:42,  3.69s/it, gpt_loss=0.604, lr=6.66e-7][A
Train step of epoch 0:  67%|██████▋   | 4189/6250 [4:21:38<2:16:23,  3.97s/it, gpt_loss=0.604, lr=6.66e-7][A
Train step of epoch 0:  67%|██████▋   | 4189/6250 [4:21:43<2:16:23,  3.97s/it, gpt_loss=0.53, lr=6.66e-7] [A
Train step of epoch 0:  67%|██████▋   | 4190/6250 [4:21:43<2:18:26,  4.03s/it, gpt_loss=0.53, lr=6.66e-7][A
Train step of epoch 0:  67%|██████▋   | 4190/6250 [4:21:47<2:18:26,  4.03s/it, gpt_loss=0.607, lr=6.66e-7][A
Train step of epoch 0:  67%|██████▋   | 4191/6250 [4:21:47<2:21:27,  4.12s/it, gpt_loss=0.607, lr=6.66e-7][A[2025-04-24 04:14:30,007] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  67%|██████▋   | 4191/6250 [4:21:51<2:21:27,  4.12s/it, gpt_loss=0.654, lr=6.65e-7][A
Train step of epoch 0:  67%|██████▋   | 4192/6250 [4:21:51<2:19:16,  4.06s/it, gpt_loss=0.654, lr=6.65e-7][A
Train step of epoch 0:  67%|██████▋   | 4192/6250 [4:21:55<2:19:16,  4.06s/it, gpt_loss=0.587, lr=6.65e-7][A
Train step of epoch 0:  67%|██████▋   | 4193/6250 [4:21:55<2:19:19,  4.06s/it, gpt_loss=0.587, lr=6.65e-7][A
Train step of epoch 0:  67%|██████▋   | 4193/6250 [4:21:59<2:19:19,  4.06s/it, gpt_loss=0.79, lr=6.65e-7] [A
Train step of epoch 0:  67%|██████▋   | 4194/6250 [4:21:59<2:19:42,  4.08s/it, gpt_loss=0.79, lr=6.65e-7][A
Train step of epoch 0:  67%|██████▋   | 4194/6250 [4:22:03<2:19:42,  4.08s/it, gpt_loss=0.621, lr=6.65e-7][A
Train step of epoch 0:  67%|██████▋   | 4195/6250 [4:22:03<2:23:47,  4.20s/it, gpt_loss=0.621, lr=6.65e-7][A[2025-04-24 04:14:46,728] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  67%|██████▋   | 4195/6250 [4:22:07<2:23:47,  4.20s/it, gpt_loss=0.68, lr=6.63e-7] [A
Train step of epoch 0:  67%|██████▋   | 4196/6250 [4:22:07<2:22:18,  4.16s/it, gpt_loss=0.68, lr=6.63e-7][A
Train step of epoch 0:  67%|██████▋   | 4196/6250 [4:22:12<2:22:18,  4.16s/it, gpt_loss=0.6, lr=6.63e-7] [A
Train step of epoch 0:  67%|██████▋   | 4197/6250 [4:22:12<2:21:06,  4.12s/it, gpt_loss=0.6, lr=6.63e-7][A
Train step of epoch 0:  67%|██████▋   | 4197/6250 [4:22:16<2:21:06,  4.12s/it, gpt_loss=0.575, lr=6.63e-7][A
Train step of epoch 0:  67%|██████▋   | 4198/6250 [4:22:16<2:20:49,  4.12s/it, gpt_loss=0.575, lr=6.63e-7][A
Train step of epoch 0:  67%|██████▋   | 4198/6250 [4:22:19<2:20:49,  4.12s/it, gpt_loss=0.591, lr=6.63e-7][A
Train step of epoch 0:  67%|██████▋   | 4199/6250 [4:22:19<2:17:54,  4.03s/it, gpt_loss=0.591, lr=6.63e-7][A[2025-04-24 04:15:01,674] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  67%|██████▋   | 4199/6250 [4:22:22<2:17:54,  4.03s/it, gpt_loss=0.791, lr=6.61e-7][A
Train step of epoch 0:  67%|██████▋   | 4200/6250 [4:22:22<2:06:46,  3.71s/it, gpt_loss=0.791, lr=6.61e-7][A
Train step of epoch 0:  67%|██████▋   | 4200/6250 [4:22:29<2:06:46,  3.71s/it, gpt_loss=0.631, lr=6.61e-7][A
Train step of epoch 0:  67%|██████▋   | 4201/6250 [4:22:29<2:32:41,  4.47s/it, gpt_loss=0.631, lr=6.61e-7][A
Train step of epoch 0:  67%|██████▋   | 4201/6250 [4:22:33<2:32:41,  4.47s/it, gpt_loss=0.565, lr=6.61e-7][A
Train step of epoch 0:  67%|██████▋   | 4202/6250 [4:22:33<2:26:44,  4.30s/it, gpt_loss=0.565, lr=6.61e-7][A
Train step of epoch 0:  67%|██████▋   | 4202/6250 [4:22:36<2:26:44,  4.30s/it, gpt_loss=0.574, lr=6.61e-7][A
Train step of epoch 0:  67%|██████▋   | 4203/6250 [4:22:36<2:15:13,  3.96s/it, gpt_loss=0.574, lr=6.61e-7][A[2025-04-24 04:15:18,582] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  67%|██████▋   | 4203/6250 [4:22:39<2:15:13,  3.96s/it, gpt_loss=0.533, lr=6.6e-7] [A
Train step of epoch 0:  67%|██████▋   | 4204/6250 [4:22:39<2:11:17,  3.85s/it, gpt_loss=0.533, lr=6.6e-7][A
Train step of epoch 0:  67%|██████▋   | 4204/6250 [4:22:44<2:11:17,  3.85s/it, gpt_loss=0.712, lr=6.6e-7][A
Train step of epoch 0:  67%|██████▋   | 4205/6250 [4:22:44<2:16:07,  3.99s/it, gpt_loss=0.712, lr=6.6e-7][A
Train step of epoch 0:  67%|██████▋   | 4205/6250 [4:22:47<2:16:07,  3.99s/it, gpt_loss=0.685, lr=6.6e-7][A
Train step of epoch 0:  67%|██████▋   | 4206/6250 [4:22:47<2:09:36,  3.80s/it, gpt_loss=0.685, lr=6.6e-7][A
Train step of epoch 0:  67%|██████▋   | 4206/6250 [4:22:51<2:09:36,  3.80s/it, gpt_loss=0.581, lr=6.6e-7][A
Train step of epoch 0:  67%|██████▋   | 4207/6250 [4:22:51<2:08:41,  3.78s/it, gpt_loss=0.581, lr=6.6e-7][A[2025-04-24 04:15:33,381] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  67%|██████▋   | 4207/6250 [4:22:54<2:08:41,  3.78s/it, gpt_loss=0.637, lr=6.58e-7][A
Train step of epoch 0:  67%|██████▋   | 4208/6250 [4:22:54<2:04:36,  3.66s/it, gpt_loss=0.637, lr=6.58e-7][A
Train step of epoch 0:  67%|██████▋   | 4208/6250 [4:22:58<2:04:36,  3.66s/it, gpt_loss=0.552, lr=6.58e-7][A
Train step of epoch 0:  67%|██████▋   | 4209/6250 [4:22:58<2:11:31,  3.87s/it, gpt_loss=0.552, lr=6.58e-7][A
Train step of epoch 0:  67%|██████▋   | 4209/6250 [4:23:02<2:11:31,  3.87s/it, gpt_loss=0.692, lr=6.58e-7][A
Train step of epoch 0:  67%|██████▋   | 4210/6250 [4:23:02<2:06:12,  3.71s/it, gpt_loss=0.692, lr=6.58e-7][A
Train step of epoch 0:  67%|██████▋   | 4210/6250 [4:23:06<2:06:12,  3.71s/it, gpt_loss=0.503, lr=6.58e-7][A
Train step of epoch 0:  67%|██████▋   | 4211/6250 [4:23:06<2:06:35,  3.73s/it, gpt_loss=0.503, lr=6.58e-7][A[2025-04-24 04:15:48,240] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  67%|██████▋   | 4211/6250 [4:23:09<2:06:35,  3.73s/it, gpt_loss=0.594, lr=6.56e-7][A
Train step of epoch 0:  67%|██████▋   | 4212/6250 [4:23:09<2:03:18,  3.63s/it, gpt_loss=0.594, lr=6.56e-7][A
Train step of epoch 0:  67%|██████▋   | 4212/6250 [4:23:12<2:03:18,  3.63s/it, gpt_loss=0.661, lr=6.56e-7][A
Train step of epoch 0:  67%|██████▋   | 4213/6250 [4:23:12<2:01:10,  3.57s/it, gpt_loss=0.661, lr=6.56e-7][A
Train step of epoch 0:  67%|██████▋   | 4213/6250 [4:23:15<2:01:10,  3.57s/it, gpt_loss=0.466, lr=6.56e-7][A
Train step of epoch 0:  67%|██████▋   | 4214/6250 [4:23:15<1:53:26,  3.34s/it, gpt_loss=0.466, lr=6.56e-7][A
Train step of epoch 0:  67%|██████▋   | 4214/6250 [4:23:17<1:53:26,  3.34s/it, gpt_loss=0.635, lr=6.56e-7][A
Train step of epoch 0:  67%|██████▋   | 4215/6250 [4:23:17<1:40:56,  2.98s/it, gpt_loss=0.635, lr=6.56e-7][A[2025-04-24 04:15:59,954] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  67%|██████▋   | 4215/6250 [4:23:21<1:40:56,  2.98s/it, gpt_loss=0.561, lr=6.55e-7][A
Train step of epoch 0:  67%|██████▋   | 4216/6250 [4:23:21<1:44:41,  3.09s/it, gpt_loss=0.561, lr=6.55e-7][A
Train step of epoch 0:  67%|██████▋   | 4216/6250 [4:23:24<1:44:41,  3.09s/it, gpt_loss=0.639, lr=6.55e-7][A
Train step of epoch 0:  67%|██████▋   | 4217/6250 [4:23:24<1:43:19,  3.05s/it, gpt_loss=0.639, lr=6.55e-7][A
Train step of epoch 0:  67%|██████▋   | 4217/6250 [4:23:28<1:43:19,  3.05s/it, gpt_loss=0.59, lr=6.55e-7] [A
Train step of epoch 0:  67%|██████▋   | 4218/6250 [4:23:28<1:58:55,  3.51s/it, gpt_loss=0.59, lr=6.55e-7][A
Train step of epoch 0:  67%|██████▋   | 4218/6250 [4:23:32<1:58:55,  3.51s/it, gpt_loss=0.499, lr=6.55e-7][A
Train step of epoch 0:  68%|██████▊   | 4219/6250 [4:23:32<1:58:49,  3.51s/it, gpt_loss=0.499, lr=6.55e-7][A[2025-04-24 04:16:14,770] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  68%|██████▊   | 4219/6250 [4:23:36<1:58:49,  3.51s/it, gpt_loss=0.575, lr=6.53e-7][A
Train step of epoch 0:  68%|██████▊   | 4220/6250 [4:23:36<2:01:18,  3.59s/it, gpt_loss=0.575, lr=6.53e-7][A
Train step of epoch 0:  68%|██████▊   | 4220/6250 [4:23:39<2:01:18,  3.59s/it, gpt_loss=0.549, lr=6.53e-7][A
Train step of epoch 0:  68%|██████▊   | 4221/6250 [4:23:39<2:02:42,  3.63s/it, gpt_loss=0.549, lr=6.53e-7][A
Train step of epoch 0:  68%|██████▊   | 4221/6250 [4:23:43<2:02:42,  3.63s/it, gpt_loss=0.556, lr=6.53e-7][A
Train step of epoch 0:  68%|██████▊   | 4222/6250 [4:23:43<2:02:54,  3.64s/it, gpt_loss=0.556, lr=6.53e-7][A
Train step of epoch 0:  68%|██████▊   | 4222/6250 [4:23:46<2:02:54,  3.64s/it, gpt_loss=0.64, lr=6.53e-7] [A
Train step of epoch 0:  68%|██████▊   | 4223/6250 [4:23:46<1:59:32,  3.54s/it, gpt_loss=0.64, lr=6.53e-7][A[2025-04-24 04:16:29,155] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  68%|██████▊   | 4223/6250 [4:23:50<1:59:32,  3.54s/it, gpt_loss=0.506, lr=6.52e-7][A
Train step of epoch 0:  68%|██████▊   | 4224/6250 [4:23:50<2:01:01,  3.58s/it, gpt_loss=0.506, lr=6.52e-7][A
Train step of epoch 0:  68%|██████▊   | 4224/6250 [4:23:54<2:01:01,  3.58s/it, gpt_loss=0.508, lr=6.52e-7][A
Train step of epoch 0:  68%|██████▊   | 4225/6250 [4:23:54<2:03:11,  3.65s/it, gpt_loss=0.508, lr=6.52e-7][A
Train step of epoch 0:  68%|██████▊   | 4225/6250 [4:23:56<2:03:11,  3.65s/it, gpt_loss=0.793, lr=6.52e-7][A
Train step of epoch 0:  68%|██████▊   | 4226/6250 [4:23:56<1:52:43,  3.34s/it, gpt_loss=0.793, lr=6.52e-7][A
Train step of epoch 0:  68%|██████▊   | 4226/6250 [4:24:00<1:52:43,  3.34s/it, gpt_loss=0.466, lr=6.52e-7][A
Train step of epoch 0:  68%|██████▊   | 4227/6250 [4:24:00<1:53:33,  3.37s/it, gpt_loss=0.466, lr=6.52e-7][A[2025-04-24 04:16:42,371] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  68%|██████▊   | 4227/6250 [4:24:03<1:53:33,  3.37s/it, gpt_loss=0.52, lr=6.5e-7]  [A
Train step of epoch 0:  68%|██████▊   | 4228/6250 [4:24:03<1:53:25,  3.37s/it, gpt_loss=0.52, lr=6.5e-7][A
Train step of epoch 0:  68%|██████▊   | 4228/6250 [4:24:07<1:53:25,  3.37s/it, gpt_loss=0.688, lr=6.5e-7][A
Train step of epoch 0:  68%|██████▊   | 4229/6250 [4:24:07<1:54:02,  3.39s/it, gpt_loss=0.688, lr=6.5e-7][A
Train step of epoch 0:  68%|██████▊   | 4229/6250 [4:24:10<1:54:02,  3.39s/it, gpt_loss=0.721, lr=6.5e-7][A
Train step of epoch 0:  68%|██████▊   | 4230/6250 [4:24:10<1:55:28,  3.43s/it, gpt_loss=0.721, lr=6.5e-7][A
Train step of epoch 0:  68%|██████▊   | 4230/6250 [4:24:14<1:55:28,  3.43s/it, gpt_loss=0.62, lr=6.5e-7] [A
Train step of epoch 0:  68%|██████▊   | 4231/6250 [4:24:14<1:55:16,  3.43s/it, gpt_loss=0.62, lr=6.5e-7][A[2025-04-24 04:16:56,467] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  68%|██████▊   | 4231/6250 [4:24:17<1:55:16,  3.43s/it, gpt_loss=0.608, lr=6.48e-7][A
Train step of epoch 0:  68%|██████▊   | 4232/6250 [4:24:17<1:58:07,  3.51s/it, gpt_loss=0.608, lr=6.48e-7][A
Train step of epoch 0:  68%|██████▊   | 4232/6250 [4:24:21<1:58:07,  3.51s/it, gpt_loss=0.774, lr=6.48e-7][A
Train step of epoch 0:  68%|██████▊   | 4233/6250 [4:24:21<2:04:27,  3.70s/it, gpt_loss=0.774, lr=6.48e-7][A
Train step of epoch 0:  68%|██████▊   | 4233/6250 [4:24:25<2:04:27,  3.70s/it, gpt_loss=0.542, lr=6.48e-7][A
Train step of epoch 0:  68%|██████▊   | 4234/6250 [4:24:25<2:00:45,  3.59s/it, gpt_loss=0.542, lr=6.48e-7][A
Train step of epoch 0:  68%|██████▊   | 4234/6250 [4:24:29<2:00:45,  3.59s/it, gpt_loss=0.523, lr=6.48e-7][A
Train step of epoch 0:  68%|██████▊   | 4235/6250 [4:24:29<2:09:22,  3.85s/it, gpt_loss=0.523, lr=6.48e-7][A[2025-04-24 04:17:11,843] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  68%|██████▊   | 4235/6250 [4:24:33<2:09:22,  3.85s/it, gpt_loss=0.54, lr=6.47e-7] [A
Train step of epoch 0:  68%|██████▊   | 4236/6250 [4:24:33<2:05:05,  3.73s/it, gpt_loss=0.54, lr=6.47e-7][A
Train step of epoch 0:  68%|██████▊   | 4236/6250 [4:24:37<2:05:05,  3.73s/it, gpt_loss=0.616, lr=6.47e-7][A
Train step of epoch 0:  68%|██████▊   | 4237/6250 [4:24:37<2:13:47,  3.99s/it, gpt_loss=0.616, lr=6.47e-7][A
Train step of epoch 0:  68%|██████▊   | 4237/6250 [4:24:41<2:13:47,  3.99s/it, gpt_loss=0.506, lr=6.47e-7][A
Train step of epoch 0:  68%|██████▊   | 4238/6250 [4:24:41<2:08:38,  3.84s/it, gpt_loss=0.506, lr=6.47e-7][A
Train step of epoch 0:  68%|██████▊   | 4238/6250 [4:24:44<2:08:38,  3.84s/it, gpt_loss=0.679, lr=6.47e-7][A
Train step of epoch 0:  68%|██████▊   | 4239/6250 [4:24:44<2:04:45,  3.72s/it, gpt_loss=0.679, lr=6.47e-7][A[2025-04-24 04:17:28,007] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  68%|██████▊   | 4239/6250 [4:24:49<2:04:45,  3.72s/it, gpt_loss=0.61, lr=6.45e-7] [A
Train step of epoch 0:  68%|██████▊   | 4240/6250 [4:24:49<2:13:47,  3.99s/it, gpt_loss=0.61, lr=6.45e-7][A
Train step of epoch 0:  68%|██████▊   | 4240/6250 [4:24:53<2:13:47,  3.99s/it, gpt_loss=0.751, lr=6.45e-7][A
Train step of epoch 0:  68%|██████▊   | 4241/6250 [4:24:53<2:13:21,  3.98s/it, gpt_loss=0.751, lr=6.45e-7][A
Train step of epoch 0:  68%|██████▊   | 4241/6250 [4:24:56<2:13:21,  3.98s/it, gpt_loss=0.598, lr=6.45e-7][A
Train step of epoch 0:  68%|██████▊   | 4242/6250 [4:24:56<2:09:26,  3.87s/it, gpt_loss=0.598, lr=6.45e-7][A
Train step of epoch 0:  68%|██████▊   | 4242/6250 [4:25:01<2:09:26,  3.87s/it, gpt_loss=0.671, lr=6.45e-7][A
Train step of epoch 0:  68%|██████▊   | 4243/6250 [4:25:01<2:17:55,  4.12s/it, gpt_loss=0.671, lr=6.45e-7][A[2025-04-24 04:17:43,774] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  68%|██████▊   | 4243/6250 [4:25:05<2:17:55,  4.12s/it, gpt_loss=0.589, lr=6.44e-7][A
Train step of epoch 0:  68%|██████▊   | 4244/6250 [4:25:05<2:11:31,  3.93s/it, gpt_loss=0.589, lr=6.44e-7][A
Train step of epoch 0:  68%|██████▊   | 4244/6250 [4:25:09<2:11:31,  3.93s/it, gpt_loss=0.657, lr=6.44e-7][A
Train step of epoch 0:  68%|██████▊   | 4245/6250 [4:25:09<2:13:22,  3.99s/it, gpt_loss=0.657, lr=6.44e-7][A
Train step of epoch 0:  68%|██████▊   | 4245/6250 [4:25:13<2:13:22,  3.99s/it, gpt_loss=0.748, lr=6.44e-7][A
Train step of epoch 0:  68%|██████▊   | 4246/6250 [4:25:13<2:14:32,  4.03s/it, gpt_loss=0.748, lr=6.44e-7][A
Train step of epoch 0:  68%|██████▊   | 4246/6250 [4:25:16<2:14:32,  4.03s/it, gpt_loss=0.558, lr=6.44e-7][A
Train step of epoch 0:  68%|██████▊   | 4247/6250 [4:25:16<2:05:33,  3.76s/it, gpt_loss=0.558, lr=6.44e-7][A[2025-04-24 04:17:58,077] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  68%|██████▊   | 4247/6250 [4:25:19<2:05:33,  3.76s/it, gpt_loss=0.713, lr=6.42e-7][A
Train step of epoch 0:  68%|██████▊   | 4248/6250 [4:25:19<1:57:07,  3.51s/it, gpt_loss=0.713, lr=6.42e-7][A
Train step of epoch 0:  68%|██████▊   | 4248/6250 [4:25:22<1:57:07,  3.51s/it, gpt_loss=0.628, lr=6.42e-7][A
Train step of epoch 0:  68%|██████▊   | 4249/6250 [4:25:22<1:54:05,  3.42s/it, gpt_loss=0.628, lr=6.42e-7][A
Train step of epoch 0:  68%|██████▊   | 4249/6250 [4:25:25<1:54:05,  3.42s/it, gpt_loss=0.612, lr=6.42e-7][A
Train step of epoch 0:  68%|██████▊   | 4250/6250 [4:25:25<1:51:25,  3.34s/it, gpt_loss=0.612, lr=6.42e-7][A
Train step of epoch 0:  68%|██████▊   | 4250/6250 [4:25:29<1:51:25,  3.34s/it, gpt_loss=0.532, lr=6.42e-7][A
Train step of epoch 0:  68%|██████▊   | 4251/6250 [4:25:29<1:55:06,  3.46s/it, gpt_loss=0.532, lr=6.42e-7][A[2025-04-24 04:18:11,242] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  68%|██████▊   | 4251/6250 [4:25:32<1:55:06,  3.46s/it, gpt_loss=0.567, lr=6.4e-7] [A
Train step of epoch 0:  68%|██████▊   | 4252/6250 [4:25:32<1:51:15,  3.34s/it, gpt_loss=0.567, lr=6.4e-7][A
Train step of epoch 0:  68%|██████▊   | 4252/6250 [4:25:35<1:51:15,  3.34s/it, gpt_loss=0.682, lr=6.4e-7][A
Train step of epoch 0:  68%|██████▊   | 4253/6250 [4:25:35<1:46:11,  3.19s/it, gpt_loss=0.682, lr=6.4e-7][A
Train step of epoch 0:  68%|██████▊   | 4253/6250 [4:25:39<1:46:11,  3.19s/it, gpt_loss=0.644, lr=6.4e-7][A
Train step of epoch 0:  68%|██████▊   | 4254/6250 [4:25:39<1:54:07,  3.43s/it, gpt_loss=0.644, lr=6.4e-7][A
Train step of epoch 0:  68%|██████▊   | 4254/6250 [4:25:42<1:54:07,  3.43s/it, gpt_loss=0.633, lr=6.4e-7][A
Train step of epoch 0:  68%|██████▊   | 4255/6250 [4:25:42<1:53:09,  3.40s/it, gpt_loss=0.633, lr=6.4e-7][A[2025-04-24 04:18:25,689] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  68%|██████▊   | 4255/6250 [4:25:46<1:53:09,  3.40s/it, gpt_loss=0.702, lr=6.39e-7][A
Train step of epoch 0:  68%|██████▊   | 4256/6250 [4:25:46<2:01:49,  3.67s/it, gpt_loss=0.702, lr=6.39e-7][A
Train step of epoch 0:  68%|██████▊   | 4256/6250 [4:25:50<2:01:49,  3.67s/it, gpt_loss=0.579, lr=6.39e-7][A
Train step of epoch 0:  68%|██████▊   | 4257/6250 [4:25:50<2:02:38,  3.69s/it, gpt_loss=0.579, lr=6.39e-7][A
Train step of epoch 0:  68%|██████▊   | 4257/6250 [4:25:54<2:02:38,  3.69s/it, gpt_loss=0.645, lr=6.39e-7][A
Train step of epoch 0:  68%|██████▊   | 4258/6250 [4:25:54<2:02:50,  3.70s/it, gpt_loss=0.645, lr=6.39e-7][A
Train step of epoch 0:  68%|██████▊   | 4258/6250 [4:25:58<2:02:50,  3.70s/it, gpt_loss=0.589, lr=6.39e-7][A
Train step of epoch 0:  68%|██████▊   | 4259/6250 [4:25:58<2:11:10,  3.95s/it, gpt_loss=0.589, lr=6.39e-7][A[2025-04-24 04:18:41,788] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  68%|██████▊   | 4259/6250 [4:26:03<2:11:10,  3.95s/it, gpt_loss=0.586, lr=6.37e-7][A
Train step of epoch 0:  68%|██████▊   | 4260/6250 [4:26:03<2:12:24,  3.99s/it, gpt_loss=0.586, lr=6.37e-7][A
Train step of epoch 0:  68%|██████▊   | 4260/6250 [4:26:06<2:12:24,  3.99s/it, gpt_loss=0.575, lr=6.37e-7][A
Train step of epoch 0:  68%|██████▊   | 4261/6250 [4:26:06<2:09:00,  3.89s/it, gpt_loss=0.575, lr=6.37e-7][A
Train step of epoch 0:  68%|██████▊   | 4261/6250 [4:26:09<2:09:00,  3.89s/it, gpt_loss=0.539, lr=6.37e-7][A
Train step of epoch 0:  68%|██████▊   | 4262/6250 [4:26:09<1:58:25,  3.57s/it, gpt_loss=0.539, lr=6.37e-7][A
Train step of epoch 0:  68%|██████▊   | 4262/6250 [4:26:13<1:58:25,  3.57s/it, gpt_loss=0.81, lr=6.37e-7] [A
Train step of epoch 0:  68%|██████▊   | 4263/6250 [4:26:13<2:03:32,  3.73s/it, gpt_loss=0.81, lr=6.37e-7][A[2025-04-24 04:18:54,716] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  68%|██████▊   | 4263/6250 [4:26:15<2:03:32,  3.73s/it, gpt_loss=0.53, lr=6.36e-7][A
Train step of epoch 0:  68%|██████▊   | 4264/6250 [4:26:15<1:49:41,  3.31s/it, gpt_loss=0.53, lr=6.36e-7][A
Train step of epoch 0:  68%|██████▊   | 4264/6250 [4:26:18<1:49:41,  3.31s/it, gpt_loss=0.545, lr=6.36e-7][A
Train step of epoch 0:  68%|██████▊   | 4265/6250 [4:26:18<1:45:58,  3.20s/it, gpt_loss=0.545, lr=6.36e-7][A
Train step of epoch 0:  68%|██████▊   | 4265/6250 [4:26:22<1:45:58,  3.20s/it, gpt_loss=0.877, lr=6.36e-7][A
Train step of epoch 0:  68%|██████▊   | 4266/6250 [4:26:22<1:51:08,  3.36s/it, gpt_loss=0.877, lr=6.36e-7][A
Train step of epoch 0:  68%|██████▊   | 4266/6250 [4:26:26<1:51:08,  3.36s/it, gpt_loss=0.623, lr=6.36e-7][A
Train step of epoch 0:  68%|██████▊   | 4267/6250 [4:26:26<1:52:43,  3.41s/it, gpt_loss=0.623, lr=6.36e-7][A[2025-04-24 04:19:08,854] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  68%|██████▊   | 4267/6250 [4:26:30<1:52:43,  3.41s/it, gpt_loss=0.829, lr=6.34e-7][A
Train step of epoch 0:  68%|██████▊   | 4268/6250 [4:26:30<1:57:53,  3.57s/it, gpt_loss=0.829, lr=6.34e-7][A
Train step of epoch 0:  68%|██████▊   | 4268/6250 [4:26:34<1:57:53,  3.57s/it, gpt_loss=0.708, lr=6.34e-7][A
Train step of epoch 0:  68%|██████▊   | 4269/6250 [4:26:34<2:01:38,  3.68s/it, gpt_loss=0.708, lr=6.34e-7][A
Train step of epoch 0:  68%|██████▊   | 4269/6250 [4:26:37<2:01:38,  3.68s/it, gpt_loss=0.609, lr=6.34e-7][A
Train step of epoch 0:  68%|██████▊   | 4270/6250 [4:26:37<1:59:51,  3.63s/it, gpt_loss=0.609, lr=6.34e-7][A
Train step of epoch 0:  68%|██████▊   | 4270/6250 [4:26:41<1:59:51,  3.63s/it, gpt_loss=0.657, lr=6.34e-7][A
Train step of epoch 0:  68%|██████▊   | 4271/6250 [4:26:41<2:03:56,  3.76s/it, gpt_loss=0.657, lr=6.34e-7][A[2025-04-24 04:19:24,236] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  68%|██████▊   | 4271/6250 [4:26:45<2:03:56,  3.76s/it, gpt_loss=0.663, lr=6.32e-7][A
Train step of epoch 0:  68%|██████▊   | 4272/6250 [4:26:45<2:04:57,  3.79s/it, gpt_loss=0.663, lr=6.32e-7][A
Train step of epoch 0:  68%|██████▊   | 4272/6250 [4:26:48<2:04:57,  3.79s/it, gpt_loss=0.6, lr=6.32e-7]  [A
Train step of epoch 0:  68%|██████▊   | 4273/6250 [4:26:48<2:01:19,  3.68s/it, gpt_loss=0.6, lr=6.32e-7][A
Train step of epoch 0:  68%|██████▊   | 4273/6250 [4:26:51<2:01:19,  3.68s/it, gpt_loss=0.613, lr=6.32e-7][A
Train step of epoch 0:  68%|██████▊   | 4274/6250 [4:26:51<1:51:14,  3.38s/it, gpt_loss=0.613, lr=6.32e-7][A
Train step of epoch 0:  68%|██████▊   | 4274/6250 [4:26:55<1:51:14,  3.38s/it, gpt_loss=0.578, lr=6.32e-7][A
Train step of epoch 0:  68%|██████▊   | 4275/6250 [4:26:55<1:55:17,  3.50s/it, gpt_loss=0.578, lr=6.32e-7][A[2025-04-24 04:19:38,342] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  68%|██████▊   | 4275/6250 [4:26:59<1:55:17,  3.50s/it, gpt_loss=0.444, lr=6.31e-7][A
Train step of epoch 0:  68%|██████▊   | 4276/6250 [4:26:59<2:02:15,  3.72s/it, gpt_loss=0.444, lr=6.31e-7][A
Train step of epoch 0:  68%|██████▊   | 4276/6250 [4:27:03<2:02:15,  3.72s/it, gpt_loss=0.673, lr=6.31e-7][A
Train step of epoch 0:  68%|██████▊   | 4277/6250 [4:27:03<2:00:11,  3.66s/it, gpt_loss=0.673, lr=6.31e-7][A
Train step of epoch 0:  68%|██████▊   | 4277/6250 [4:27:07<2:00:11,  3.66s/it, gpt_loss=0.606, lr=6.31e-7][A
Train step of epoch 0:  68%|██████▊   | 4278/6250 [4:27:07<2:05:13,  3.81s/it, gpt_loss=0.606, lr=6.31e-7][A
Train step of epoch 0:  68%|██████▊   | 4278/6250 [4:27:10<2:05:13,  3.81s/it, gpt_loss=0.469, lr=6.31e-7][A
Train step of epoch 0:  68%|██████▊   | 4279/6250 [4:27:10<1:57:13,  3.57s/it, gpt_loss=0.469, lr=6.31e-7][A[2025-04-24 04:19:52,395] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  68%|██████▊   | 4279/6250 [4:27:13<1:57:13,  3.57s/it, gpt_loss=0.67, lr=6.29e-7] [A
Train step of epoch 0:  68%|██████▊   | 4280/6250 [4:27:13<1:55:08,  3.51s/it, gpt_loss=0.67, lr=6.29e-7][A
Train step of epoch 0:  68%|██████▊   | 4280/6250 [4:27:17<1:55:08,  3.51s/it, gpt_loss=0.605, lr=6.29e-7][A
Train step of epoch 0:  68%|██████▊   | 4281/6250 [4:27:17<2:01:33,  3.70s/it, gpt_loss=0.605, lr=6.29e-7][A
Train step of epoch 0:  68%|██████▊   | 4281/6250 [4:27:21<2:01:33,  3.70s/it, gpt_loss=0.607, lr=6.29e-7][A
Train step of epoch 0:  69%|██████▊   | 4282/6250 [4:27:21<2:02:05,  3.72s/it, gpt_loss=0.607, lr=6.29e-7][A
Train step of epoch 0:  69%|██████▊   | 4282/6250 [4:27:25<2:02:05,  3.72s/it, gpt_loss=0.651, lr=6.29e-7][A
Train step of epoch 0:  69%|██████▊   | 4283/6250 [4:27:25<2:00:01,  3.66s/it, gpt_loss=0.651, lr=6.29e-7][A[2025-04-24 04:20:07,359] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  69%|██████▊   | 4283/6250 [4:27:28<2:00:01,  3.66s/it, gpt_loss=0.468, lr=6.28e-7][A
Train step of epoch 0:  69%|██████▊   | 4284/6250 [4:27:28<1:58:33,  3.62s/it, gpt_loss=0.468, lr=6.28e-7][A
Train step of epoch 0:  69%|██████▊   | 4284/6250 [4:27:31<1:58:33,  3.62s/it, gpt_loss=0.557, lr=6.28e-7][A
Train step of epoch 0:  69%|██████▊   | 4285/6250 [4:27:31<1:54:56,  3.51s/it, gpt_loss=0.557, lr=6.28e-7][A
Train step of epoch 0:  69%|██████▊   | 4285/6250 [4:27:36<1:54:56,  3.51s/it, gpt_loss=0.663, lr=6.28e-7][A
Train step of epoch 0:  69%|██████▊   | 4286/6250 [4:27:36<2:00:58,  3.70s/it, gpt_loss=0.663, lr=6.28e-7][A
Train step of epoch 0:  69%|██████▊   | 4286/6250 [4:27:39<2:00:58,  3.70s/it, gpt_loss=0.658, lr=6.28e-7][A
Train step of epoch 0:  69%|██████▊   | 4287/6250 [4:27:39<1:56:24,  3.56s/it, gpt_loss=0.658, lr=6.28e-7][A[2025-04-24 04:20:21,944] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  69%|██████▊   | 4287/6250 [4:27:43<1:56:24,  3.56s/it, gpt_loss=0.752, lr=6.26e-7][A
Train step of epoch 0:  69%|██████▊   | 4288/6250 [4:27:43<2:00:18,  3.68s/it, gpt_loss=0.752, lr=6.26e-7][A
Train step of epoch 0:  69%|██████▊   | 4288/6250 [4:27:46<2:00:18,  3.68s/it, gpt_loss=0.659, lr=6.26e-7][A
Train step of epoch 0:  69%|██████▊   | 4289/6250 [4:27:46<1:59:08,  3.65s/it, gpt_loss=0.659, lr=6.26e-7][A
Train step of epoch 0:  69%|██████▊   | 4289/6250 [4:27:50<1:59:08,  3.65s/it, gpt_loss=0.657, lr=6.26e-7][A
Train step of epoch 0:  69%|██████▊   | 4290/6250 [4:27:50<1:58:24,  3.62s/it, gpt_loss=0.657, lr=6.26e-7][A
Train step of epoch 0:  69%|██████▊   | 4290/6250 [4:27:54<1:58:24,  3.62s/it, gpt_loss=0.662, lr=6.26e-7][A
Train step of epoch 0:  69%|██████▊   | 4291/6250 [4:27:54<2:01:22,  3.72s/it, gpt_loss=0.662, lr=6.26e-7][A[2025-04-24 04:20:36,571] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  69%|██████▊   | 4291/6250 [4:27:57<2:01:22,  3.72s/it, gpt_loss=0.519, lr=6.24e-7][A
Train step of epoch 0:  69%|██████▊   | 4292/6250 [4:27:57<1:59:40,  3.67s/it, gpt_loss=0.519, lr=6.24e-7][A
Train step of epoch 0:  69%|██████▊   | 4292/6250 [4:28:02<1:59:40,  3.67s/it, gpt_loss=0.606, lr=6.24e-7][A
Train step of epoch 0:  69%|██████▊   | 4293/6250 [4:28:02<2:05:33,  3.85s/it, gpt_loss=0.606, lr=6.24e-7][A
Train step of epoch 0:  69%|██████▊   | 4293/6250 [4:28:06<2:05:33,  3.85s/it, gpt_loss=0.56, lr=6.24e-7] [A
Train step of epoch 0:  69%|██████▊   | 4294/6250 [4:28:06<2:09:31,  3.97s/it, gpt_loss=0.56, lr=6.24e-7][A
Train step of epoch 0:  69%|██████▊   | 4294/6250 [4:28:10<2:09:31,  3.97s/it, gpt_loss=0.565, lr=6.24e-7][A
Train step of epoch 0:  69%|██████▊   | 4295/6250 [4:28:10<2:08:43,  3.95s/it, gpt_loss=0.565, lr=6.24e-7][A[2025-04-24 04:20:53,544] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  69%|██████▊   | 4295/6250 [4:28:14<2:08:43,  3.95s/it, gpt_loss=0.694, lr=6.23e-7][A
Train step of epoch 0:  69%|██████▊   | 4296/6250 [4:28:14<2:14:23,  4.13s/it, gpt_loss=0.694, lr=6.23e-7][A
Train step of epoch 0:  69%|██████▊   | 4296/6250 [4:28:18<2:14:23,  4.13s/it, gpt_loss=0.707, lr=6.23e-7][A
Train step of epoch 0:  69%|██████▉   | 4297/6250 [4:28:18<2:11:12,  4.03s/it, gpt_loss=0.707, lr=6.23e-7][A
Train step of epoch 0:  69%|██████▉   | 4297/6250 [4:28:22<2:11:12,  4.03s/it, gpt_loss=0.636, lr=6.23e-7][A
Train step of epoch 0:  69%|██████▉   | 4298/6250 [4:28:22<2:12:31,  4.07s/it, gpt_loss=0.636, lr=6.23e-7][A
Train step of epoch 0:  69%|██████▉   | 4298/6250 [4:28:27<2:12:31,  4.07s/it, gpt_loss=0.453, lr=6.23e-7][A
Train step of epoch 0:  69%|██████▉   | 4299/6250 [4:28:27<2:15:02,  4.15s/it, gpt_loss=0.453, lr=6.23e-7][A[2025-04-24 04:21:09,533] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  69%|██████▉   | 4299/6250 [4:28:30<2:15:02,  4.15s/it, gpt_loss=0.475, lr=6.21e-7][A
Train step of epoch 0:  69%|██████▉   | 4300/6250 [4:28:30<2:10:16,  4.01s/it, gpt_loss=0.475, lr=6.21e-7][A
Train step of epoch 0:  69%|██████▉   | 4300/6250 [4:28:34<2:10:16,  4.01s/it, gpt_loss=0.548, lr=6.21e-7][A
Train step of epoch 0:  69%|██████▉   | 4301/6250 [4:28:34<2:04:51,  3.84s/it, gpt_loss=0.548, lr=6.21e-7][A
Train step of epoch 0:  69%|██████▉   | 4301/6250 [4:28:37<2:04:51,  3.84s/it, gpt_loss=0.54, lr=6.21e-7] [A
Train step of epoch 0:  69%|██████▉   | 4302/6250 [4:28:37<1:58:03,  3.64s/it, gpt_loss=0.54, lr=6.21e-7][A
Train step of epoch 0:  69%|██████▉   | 4302/6250 [4:28:40<1:58:03,  3.64s/it, gpt_loss=0.777, lr=6.21e-7][A
Train step of epoch 0:  69%|██████▉   | 4303/6250 [4:28:40<1:55:46,  3.57s/it, gpt_loss=0.777, lr=6.21e-7][A[2025-04-24 04:21:23,496] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  69%|██████▉   | 4303/6250 [4:28:44<1:55:46,  3.57s/it, gpt_loss=0.727, lr=6.2e-7] [A
Train step of epoch 0:  69%|██████▉   | 4304/6250 [4:28:44<1:59:22,  3.68s/it, gpt_loss=0.727, lr=6.2e-7][A
Train step of epoch 0:  69%|██████▉   | 4304/6250 [4:28:48<1:59:22,  3.68s/it, gpt_loss=0.74, lr=6.2e-7] [A
Train step of epoch 0:  69%|██████▉   | 4305/6250 [4:28:48<1:56:32,  3.60s/it, gpt_loss=0.74, lr=6.2e-7][A
Train step of epoch 0:  69%|██████▉   | 4305/6250 [4:28:52<1:56:32,  3.60s/it, gpt_loss=0.726, lr=6.2e-7][A
Train step of epoch 0:  69%|██████▉   | 4306/6250 [4:28:52<2:05:30,  3.87s/it, gpt_loss=0.726, lr=6.2e-7][A
Train step of epoch 0:  69%|██████▉   | 4306/6250 [4:28:55<2:05:30,  3.87s/it, gpt_loss=0.585, lr=6.2e-7][A
Train step of epoch 0:  69%|██████▉   | 4307/6250 [4:28:55<1:57:51,  3.64s/it, gpt_loss=0.585, lr=6.2e-7][A[2025-04-24 04:21:38,446] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  69%|██████▉   | 4307/6250 [4:28:59<1:57:51,  3.64s/it, gpt_loss=0.759, lr=6.18e-7][A
Train step of epoch 0:  69%|██████▉   | 4308/6250 [4:28:59<2:00:41,  3.73s/it, gpt_loss=0.759, lr=6.18e-7][A
Train step of epoch 0:  69%|██████▉   | 4308/6250 [4:29:03<2:00:41,  3.73s/it, gpt_loss=0.701, lr=6.18e-7][A
Train step of epoch 0:  69%|██████▉   | 4309/6250 [4:29:03<2:04:25,  3.85s/it, gpt_loss=0.701, lr=6.18e-7][A
Train step of epoch 0:  69%|██████▉   | 4309/6250 [4:29:06<2:04:25,  3.85s/it, gpt_loss=0.545, lr=6.18e-7][A
Train step of epoch 0:  69%|██████▉   | 4310/6250 [4:29:06<1:57:39,  3.64s/it, gpt_loss=0.545, lr=6.18e-7][A
Train step of epoch 0:  69%|██████▉   | 4310/6250 [4:29:10<1:57:39,  3.64s/it, gpt_loss=0.592, lr=6.18e-7][A
Train step of epoch 0:  69%|██████▉   | 4311/6250 [4:29:10<1:54:38,  3.55s/it, gpt_loss=0.592, lr=6.18e-7][A[2025-04-24 04:21:52,928] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  69%|██████▉   | 4311/6250 [4:29:14<1:54:38,  3.55s/it, gpt_loss=0.802, lr=6.16e-7][A
Train step of epoch 0:  69%|██████▉   | 4312/6250 [4:29:14<1:57:43,  3.64s/it, gpt_loss=0.802, lr=6.16e-7][A
Train step of epoch 0:  69%|██████▉   | 4312/6250 [4:29:17<1:57:43,  3.64s/it, gpt_loss=0.557, lr=6.16e-7][A
Train step of epoch 0:  69%|██████▉   | 4313/6250 [4:29:17<1:54:58,  3.56s/it, gpt_loss=0.557, lr=6.16e-7][A
Train step of epoch 0:  69%|██████▉   | 4313/6250 [4:29:22<1:54:58,  3.56s/it, gpt_loss=0.539, lr=6.16e-7][A
Train step of epoch 0:  69%|██████▉   | 4314/6250 [4:29:22<2:05:02,  3.88s/it, gpt_loss=0.539, lr=6.16e-7][A
Train step of epoch 0:  69%|██████▉   | 4314/6250 [4:29:25<2:05:02,  3.88s/it, gpt_loss=0.573, lr=6.16e-7][A
Train step of epoch 0:  69%|██████▉   | 4315/6250 [4:29:25<1:57:41,  3.65s/it, gpt_loss=0.573, lr=6.16e-7][A[2025-04-24 04:22:07,407] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  69%|██████▉   | 4315/6250 [4:29:28<1:57:41,  3.65s/it, gpt_loss=0.519, lr=6.15e-7][A
Train step of epoch 0:  69%|██████▉   | 4316/6250 [4:29:28<1:55:03,  3.57s/it, gpt_loss=0.519, lr=6.15e-7][A
Train step of epoch 0:  69%|██████▉   | 4316/6250 [4:29:32<1:55:03,  3.57s/it, gpt_loss=0.535, lr=6.15e-7][A
Train step of epoch 0:  69%|██████▉   | 4317/6250 [4:29:32<1:54:26,  3.55s/it, gpt_loss=0.535, lr=6.15e-7][A
Train step of epoch 0:  69%|██████▉   | 4317/6250 [4:29:35<1:54:26,  3.55s/it, gpt_loss=0.689, lr=6.15e-7][A
Train step of epoch 0:  69%|██████▉   | 4318/6250 [4:29:35<1:51:57,  3.48s/it, gpt_loss=0.689, lr=6.15e-7][A
Train step of epoch 0:  69%|██████▉   | 4318/6250 [4:29:37<1:51:57,  3.48s/it, gpt_loss=0.606, lr=6.15e-7][A
Train step of epoch 0:  69%|██████▉   | 4319/6250 [4:29:37<1:40:38,  3.13s/it, gpt_loss=0.606, lr=6.15e-7][A[2025-04-24 04:22:20,740] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  69%|██████▉   | 4319/6250 [4:29:42<1:40:38,  3.13s/it, gpt_loss=0.823, lr=6.13e-7][A
Train step of epoch 0:  69%|██████▉   | 4320/6250 [4:29:42<1:51:01,  3.45s/it, gpt_loss=0.823, lr=6.13e-7][A
Train step of epoch 0:  69%|██████▉   | 4320/6250 [4:29:45<1:51:01,  3.45s/it, gpt_loss=0.589, lr=6.13e-7][A
Train step of epoch 0:  69%|██████▉   | 4321/6250 [4:29:45<1:52:51,  3.51s/it, gpt_loss=0.589, lr=6.13e-7][A
Train step of epoch 0:  69%|██████▉   | 4321/6250 [4:29:49<1:52:51,  3.51s/it, gpt_loss=0.651, lr=6.13e-7][A
Train step of epoch 0:  69%|██████▉   | 4322/6250 [4:29:49<2:00:50,  3.76s/it, gpt_loss=0.651, lr=6.13e-7][A
Train step of epoch 0:  69%|██████▉   | 4322/6250 [4:29:53<2:00:50,  3.76s/it, gpt_loss=0.671, lr=6.13e-7][A
Train step of epoch 0:  69%|██████▉   | 4323/6250 [4:29:53<1:59:21,  3.72s/it, gpt_loss=0.671, lr=6.13e-7][A[2025-04-24 04:22:35,465] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  69%|██████▉   | 4323/6250 [4:29:56<1:59:21,  3.72s/it, gpt_loss=0.508, lr=6.12e-7][A
Train step of epoch 0:  69%|██████▉   | 4324/6250 [4:29:56<1:53:33,  3.54s/it, gpt_loss=0.508, lr=6.12e-7][A
Train step of epoch 0:  69%|██████▉   | 4324/6250 [4:30:01<1:53:33,  3.54s/it, gpt_loss=0.673, lr=6.12e-7][A
Train step of epoch 0:  69%|██████▉   | 4325/6250 [4:30:01<2:04:45,  3.89s/it, gpt_loss=0.673, lr=6.12e-7][A
Train step of epoch 0:  69%|██████▉   | 4325/6250 [4:30:05<2:04:45,  3.89s/it, gpt_loss=0.575, lr=6.12e-7][A
Train step of epoch 0:  69%|██████▉   | 4326/6250 [4:30:05<2:09:11,  4.03s/it, gpt_loss=0.575, lr=6.12e-7][A
Train step of epoch 0:  69%|██████▉   | 4326/6250 [4:30:08<2:09:11,  4.03s/it, gpt_loss=0.581, lr=6.12e-7][A
Train step of epoch 0:  69%|██████▉   | 4327/6250 [4:30:08<2:00:12,  3.75s/it, gpt_loss=0.581, lr=6.12e-7][A[2025-04-24 04:22:51,260] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  69%|██████▉   | 4327/6250 [4:30:12<2:00:12,  3.75s/it, gpt_loss=0.532, lr=6.1e-7] [A
Train step of epoch 0:  69%|██████▉   | 4328/6250 [4:30:12<1:58:58,  3.71s/it, gpt_loss=0.532, lr=6.1e-7][A
Train step of epoch 0:  69%|██████▉   | 4328/6250 [4:30:16<1:58:58,  3.71s/it, gpt_loss=0.685, lr=6.1e-7][A
Train step of epoch 0:  69%|██████▉   | 4329/6250 [4:30:16<1:57:16,  3.66s/it, gpt_loss=0.685, lr=6.1e-7][A
Train step of epoch 0:  69%|██████▉   | 4329/6250 [4:30:19<1:57:16,  3.66s/it, gpt_loss=0.772, lr=6.1e-7][A
Train step of epoch 0:  69%|██████▉   | 4330/6250 [4:30:19<1:59:11,  3.72s/it, gpt_loss=0.772, lr=6.1e-7][A
Train step of epoch 0:  69%|██████▉   | 4330/6250 [4:30:24<1:59:11,  3.72s/it, gpt_loss=0.627, lr=6.1e-7][A
Train step of epoch 0:  69%|██████▉   | 4331/6250 [4:30:24<2:06:04,  3.94s/it, gpt_loss=0.627, lr=6.1e-7][A[2025-04-24 04:23:07,972] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  69%|██████▉   | 4331/6250 [4:30:29<2:06:04,  3.94s/it, gpt_loss=0.742, lr=6.09e-7][A
Train step of epoch 0:  69%|██████▉   | 4332/6250 [4:30:29<2:14:43,  4.21s/it, gpt_loss=0.742, lr=6.09e-7][A
Train step of epoch 0:  69%|██████▉   | 4332/6250 [4:30:33<2:14:43,  4.21s/it, gpt_loss=0.73, lr=6.09e-7] [A
Train step of epoch 0:  69%|██████▉   | 4333/6250 [4:30:33<2:14:30,  4.21s/it, gpt_loss=0.73, lr=6.09e-7][A
Train step of epoch 0:  69%|██████▉   | 4333/6250 [4:30:36<2:14:30,  4.21s/it, gpt_loss=0.715, lr=6.09e-7][A
Train step of epoch 0:  69%|██████▉   | 4334/6250 [4:30:36<2:07:04,  3.98s/it, gpt_loss=0.715, lr=6.09e-7][A
Train step of epoch 0:  69%|██████▉   | 4334/6250 [4:30:40<2:07:04,  3.98s/it, gpt_loss=0.592, lr=6.09e-7][A
Train step of epoch 0:  69%|██████▉   | 4335/6250 [4:30:40<1:59:36,  3.75s/it, gpt_loss=0.592, lr=6.09e-7][A[2025-04-24 04:23:23,524] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  69%|██████▉   | 4335/6250 [4:30:44<1:59:36,  3.75s/it, gpt_loss=0.678, lr=6.07e-7][A
Train step of epoch 0:  69%|██████▉   | 4336/6250 [4:30:44<2:08:42,  4.03s/it, gpt_loss=0.678, lr=6.07e-7][A
Train step of epoch 0:  69%|██████▉   | 4336/6250 [4:30:48<2:08:42,  4.03s/it, gpt_loss=0.754, lr=6.07e-7][A
Train step of epoch 0:  69%|██████▉   | 4337/6250 [4:30:48<2:07:45,  4.01s/it, gpt_loss=0.754, lr=6.07e-7][A
Train step of epoch 0:  69%|██████▉   | 4337/6250 [4:30:51<2:07:45,  4.01s/it, gpt_loss=0.648, lr=6.07e-7][A
Train step of epoch 0:  69%|██████▉   | 4338/6250 [4:30:51<1:58:01,  3.70s/it, gpt_loss=0.648, lr=6.07e-7][A
Train step of epoch 0:  69%|██████▉   | 4338/6250 [4:30:54<1:58:01,  3.70s/it, gpt_loss=0.683, lr=6.07e-7][A
Train step of epoch 0:  69%|██████▉   | 4339/6250 [4:30:54<1:53:10,  3.55s/it, gpt_loss=0.683, lr=6.07e-7][A[2025-04-24 04:23:38,235] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  69%|██████▉   | 4339/6250 [4:30:59<1:53:10,  3.55s/it, gpt_loss=0.782, lr=6.06e-7][A
Train step of epoch 0:  69%|██████▉   | 4340/6250 [4:30:59<2:02:49,  3.86s/it, gpt_loss=0.782, lr=6.06e-7][A
Train step of epoch 0:  69%|██████▉   | 4340/6250 [4:31:03<2:02:49,  3.86s/it, gpt_loss=0.749, lr=6.06e-7][A
Train step of epoch 0:  69%|██████▉   | 4341/6250 [4:31:03<2:01:12,  3.81s/it, gpt_loss=0.749, lr=6.06e-7][A
Train step of epoch 0:  69%|██████▉   | 4341/6250 [4:31:07<2:01:12,  3.81s/it, gpt_loss=0.617, lr=6.06e-7][A
Train step of epoch 0:  69%|██████▉   | 4342/6250 [4:31:07<2:05:28,  3.95s/it, gpt_loss=0.617, lr=6.06e-7][A
Train step of epoch 0:  69%|██████▉   | 4342/6250 [4:31:10<2:05:28,  3.95s/it, gpt_loss=0.643, lr=6.06e-7][A
Train step of epoch 0:  69%|██████▉   | 4343/6250 [4:31:10<2:00:49,  3.80s/it, gpt_loss=0.643, lr=6.06e-7][A[2025-04-24 04:23:53,081] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  69%|██████▉   | 4343/6250 [4:31:14<2:00:49,  3.80s/it, gpt_loss=0.613, lr=6.04e-7][A
Train step of epoch 0:  70%|██████▉   | 4344/6250 [4:31:14<1:57:08,  3.69s/it, gpt_loss=0.613, lr=6.04e-7][A
Train step of epoch 0:  70%|██████▉   | 4344/6250 [4:31:18<1:57:08,  3.69s/it, gpt_loss=0.662, lr=6.04e-7][A
Train step of epoch 0:  70%|██████▉   | 4345/6250 [4:31:18<1:58:26,  3.73s/it, gpt_loss=0.662, lr=6.04e-7][A
Train step of epoch 0:  70%|██████▉   | 4345/6250 [4:31:21<1:58:26,  3.73s/it, gpt_loss=0.573, lr=6.04e-7][A
Train step of epoch 0:  70%|██████▉   | 4346/6250 [4:31:21<1:57:44,  3.71s/it, gpt_loss=0.573, lr=6.04e-7][A
Train step of epoch 0:  70%|██████▉   | 4346/6250 [4:31:25<1:57:44,  3.71s/it, gpt_loss=0.652, lr=6.04e-7][A
Train step of epoch 0:  70%|██████▉   | 4347/6250 [4:31:25<1:52:51,  3.56s/it, gpt_loss=0.652, lr=6.04e-7][A[2025-04-24 04:24:07,919] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  70%|██████▉   | 4347/6250 [4:31:29<1:52:51,  3.56s/it, gpt_loss=0.759, lr=6.02e-7][A
Train step of epoch 0:  70%|██████▉   | 4348/6250 [4:31:29<1:58:20,  3.73s/it, gpt_loss=0.759, lr=6.02e-7][A
Train step of epoch 0:  70%|██████▉   | 4348/6250 [4:31:32<1:58:20,  3.73s/it, gpt_loss=0.615, lr=6.02e-7][A
Train step of epoch 0:  70%|██████▉   | 4349/6250 [4:31:32<1:58:51,  3.75s/it, gpt_loss=0.615, lr=6.02e-7][A
Train step of epoch 0:  70%|██████▉   | 4349/6250 [4:31:37<1:58:51,  3.75s/it, gpt_loss=0.613, lr=6.02e-7][A
Train step of epoch 0:  70%|██████▉   | 4350/6250 [4:31:37<2:03:02,  3.89s/it, gpt_loss=0.613, lr=6.02e-7][A
Train step of epoch 0:  70%|██████▉   | 4350/6250 [4:31:40<2:03:02,  3.89s/it, gpt_loss=0.635, lr=6.02e-7][A
Train step of epoch 0:  70%|██████▉   | 4351/6250 [4:31:40<1:53:30,  3.59s/it, gpt_loss=0.635, lr=6.02e-7][A[2025-04-24 04:24:23,265] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  70%|██████▉   | 4351/6250 [4:31:44<1:53:30,  3.59s/it, gpt_loss=0.455, lr=6.01e-7][A
Train step of epoch 0:  70%|██████▉   | 4352/6250 [4:31:44<2:01:47,  3.85s/it, gpt_loss=0.455, lr=6.01e-7][A
Train step of epoch 0:  70%|██████▉   | 4352/6250 [4:31:47<2:01:47,  3.85s/it, gpt_loss=0.613, lr=6.01e-7][A
Train step of epoch 0:  70%|██████▉   | 4353/6250 [4:31:47<1:56:12,  3.68s/it, gpt_loss=0.613, lr=6.01e-7][A
Train step of epoch 0:  70%|██████▉   | 4353/6250 [4:31:51<1:56:12,  3.68s/it, gpt_loss=0.519, lr=6.01e-7][A
Train step of epoch 0:  70%|██████▉   | 4354/6250 [4:31:51<1:54:59,  3.64s/it, gpt_loss=0.519, lr=6.01e-7][A
Train step of epoch 0:  70%|██████▉   | 4354/6250 [4:31:54<1:54:59,  3.64s/it, gpt_loss=0.757, lr=6.01e-7][A
Train step of epoch 0:  70%|██████▉   | 4355/6250 [4:31:54<1:52:20,  3.56s/it, gpt_loss=0.757, lr=6.01e-7][A[2025-04-24 04:24:36,343] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  70%|██████▉   | 4355/6250 [4:31:57<1:52:20,  3.56s/it, gpt_loss=0.436, lr=5.99e-7][A
Train step of epoch 0:  70%|██████▉   | 4356/6250 [4:31:57<1:45:58,  3.36s/it, gpt_loss=0.436, lr=5.99e-7][A
Train step of epoch 0:  70%|██████▉   | 4356/6250 [4:32:01<1:45:58,  3.36s/it, gpt_loss=0.629, lr=5.99e-7][A
Train step of epoch 0:  70%|██████▉   | 4357/6250 [4:32:01<1:55:06,  3.65s/it, gpt_loss=0.629, lr=5.99e-7][A
Train step of epoch 0:  70%|██████▉   | 4357/6250 [4:32:05<1:55:06,  3.65s/it, gpt_loss=0.648, lr=5.99e-7][A
Train step of epoch 0:  70%|██████▉   | 4358/6250 [4:32:05<1:55:33,  3.66s/it, gpt_loss=0.648, lr=5.99e-7][A
Train step of epoch 0:  70%|██████▉   | 4358/6250 [4:32:08<1:55:33,  3.66s/it, gpt_loss=0.569, lr=5.99e-7][A
Train step of epoch 0:  70%|██████▉   | 4359/6250 [4:32:08<1:51:47,  3.55s/it, gpt_loss=0.569, lr=5.99e-7][A[2025-04-24 04:24:52,228] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  70%|██████▉   | 4359/6250 [4:32:13<1:51:47,  3.55s/it, gpt_loss=0.637, lr=5.98e-7][A
Train step of epoch 0:  70%|██████▉   | 4360/6250 [4:32:13<2:01:30,  3.86s/it, gpt_loss=0.637, lr=5.98e-7][A
Train step of epoch 0:  70%|██████▉   | 4360/6250 [4:32:17<2:01:30,  3.86s/it, gpt_loss=0.781, lr=5.98e-7][A
Train step of epoch 0:  70%|██████▉   | 4361/6250 [4:32:17<2:02:59,  3.91s/it, gpt_loss=0.781, lr=5.98e-7][A
Train step of epoch 0:  70%|██████▉   | 4361/6250 [4:32:20<2:02:59,  3.91s/it, gpt_loss=0.493, lr=5.98e-7][A
Train step of epoch 0:  70%|██████▉   | 4362/6250 [4:32:20<1:54:05,  3.63s/it, gpt_loss=0.493, lr=5.98e-7][A
Train step of epoch 0:  70%|██████▉   | 4362/6250 [4:32:23<1:54:05,  3.63s/it, gpt_loss=0.59, lr=5.98e-7] [A
Train step of epoch 0:  70%|██████▉   | 4363/6250 [4:32:23<1:48:13,  3.44s/it, gpt_loss=0.59, lr=5.98e-7][A[2025-04-24 04:25:05,917] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  70%|██████▉   | 4363/6250 [4:32:27<1:48:13,  3.44s/it, gpt_loss=0.485, lr=5.96e-7][A
Train step of epoch 0:  70%|██████▉   | 4364/6250 [4:32:27<1:50:29,  3.51s/it, gpt_loss=0.485, lr=5.96e-7][A
Train step of epoch 0:  70%|██████▉   | 4364/6250 [4:32:32<1:50:29,  3.51s/it, gpt_loss=0.622, lr=5.96e-7][A
Train step of epoch 0:  70%|██████▉   | 4365/6250 [4:32:32<2:06:10,  4.02s/it, gpt_loss=0.622, lr=5.96e-7][A
Train step of epoch 0:  70%|██████▉   | 4365/6250 [4:32:35<2:06:10,  4.02s/it, gpt_loss=0.62, lr=5.96e-7] [A
Train step of epoch 0:  70%|██████▉   | 4366/6250 [4:32:35<1:58:12,  3.76s/it, gpt_loss=0.62, lr=5.96e-7][A
Train step of epoch 0:  70%|██████▉   | 4366/6250 [4:32:39<1:58:12,  3.76s/it, gpt_loss=0.854, lr=5.96e-7][A
Train step of epoch 0:  70%|██████▉   | 4367/6250 [4:32:39<2:02:17,  3.90s/it, gpt_loss=0.854, lr=5.96e-7][A[2025-04-24 04:25:21,466] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  70%|██████▉   | 4367/6250 [4:32:42<2:02:17,  3.90s/it, gpt_loss=0.537, lr=5.95e-7][A
Train step of epoch 0:  70%|██████▉   | 4368/6250 [4:32:42<1:53:36,  3.62s/it, gpt_loss=0.537, lr=5.95e-7][A
Train step of epoch 0:  70%|██████▉   | 4368/6250 [4:32:44<1:53:36,  3.62s/it, gpt_loss=0.475, lr=5.95e-7][A
Train step of epoch 0:  70%|██████▉   | 4369/6250 [4:32:44<1:36:28,  3.08s/it, gpt_loss=0.475, lr=5.95e-7][A
Train step of epoch 0:  70%|██████▉   | 4369/6250 [4:32:48<1:36:28,  3.08s/it, gpt_loss=0.609, lr=5.95e-7][A
Train step of epoch 0:  70%|██████▉   | 4370/6250 [4:32:48<1:45:59,  3.38s/it, gpt_loss=0.609, lr=5.95e-7][A
Train step of epoch 0:  70%|██████▉   | 4370/6250 [4:32:52<1:45:59,  3.38s/it, gpt_loss=0.634, lr=5.95e-7][A
Train step of epoch 0:  70%|██████▉   | 4371/6250 [4:32:52<1:46:02,  3.39s/it, gpt_loss=0.634, lr=5.95e-7][A[2025-04-24 04:25:34,546] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  70%|██████▉   | 4371/6250 [4:32:55<1:46:02,  3.39s/it, gpt_loss=0.663, lr=5.93e-7][A
Train step of epoch 0:  70%|██████▉   | 4372/6250 [4:32:55<1:49:43,  3.51s/it, gpt_loss=0.663, lr=5.93e-7][A
Train step of epoch 0:  70%|██████▉   | 4372/6250 [4:32:58<1:49:43,  3.51s/it, gpt_loss=0.562, lr=5.93e-7][A
Train step of epoch 0:  70%|██████▉   | 4373/6250 [4:32:58<1:41:56,  3.26s/it, gpt_loss=0.562, lr=5.93e-7][A
Train step of epoch 0:  70%|██████▉   | 4373/6250 [4:33:03<1:41:56,  3.26s/it, gpt_loss=0.728, lr=5.93e-7][A
Train step of epoch 0:  70%|██████▉   | 4374/6250 [4:33:03<1:56:37,  3.73s/it, gpt_loss=0.728, lr=5.93e-7][A
Train step of epoch 0:  70%|██████▉   | 4374/6250 [4:33:06<1:56:37,  3.73s/it, gpt_loss=0.568, lr=5.93e-7][A
Train step of epoch 0:  70%|███████   | 4375/6250 [4:33:06<1:54:18,  3.66s/it, gpt_loss=0.568, lr=5.93e-7][A[2025-04-24 04:25:49,646] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  70%|███████   | 4375/6250 [4:33:10<1:54:18,  3.66s/it, gpt_loss=0.726, lr=5.92e-7][A
Train step of epoch 0:  70%|███████   | 4376/6250 [4:33:10<1:58:22,  3.79s/it, gpt_loss=0.726, lr=5.92e-7][A
Train step of epoch 0:  70%|███████   | 4376/6250 [4:33:15<1:58:22,  3.79s/it, gpt_loss=0.702, lr=5.92e-7][A
Train step of epoch 0:  70%|███████   | 4377/6250 [4:33:15<2:04:43,  4.00s/it, gpt_loss=0.702, lr=5.92e-7][A
Train step of epoch 0:  70%|███████   | 4377/6250 [4:33:18<2:04:43,  4.00s/it, gpt_loss=0.588, lr=5.92e-7][A
Train step of epoch 0:  70%|███████   | 4378/6250 [4:33:18<1:53:52,  3.65s/it, gpt_loss=0.588, lr=5.92e-7][A
Train step of epoch 0:  70%|███████   | 4378/6250 [4:33:21<1:53:52,  3.65s/it, gpt_loss=0.655, lr=5.92e-7][A
Train step of epoch 0:  70%|███████   | 4379/6250 [4:33:21<1:49:51,  3.52s/it, gpt_loss=0.655, lr=5.92e-7][A[2025-04-24 04:26:04,359] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  70%|███████   | 4379/6250 [4:33:25<1:49:51,  3.52s/it, gpt_loss=0.629, lr=5.9e-7] [A
Train step of epoch 0:  70%|███████   | 4380/6250 [4:33:25<1:55:49,  3.72s/it, gpt_loss=0.629, lr=5.9e-7][A
Train step of epoch 0:  70%|███████   | 4380/6250 [4:33:30<1:55:49,  3.72s/it, gpt_loss=0.716, lr=5.9e-7][A
Train step of epoch 0:  70%|███████   | 4381/6250 [4:33:30<2:02:08,  3.92s/it, gpt_loss=0.716, lr=5.9e-7][A
Train step of epoch 0:  70%|███████   | 4381/6250 [4:33:34<2:02:08,  3.92s/it, gpt_loss=0.649, lr=5.9e-7][A
Train step of epoch 0:  70%|███████   | 4382/6250 [4:33:34<2:04:08,  3.99s/it, gpt_loss=0.649, lr=5.9e-7][A
Train step of epoch 0:  70%|███████   | 4382/6250 [4:33:38<2:04:08,  3.99s/it, gpt_loss=0.639, lr=5.9e-7][A
Train step of epoch 0:  70%|███████   | 4383/6250 [4:33:38<2:05:24,  4.03s/it, gpt_loss=0.639, lr=5.9e-7][A[2025-04-24 04:26:20,902] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  70%|███████   | 4383/6250 [4:33:42<2:05:24,  4.03s/it, gpt_loss=0.457, lr=5.89e-7][A
Train step of epoch 0:  70%|███████   | 4384/6250 [4:33:42<2:03:52,  3.98s/it, gpt_loss=0.457, lr=5.89e-7][A
Train step of epoch 0:  70%|███████   | 4384/6250 [4:33:46<2:03:52,  3.98s/it, gpt_loss=0.583, lr=5.89e-7][A
Train step of epoch 0:  70%|███████   | 4385/6250 [4:33:46<2:08:10,  4.12s/it, gpt_loss=0.583, lr=5.89e-7][A
Train step of epoch 0:  70%|███████   | 4385/6250 [4:33:49<2:08:10,  4.12s/it, gpt_loss=0.683, lr=5.89e-7][A
Train step of epoch 0:  70%|███████   | 4386/6250 [4:33:49<1:58:30,  3.81s/it, gpt_loss=0.683, lr=5.89e-7][A
Train step of epoch 0:  70%|███████   | 4386/6250 [4:33:54<1:58:30,  3.81s/it, gpt_loss=0.754, lr=5.89e-7][A
Train step of epoch 0:  70%|███████   | 4387/6250 [4:33:54<2:04:59,  4.03s/it, gpt_loss=0.754, lr=5.89e-7][A[2025-04-24 04:26:36,692] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  70%|███████   | 4387/6250 [4:33:57<2:04:59,  4.03s/it, gpt_loss=0.586, lr=5.87e-7][A
Train step of epoch 0:  70%|███████   | 4388/6250 [4:33:57<2:02:08,  3.94s/it, gpt_loss=0.586, lr=5.87e-7][A
Train step of epoch 0:  70%|███████   | 4388/6250 [4:34:00<2:02:08,  3.94s/it, gpt_loss=0.583, lr=5.87e-7][A
Train step of epoch 0:  70%|███████   | 4389/6250 [4:34:00<1:46:03,  3.42s/it, gpt_loss=0.583, lr=5.87e-7][A
Train step of epoch 0:  70%|███████   | 4389/6250 [4:34:03<1:46:03,  3.42s/it, gpt_loss=0.496, lr=5.87e-7][A
Train step of epoch 0:  70%|███████   | 4390/6250 [4:34:03<1:43:45,  3.35s/it, gpt_loss=0.496, lr=5.87e-7][A
Train step of epoch 0:  70%|███████   | 4390/6250 [4:34:06<1:43:45,  3.35s/it, gpt_loss=0.576, lr=5.87e-7][A
Train step of epoch 0:  70%|███████   | 4391/6250 [4:34:06<1:46:29,  3.44s/it, gpt_loss=0.576, lr=5.87e-7][A[2025-04-24 04:26:49,272] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  70%|███████   | 4391/6250 [4:34:10<1:46:29,  3.44s/it, gpt_loss=0.67, lr=5.85e-7] [A
Train step of epoch 0:  70%|███████   | 4392/6250 [4:34:10<1:47:23,  3.47s/it, gpt_loss=0.67, lr=5.85e-7][A
Train step of epoch 0:  70%|███████   | 4392/6250 [4:34:14<1:47:23,  3.47s/it, gpt_loss=0.489, lr=5.85e-7][A
Train step of epoch 0:  70%|███████   | 4393/6250 [4:34:14<1:51:05,  3.59s/it, gpt_loss=0.489, lr=5.85e-7][A
Train step of epoch 0:  70%|███████   | 4393/6250 [4:34:17<1:51:05,  3.59s/it, gpt_loss=0.549, lr=5.85e-7][A
Train step of epoch 0:  70%|███████   | 4394/6250 [4:34:17<1:48:26,  3.51s/it, gpt_loss=0.549, lr=5.85e-7][A
Train step of epoch 0:  70%|███████   | 4394/6250 [4:34:21<1:48:26,  3.51s/it, gpt_loss=0.587, lr=5.85e-7][A
Train step of epoch 0:  70%|███████   | 4395/6250 [4:34:21<1:46:49,  3.46s/it, gpt_loss=0.587, lr=5.85e-7][A[2025-04-24 04:27:03,515] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  70%|███████   | 4395/6250 [4:34:24<1:46:49,  3.46s/it, gpt_loss=0.722, lr=5.84e-7][A
Train step of epoch 0:  70%|███████   | 4396/6250 [4:34:24<1:49:14,  3.54s/it, gpt_loss=0.722, lr=5.84e-7][A
Train step of epoch 0:  70%|███████   | 4396/6250 [4:34:28<1:49:14,  3.54s/it, gpt_loss=0.435, lr=5.84e-7][A
Train step of epoch 0:  70%|███████   | 4397/6250 [4:34:28<1:47:23,  3.48s/it, gpt_loss=0.435, lr=5.84e-7][A
Train step of epoch 0:  70%|███████   | 4397/6250 [4:34:32<1:47:23,  3.48s/it, gpt_loss=0.947, lr=5.84e-7][A
Train step of epoch 0:  70%|███████   | 4398/6250 [4:34:32<1:51:28,  3.61s/it, gpt_loss=0.947, lr=5.84e-7][A
Train step of epoch 0:  70%|███████   | 4398/6250 [4:34:35<1:51:28,  3.61s/it, gpt_loss=0.534, lr=5.84e-7][A
Train step of epoch 0:  70%|███████   | 4399/6250 [4:34:35<1:46:34,  3.45s/it, gpt_loss=0.534, lr=5.84e-7][A[2025-04-24 04:27:18,409] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-04-24 04:27:18,410] [INFO] [logging.py:107:log_dist] [Rank 0] step=1100, skipped=0, lr=[5.823807614089023e-07, 5.823807614089023e-07], mom=[(0.9, 0.95), (0.9, 0.95)]
[2025-04-24 04:27:18,410] [INFO] [timer.py:264:stop] epoch=0/micro_step=4400/global_step=1100, RunningAvgSamplesPerSec=2.2221758604291453, CurrSamplesPerSec=2.22501575694364, MemAllocated=40.57GB, MaxMemAllocated=60.14GB

Train step of epoch 0:  70%|███████   | 4399/6250 [4:34:39<1:46:34,  3.45s/it, gpt_loss=0.467, lr=5.82e-7][A
Train step of epoch 0:  70%|███████   | 4400/6250 [4:34:39<1:56:32,  3.78s/it, gpt_loss=0.467, lr=5.82e-7][A
Train step of epoch 0:  70%|███████   | 4400/6250 [4:34:43<1:56:32,  3.78s/it, gpt_loss=0.616, lr=5.82e-7][A
Train step of epoch 0:  70%|███████   | 4401/6250 [4:34:43<1:58:55,  3.86s/it, gpt_loss=0.616, lr=5.82e-7][A
Train step of epoch 0:  70%|███████   | 4401/6250 [4:34:47<1:58:55,  3.86s/it, gpt_loss=0.564, lr=5.82e-7][A
Train step of epoch 0:  70%|███████   | 4402/6250 [4:34:47<1:55:33,  3.75s/it, gpt_loss=0.564, lr=5.82e-7][A
Train step of epoch 0:  70%|███████   | 4402/6250 [4:34:50<1:55:33,  3.75s/it, gpt_loss=0.585, lr=5.82e-7][A
Train step of epoch 0:  70%|███████   | 4403/6250 [4:34:50<1:52:17,  3.65s/it, gpt_loss=0.585, lr=5.82e-7][A[2025-04-24 04:27:33,092] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  70%|███████   | 4403/6250 [4:34:54<1:52:17,  3.65s/it, gpt_loss=0.458, lr=5.81e-7][A
Train step of epoch 0:  70%|███████   | 4404/6250 [4:34:54<1:53:00,  3.67s/it, gpt_loss=0.458, lr=5.81e-7][A
Train step of epoch 0:  70%|███████   | 4404/6250 [4:34:57<1:53:00,  3.67s/it, gpt_loss=0.465, lr=5.81e-7][A
Train step of epoch 0:  70%|███████   | 4405/6250 [4:34:57<1:46:49,  3.47s/it, gpt_loss=0.465, lr=5.81e-7][A
Train step of epoch 0:  70%|███████   | 4405/6250 [4:35:01<1:46:49,  3.47s/it, gpt_loss=0.62, lr=5.81e-7] [A
Train step of epoch 0:  70%|███████   | 4406/6250 [4:35:01<1:48:41,  3.54s/it, gpt_loss=0.62, lr=5.81e-7][A
Train step of epoch 0:  70%|███████   | 4406/6250 [4:35:04<1:48:41,  3.54s/it, gpt_loss=0.433, lr=5.81e-7][A
Train step of epoch 0:  71%|███████   | 4407/6250 [4:35:04<1:47:31,  3.50s/it, gpt_loss=0.433, lr=5.81e-7][A[2025-04-24 04:27:46,796] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  71%|███████   | 4407/6250 [4:35:08<1:47:31,  3.50s/it, gpt_loss=0.704, lr=5.79e-7][A
Train step of epoch 0:  71%|███████   | 4408/6250 [4:35:08<1:48:20,  3.53s/it, gpt_loss=0.704, lr=5.79e-7][A
Train step of epoch 0:  71%|███████   | 4408/6250 [4:35:11<1:48:20,  3.53s/it, gpt_loss=0.721, lr=5.79e-7][A
Train step of epoch 0:  71%|███████   | 4409/6250 [4:35:11<1:45:35,  3.44s/it, gpt_loss=0.721, lr=5.79e-7][A
Train step of epoch 0:  71%|███████   | 4409/6250 [4:35:14<1:45:35,  3.44s/it, gpt_loss=0.545, lr=5.79e-7][A
Train step of epoch 0:  71%|███████   | 4410/6250 [4:35:14<1:47:07,  3.49s/it, gpt_loss=0.545, lr=5.79e-7][A
Train step of epoch 0:  71%|███████   | 4410/6250 [4:35:18<1:47:07,  3.49s/it, gpt_loss=0.703, lr=5.79e-7][A
Train step of epoch 0:  71%|███████   | 4411/6250 [4:35:18<1:48:26,  3.54s/it, gpt_loss=0.703, lr=5.79e-7][A[2025-04-24 04:28:00,200] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  71%|███████   | 4411/6250 [4:35:21<1:48:26,  3.54s/it, gpt_loss=0.542, lr=5.78e-7][A
Train step of epoch 0:  71%|███████   | 4412/6250 [4:35:21<1:42:37,  3.35s/it, gpt_loss=0.542, lr=5.78e-7][A
Train step of epoch 0:  71%|███████   | 4412/6250 [4:35:26<1:42:37,  3.35s/it, gpt_loss=0.614, lr=5.78e-7][A
Train step of epoch 0:  71%|███████   | 4413/6250 [4:35:26<1:55:02,  3.76s/it, gpt_loss=0.614, lr=5.78e-7][A
Train step of epoch 0:  71%|███████   | 4413/6250 [4:35:30<1:55:02,  3.76s/it, gpt_loss=0.527, lr=5.78e-7][A
Train step of epoch 0:  71%|███████   | 4414/6250 [4:35:30<2:00:06,  3.93s/it, gpt_loss=0.527, lr=5.78e-7][A
Train step of epoch 0:  71%|███████   | 4414/6250 [4:35:34<2:00:06,  3.93s/it, gpt_loss=0.565, lr=5.78e-7][A
Train step of epoch 0:  71%|███████   | 4415/6250 [4:35:34<2:04:51,  4.08s/it, gpt_loss=0.565, lr=5.78e-7][A[2025-04-24 04:28:17,980] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  71%|███████   | 4415/6250 [4:35:39<2:04:51,  4.08s/it, gpt_loss=0.621, lr=5.76e-7][A
Train step of epoch 0:  71%|███████   | 4416/6250 [4:35:39<2:06:50,  4.15s/it, gpt_loss=0.621, lr=5.76e-7][A
Train step of epoch 0:  71%|███████   | 4416/6250 [4:35:42<2:06:50,  4.15s/it, gpt_loss=0.474, lr=5.76e-7][A
Train step of epoch 0:  71%|███████   | 4417/6250 [4:35:42<2:01:48,  3.99s/it, gpt_loss=0.474, lr=5.76e-7][A
Train step of epoch 0:  71%|███████   | 4417/6250 [4:35:46<2:01:48,  3.99s/it, gpt_loss=0.607, lr=5.76e-7][A
Train step of epoch 0:  71%|███████   | 4418/6250 [4:35:46<1:59:55,  3.93s/it, gpt_loss=0.607, lr=5.76e-7][A
Train step of epoch 0:  71%|███████   | 4418/6250 [4:35:49<1:59:55,  3.93s/it, gpt_loss=0.576, lr=5.76e-7][A
Train step of epoch 0:  71%|███████   | 4419/6250 [4:35:49<1:51:06,  3.64s/it, gpt_loss=0.576, lr=5.76e-7][A[2025-04-24 04:28:32,679] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  71%|███████   | 4419/6250 [4:35:53<1:51:06,  3.64s/it, gpt_loss=0.653, lr=5.75e-7][A
Train step of epoch 0:  71%|███████   | 4420/6250 [4:35:53<1:57:20,  3.85s/it, gpt_loss=0.653, lr=5.75e-7][A
Train step of epoch 0:  71%|███████   | 4420/6250 [4:35:57<1:57:20,  3.85s/it, gpt_loss=0.734, lr=5.75e-7][A
Train step of epoch 0:  71%|███████   | 4421/6250 [4:35:57<1:52:57,  3.71s/it, gpt_loss=0.734, lr=5.75e-7][A
Train step of epoch 0:  71%|███████   | 4421/6250 [4:36:00<1:52:57,  3.71s/it, gpt_loss=0.568, lr=5.75e-7][A
Train step of epoch 0:  71%|███████   | 4422/6250 [4:36:00<1:50:58,  3.64s/it, gpt_loss=0.568, lr=5.75e-7][A
Train step of epoch 0:  71%|███████   | 4422/6250 [4:36:04<1:50:58,  3.64s/it, gpt_loss=0.615, lr=5.75e-7][A
Train step of epoch 0:  71%|███████   | 4423/6250 [4:36:04<1:52:44,  3.70s/it, gpt_loss=0.615, lr=5.75e-7][A[2025-04-24 04:28:46,639] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  71%|███████   | 4423/6250 [4:36:07<1:52:44,  3.70s/it, gpt_loss=0.685, lr=5.73e-7][A
Train step of epoch 0:  71%|███████   | 4424/6250 [4:36:07<1:48:31,  3.57s/it, gpt_loss=0.685, lr=5.73e-7][A
Train step of epoch 0:  71%|███████   | 4424/6250 [4:36:11<1:48:31,  3.57s/it, gpt_loss=0.686, lr=5.73e-7][A
Train step of epoch 0:  71%|███████   | 4425/6250 [4:36:11<1:46:21,  3.50s/it, gpt_loss=0.686, lr=5.73e-7][A
Train step of epoch 0:  71%|███████   | 4425/6250 [4:36:14<1:46:21,  3.50s/it, gpt_loss=0.506, lr=5.73e-7][A
Train step of epoch 0:  71%|███████   | 4426/6250 [4:36:14<1:46:39,  3.51s/it, gpt_loss=0.506, lr=5.73e-7][A
Train step of epoch 0:  71%|███████   | 4426/6250 [4:36:17<1:46:39,  3.51s/it, gpt_loss=0.787, lr=5.73e-7][A
Train step of epoch 0:  71%|███████   | 4427/6250 [4:36:17<1:43:41,  3.41s/it, gpt_loss=0.787, lr=5.73e-7][A[2025-04-24 04:29:00,344] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  71%|███████   | 4427/6250 [4:36:21<1:43:41,  3.41s/it, gpt_loss=0.7, lr=5.72e-7]  [A
Train step of epoch 0:  71%|███████   | 4428/6250 [4:36:21<1:45:44,  3.48s/it, gpt_loss=0.7, lr=5.72e-7][A
Train step of epoch 0:  71%|███████   | 4428/6250 [4:36:25<1:45:44,  3.48s/it, gpt_loss=0.603, lr=5.72e-7][A
Train step of epoch 0:  71%|███████   | 4429/6250 [4:36:25<1:45:18,  3.47s/it, gpt_loss=0.603, lr=5.72e-7][A
Train step of epoch 0:  71%|███████   | 4429/6250 [4:36:29<1:45:18,  3.47s/it, gpt_loss=0.606, lr=5.72e-7][A
Train step of epoch 0:  71%|███████   | 4430/6250 [4:36:29<1:52:59,  3.73s/it, gpt_loss=0.606, lr=5.72e-7][A
Train step of epoch 0:  71%|███████   | 4430/6250 [4:36:32<1:52:59,  3.73s/it, gpt_loss=0.706, lr=5.72e-7][A
Train step of epoch 0:  71%|███████   | 4431/6250 [4:36:32<1:50:53,  3.66s/it, gpt_loss=0.706, lr=5.72e-7][A[2025-04-24 04:29:15,848] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  71%|███████   | 4431/6250 [4:36:37<1:50:53,  3.66s/it, gpt_loss=0.581, lr=5.7e-7] [A
Train step of epoch 0:  71%|███████   | 4432/6250 [4:36:37<1:56:08,  3.83s/it, gpt_loss=0.581, lr=5.7e-7][A
Train step of epoch 0:  71%|███████   | 4432/6250 [4:36:41<1:56:08,  3.83s/it, gpt_loss=0.568, lr=5.7e-7][A
Train step of epoch 0:  71%|███████   | 4433/6250 [4:36:41<1:59:29,  3.95s/it, gpt_loss=0.568, lr=5.7e-7][A
Train step of epoch 0:  71%|███████   | 4433/6250 [4:36:44<1:59:29,  3.95s/it, gpt_loss=0.706, lr=5.7e-7][A
Train step of epoch 0:  71%|███████   | 4434/6250 [4:36:44<1:56:55,  3.86s/it, gpt_loss=0.706, lr=5.7e-7][A
Train step of epoch 0:  71%|███████   | 4434/6250 [4:36:48<1:56:55,  3.86s/it, gpt_loss=0.634, lr=5.7e-7][A
Train step of epoch 0:  71%|███████   | 4435/6250 [4:36:48<1:55:28,  3.82s/it, gpt_loss=0.634, lr=5.7e-7][A[2025-04-24 04:29:31,625] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  71%|███████   | 4435/6250 [4:36:52<1:55:28,  3.82s/it, gpt_loss=0.636, lr=5.69e-7][A
Train step of epoch 0:  71%|███████   | 4436/6250 [4:36:52<1:58:45,  3.93s/it, gpt_loss=0.636, lr=5.69e-7][A
Train step of epoch 0:  71%|███████   | 4436/6250 [4:36:56<1:58:45,  3.93s/it, gpt_loss=0.568, lr=5.69e-7][A
Train step of epoch 0:  71%|███████   | 4437/6250 [4:36:56<1:53:20,  3.75s/it, gpt_loss=0.568, lr=5.69e-7][A
Train step of epoch 0:  71%|███████   | 4437/6250 [4:37:00<1:53:20,  3.75s/it, gpt_loss=0.483, lr=5.69e-7][A
Train step of epoch 0:  71%|███████   | 4438/6250 [4:37:00<1:55:41,  3.83s/it, gpt_loss=0.483, lr=5.69e-7][A
Train step of epoch 0:  71%|███████   | 4438/6250 [4:37:03<1:55:41,  3.83s/it, gpt_loss=0.57, lr=5.69e-7] [A
Train step of epoch 0:  71%|███████   | 4439/6250 [4:37:03<1:53:55,  3.77s/it, gpt_loss=0.57, lr=5.69e-7][A[2025-04-24 04:29:46,808] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  71%|███████   | 4439/6250 [4:37:08<1:53:55,  3.77s/it, gpt_loss=0.71, lr=5.67e-7][A
Train step of epoch 0:  71%|███████   | 4440/6250 [4:37:08<1:57:35,  3.90s/it, gpt_loss=0.71, lr=5.67e-7][A
Train step of epoch 0:  71%|███████   | 4440/6250 [4:37:11<1:57:35,  3.90s/it, gpt_loss=0.573, lr=5.67e-7][A
Train step of epoch 0:  71%|███████   | 4441/6250 [4:37:11<1:53:19,  3.76s/it, gpt_loss=0.573, lr=5.67e-7][A
Train step of epoch 0:  71%|███████   | 4441/6250 [4:37:14<1:53:19,  3.76s/it, gpt_loss=0.557, lr=5.67e-7][A
Train step of epoch 0:  71%|███████   | 4442/6250 [4:37:14<1:50:05,  3.65s/it, gpt_loss=0.557, lr=5.67e-7][A
Train step of epoch 0:  71%|███████   | 4442/6250 [4:37:18<1:50:05,  3.65s/it, gpt_loss=0.551, lr=5.67e-7][A
Train step of epoch 0:  71%|███████   | 4443/6250 [4:37:18<1:45:30,  3.50s/it, gpt_loss=0.551, lr=5.67e-7][A[2025-04-24 04:30:00,407] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  71%|███████   | 4443/6250 [4:37:21<1:45:30,  3.50s/it, gpt_loss=0.605, lr=5.66e-7][A
Train step of epoch 0:  71%|███████   | 4444/6250 [4:37:21<1:46:21,  3.53s/it, gpt_loss=0.605, lr=5.66e-7][A
Train step of epoch 0:  71%|███████   | 4444/6250 [4:37:27<1:46:21,  3.53s/it, gpt_loss=0.59, lr=5.66e-7] [A
Train step of epoch 0:  71%|███████   | 4445/6250 [4:37:27<2:04:59,  4.15s/it, gpt_loss=0.59, lr=5.66e-7][A
Train step of epoch 0:  71%|███████   | 4445/6250 [4:37:32<2:04:59,  4.15s/it, gpt_loss=0.689, lr=5.66e-7][A
Train step of epoch 0:  71%|███████   | 4446/6250 [4:37:32<2:10:26,  4.34s/it, gpt_loss=0.689, lr=5.66e-7][A
Train step of epoch 0:  71%|███████   | 4446/6250 [4:37:36<2:10:26,  4.34s/it, gpt_loss=0.569, lr=5.66e-7][A
Train step of epoch 0:  71%|███████   | 4447/6250 [4:37:36<2:07:58,  4.26s/it, gpt_loss=0.569, lr=5.66e-7][A[2025-04-24 04:30:18,500] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  71%|███████   | 4447/6250 [4:37:39<2:07:58,  4.26s/it, gpt_loss=0.702, lr=5.64e-7][A
Train step of epoch 0:  71%|███████   | 4448/6250 [4:37:39<2:02:24,  4.08s/it, gpt_loss=0.702, lr=5.64e-7][A
Train step of epoch 0:  71%|███████   | 4448/6250 [4:37:43<2:02:24,  4.08s/it, gpt_loss=0.774, lr=5.64e-7][A
Train step of epoch 0:  71%|███████   | 4449/6250 [4:37:43<2:02:35,  4.08s/it, gpt_loss=0.774, lr=5.64e-7][A
Train step of epoch 0:  71%|███████   | 4449/6250 [4:37:46<2:02:35,  4.08s/it, gpt_loss=0.539, lr=5.64e-7][A
Train step of epoch 0:  71%|███████   | 4450/6250 [4:37:46<1:52:53,  3.76s/it, gpt_loss=0.539, lr=5.64e-7][A
Train step of epoch 0:  71%|███████   | 4450/6250 [4:37:49<1:52:53,  3.76s/it, gpt_loss=0.656, lr=5.64e-7][A
Train step of epoch 0:  71%|███████   | 4451/6250 [4:37:49<1:46:24,  3.55s/it, gpt_loss=0.656, lr=5.64e-7][A[2025-04-24 04:30:31,815] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  71%|███████   | 4451/6250 [4:37:53<1:46:24,  3.55s/it, gpt_loss=0.609, lr=5.63e-7][A
Train step of epoch 0:  71%|███████   | 4452/6250 [4:37:53<1:42:44,  3.43s/it, gpt_loss=0.609, lr=5.63e-7][A
Train step of epoch 0:  71%|███████   | 4452/6250 [4:37:56<1:42:44,  3.43s/it, gpt_loss=0.527, lr=5.63e-7][A
Train step of epoch 0:  71%|███████   | 4453/6250 [4:37:56<1:43:51,  3.47s/it, gpt_loss=0.527, lr=5.63e-7][A
Train step of epoch 0:  71%|███████   | 4453/6250 [4:38:00<1:43:51,  3.47s/it, gpt_loss=0.581, lr=5.63e-7][A
Train step of epoch 0:  71%|███████▏  | 4454/6250 [4:38:00<1:47:06,  3.58s/it, gpt_loss=0.581, lr=5.63e-7][A
Train step of epoch 0:  71%|███████▏  | 4454/6250 [4:38:04<1:47:06,  3.58s/it, gpt_loss=0.706, lr=5.63e-7][A
Train step of epoch 0:  71%|███████▏  | 4455/6250 [4:38:04<1:49:57,  3.68s/it, gpt_loss=0.706, lr=5.63e-7][A[2025-04-24 04:30:46,209] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  71%|███████▏  | 4455/6250 [4:38:07<1:49:57,  3.68s/it, gpt_loss=0.448, lr=5.61e-7][A
Train step of epoch 0:  71%|███████▏  | 4456/6250 [4:38:07<1:44:42,  3.50s/it, gpt_loss=0.448, lr=5.61e-7][A
Train step of epoch 0:  71%|███████▏  | 4456/6250 [4:38:11<1:44:42,  3.50s/it, gpt_loss=0.561, lr=5.61e-7][A
Train step of epoch 0:  71%|███████▏  | 4457/6250 [4:38:11<1:46:26,  3.56s/it, gpt_loss=0.561, lr=5.61e-7][A
Train step of epoch 0:  71%|███████▏  | 4457/6250 [4:38:14<1:46:26,  3.56s/it, gpt_loss=0.706, lr=5.61e-7][A
Train step of epoch 0:  71%|███████▏  | 4458/6250 [4:38:14<1:46:00,  3.55s/it, gpt_loss=0.706, lr=5.61e-7][A
Train step of epoch 0:  71%|███████▏  | 4458/6250 [4:38:17<1:46:00,  3.55s/it, gpt_loss=0.631, lr=5.61e-7][A
Train step of epoch 0:  71%|███████▏  | 4459/6250 [4:38:17<1:43:30,  3.47s/it, gpt_loss=0.631, lr=5.61e-7][A[2025-04-24 04:31:00,713] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  71%|███████▏  | 4459/6250 [4:38:21<1:43:30,  3.47s/it, gpt_loss=0.511, lr=5.6e-7] [A
Train step of epoch 0:  71%|███████▏  | 4460/6250 [4:38:21<1:48:15,  3.63s/it, gpt_loss=0.511, lr=5.6e-7][A
Train step of epoch 0:  71%|███████▏  | 4460/6250 [4:38:26<1:48:15,  3.63s/it, gpt_loss=0.675, lr=5.6e-7][A
Train step of epoch 0:  71%|███████▏  | 4461/6250 [4:38:26<1:52:56,  3.79s/it, gpt_loss=0.675, lr=5.6e-7][A
Train step of epoch 0:  71%|███████▏  | 4461/6250 [4:38:29<1:52:56,  3.79s/it, gpt_loss=0.742, lr=5.6e-7][A
Train step of epoch 0:  71%|███████▏  | 4462/6250 [4:38:29<1:48:13,  3.63s/it, gpt_loss=0.742, lr=5.6e-7][A
Train step of epoch 0:  71%|███████▏  | 4462/6250 [4:38:32<1:48:13,  3.63s/it, gpt_loss=0.461, lr=5.6e-7][A
Train step of epoch 0:  71%|███████▏  | 4463/6250 [4:38:32<1:45:43,  3.55s/it, gpt_loss=0.461, lr=5.6e-7][A[2025-04-24 04:31:14,876] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  71%|███████▏  | 4463/6250 [4:38:36<1:45:43,  3.55s/it, gpt_loss=0.758, lr=5.58e-7][A
Train step of epoch 0:  71%|███████▏  | 4464/6250 [4:38:36<1:44:07,  3.50s/it, gpt_loss=0.758, lr=5.58e-7][A
Train step of epoch 0:  71%|███████▏  | 4464/6250 [4:38:39<1:44:07,  3.50s/it, gpt_loss=0.68, lr=5.58e-7] [A
Train step of epoch 0:  71%|███████▏  | 4465/6250 [4:38:39<1:43:48,  3.49s/it, gpt_loss=0.68, lr=5.58e-7][A
Train step of epoch 0:  71%|███████▏  | 4465/6250 [4:38:43<1:43:48,  3.49s/it, gpt_loss=0.544, lr=5.58e-7][A
Train step of epoch 0:  71%|███████▏  | 4466/6250 [4:38:43<1:43:30,  3.48s/it, gpt_loss=0.544, lr=5.58e-7][A
Train step of epoch 0:  71%|███████▏  | 4466/6250 [4:38:46<1:43:30,  3.48s/it, gpt_loss=0.64, lr=5.58e-7] [A
Train step of epoch 0:  71%|███████▏  | 4467/6250 [4:38:46<1:41:43,  3.42s/it, gpt_loss=0.64, lr=5.58e-7][A[2025-04-24 04:31:28,843] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  71%|███████▏  | 4467/6250 [4:38:50<1:41:43,  3.42s/it, gpt_loss=0.703, lr=5.57e-7][A
Train step of epoch 0:  71%|███████▏  | 4468/6250 [4:38:50<1:44:35,  3.52s/it, gpt_loss=0.703, lr=5.57e-7][A
Train step of epoch 0:  71%|███████▏  | 4468/6250 [4:38:53<1:44:35,  3.52s/it, gpt_loss=0.732, lr=5.57e-7][A
Train step of epoch 0:  72%|███████▏  | 4469/6250 [4:38:53<1:43:56,  3.50s/it, gpt_loss=0.732, lr=5.57e-7][A
Train step of epoch 0:  72%|███████▏  | 4469/6250 [4:38:58<1:43:56,  3.50s/it, gpt_loss=0.665, lr=5.57e-7][A
Train step of epoch 0:  72%|███████▏  | 4470/6250 [4:38:58<1:53:33,  3.83s/it, gpt_loss=0.665, lr=5.57e-7][A
Train step of epoch 0:  72%|███████▏  | 4470/6250 [4:39:02<1:53:33,  3.83s/it, gpt_loss=0.461, lr=5.57e-7][A
Train step of epoch 0:  72%|███████▏  | 4471/6250 [4:39:02<1:57:01,  3.95s/it, gpt_loss=0.461, lr=5.57e-7][A[2025-04-24 04:31:45,330] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  72%|███████▏  | 4471/6250 [4:39:06<1:57:01,  3.95s/it, gpt_loss=0.642, lr=5.55e-7][A
Train step of epoch 0:  72%|███████▏  | 4472/6250 [4:39:06<1:59:21,  4.03s/it, gpt_loss=0.642, lr=5.55e-7][A
Train step of epoch 0:  72%|███████▏  | 4472/6250 [4:39:10<1:59:21,  4.03s/it, gpt_loss=0.606, lr=5.55e-7][A
Train step of epoch 0:  72%|███████▏  | 4473/6250 [4:39:10<2:02:04,  4.12s/it, gpt_loss=0.606, lr=5.55e-7][A
Train step of epoch 0:  72%|███████▏  | 4473/6250 [4:39:13<2:02:04,  4.12s/it, gpt_loss=0.688, lr=5.55e-7][A
Train step of epoch 0:  72%|███████▏  | 4474/6250 [4:39:13<1:51:17,  3.76s/it, gpt_loss=0.688, lr=5.55e-7][A
Train step of epoch 0:  72%|███████▏  | 4474/6250 [4:39:16<1:51:17,  3.76s/it, gpt_loss=0.589, lr=5.55e-7][A
Train step of epoch 0:  72%|███████▏  | 4475/6250 [4:39:16<1:45:05,  3.55s/it, gpt_loss=0.589, lr=5.55e-7][A[2025-04-24 04:32:00,071] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  72%|███████▏  | 4475/6250 [4:39:21<1:45:05,  3.55s/it, gpt_loss=0.735, lr=5.54e-7][A
Train step of epoch 0:  72%|███████▏  | 4476/6250 [4:39:21<1:52:41,  3.81s/it, gpt_loss=0.735, lr=5.54e-7][A
Train step of epoch 0:  72%|███████▏  | 4476/6250 [4:39:24<1:52:41,  3.81s/it, gpt_loss=0.712, lr=5.54e-7][A
Train step of epoch 0:  72%|███████▏  | 4477/6250 [4:39:24<1:51:07,  3.76s/it, gpt_loss=0.712, lr=5.54e-7][A
Train step of epoch 0:  72%|███████▏  | 4477/6250 [4:39:28<1:51:07,  3.76s/it, gpt_loss=0.481, lr=5.54e-7][A
Train step of epoch 0:  72%|███████▏  | 4478/6250 [4:39:28<1:51:02,  3.76s/it, gpt_loss=0.481, lr=5.54e-7][A
Train step of epoch 0:  72%|███████▏  | 4478/6250 [4:39:32<1:51:02,  3.76s/it, gpt_loss=0.546, lr=5.54e-7][A
Train step of epoch 0:  72%|███████▏  | 4479/6250 [4:39:32<1:53:15,  3.84s/it, gpt_loss=0.546, lr=5.54e-7][A[2025-04-24 04:32:15,702] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  72%|███████▏  | 4479/6250 [4:39:36<1:53:15,  3.84s/it, gpt_loss=0.782, lr=5.52e-7][A
Train step of epoch 0:  72%|███████▏  | 4480/6250 [4:39:36<1:56:31,  3.95s/it, gpt_loss=0.782, lr=5.52e-7][A
Train step of epoch 0:  72%|███████▏  | 4480/6250 [4:39:40<1:56:31,  3.95s/it, gpt_loss=0.598, lr=5.52e-7][A
Train step of epoch 0:  72%|███████▏  | 4481/6250 [4:39:40<1:54:44,  3.89s/it, gpt_loss=0.598, lr=5.52e-7][A
Train step of epoch 0:  72%|███████▏  | 4481/6250 [4:39:43<1:54:44,  3.89s/it, gpt_loss=0.556, lr=5.52e-7][A
Train step of epoch 0:  72%|███████▏  | 4482/6250 [4:39:43<1:43:19,  3.51s/it, gpt_loss=0.556, lr=5.52e-7][A
Train step of epoch 0:  72%|███████▏  | 4482/6250 [4:39:47<1:43:19,  3.51s/it, gpt_loss=0.466, lr=5.52e-7][A
Train step of epoch 0:  72%|███████▏  | 4483/6250 [4:39:47<1:45:05,  3.57s/it, gpt_loss=0.466, lr=5.52e-7][A[2025-04-24 04:32:29,914] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  72%|███████▏  | 4483/6250 [4:39:51<1:45:05,  3.57s/it, gpt_loss=0.71, lr=5.51e-7] [A
Train step of epoch 0:  72%|███████▏  | 4484/6250 [4:39:51<1:50:02,  3.74s/it, gpt_loss=0.71, lr=5.51e-7][A
Train step of epoch 0:  72%|███████▏  | 4484/6250 [4:39:54<1:50:02,  3.74s/it, gpt_loss=0.692, lr=5.51e-7][A
Train step of epoch 0:  72%|███████▏  | 4485/6250 [4:39:54<1:48:34,  3.69s/it, gpt_loss=0.692, lr=5.51e-7][A
Train step of epoch 0:  72%|███████▏  | 4485/6250 [4:39:58<1:48:34,  3.69s/it, gpt_loss=0.512, lr=5.51e-7][A
Train step of epoch 0:  72%|███████▏  | 4486/6250 [4:39:58<1:47:33,  3.66s/it, gpt_loss=0.512, lr=5.51e-7][A
Train step of epoch 0:  72%|███████▏  | 4486/6250 [4:40:01<1:47:33,  3.66s/it, gpt_loss=0.569, lr=5.51e-7][A
Train step of epoch 0:  72%|███████▏  | 4487/6250 [4:40:01<1:46:51,  3.64s/it, gpt_loss=0.569, lr=5.51e-7][A[2025-04-24 04:32:45,267] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  72%|███████▏  | 4487/6250 [4:40:06<1:46:51,  3.64s/it, gpt_loss=0.583, lr=5.49e-7][A
Train step of epoch 0:  72%|███████▏  | 4488/6250 [4:40:06<1:55:19,  3.93s/it, gpt_loss=0.583, lr=5.49e-7][A
Train step of epoch 0:  72%|███████▏  | 4488/6250 [4:40:10<1:55:19,  3.93s/it, gpt_loss=0.694, lr=5.49e-7][A
Train step of epoch 0:  72%|███████▏  | 4489/6250 [4:40:10<1:51:39,  3.80s/it, gpt_loss=0.694, lr=5.49e-7][A
Train step of epoch 0:  72%|███████▏  | 4489/6250 [4:40:13<1:51:39,  3.80s/it, gpt_loss=0.586, lr=5.49e-7][A
Train step of epoch 0:  72%|███████▏  | 4490/6250 [4:40:13<1:45:29,  3.60s/it, gpt_loss=0.586, lr=5.49e-7][A
Train step of epoch 0:  72%|███████▏  | 4490/6250 [4:40:17<1:45:29,  3.60s/it, gpt_loss=0.564, lr=5.49e-7][A
Train step of epoch 0:  72%|███████▏  | 4491/6250 [4:40:17<1:51:58,  3.82s/it, gpt_loss=0.564, lr=5.49e-7][A[2025-04-24 04:32:59,912] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  72%|███████▏  | 4491/6250 [4:40:21<1:51:58,  3.82s/it, gpt_loss=0.586, lr=5.48e-7][A
Train step of epoch 0:  72%|███████▏  | 4492/6250 [4:40:21<1:50:39,  3.78s/it, gpt_loss=0.586, lr=5.48e-7][A
Train step of epoch 0:  72%|███████▏  | 4492/6250 [4:40:24<1:50:39,  3.78s/it, gpt_loss=0.534, lr=5.48e-7][A
Train step of epoch 0:  72%|███████▏  | 4493/6250 [4:40:24<1:48:43,  3.71s/it, gpt_loss=0.534, lr=5.48e-7][A
Train step of epoch 0:  72%|███████▏  | 4493/6250 [4:40:27<1:48:43,  3.71s/it, gpt_loss=0.617, lr=5.48e-7][A
Train step of epoch 0:  72%|███████▏  | 4494/6250 [4:40:27<1:44:08,  3.56s/it, gpt_loss=0.617, lr=5.48e-7][A
Train step of epoch 0:  72%|███████▏  | 4494/6250 [4:40:32<1:44:08,  3.56s/it, gpt_loss=0.604, lr=5.48e-7][A
Train step of epoch 0:  72%|███████▏  | 4495/6250 [4:40:32<1:55:37,  3.95s/it, gpt_loss=0.604, lr=5.48e-7][A[2025-04-24 04:33:15,317] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  72%|███████▏  | 4495/6250 [4:40:36<1:55:37,  3.95s/it, gpt_loss=0.626, lr=5.46e-7][A
Train step of epoch 0:  72%|███████▏  | 4496/6250 [4:40:36<1:53:56,  3.90s/it, gpt_loss=0.626, lr=5.46e-7][A
Train step of epoch 0:  72%|███████▏  | 4496/6250 [4:40:40<1:53:56,  3.90s/it, gpt_loss=0.725, lr=5.46e-7][A
Train step of epoch 0:  72%|███████▏  | 4497/6250 [4:40:40<1:50:37,  3.79s/it, gpt_loss=0.725, lr=5.46e-7][A
Train step of epoch 0:  72%|███████▏  | 4497/6250 [4:40:43<1:50:37,  3.79s/it, gpt_loss=0.569, lr=5.46e-7][A
Train step of epoch 0:  72%|███████▏  | 4498/6250 [4:40:43<1:46:42,  3.65s/it, gpt_loss=0.569, lr=5.46e-7][A
Train step of epoch 0:  72%|███████▏  | 4498/6250 [4:40:46<1:46:42,  3.65s/it, gpt_loss=0.695, lr=5.46e-7][A
Train step of epoch 0:  72%|███████▏  | 4499/6250 [4:40:46<1:44:00,  3.56s/it, gpt_loss=0.695, lr=5.46e-7][A[2025-04-24 04:33:28,837] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  72%|███████▏  | 4499/6250 [4:40:50<1:44:00,  3.56s/it, gpt_loss=0.714, lr=5.45e-7][A
Train step of epoch 0:  72%|███████▏  | 4500/6250 [4:40:50<1:41:35,  3.48s/it, gpt_loss=0.714, lr=5.45e-7][A
Train step of epoch 0:  72%|███████▏  | 4500/6250 [4:40:54<1:41:35,  3.48s/it, gpt_loss=0.419, lr=5.45e-7][A
Train step of epoch 0:  72%|███████▏  | 4501/6250 [4:40:54<1:46:22,  3.65s/it, gpt_loss=0.419, lr=5.45e-7][A
Train step of epoch 0:  72%|███████▏  | 4501/6250 [4:40:58<1:46:22,  3.65s/it, gpt_loss=0.562, lr=5.45e-7][A
Train step of epoch 0:  72%|███████▏  | 4502/6250 [4:40:58<1:50:44,  3.80s/it, gpt_loss=0.562, lr=5.45e-7][A
Train step of epoch 0:  72%|███████▏  | 4502/6250 [4:41:02<1:50:44,  3.80s/it, gpt_loss=0.618, lr=5.45e-7][A
Train step of epoch 0:  72%|███████▏  | 4503/6250 [4:41:02<1:50:26,  3.79s/it, gpt_loss=0.618, lr=5.45e-7][A[2025-04-24 04:33:43,901] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  72%|███████▏  | 4503/6250 [4:41:05<1:50:26,  3.79s/it, gpt_loss=0.499, lr=5.43e-7][A
Train step of epoch 0:  72%|███████▏  | 4504/6250 [4:41:05<1:44:18,  3.58s/it, gpt_loss=0.499, lr=5.43e-7][A
Train step of epoch 0:  72%|███████▏  | 4504/6250 [4:41:09<1:44:18,  3.58s/it, gpt_loss=0.659, lr=5.43e-7][A
Train step of epoch 0:  72%|███████▏  | 4505/6250 [4:41:09<1:46:36,  3.67s/it, gpt_loss=0.659, lr=5.43e-7][A
Train step of epoch 0:  72%|███████▏  | 4505/6250 [4:41:11<1:46:36,  3.67s/it, gpt_loss=0.466, lr=5.43e-7][A
Train step of epoch 0:  72%|███████▏  | 4506/6250 [4:41:11<1:36:17,  3.31s/it, gpt_loss=0.466, lr=5.43e-7][A
Train step of epoch 0:  72%|███████▏  | 4506/6250 [4:41:15<1:36:17,  3.31s/it, gpt_loss=0.702, lr=5.43e-7][A
Train step of epoch 0:  72%|███████▏  | 4507/6250 [4:41:15<1:44:16,  3.59s/it, gpt_loss=0.702, lr=5.43e-7][A[2025-04-24 04:33:58,582] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  72%|███████▏  | 4507/6250 [4:41:19<1:44:16,  3.59s/it, gpt_loss=0.607, lr=5.42e-7][A
Train step of epoch 0:  72%|███████▏  | 4508/6250 [4:41:19<1:48:40,  3.74s/it, gpt_loss=0.607, lr=5.42e-7][A
Train step of epoch 0:  72%|███████▏  | 4508/6250 [4:41:23<1:48:40,  3.74s/it, gpt_loss=0.814, lr=5.42e-7][A
Train step of epoch 0:  72%|███████▏  | 4509/6250 [4:41:23<1:49:18,  3.77s/it, gpt_loss=0.814, lr=5.42e-7][A
Train step of epoch 0:  72%|███████▏  | 4509/6250 [4:41:26<1:49:18,  3.77s/it, gpt_loss=0.638, lr=5.42e-7][A
Train step of epoch 0:  72%|███████▏  | 4510/6250 [4:41:26<1:37:23,  3.36s/it, gpt_loss=0.638, lr=5.42e-7][A
Train step of epoch 0:  72%|███████▏  | 4510/6250 [4:41:29<1:37:23,  3.36s/it, gpt_loss=0.559, lr=5.42e-7][A
Train step of epoch 0:  72%|███████▏  | 4511/6250 [4:41:29<1:41:46,  3.51s/it, gpt_loss=0.559, lr=5.42e-7][A[2025-04-24 04:34:12,785] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  72%|███████▏  | 4511/6250 [4:41:34<1:41:46,  3.51s/it, gpt_loss=0.558, lr=5.41e-7][A
Train step of epoch 0:  72%|███████▏  | 4512/6250 [4:41:34<1:46:52,  3.69s/it, gpt_loss=0.558, lr=5.41e-7][A
Train step of epoch 0:  72%|███████▏  | 4512/6250 [4:41:38<1:46:52,  3.69s/it, gpt_loss=0.694, lr=5.41e-7][A
Train step of epoch 0:  72%|███████▏  | 4513/6250 [4:41:38<1:49:47,  3.79s/it, gpt_loss=0.694, lr=5.41e-7][A
Train step of epoch 0:  72%|███████▏  | 4513/6250 [4:41:41<1:49:47,  3.79s/it, gpt_loss=0.46, lr=5.41e-7] [A
Train step of epoch 0:  72%|███████▏  | 4514/6250 [4:41:41<1:45:00,  3.63s/it, gpt_loss=0.46, lr=5.41e-7][A
Train step of epoch 0:  72%|███████▏  | 4514/6250 [4:41:44<1:45:00,  3.63s/it, gpt_loss=0.546, lr=5.41e-7][A
Train step of epoch 0:  72%|███████▏  | 4515/6250 [4:41:44<1:44:24,  3.61s/it, gpt_loss=0.546, lr=5.41e-7][A[2025-04-24 04:34:27,700] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  72%|███████▏  | 4515/6250 [4:41:48<1:44:24,  3.61s/it, gpt_loss=0.427, lr=5.39e-7][A
Train step of epoch 0:  72%|███████▏  | 4516/6250 [4:41:48<1:48:18,  3.75s/it, gpt_loss=0.427, lr=5.39e-7][A
Train step of epoch 0:  72%|███████▏  | 4516/6250 [4:41:51<1:48:18,  3.75s/it, gpt_loss=0.51, lr=5.39e-7] [A
Train step of epoch 0:  72%|███████▏  | 4517/6250 [4:41:51<1:36:20,  3.34s/it, gpt_loss=0.51, lr=5.39e-7][A
Train step of epoch 0:  72%|███████▏  | 4517/6250 [4:41:55<1:36:20,  3.34s/it, gpt_loss=0.612, lr=5.39e-7][A
Train step of epoch 0:  72%|███████▏  | 4518/6250 [4:41:55<1:44:42,  3.63s/it, gpt_loss=0.612, lr=5.39e-7][A
Train step of epoch 0:  72%|███████▏  | 4518/6250 [4:41:58<1:44:42,  3.63s/it, gpt_loss=0.752, lr=5.39e-7][A
Train step of epoch 0:  72%|███████▏  | 4519/6250 [4:41:58<1:42:17,  3.55s/it, gpt_loss=0.752, lr=5.39e-7][A[2025-04-24 04:34:42,859] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  72%|███████▏  | 4519/6250 [4:42:04<1:42:17,  3.55s/it, gpt_loss=0.557, lr=5.38e-7][A
Train step of epoch 0:  72%|███████▏  | 4520/6250 [4:42:04<1:55:52,  4.02s/it, gpt_loss=0.557, lr=5.38e-7][A
Train step of epoch 0:  72%|███████▏  | 4520/6250 [4:42:07<1:55:52,  4.02s/it, gpt_loss=0.695, lr=5.38e-7][A
Train step of epoch 0:  72%|███████▏  | 4521/6250 [4:42:07<1:48:42,  3.77s/it, gpt_loss=0.695, lr=5.38e-7][A
Train step of epoch 0:  72%|███████▏  | 4521/6250 [4:42:11<1:48:42,  3.77s/it, gpt_loss=0.595, lr=5.38e-7][A
Train step of epoch 0:  72%|███████▏  | 4522/6250 [4:42:11<1:48:42,  3.77s/it, gpt_loss=0.595, lr=5.38e-7][A
Train step of epoch 0:  72%|███████▏  | 4522/6250 [4:42:14<1:48:42,  3.77s/it, gpt_loss=0.505, lr=5.38e-7][A
Train step of epoch 0:  72%|███████▏  | 4523/6250 [4:42:14<1:47:09,  3.72s/it, gpt_loss=0.505, lr=5.38e-7][A[2025-04-24 04:34:57,222] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  72%|███████▏  | 4523/6250 [4:42:18<1:47:09,  3.72s/it, gpt_loss=0.453, lr=5.36e-7][A
Train step of epoch 0:  72%|███████▏  | 4524/6250 [4:42:18<1:47:36,  3.74s/it, gpt_loss=0.453, lr=5.36e-7][A
Train step of epoch 0:  72%|███████▏  | 4524/6250 [4:42:21<1:47:36,  3.74s/it, gpt_loss=0.563, lr=5.36e-7][A
Train step of epoch 0:  72%|███████▏  | 4525/6250 [4:42:21<1:42:42,  3.57s/it, gpt_loss=0.563, lr=5.36e-7][A
Train step of epoch 0:  72%|███████▏  | 4525/6250 [4:42:24<1:42:42,  3.57s/it, gpt_loss=0.679, lr=5.36e-7][A
Train step of epoch 0:  72%|███████▏  | 4526/6250 [4:42:24<1:36:59,  3.38s/it, gpt_loss=0.679, lr=5.36e-7][A
Train step of epoch 0:  72%|███████▏  | 4526/6250 [4:42:28<1:36:59,  3.38s/it, gpt_loss=0.646, lr=5.36e-7][A
Train step of epoch 0:  72%|███████▏  | 4527/6250 [4:42:28<1:38:30,  3.43s/it, gpt_loss=0.646, lr=5.36e-7][A[2025-04-24 04:35:11,787] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  72%|███████▏  | 4527/6250 [4:42:33<1:38:30,  3.43s/it, gpt_loss=0.515, lr=5.35e-7][A
Train step of epoch 0:  72%|███████▏  | 4528/6250 [4:42:33<1:51:12,  3.87s/it, gpt_loss=0.515, lr=5.35e-7][A
Train step of epoch 0:  72%|███████▏  | 4528/6250 [4:42:36<1:51:12,  3.87s/it, gpt_loss=0.565, lr=5.35e-7][A
Train step of epoch 0:  72%|███████▏  | 4529/6250 [4:42:36<1:49:30,  3.82s/it, gpt_loss=0.565, lr=5.35e-7][A
Train step of epoch 0:  72%|███████▏  | 4529/6250 [4:42:41<1:49:30,  3.82s/it, gpt_loss=0.729, lr=5.35e-7][A
Train step of epoch 0:  72%|███████▏  | 4530/6250 [4:42:41<1:54:33,  4.00s/it, gpt_loss=0.729, lr=5.35e-7][A
Train step of epoch 0:  72%|███████▏  | 4530/6250 [4:42:44<1:54:33,  4.00s/it, gpt_loss=0.604, lr=5.35e-7][A
Train step of epoch 0:  72%|███████▏  | 4531/6250 [4:42:44<1:51:49,  3.90s/it, gpt_loss=0.604, lr=5.35e-7][A[2025-04-24 04:35:28,149] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  72%|███████▏  | 4531/6250 [4:42:49<1:51:49,  3.90s/it, gpt_loss=0.694, lr=5.33e-7][A
Train step of epoch 0:  73%|███████▎  | 4532/6250 [4:42:49<1:57:33,  4.11s/it, gpt_loss=0.694, lr=5.33e-7][A
Train step of epoch 0:  73%|███████▎  | 4532/6250 [4:42:53<1:57:33,  4.11s/it, gpt_loss=0.791, lr=5.33e-7][A
Train step of epoch 0:  73%|███████▎  | 4533/6250 [4:42:53<1:53:50,  3.98s/it, gpt_loss=0.791, lr=5.33e-7][A
Train step of epoch 0:  73%|███████▎  | 4533/6250 [4:42:56<1:53:50,  3.98s/it, gpt_loss=0.722, lr=5.33e-7][A
Train step of epoch 0:  73%|███████▎  | 4534/6250 [4:42:56<1:44:47,  3.66s/it, gpt_loss=0.722, lr=5.33e-7][A
Train step of epoch 0:  73%|███████▎  | 4534/6250 [4:43:00<1:44:47,  3.66s/it, gpt_loss=0.518, lr=5.33e-7][A
Train step of epoch 0:  73%|███████▎  | 4535/6250 [4:43:00<1:47:47,  3.77s/it, gpt_loss=0.518, lr=5.33e-7][A[2025-04-24 04:35:42,501] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  73%|███████▎  | 4535/6250 [4:43:03<1:47:47,  3.77s/it, gpt_loss=0.626, lr=5.32e-7][A
Train step of epoch 0:  73%|███████▎  | 4536/6250 [4:43:03<1:47:16,  3.76s/it, gpt_loss=0.626, lr=5.32e-7][A
Train step of epoch 0:  73%|███████▎  | 4536/6250 [4:43:06<1:47:16,  3.76s/it, gpt_loss=0.482, lr=5.32e-7][A
Train step of epoch 0:  73%|███████▎  | 4537/6250 [4:43:06<1:38:07,  3.44s/it, gpt_loss=0.482, lr=5.32e-7][A
Train step of epoch 0:  73%|███████▎  | 4537/6250 [4:43:10<1:38:07,  3.44s/it, gpt_loss=0.616, lr=5.32e-7][A
Train step of epoch 0:  73%|███████▎  | 4538/6250 [4:43:10<1:45:50,  3.71s/it, gpt_loss=0.616, lr=5.32e-7][A
Train step of epoch 0:  73%|███████▎  | 4538/6250 [4:43:14<1:45:50,  3.71s/it, gpt_loss=0.602, lr=5.32e-7][A
Train step of epoch 0:  73%|███████▎  | 4539/6250 [4:43:14<1:48:35,  3.81s/it, gpt_loss=0.602, lr=5.32e-7][A[2025-04-24 04:35:56,515] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  73%|███████▎  | 4539/6250 [4:43:17<1:48:35,  3.81s/it, gpt_loss=0.504, lr=5.3e-7] [A
Train step of epoch 0:  73%|███████▎  | 4540/6250 [4:43:17<1:41:04,  3.55s/it, gpt_loss=0.504, lr=5.3e-7][A
Train step of epoch 0:  73%|███████▎  | 4540/6250 [4:43:21<1:41:04,  3.55s/it, gpt_loss=0.708, lr=5.3e-7][A
Train step of epoch 0:  73%|███████▎  | 4541/6250 [4:43:21<1:42:32,  3.60s/it, gpt_loss=0.708, lr=5.3e-7][A
Train step of epoch 0:  73%|███████▎  | 4541/6250 [4:43:25<1:42:32,  3.60s/it, gpt_loss=0.78, lr=5.3e-7] [A
Train step of epoch 0:  73%|███████▎  | 4542/6250 [4:43:25<1:42:13,  3.59s/it, gpt_loss=0.78, lr=5.3e-7][A
Train step of epoch 0:  73%|███████▎  | 4542/6250 [4:43:28<1:42:13,  3.59s/it, gpt_loss=0.751, lr=5.3e-7][A
Train step of epoch 0:  73%|███████▎  | 4543/6250 [4:43:28<1:36:55,  3.41s/it, gpt_loss=0.751, lr=5.3e-7][A[2025-04-24 04:36:11,083] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  73%|███████▎  | 4543/6250 [4:43:32<1:36:55,  3.41s/it, gpt_loss=0.585, lr=5.29e-7][A
Train step of epoch 0:  73%|███████▎  | 4544/6250 [4:43:32<1:44:27,  3.67s/it, gpt_loss=0.585, lr=5.29e-7][A
Train step of epoch 0:  73%|███████▎  | 4544/6250 [4:43:34<1:44:27,  3.67s/it, gpt_loss=0.536, lr=5.29e-7][A
Train step of epoch 0:  73%|███████▎  | 4545/6250 [4:43:34<1:31:07,  3.21s/it, gpt_loss=0.536, lr=5.29e-7][A
Train step of epoch 0:  73%|███████▎  | 4545/6250 [4:43:35<1:31:07,  3.21s/it, gpt_loss=0.45, lr=5.29e-7] [A
Train step of epoch 0:  73%|███████▎  | 4546/6250 [4:43:35<1:16:24,  2.69s/it, gpt_loss=0.45, lr=5.29e-7][A
Train step of epoch 0:  73%|███████▎  | 4546/6250 [4:43:39<1:16:24,  2.69s/it, gpt_loss=0.644, lr=5.29e-7][A
Train step of epoch 0:  73%|███████▎  | 4547/6250 [4:43:39<1:21:14,  2.86s/it, gpt_loss=0.644, lr=5.29e-7][A[2025-04-24 04:36:22,283] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  73%|███████▎  | 4547/6250 [4:43:43<1:21:14,  2.86s/it, gpt_loss=0.565, lr=5.27e-7][A
Train step of epoch 0:  73%|███████▎  | 4548/6250 [4:43:43<1:33:44,  3.30s/it, gpt_loss=0.565, lr=5.27e-7][A
Train step of epoch 0:  73%|███████▎  | 4548/6250 [4:43:47<1:33:44,  3.30s/it, gpt_loss=0.789, lr=5.27e-7][A
Train step of epoch 0:  73%|███████▎  | 4549/6250 [4:43:47<1:40:22,  3.54s/it, gpt_loss=0.789, lr=5.27e-7][A
Train step of epoch 0:  73%|███████▎  | 4549/6250 [4:43:51<1:40:22,  3.54s/it, gpt_loss=0.68, lr=5.27e-7] [A
Train step of epoch 0:  73%|███████▎  | 4550/6250 [4:43:51<1:46:26,  3.76s/it, gpt_loss=0.68, lr=5.27e-7][A
Train step of epoch 0:  73%|███████▎  | 4550/6250 [4:43:55<1:46:26,  3.76s/it, gpt_loss=0.629, lr=5.27e-7][A
Train step of epoch 0:  73%|███████▎  | 4551/6250 [4:43:55<1:47:59,  3.81s/it, gpt_loss=0.629, lr=5.27e-7][A[2025-04-24 04:36:39,377] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  73%|███████▎  | 4551/6250 [4:44:00<1:47:59,  3.81s/it, gpt_loss=0.674, lr=5.26e-7][A
Train step of epoch 0:  73%|███████▎  | 4552/6250 [4:44:00<1:56:14,  4.11s/it, gpt_loss=0.674, lr=5.26e-7][A
Train step of epoch 0:  73%|███████▎  | 4552/6250 [4:44:05<1:56:14,  4.11s/it, gpt_loss=0.648, lr=5.26e-7][A
Train step of epoch 0:  73%|███████▎  | 4553/6250 [4:44:05<2:01:41,  4.30s/it, gpt_loss=0.648, lr=5.26e-7][A
Train step of epoch 0:  73%|███████▎  | 4553/6250 [4:44:09<2:01:41,  4.30s/it, gpt_loss=0.646, lr=5.26e-7][A
Train step of epoch 0:  73%|███████▎  | 4554/6250 [4:44:09<1:57:24,  4.15s/it, gpt_loss=0.646, lr=5.26e-7][A
Train step of epoch 0:  73%|███████▎  | 4554/6250 [4:44:11<1:57:24,  4.15s/it, gpt_loss=0.514, lr=5.26e-7][A
Train step of epoch 0:  73%|███████▎  | 4555/6250 [4:44:11<1:38:27,  3.49s/it, gpt_loss=0.514, lr=5.26e-7][A[2025-04-24 04:36:53,432] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  73%|███████▎  | 4555/6250 [4:44:14<1:38:27,  3.49s/it, gpt_loss=0.723, lr=5.25e-7][A
Train step of epoch 0:  73%|███████▎  | 4556/6250 [4:44:14<1:39:04,  3.51s/it, gpt_loss=0.723, lr=5.25e-7][A
Train step of epoch 0:  73%|███████▎  | 4556/6250 [4:44:18<1:39:04,  3.51s/it, gpt_loss=0.748, lr=5.25e-7][A
Train step of epoch 0:  73%|███████▎  | 4557/6250 [4:44:18<1:37:19,  3.45s/it, gpt_loss=0.748, lr=5.25e-7][A
Train step of epoch 0:  73%|███████▎  | 4557/6250 [4:44:21<1:37:19,  3.45s/it, gpt_loss=0.746, lr=5.25e-7][A
Train step of epoch 0:  73%|███████▎  | 4558/6250 [4:44:21<1:37:43,  3.47s/it, gpt_loss=0.746, lr=5.25e-7][A
Train step of epoch 0:  73%|███████▎  | 4558/6250 [4:44:25<1:37:43,  3.47s/it, gpt_loss=0.572, lr=5.25e-7][A
Train step of epoch 0:  73%|███████▎  | 4559/6250 [4:44:25<1:42:16,  3.63s/it, gpt_loss=0.572, lr=5.25e-7][A[2025-04-24 04:37:07,669] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  73%|███████▎  | 4559/6250 [4:44:28<1:42:16,  3.63s/it, gpt_loss=0.506, lr=5.23e-7][A
Train step of epoch 0:  73%|███████▎  | 4560/6250 [4:44:28<1:40:23,  3.56s/it, gpt_loss=0.506, lr=5.23e-7][A
Train step of epoch 0:  73%|███████▎  | 4560/6250 [4:44:32<1:40:23,  3.56s/it, gpt_loss=0.563, lr=5.23e-7][A
Train step of epoch 0:  73%|███████▎  | 4561/6250 [4:44:32<1:41:03,  3.59s/it, gpt_loss=0.563, lr=5.23e-7][A
Train step of epoch 0:  73%|███████▎  | 4561/6250 [4:44:36<1:41:03,  3.59s/it, gpt_loss=0.523, lr=5.23e-7][A
Train step of epoch 0:  73%|███████▎  | 4562/6250 [4:44:36<1:46:00,  3.77s/it, gpt_loss=0.523, lr=5.23e-7][A
Train step of epoch 0:  73%|███████▎  | 4562/6250 [4:44:40<1:46:00,  3.77s/it, gpt_loss=0.591, lr=5.23e-7][A
Train step of epoch 0:  73%|███████▎  | 4563/6250 [4:44:40<1:45:30,  3.75s/it, gpt_loss=0.591, lr=5.23e-7][A[2025-04-24 04:37:23,185] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  73%|███████▎  | 4563/6250 [4:44:44<1:45:30,  3.75s/it, gpt_loss=0.536, lr=5.22e-7][A
Train step of epoch 0:  73%|███████▎  | 4564/6250 [4:44:44<1:47:15,  3.82s/it, gpt_loss=0.536, lr=5.22e-7][A
Train step of epoch 0:  73%|███████▎  | 4564/6250 [4:44:47<1:47:15,  3.82s/it, gpt_loss=0.53, lr=5.22e-7] [A
Train step of epoch 0:  73%|███████▎  | 4565/6250 [4:44:47<1:38:59,  3.52s/it, gpt_loss=0.53, lr=5.22e-7][A
Train step of epoch 0:  73%|███████▎  | 4565/6250 [4:44:50<1:38:59,  3.52s/it, gpt_loss=0.622, lr=5.22e-7][A
Train step of epoch 0:  73%|███████▎  | 4566/6250 [4:44:50<1:32:49,  3.31s/it, gpt_loss=0.622, lr=5.22e-7][A
Train step of epoch 0:  73%|███████▎  | 4566/6250 [4:44:54<1:32:49,  3.31s/it, gpt_loss=0.627, lr=5.22e-7][A
Train step of epoch 0:  73%|███████▎  | 4567/6250 [4:44:54<1:39:39,  3.55s/it, gpt_loss=0.627, lr=5.22e-7][A[2025-04-24 04:37:36,654] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  73%|███████▎  | 4567/6250 [4:44:57<1:39:39,  3.55s/it, gpt_loss=0.547, lr=5.2e-7] [A
Train step of epoch 0:  73%|███████▎  | 4568/6250 [4:44:57<1:40:49,  3.60s/it, gpt_loss=0.547, lr=5.2e-7][A
Train step of epoch 0:  73%|███████▎  | 4568/6250 [4:45:02<1:40:49,  3.60s/it, gpt_loss=0.689, lr=5.2e-7][A
Train step of epoch 0:  73%|███████▎  | 4569/6250 [4:45:02<1:45:34,  3.77s/it, gpt_loss=0.689, lr=5.2e-7][A
Train step of epoch 0:  73%|███████▎  | 4569/6250 [4:45:04<1:45:34,  3.77s/it, gpt_loss=0.547, lr=5.2e-7][A
Train step of epoch 0:  73%|███████▎  | 4570/6250 [4:45:04<1:37:27,  3.48s/it, gpt_loss=0.547, lr=5.2e-7][A
Train step of epoch 0:  73%|███████▎  | 4570/6250 [4:45:09<1:37:27,  3.48s/it, gpt_loss=0.601, lr=5.2e-7][A
Train step of epoch 0:  73%|███████▎  | 4571/6250 [4:45:09<1:42:48,  3.67s/it, gpt_loss=0.601, lr=5.2e-7][A[2025-04-24 04:37:51,480] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  73%|███████▎  | 4571/6250 [4:45:12<1:42:48,  3.67s/it, gpt_loss=0.601, lr=5.19e-7][A
Train step of epoch 0:  73%|███████▎  | 4572/6250 [4:45:12<1:43:10,  3.69s/it, gpt_loss=0.601, lr=5.19e-7][A
Train step of epoch 0:  73%|███████▎  | 4572/6250 [4:45:16<1:43:10,  3.69s/it, gpt_loss=0.708, lr=5.19e-7][A
Train step of epoch 0:  73%|███████▎  | 4573/6250 [4:45:16<1:45:18,  3.77s/it, gpt_loss=0.708, lr=5.19e-7][A
Train step of epoch 0:  73%|███████▎  | 4573/6250 [4:45:20<1:45:18,  3.77s/it, gpt_loss=0.546, lr=5.19e-7][A
Train step of epoch 0:  73%|███████▎  | 4574/6250 [4:45:20<1:43:31,  3.71s/it, gpt_loss=0.546, lr=5.19e-7][A
Train step of epoch 0:  73%|███████▎  | 4574/6250 [4:45:23<1:43:31,  3.71s/it, gpt_loss=0.715, lr=5.19e-7][A
Train step of epoch 0:  73%|███████▎  | 4575/6250 [4:45:23<1:43:22,  3.70s/it, gpt_loss=0.715, lr=5.19e-7][A[2025-04-24 04:38:06,626] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  73%|███████▎  | 4575/6250 [4:45:27<1:43:22,  3.70s/it, gpt_loss=0.609, lr=5.17e-7][A
Train step of epoch 0:  73%|███████▎  | 4576/6250 [4:45:27<1:45:15,  3.77s/it, gpt_loss=0.609, lr=5.17e-7][A
Train step of epoch 0:  73%|███████▎  | 4576/6250 [4:45:31<1:45:15,  3.77s/it, gpt_loss=0.635, lr=5.17e-7][A
Train step of epoch 0:  73%|███████▎  | 4577/6250 [4:45:31<1:44:39,  3.75s/it, gpt_loss=0.635, lr=5.17e-7][A
Train step of epoch 0:  73%|███████▎  | 4577/6250 [4:45:35<1:44:39,  3.75s/it, gpt_loss=0.663, lr=5.17e-7][A
Train step of epoch 0:  73%|███████▎  | 4578/6250 [4:45:35<1:41:56,  3.66s/it, gpt_loss=0.663, lr=5.17e-7][A
Train step of epoch 0:  73%|███████▎  | 4578/6250 [4:45:38<1:41:56,  3.66s/it, gpt_loss=0.663, lr=5.17e-7][A
Train step of epoch 0:  73%|███████▎  | 4579/6250 [4:45:38<1:37:39,  3.51s/it, gpt_loss=0.663, lr=5.17e-7][A[2025-04-24 04:38:20,538] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  73%|███████▎  | 4579/6250 [4:45:41<1:37:39,  3.51s/it, gpt_loss=0.508, lr=5.16e-7][A
Train step of epoch 0:  73%|███████▎  | 4580/6250 [4:45:41<1:38:31,  3.54s/it, gpt_loss=0.508, lr=5.16e-7][A
Train step of epoch 0:  73%|███████▎  | 4580/6250 [4:45:45<1:38:31,  3.54s/it, gpt_loss=0.602, lr=5.16e-7][A
Train step of epoch 0:  73%|███████▎  | 4581/6250 [4:45:45<1:40:33,  3.62s/it, gpt_loss=0.602, lr=5.16e-7][A
Train step of epoch 0:  73%|███████▎  | 4581/6250 [4:45:48<1:40:33,  3.62s/it, gpt_loss=0.53, lr=5.16e-7] [A
Train step of epoch 0:  73%|███████▎  | 4582/6250 [4:45:48<1:35:16,  3.43s/it, gpt_loss=0.53, lr=5.16e-7][A
Train step of epoch 0:  73%|███████▎  | 4582/6250 [4:45:51<1:35:16,  3.43s/it, gpt_loss=0.657, lr=5.16e-7][A
Train step of epoch 0:  73%|███████▎  | 4583/6250 [4:45:51<1:32:42,  3.34s/it, gpt_loss=0.657, lr=5.16e-7][A[2025-04-24 04:38:33,998] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  73%|███████▎  | 4583/6250 [4:45:55<1:32:42,  3.34s/it, gpt_loss=0.72, lr=5.15e-7] [A
Train step of epoch 0:  73%|███████▎  | 4584/6250 [4:45:55<1:34:26,  3.40s/it, gpt_loss=0.72, lr=5.15e-7][A
Train step of epoch 0:  73%|███████▎  | 4584/6250 [4:45:58<1:34:26,  3.40s/it, gpt_loss=0.439, lr=5.15e-7][A
Train step of epoch 0:  73%|███████▎  | 4585/6250 [4:45:58<1:36:42,  3.49s/it, gpt_loss=0.439, lr=5.15e-7][A
Train step of epoch 0:  73%|███████▎  | 4585/6250 [4:46:03<1:36:42,  3.49s/it, gpt_loss=0.526, lr=5.15e-7][A
Train step of epoch 0:  73%|███████▎  | 4586/6250 [4:46:03<1:45:43,  3.81s/it, gpt_loss=0.526, lr=5.15e-7][A
Train step of epoch 0:  73%|███████▎  | 4586/6250 [4:46:07<1:45:43,  3.81s/it, gpt_loss=0.701, lr=5.15e-7][A
Train step of epoch 0:  73%|███████▎  | 4587/6250 [4:46:07<1:43:43,  3.74s/it, gpt_loss=0.701, lr=5.15e-7][A[2025-04-24 04:38:50,868] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  73%|███████▎  | 4587/6250 [4:46:12<1:43:43,  3.74s/it, gpt_loss=0.611, lr=5.13e-7][A
Train step of epoch 0:  73%|███████▎  | 4588/6250 [4:46:12<1:54:24,  4.13s/it, gpt_loss=0.611, lr=5.13e-7][A
Train step of epoch 0:  73%|███████▎  | 4588/6250 [4:46:16<1:54:24,  4.13s/it, gpt_loss=0.787, lr=5.13e-7][A
Train step of epoch 0:  73%|███████▎  | 4589/6250 [4:46:16<1:57:13,  4.23s/it, gpt_loss=0.787, lr=5.13e-7][A
Train step of epoch 0:  73%|███████▎  | 4589/6250 [4:46:19<1:57:13,  4.23s/it, gpt_loss=0.696, lr=5.13e-7][A
Train step of epoch 0:  73%|███████▎  | 4590/6250 [4:46:19<1:42:27,  3.70s/it, gpt_loss=0.696, lr=5.13e-7][A
Train step of epoch 0:  73%|███████▎  | 4590/6250 [4:46:21<1:42:27,  3.70s/it, gpt_loss=0.574, lr=5.13e-7][A
Train step of epoch 0:  73%|███████▎  | 4591/6250 [4:46:21<1:32:43,  3.35s/it, gpt_loss=0.574, lr=5.13e-7][A[2025-04-24 04:39:04,487] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  73%|███████▎  | 4591/6250 [4:46:25<1:32:43,  3.35s/it, gpt_loss=0.499, lr=5.12e-7][A
Train step of epoch 0:  73%|███████▎  | 4592/6250 [4:46:25<1:39:11,  3.59s/it, gpt_loss=0.499, lr=5.12e-7][A
Train step of epoch 0:  73%|███████▎  | 4592/6250 [4:46:29<1:39:11,  3.59s/it, gpt_loss=0.578, lr=5.12e-7][A
Train step of epoch 0:  73%|███████▎  | 4593/6250 [4:46:29<1:40:44,  3.65s/it, gpt_loss=0.578, lr=5.12e-7][A
Train step of epoch 0:  73%|███████▎  | 4593/6250 [4:46:34<1:40:44,  3.65s/it, gpt_loss=0.538, lr=5.12e-7][A
Train step of epoch 0:  74%|███████▎  | 4594/6250 [4:46:34<1:54:16,  4.14s/it, gpt_loss=0.538, lr=5.12e-7][A
Train step of epoch 0:  74%|███████▎  | 4594/6250 [4:46:38<1:54:16,  4.14s/it, gpt_loss=0.556, lr=5.12e-7][A
Train step of epoch 0:  74%|███████▎  | 4595/6250 [4:46:38<1:50:35,  4.01s/it, gpt_loss=0.556, lr=5.12e-7][A[2025-04-24 04:39:21,262] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  74%|███████▎  | 4595/6250 [4:46:42<1:50:35,  4.01s/it, gpt_loss=0.638, lr=5.1e-7] [A
Train step of epoch 0:  74%|███████▎  | 4596/6250 [4:46:42<1:50:25,  4.01s/it, gpt_loss=0.638, lr=5.1e-7][A
Train step of epoch 0:  74%|███████▎  | 4596/6250 [4:46:46<1:50:25,  4.01s/it, gpt_loss=0.582, lr=5.1e-7][A
Train step of epoch 0:  74%|███████▎  | 4597/6250 [4:46:46<1:51:02,  4.03s/it, gpt_loss=0.582, lr=5.1e-7][A
Train step of epoch 0:  74%|███████▎  | 4597/6250 [4:46:50<1:51:02,  4.03s/it, gpt_loss=0.536, lr=5.1e-7][A
Train step of epoch 0:  74%|███████▎  | 4598/6250 [4:46:50<1:47:11,  3.89s/it, gpt_loss=0.536, lr=5.1e-7][A
Train step of epoch 0:  74%|███████▎  | 4598/6250 [4:46:53<1:47:11,  3.89s/it, gpt_loss=0.784, lr=5.1e-7][A
Train step of epoch 0:  74%|███████▎  | 4599/6250 [4:46:53<1:46:17,  3.86s/it, gpt_loss=0.784, lr=5.1e-7][A[2025-04-24 04:39:35,579] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  74%|███████▎  | 4599/6250 [4:46:56<1:46:17,  3.86s/it, gpt_loss=0.531, lr=5.09e-7][A
Train step of epoch 0:  74%|███████▎  | 4600/6250 [4:46:56<1:38:00,  3.56s/it, gpt_loss=0.531, lr=5.09e-7][A
Train step of epoch 0:  74%|███████▎  | 4600/6250 [4:47:00<1:38:00,  3.56s/it, gpt_loss=0.633, lr=5.09e-7][A
Train step of epoch 0:  74%|███████▎  | 4601/6250 [4:47:00<1:41:02,  3.68s/it, gpt_loss=0.633, lr=5.09e-7][A
Train step of epoch 0:  74%|███████▎  | 4601/6250 [4:47:07<1:41:02,  3.68s/it, gpt_loss=0.697, lr=5.09e-7][A
Train step of epoch 0:  74%|███████▎  | 4602/6250 [4:47:07<2:08:56,  4.69s/it, gpt_loss=0.697, lr=5.09e-7][A
Train step of epoch 0:  74%|███████▎  | 4602/6250 [4:47:12<2:08:56,  4.69s/it, gpt_loss=0.569, lr=5.09e-7][A
Train step of epoch 0:  74%|███████▎  | 4603/6250 [4:47:12<2:06:51,  4.62s/it, gpt_loss=0.569, lr=5.09e-7][A[2025-04-24 04:39:55,044] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  74%|███████▎  | 4603/6250 [4:47:16<2:06:51,  4.62s/it, gpt_loss=0.722, lr=5.08e-7][A
Train step of epoch 0:  74%|███████▎  | 4604/6250 [4:47:16<2:01:42,  4.44s/it, gpt_loss=0.722, lr=5.08e-7][A
Train step of epoch 0:  74%|███████▎  | 4604/6250 [4:47:19<2:01:42,  4.44s/it, gpt_loss=0.712, lr=5.08e-7][A
Train step of epoch 0:  74%|███████▎  | 4605/6250 [4:47:19<1:52:06,  4.09s/it, gpt_loss=0.712, lr=5.08e-7][A
Train step of epoch 0:  74%|███████▎  | 4605/6250 [4:47:23<1:52:06,  4.09s/it, gpt_loss=0.671, lr=5.08e-7][A
Train step of epoch 0:  74%|███████▎  | 4606/6250 [4:47:23<1:46:37,  3.89s/it, gpt_loss=0.671, lr=5.08e-7][A
Train step of epoch 0:  74%|███████▎  | 4606/6250 [4:47:27<1:46:37,  3.89s/it, gpt_loss=0.653, lr=5.08e-7][A
Train step of epoch 0:  74%|███████▎  | 4607/6250 [4:47:27<1:47:46,  3.94s/it, gpt_loss=0.653, lr=5.08e-7][A[2025-04-24 04:40:10,199] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  74%|███████▎  | 4607/6250 [4:47:31<1:47:46,  3.94s/it, gpt_loss=0.53, lr=5.06e-7] [A
Train step of epoch 0:  74%|███████▎  | 4608/6250 [4:47:31<1:51:34,  4.08s/it, gpt_loss=0.53, lr=5.06e-7][A
Train step of epoch 0:  74%|███████▎  | 4608/6250 [4:47:35<1:51:34,  4.08s/it, gpt_loss=0.672, lr=5.06e-7][A
Train step of epoch 0:  74%|███████▎  | 4609/6250 [4:47:35<1:55:08,  4.21s/it, gpt_loss=0.672, lr=5.06e-7][A
Train step of epoch 0:  74%|███████▎  | 4609/6250 [4:47:39<1:55:08,  4.21s/it, gpt_loss=0.563, lr=5.06e-7][A
Train step of epoch 0:  74%|███████▍  | 4610/6250 [4:47:39<1:52:17,  4.11s/it, gpt_loss=0.563, lr=5.06e-7][A
Train step of epoch 0:  74%|███████▍  | 4610/6250 [4:47:43<1:52:17,  4.11s/it, gpt_loss=0.623, lr=5.06e-7][A
Train step of epoch 0:  74%|███████▍  | 4611/6250 [4:47:43<1:45:44,  3.87s/it, gpt_loss=0.623, lr=5.06e-7][A[2025-04-24 04:40:24,906] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  74%|███████▍  | 4611/6250 [4:47:46<1:45:44,  3.87s/it, gpt_loss=0.596, lr=5.05e-7][A
Train step of epoch 0:  74%|███████▍  | 4612/6250 [4:47:46<1:38:32,  3.61s/it, gpt_loss=0.596, lr=5.05e-7][A
Train step of epoch 0:  74%|███████▍  | 4612/6250 [4:47:49<1:38:32,  3.61s/it, gpt_loss=0.629, lr=5.05e-7][A
Train step of epoch 0:  74%|███████▍  | 4613/6250 [4:47:49<1:36:51,  3.55s/it, gpt_loss=0.629, lr=5.05e-7][A
Train step of epoch 0:  74%|███████▍  | 4613/6250 [4:47:53<1:36:51,  3.55s/it, gpt_loss=0.681, lr=5.05e-7][A
Train step of epoch 0:  74%|███████▍  | 4614/6250 [4:47:53<1:37:51,  3.59s/it, gpt_loss=0.681, lr=5.05e-7][A
Train step of epoch 0:  74%|███████▍  | 4614/6250 [4:47:57<1:37:51,  3.59s/it, gpt_loss=0.663, lr=5.05e-7][A
Train step of epoch 0:  74%|███████▍  | 4615/6250 [4:47:57<1:42:40,  3.77s/it, gpt_loss=0.663, lr=5.05e-7][A[2025-04-24 04:40:40,995] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  74%|███████▍  | 4615/6250 [4:48:02<1:42:40,  3.77s/it, gpt_loss=0.571, lr=5.03e-7][A
Train step of epoch 0:  74%|███████▍  | 4616/6250 [4:48:02<1:51:08,  4.08s/it, gpt_loss=0.571, lr=5.03e-7][A
Train step of epoch 0:  74%|███████▍  | 4616/6250 [4:48:06<1:51:08,  4.08s/it, gpt_loss=0.598, lr=5.03e-7][A
Train step of epoch 0:  74%|███████▍  | 4617/6250 [4:48:06<1:49:50,  4.04s/it, gpt_loss=0.598, lr=5.03e-7][A
Train step of epoch 0:  74%|███████▍  | 4617/6250 [4:48:09<1:49:50,  4.04s/it, gpt_loss=0.601, lr=5.03e-7][A
Train step of epoch 0:  74%|███████▍  | 4618/6250 [4:48:09<1:41:27,  3.73s/it, gpt_loss=0.601, lr=5.03e-7][A
Train step of epoch 0:  74%|███████▍  | 4618/6250 [4:48:12<1:41:27,  3.73s/it, gpt_loss=0.588, lr=5.03e-7][A
Train step of epoch 0:  74%|███████▍  | 4619/6250 [4:48:12<1:39:06,  3.65s/it, gpt_loss=0.588, lr=5.03e-7][A[2025-04-24 04:40:55,486] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  74%|███████▍  | 4619/6250 [4:48:16<1:39:06,  3.65s/it, gpt_loss=0.563, lr=5.02e-7][A
Train step of epoch 0:  74%|███████▍  | 4620/6250 [4:48:16<1:42:41,  3.78s/it, gpt_loss=0.563, lr=5.02e-7][A
Train step of epoch 0:  74%|███████▍  | 4620/6250 [4:48:20<1:42:41,  3.78s/it, gpt_loss=0.61, lr=5.02e-7] [A
Train step of epoch 0:  74%|███████▍  | 4621/6250 [4:48:20<1:46:13,  3.91s/it, gpt_loss=0.61, lr=5.02e-7][A
Train step of epoch 0:  74%|███████▍  | 4621/6250 [4:48:24<1:46:13,  3.91s/it, gpt_loss=0.68, lr=5.02e-7][A
Train step of epoch 0:  74%|███████▍  | 4622/6250 [4:48:24<1:41:39,  3.75s/it, gpt_loss=0.68, lr=5.02e-7][A
Train step of epoch 0:  74%|███████▍  | 4622/6250 [4:48:28<1:41:39,  3.75s/it, gpt_loss=0.569, lr=5.02e-7][A
Train step of epoch 0:  74%|███████▍  | 4623/6250 [4:48:28<1:41:09,  3.73s/it, gpt_loss=0.569, lr=5.02e-7][A[2025-04-24 04:41:11,368] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  74%|███████▍  | 4623/6250 [4:48:32<1:41:09,  3.73s/it, gpt_loss=0.576, lr=5.01e-7][A
Train step of epoch 0:  74%|███████▍  | 4624/6250 [4:48:32<1:48:13,  3.99s/it, gpt_loss=0.576, lr=5.01e-7][A
Train step of epoch 0:  74%|███████▍  | 4624/6250 [4:48:36<1:48:13,  3.99s/it, gpt_loss=0.577, lr=5.01e-7][A
Train step of epoch 0:  74%|███████▍  | 4625/6250 [4:48:36<1:46:59,  3.95s/it, gpt_loss=0.577, lr=5.01e-7][A
Train step of epoch 0:  74%|███████▍  | 4625/6250 [4:48:39<1:46:59,  3.95s/it, gpt_loss=0.555, lr=5.01e-7][A
Train step of epoch 0:  74%|███████▍  | 4626/6250 [4:48:39<1:38:26,  3.64s/it, gpt_loss=0.555, lr=5.01e-7][A
Train step of epoch 0:  74%|███████▍  | 4626/6250 [4:48:42<1:38:26,  3.64s/it, gpt_loss=0.691, lr=5.01e-7][A
Train step of epoch 0:  74%|███████▍  | 4627/6250 [4:48:42<1:37:03,  3.59s/it, gpt_loss=0.691, lr=5.01e-7][A[2025-04-24 04:41:24,787] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  74%|███████▍  | 4627/6250 [4:48:46<1:37:03,  3.59s/it, gpt_loss=0.738, lr=4.99e-7][A
Train step of epoch 0:  74%|███████▍  | 4628/6250 [4:48:46<1:33:46,  3.47s/it, gpt_loss=0.738, lr=4.99e-7][A
Train step of epoch 0:  74%|███████▍  | 4628/6250 [4:48:49<1:33:46,  3.47s/it, gpt_loss=0.719, lr=4.99e-7][A
Train step of epoch 0:  74%|███████▍  | 4629/6250 [4:48:49<1:32:34,  3.43s/it, gpt_loss=0.719, lr=4.99e-7][A
Train step of epoch 0:  74%|███████▍  | 4629/6250 [4:48:52<1:32:34,  3.43s/it, gpt_loss=0.697, lr=4.99e-7][A
Train step of epoch 0:  74%|███████▍  | 4630/6250 [4:48:52<1:30:45,  3.36s/it, gpt_loss=0.697, lr=4.99e-7][A
Train step of epoch 0:  74%|███████▍  | 4630/6250 [4:48:55<1:30:45,  3.36s/it, gpt_loss=0.607, lr=4.99e-7][A
Train step of epoch 0:  74%|███████▍  | 4631/6250 [4:48:55<1:26:54,  3.22s/it, gpt_loss=0.607, lr=4.99e-7][A[2025-04-24 04:41:38,074] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  74%|███████▍  | 4631/6250 [4:48:59<1:26:54,  3.22s/it, gpt_loss=0.714, lr=4.98e-7][A
Train step of epoch 0:  74%|███████▍  | 4632/6250 [4:48:59<1:32:01,  3.41s/it, gpt_loss=0.714, lr=4.98e-7][A
Train step of epoch 0:  74%|███████▍  | 4632/6250 [4:49:04<1:32:01,  3.41s/it, gpt_loss=0.857, lr=4.98e-7][A
Train step of epoch 0:  74%|███████▍  | 4633/6250 [4:49:04<1:43:44,  3.85s/it, gpt_loss=0.857, lr=4.98e-7][A
Train step of epoch 0:  74%|███████▍  | 4633/6250 [4:49:07<1:43:44,  3.85s/it, gpt_loss=0.676, lr=4.98e-7][A
Train step of epoch 0:  74%|███████▍  | 4634/6250 [4:49:07<1:41:16,  3.76s/it, gpt_loss=0.676, lr=4.98e-7][A
Train step of epoch 0:  74%|███████▍  | 4634/6250 [4:49:10<1:41:16,  3.76s/it, gpt_loss=0.629, lr=4.98e-7][A
Train step of epoch 0:  74%|███████▍  | 4635/6250 [4:49:10<1:35:51,  3.56s/it, gpt_loss=0.629, lr=4.98e-7][A[2025-04-24 04:41:53,486] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  74%|███████▍  | 4635/6250 [4:49:14<1:35:51,  3.56s/it, gpt_loss=0.573, lr=4.96e-7][A
Train step of epoch 0:  74%|███████▍  | 4636/6250 [4:49:14<1:38:27,  3.66s/it, gpt_loss=0.573, lr=4.96e-7][A
Train step of epoch 0:  74%|███████▍  | 4636/6250 [4:49:18<1:38:27,  3.66s/it, gpt_loss=0.683, lr=4.96e-7][A
Train step of epoch 0:  74%|███████▍  | 4637/6250 [4:49:18<1:40:39,  3.74s/it, gpt_loss=0.683, lr=4.96e-7][A
Train step of epoch 0:  74%|███████▍  | 4637/6250 [4:49:22<1:40:39,  3.74s/it, gpt_loss=0.608, lr=4.96e-7][A
Train step of epoch 0:  74%|███████▍  | 4638/6250 [4:49:22<1:40:35,  3.74s/it, gpt_loss=0.608, lr=4.96e-7][A
Train step of epoch 0:  74%|███████▍  | 4638/6250 [4:49:25<1:40:35,  3.74s/it, gpt_loss=0.493, lr=4.96e-7][A
Train step of epoch 0:  74%|███████▍  | 4639/6250 [4:49:25<1:36:00,  3.58s/it, gpt_loss=0.493, lr=4.96e-7][A[2025-04-24 04:42:08,299] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  74%|███████▍  | 4639/6250 [4:49:29<1:36:00,  3.58s/it, gpt_loss=0.603, lr=4.95e-7][A
Train step of epoch 0:  74%|███████▍  | 4640/6250 [4:49:29<1:38:55,  3.69s/it, gpt_loss=0.603, lr=4.95e-7][A
Train step of epoch 0:  74%|███████▍  | 4640/6250 [4:49:34<1:38:55,  3.69s/it, gpt_loss=0.596, lr=4.95e-7][A
Train step of epoch 0:  74%|███████▍  | 4641/6250 [4:49:34<1:45:30,  3.93s/it, gpt_loss=0.596, lr=4.95e-7][A
Train step of epoch 0:  74%|███████▍  | 4641/6250 [4:49:38<1:45:30,  3.93s/it, gpt_loss=0.641, lr=4.95e-7][A
Train step of epoch 0:  74%|███████▍  | 4642/6250 [4:49:38<1:46:19,  3.97s/it, gpt_loss=0.641, lr=4.95e-7][A
Train step of epoch 0:  74%|███████▍  | 4642/6250 [4:49:40<1:46:19,  3.97s/it, gpt_loss=0.598, lr=4.95e-7][A
Train step of epoch 0:  74%|███████▍  | 4643/6250 [4:49:40<1:34:25,  3.53s/it, gpt_loss=0.598, lr=4.95e-7][A[2025-04-24 04:42:24,465] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  74%|███████▍  | 4643/6250 [4:49:45<1:34:25,  3.53s/it, gpt_loss=0.389, lr=4.94e-7][A
Train step of epoch 0:  74%|███████▍  | 4644/6250 [4:49:45<1:47:08,  4.00s/it, gpt_loss=0.389, lr=4.94e-7][A
Train step of epoch 0:  74%|███████▍  | 4644/6250 [4:49:49<1:47:08,  4.00s/it, gpt_loss=0.68, lr=4.94e-7] [A
Train step of epoch 0:  74%|███████▍  | 4645/6250 [4:49:49<1:47:53,  4.03s/it, gpt_loss=0.68, lr=4.94e-7][A
Train step of epoch 0:  74%|███████▍  | 4645/6250 [4:49:52<1:47:53,  4.03s/it, gpt_loss=0.528, lr=4.94e-7][A
Train step of epoch 0:  74%|███████▍  | 4646/6250 [4:49:52<1:40:46,  3.77s/it, gpt_loss=0.528, lr=4.94e-7][A
Train step of epoch 0:  74%|███████▍  | 4646/6250 [4:49:56<1:40:46,  3.77s/it, gpt_loss=0.489, lr=4.94e-7][A
Train step of epoch 0:  74%|███████▍  | 4647/6250 [4:49:56<1:36:58,  3.63s/it, gpt_loss=0.489, lr=4.94e-7][A[2025-04-24 04:42:38,219] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  74%|███████▍  | 4647/6250 [4:49:59<1:36:58,  3.63s/it, gpt_loss=0.562, lr=4.92e-7][A
Train step of epoch 0:  74%|███████▍  | 4648/6250 [4:49:59<1:33:24,  3.50s/it, gpt_loss=0.562, lr=4.92e-7][A
Train step of epoch 0:  74%|███████▍  | 4648/6250 [4:50:03<1:33:24,  3.50s/it, gpt_loss=0.536, lr=4.92e-7][A
Train step of epoch 0:  74%|███████▍  | 4649/6250 [4:50:03<1:40:46,  3.78s/it, gpt_loss=0.536, lr=4.92e-7][A
Train step of epoch 0:  74%|███████▍  | 4649/6250 [4:50:06<1:40:46,  3.78s/it, gpt_loss=0.451, lr=4.92e-7][A
Train step of epoch 0:  74%|███████▍  | 4650/6250 [4:50:06<1:33:33,  3.51s/it, gpt_loss=0.451, lr=4.92e-7][A
Train step of epoch 0:  74%|███████▍  | 4650/6250 [4:50:10<1:33:33,  3.51s/it, gpt_loss=0.629, lr=4.92e-7][A
Train step of epoch 0:  74%|███████▍  | 4651/6250 [4:50:10<1:32:56,  3.49s/it, gpt_loss=0.629, lr=4.92e-7][A[2025-04-24 04:42:52,560] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  74%|███████▍  | 4651/6250 [4:50:13<1:32:56,  3.49s/it, gpt_loss=0.607, lr=4.91e-7][A
Train step of epoch 0:  74%|███████▍  | 4652/6250 [4:50:13<1:33:43,  3.52s/it, gpt_loss=0.607, lr=4.91e-7][A
Train step of epoch 0:  74%|███████▍  | 4652/6250 [4:50:17<1:33:43,  3.52s/it, gpt_loss=0.643, lr=4.91e-7][A
Train step of epoch 0:  74%|███████▍  | 4653/6250 [4:50:17<1:34:00,  3.53s/it, gpt_loss=0.643, lr=4.91e-7][A
Train step of epoch 0:  74%|███████▍  | 4653/6250 [4:50:20<1:34:00,  3.53s/it, gpt_loss=0.562, lr=4.91e-7][A
Train step of epoch 0:  74%|███████▍  | 4654/6250 [4:50:20<1:32:17,  3.47s/it, gpt_loss=0.562, lr=4.91e-7][A
Train step of epoch 0:  74%|███████▍  | 4654/6250 [4:50:23<1:32:17,  3.47s/it, gpt_loss=0.371, lr=4.91e-7][A
Train step of epoch 0:  74%|███████▍  | 4655/6250 [4:50:23<1:30:21,  3.40s/it, gpt_loss=0.371, lr=4.91e-7][A[2025-04-24 04:43:06,316] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  74%|███████▍  | 4655/6250 [4:50:27<1:30:21,  3.40s/it, gpt_loss=0.743, lr=4.9e-7] [A
Train step of epoch 0:  74%|███████▍  | 4656/6250 [4:50:27<1:32:11,  3.47s/it, gpt_loss=0.743, lr=4.9e-7][A
Train step of epoch 0:  74%|███████▍  | 4656/6250 [4:50:31<1:32:11,  3.47s/it, gpt_loss=0.627, lr=4.9e-7][A
Train step of epoch 0:  75%|███████▍  | 4657/6250 [4:50:31<1:33:41,  3.53s/it, gpt_loss=0.627, lr=4.9e-7][A
Train step of epoch 0:  75%|███████▍  | 4657/6250 [4:50:35<1:33:41,  3.53s/it, gpt_loss=0.586, lr=4.9e-7][A
Train step of epoch 0:  75%|███████▍  | 4658/6250 [4:50:35<1:41:52,  3.84s/it, gpt_loss=0.586, lr=4.9e-7][A
Train step of epoch 0:  75%|███████▍  | 4658/6250 [4:50:38<1:41:52,  3.84s/it, gpt_loss=0.612, lr=4.9e-7][A
Train step of epoch 0:  75%|███████▍  | 4659/6250 [4:50:38<1:36:06,  3.62s/it, gpt_loss=0.612, lr=4.9e-7][A[2025-04-24 04:43:21,244] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  75%|███████▍  | 4659/6250 [4:50:42<1:36:06,  3.62s/it, gpt_loss=0.604, lr=4.88e-7][A
Train step of epoch 0:  75%|███████▍  | 4660/6250 [4:50:42<1:35:39,  3.61s/it, gpt_loss=0.604, lr=4.88e-7][A
Train step of epoch 0:  75%|███████▍  | 4660/6250 [4:50:46<1:35:39,  3.61s/it, gpt_loss=0.479, lr=4.88e-7][A
Train step of epoch 0:  75%|███████▍  | 4661/6250 [4:50:46<1:36:00,  3.63s/it, gpt_loss=0.479, lr=4.88e-7][A
Train step of epoch 0:  75%|███████▍  | 4661/6250 [4:50:48<1:36:00,  3.63s/it, gpt_loss=0.636, lr=4.88e-7][A
Train step of epoch 0:  75%|███████▍  | 4662/6250 [4:50:48<1:27:18,  3.30s/it, gpt_loss=0.636, lr=4.88e-7][A
Train step of epoch 0:  75%|███████▍  | 4662/6250 [4:50:52<1:27:18,  3.30s/it, gpt_loss=0.585, lr=4.88e-7][A
Train step of epoch 0:  75%|███████▍  | 4663/6250 [4:50:52<1:28:39,  3.35s/it, gpt_loss=0.585, lr=4.88e-7][A[2025-04-24 04:43:35,334] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  75%|███████▍  | 4663/6250 [4:50:56<1:28:39,  3.35s/it, gpt_loss=0.62, lr=4.87e-7] [A
Train step of epoch 0:  75%|███████▍  | 4664/6250 [4:50:56<1:37:01,  3.67s/it, gpt_loss=0.62, lr=4.87e-7][A
Train step of epoch 0:  75%|███████▍  | 4664/6250 [4:51:00<1:37:01,  3.67s/it, gpt_loss=0.717, lr=4.87e-7][A
Train step of epoch 0:  75%|███████▍  | 4665/6250 [4:51:00<1:39:51,  3.78s/it, gpt_loss=0.717, lr=4.87e-7][A
Train step of epoch 0:  75%|███████▍  | 4665/6250 [4:51:05<1:39:51,  3.78s/it, gpt_loss=0.598, lr=4.87e-7][A
Train step of epoch 0:  75%|███████▍  | 4666/6250 [4:51:05<1:47:30,  4.07s/it, gpt_loss=0.598, lr=4.87e-7][A
Train step of epoch 0:  75%|███████▍  | 4666/6250 [4:51:08<1:47:30,  4.07s/it, gpt_loss=0.769, lr=4.87e-7][A
Train step of epoch 0:  75%|███████▍  | 4667/6250 [4:51:08<1:43:01,  3.90s/it, gpt_loss=0.769, lr=4.87e-7][A[2025-04-24 04:43:50,835] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  75%|███████▍  | 4667/6250 [4:51:12<1:43:01,  3.90s/it, gpt_loss=0.545, lr=4.85e-7][A
Train step of epoch 0:  75%|███████▍  | 4668/6250 [4:51:12<1:37:21,  3.69s/it, gpt_loss=0.545, lr=4.85e-7][A
Train step of epoch 0:  75%|███████▍  | 4668/6250 [4:51:15<1:37:21,  3.69s/it, gpt_loss=0.605, lr=4.85e-7][A
Train step of epoch 0:  75%|███████▍  | 4669/6250 [4:51:15<1:36:33,  3.66s/it, gpt_loss=0.605, lr=4.85e-7][A
Train step of epoch 0:  75%|███████▍  | 4669/6250 [4:51:18<1:36:33,  3.66s/it, gpt_loss=0.552, lr=4.85e-7][A
Train step of epoch 0:  75%|███████▍  | 4670/6250 [4:51:18<1:29:19,  3.39s/it, gpt_loss=0.552, lr=4.85e-7][A
Train step of epoch 0:  75%|███████▍  | 4670/6250 [4:51:22<1:29:19,  3.39s/it, gpt_loss=0.746, lr=4.85e-7][A
Train step of epoch 0:  75%|███████▍  | 4671/6250 [4:51:22<1:33:23,  3.55s/it, gpt_loss=0.746, lr=4.85e-7][A[2025-04-24 04:44:05,437] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  75%|███████▍  | 4671/6250 [4:51:26<1:33:23,  3.55s/it, gpt_loss=0.632, lr=4.84e-7][A
Train step of epoch 0:  75%|███████▍  | 4672/6250 [4:51:26<1:39:30,  3.78s/it, gpt_loss=0.632, lr=4.84e-7][A
Train step of epoch 0:  75%|███████▍  | 4672/6250 [4:51:30<1:39:30,  3.78s/it, gpt_loss=0.562, lr=4.84e-7][A
Train step of epoch 0:  75%|███████▍  | 4673/6250 [4:51:30<1:37:28,  3.71s/it, gpt_loss=0.562, lr=4.84e-7][A
Train step of epoch 0:  75%|███████▍  | 4673/6250 [4:51:34<1:37:28,  3.71s/it, gpt_loss=0.754, lr=4.84e-7][A
Train step of epoch 0:  75%|███████▍  | 4674/6250 [4:51:34<1:42:15,  3.89s/it, gpt_loss=0.754, lr=4.84e-7][A
Train step of epoch 0:  75%|███████▍  | 4674/6250 [4:51:38<1:42:15,  3.89s/it, gpt_loss=0.595, lr=4.84e-7][A
Train step of epoch 0:  75%|███████▍  | 4675/6250 [4:51:38<1:39:39,  3.80s/it, gpt_loss=0.595, lr=4.84e-7][A[2025-04-24 04:44:20,769] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  75%|███████▍  | 4675/6250 [4:51:42<1:39:39,  3.80s/it, gpt_loss=0.542, lr=4.83e-7][A
Train step of epoch 0:  75%|███████▍  | 4676/6250 [4:51:42<1:40:26,  3.83s/it, gpt_loss=0.542, lr=4.83e-7][A
Train step of epoch 0:  75%|███████▍  | 4676/6250 [4:51:46<1:40:26,  3.83s/it, gpt_loss=0.78, lr=4.83e-7] [A
Train step of epoch 0:  75%|███████▍  | 4677/6250 [4:51:46<1:41:50,  3.88s/it, gpt_loss=0.78, lr=4.83e-7][A
Train step of epoch 0:  75%|███████▍  | 4677/6250 [4:51:49<1:41:50,  3.88s/it, gpt_loss=0.502, lr=4.83e-7][A
Train step of epoch 0:  75%|███████▍  | 4678/6250 [4:51:49<1:38:39,  3.77s/it, gpt_loss=0.502, lr=4.83e-7][A
Train step of epoch 0:  75%|███████▍  | 4678/6250 [4:51:53<1:38:39,  3.77s/it, gpt_loss=0.637, lr=4.83e-7][A
Train step of epoch 0:  75%|███████▍  | 4679/6250 [4:51:53<1:37:32,  3.73s/it, gpt_loss=0.637, lr=4.83e-7][A[2025-04-24 04:44:36,465] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  75%|███████▍  | 4679/6250 [4:51:57<1:37:32,  3.73s/it, gpt_loss=0.432, lr=4.81e-7][A
Train step of epoch 0:  75%|███████▍  | 4680/6250 [4:51:57<1:44:02,  3.98s/it, gpt_loss=0.432, lr=4.81e-7][A
Train step of epoch 0:  75%|███████▍  | 4680/6250 [4:52:02<1:44:02,  3.98s/it, gpt_loss=0.615, lr=4.81e-7][A
Train step of epoch 0:  75%|███████▍  | 4681/6250 [4:52:02<1:47:02,  4.09s/it, gpt_loss=0.615, lr=4.81e-7][A
Train step of epoch 0:  75%|███████▍  | 4681/6250 [4:52:06<1:47:02,  4.09s/it, gpt_loss=0.584, lr=4.81e-7][A
Train step of epoch 0:  75%|███████▍  | 4682/6250 [4:52:06<1:48:25,  4.15s/it, gpt_loss=0.584, lr=4.81e-7][A
Train step of epoch 0:  75%|███████▍  | 4682/6250 [4:52:09<1:48:25,  4.15s/it, gpt_loss=0.626, lr=4.81e-7][A
Train step of epoch 0:  75%|███████▍  | 4683/6250 [4:52:09<1:42:35,  3.93s/it, gpt_loss=0.626, lr=4.81e-7][A[2025-04-24 04:44:53,107] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  75%|███████▍  | 4683/6250 [4:52:14<1:42:35,  3.93s/it, gpt_loss=0.574, lr=4.8e-7] [A
Train step of epoch 0:  75%|███████▍  | 4684/6250 [4:52:14<1:47:39,  4.12s/it, gpt_loss=0.574, lr=4.8e-7][A
Train step of epoch 0:  75%|███████▍  | 4684/6250 [4:52:18<1:47:39,  4.12s/it, gpt_loss=0.466, lr=4.8e-7][A
Train step of epoch 0:  75%|███████▍  | 4685/6250 [4:52:18<1:46:48,  4.10s/it, gpt_loss=0.466, lr=4.8e-7][A
Train step of epoch 0:  75%|███████▍  | 4685/6250 [4:52:21<1:46:48,  4.10s/it, gpt_loss=0.792, lr=4.8e-7][A
Train step of epoch 0:  75%|███████▍  | 4686/6250 [4:52:21<1:41:07,  3.88s/it, gpt_loss=0.792, lr=4.8e-7][A
Train step of epoch 0:  75%|███████▍  | 4686/6250 [4:52:26<1:41:07,  3.88s/it, gpt_loss=0.586, lr=4.8e-7][A
Train step of epoch 0:  75%|███████▍  | 4687/6250 [4:52:26<1:49:03,  4.19s/it, gpt_loss=0.586, lr=4.8e-7][A[2025-04-24 04:45:08,559] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  75%|███████▍  | 4687/6250 [4:52:29<1:49:03,  4.19s/it, gpt_loss=0.833, lr=4.79e-7][A
Train step of epoch 0:  75%|███████▌  | 4688/6250 [4:52:29<1:40:52,  3.87s/it, gpt_loss=0.833, lr=4.79e-7][A
Train step of epoch 0:  75%|███████▌  | 4688/6250 [4:52:34<1:40:52,  3.87s/it, gpt_loss=0.73, lr=4.79e-7] [A
Train step of epoch 0:  75%|███████▌  | 4689/6250 [4:52:34<1:43:40,  3.98s/it, gpt_loss=0.73, lr=4.79e-7][A
Train step of epoch 0:  75%|███████▌  | 4689/6250 [4:52:37<1:43:40,  3.98s/it, gpt_loss=0.52, lr=4.79e-7][A
Train step of epoch 0:  75%|███████▌  | 4690/6250 [4:52:37<1:39:58,  3.84s/it, gpt_loss=0.52, lr=4.79e-7][A
Train step of epoch 0:  75%|███████▌  | 4690/6250 [4:52:41<1:39:58,  3.84s/it, gpt_loss=0.641, lr=4.79e-7][A
Train step of epoch 0:  75%|███████▌  | 4691/6250 [4:52:41<1:37:23,  3.75s/it, gpt_loss=0.641, lr=4.79e-7][A[2025-04-24 04:45:23,030] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  75%|███████▌  | 4691/6250 [4:52:44<1:37:23,  3.75s/it, gpt_loss=0.601, lr=4.77e-7][A
Train step of epoch 0:  75%|███████▌  | 4692/6250 [4:52:44<1:32:57,  3.58s/it, gpt_loss=0.601, lr=4.77e-7][A
Train step of epoch 0:  75%|███████▌  | 4692/6250 [4:52:48<1:32:57,  3.58s/it, gpt_loss=0.664, lr=4.77e-7][A
Train step of epoch 0:  75%|███████▌  | 4693/6250 [4:52:48<1:36:43,  3.73s/it, gpt_loss=0.664, lr=4.77e-7][A
Train step of epoch 0:  75%|███████▌  | 4693/6250 [4:52:50<1:36:43,  3.73s/it, gpt_loss=0.486, lr=4.77e-7][A
Train step of epoch 0:  75%|███████▌  | 4694/6250 [4:52:50<1:26:04,  3.32s/it, gpt_loss=0.486, lr=4.77e-7][A
Train step of epoch 0:  75%|███████▌  | 4694/6250 [4:52:54<1:26:04,  3.32s/it, gpt_loss=0.557, lr=4.77e-7][A
Train step of epoch 0:  75%|███████▌  | 4695/6250 [4:52:54<1:27:20,  3.37s/it, gpt_loss=0.557, lr=4.77e-7][A[2025-04-24 04:45:36,469] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  75%|███████▌  | 4695/6250 [4:52:57<1:27:20,  3.37s/it, gpt_loss=0.59, lr=4.76e-7] [A
Train step of epoch 0:  75%|███████▌  | 4696/6250 [4:52:57<1:28:23,  3.41s/it, gpt_loss=0.59, lr=4.76e-7][A
Train step of epoch 0:  75%|███████▌  | 4696/6250 [4:53:01<1:28:23,  3.41s/it, gpt_loss=0.62, lr=4.76e-7][A
Train step of epoch 0:  75%|███████▌  | 4697/6250 [4:53:01<1:33:19,  3.61s/it, gpt_loss=0.62, lr=4.76e-7][A
Train step of epoch 0:  75%|███████▌  | 4697/6250 [4:53:06<1:33:19,  3.61s/it, gpt_loss=0.785, lr=4.76e-7][A
Train step of epoch 0:  75%|███████▌  | 4698/6250 [4:53:06<1:38:04,  3.79s/it, gpt_loss=0.785, lr=4.76e-7][A
Train step of epoch 0:  75%|███████▌  | 4698/6250 [4:53:09<1:38:04,  3.79s/it, gpt_loss=0.634, lr=4.76e-7][A
Train step of epoch 0:  75%|███████▌  | 4699/6250 [4:53:09<1:32:55,  3.59s/it, gpt_loss=0.634, lr=4.76e-7][A[2025-04-24 04:45:50,947] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  75%|███████▌  | 4699/6250 [4:53:12<1:32:55,  3.59s/it, gpt_loss=0.642, lr=4.75e-7][A
Train step of epoch 0:  75%|███████▌  | 4700/6250 [4:53:12<1:28:43,  3.43s/it, gpt_loss=0.642, lr=4.75e-7][A
Train step of epoch 0:  75%|███████▌  | 4700/6250 [4:53:16<1:28:43,  3.43s/it, gpt_loss=0.569, lr=4.75e-7][A
Train step of epoch 0:  75%|███████▌  | 4701/6250 [4:53:16<1:31:51,  3.56s/it, gpt_loss=0.569, lr=4.75e-7][A
Train step of epoch 0:  75%|███████▌  | 4701/6250 [4:53:19<1:31:51,  3.56s/it, gpt_loss=0.568, lr=4.75e-7][A
Train step of epoch 0:  75%|███████▌  | 4702/6250 [4:53:19<1:29:07,  3.45s/it, gpt_loss=0.568, lr=4.75e-7][A
Train step of epoch 0:  75%|███████▌  | 4702/6250 [4:53:22<1:29:07,  3.45s/it, gpt_loss=0.789, lr=4.75e-7][A
Train step of epoch 0:  75%|███████▌  | 4703/6250 [4:53:22<1:29:07,  3.46s/it, gpt_loss=0.789, lr=4.75e-7][A[2025-04-24 04:46:04,929] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  75%|███████▌  | 4703/6250 [4:53:26<1:29:07,  3.46s/it, gpt_loss=0.57, lr=4.73e-7] [A
Train step of epoch 0:  75%|███████▌  | 4704/6250 [4:53:26<1:29:06,  3.46s/it, gpt_loss=0.57, lr=4.73e-7][A
Train step of epoch 0:  75%|███████▌  | 4704/6250 [4:53:29<1:29:06,  3.46s/it, gpt_loss=0.525, lr=4.73e-7][A
Train step of epoch 0:  75%|███████▌  | 4705/6250 [4:53:29<1:31:45,  3.56s/it, gpt_loss=0.525, lr=4.73e-7][A
Train step of epoch 0:  75%|███████▌  | 4705/6250 [4:53:33<1:31:45,  3.56s/it, gpt_loss=0.47, lr=4.73e-7] [A
Train step of epoch 0:  75%|███████▌  | 4706/6250 [4:53:33<1:30:57,  3.53s/it, gpt_loss=0.47, lr=4.73e-7][A
Train step of epoch 0:  75%|███████▌  | 4706/6250 [4:53:37<1:30:57,  3.53s/it, gpt_loss=0.65, lr=4.73e-7][A
Train step of epoch 0:  75%|███████▌  | 4707/6250 [4:53:37<1:37:04,  3.77s/it, gpt_loss=0.65, lr=4.73e-7][A[2025-04-24 04:46:20,575] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  75%|███████▌  | 4707/6250 [4:53:41<1:37:04,  3.77s/it, gpt_loss=0.53, lr=4.72e-7][A
Train step of epoch 0:  75%|███████▌  | 4708/6250 [4:53:41<1:39:00,  3.85s/it, gpt_loss=0.53, lr=4.72e-7][A
Train step of epoch 0:  75%|███████▌  | 4708/6250 [4:53:46<1:39:00,  3.85s/it, gpt_loss=0.564, lr=4.72e-7][A
Train step of epoch 0:  75%|███████▌  | 4709/6250 [4:53:46<1:42:13,  3.98s/it, gpt_loss=0.564, lr=4.72e-7][A
Train step of epoch 0:  75%|███████▌  | 4709/6250 [4:53:50<1:42:13,  3.98s/it, gpt_loss=0.452, lr=4.72e-7][A
Train step of epoch 0:  75%|███████▌  | 4710/6250 [4:53:50<1:42:21,  3.99s/it, gpt_loss=0.452, lr=4.72e-7][A
Train step of epoch 0:  75%|███████▌  | 4710/6250 [4:53:53<1:42:21,  3.99s/it, gpt_loss=0.747, lr=4.72e-7][A
Train step of epoch 0:  75%|███████▌  | 4711/6250 [4:53:53<1:34:10,  3.67s/it, gpt_loss=0.747, lr=4.72e-7][A[2025-04-24 04:46:35,561] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  75%|███████▌  | 4711/6250 [4:53:56<1:34:10,  3.67s/it, gpt_loss=0.607, lr=4.71e-7][A
Train step of epoch 0:  75%|███████▌  | 4712/6250 [4:53:56<1:34:51,  3.70s/it, gpt_loss=0.607, lr=4.71e-7][A
Train step of epoch 0:  75%|███████▌  | 4712/6250 [4:53:59<1:34:51,  3.70s/it, gpt_loss=0.494, lr=4.71e-7][A
Train step of epoch 0:  75%|███████▌  | 4713/6250 [4:53:59<1:28:31,  3.46s/it, gpt_loss=0.494, lr=4.71e-7][A
Train step of epoch 0:  75%|███████▌  | 4713/6250 [4:54:04<1:28:31,  3.46s/it, gpt_loss=0.699, lr=4.71e-7][A
Train step of epoch 0:  75%|███████▌  | 4714/6250 [4:54:04<1:36:29,  3.77s/it, gpt_loss=0.699, lr=4.71e-7][A
Train step of epoch 0:  75%|███████▌  | 4714/6250 [4:54:07<1:36:29,  3.77s/it, gpt_loss=0.466, lr=4.71e-7][A
Train step of epoch 0:  75%|███████▌  | 4715/6250 [4:54:07<1:33:37,  3.66s/it, gpt_loss=0.466, lr=4.71e-7][A[2025-04-24 04:46:49,061] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  75%|███████▌  | 4715/6250 [4:54:10<1:33:37,  3.66s/it, gpt_loss=0.659, lr=4.69e-7][A
Train step of epoch 0:  75%|███████▌  | 4716/6250 [4:54:10<1:26:17,  3.38s/it, gpt_loss=0.659, lr=4.69e-7][A
Train step of epoch 0:  75%|███████▌  | 4716/6250 [4:54:14<1:26:17,  3.38s/it, gpt_loss=0.502, lr=4.69e-7][A
Train step of epoch 0:  75%|███████▌  | 4717/6250 [4:54:14<1:30:47,  3.55s/it, gpt_loss=0.502, lr=4.69e-7][A
Train step of epoch 0:  75%|███████▌  | 4717/6250 [4:54:17<1:30:47,  3.55s/it, gpt_loss=0.56, lr=4.69e-7] [A
Train step of epoch 0:  75%|███████▌  | 4718/6250 [4:54:17<1:29:46,  3.52s/it, gpt_loss=0.56, lr=4.69e-7][A
Train step of epoch 0:  75%|███████▌  | 4718/6250 [4:54:20<1:29:46,  3.52s/it, gpt_loss=0.503, lr=4.69e-7][A
Train step of epoch 0:  76%|███████▌  | 4719/6250 [4:54:20<1:27:24,  3.43s/it, gpt_loss=0.503, lr=4.69e-7][A[2025-04-24 04:47:03,213] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  76%|███████▌  | 4719/6250 [4:54:24<1:27:24,  3.43s/it, gpt_loss=0.525, lr=4.68e-7][A
Train step of epoch 0:  76%|███████▌  | 4720/6250 [4:54:24<1:28:13,  3.46s/it, gpt_loss=0.525, lr=4.68e-7][A
Train step of epoch 0:  76%|███████▌  | 4720/6250 [4:54:28<1:28:13,  3.46s/it, gpt_loss=0.782, lr=4.68e-7][A
Train step of epoch 0:  76%|███████▌  | 4721/6250 [4:54:28<1:29:11,  3.50s/it, gpt_loss=0.782, lr=4.68e-7][A
Train step of epoch 0:  76%|███████▌  | 4721/6250 [4:54:33<1:29:11,  3.50s/it, gpt_loss=0.644, lr=4.68e-7][A
Train step of epoch 0:  76%|███████▌  | 4722/6250 [4:54:33<1:41:49,  4.00s/it, gpt_loss=0.644, lr=4.68e-7][A
Train step of epoch 0:  76%|███████▌  | 4722/6250 [4:54:36<1:41:49,  4.00s/it, gpt_loss=0.536, lr=4.68e-7][A
Train step of epoch 0:  76%|███████▌  | 4723/6250 [4:54:36<1:37:50,  3.84s/it, gpt_loss=0.536, lr=4.68e-7][A[2025-04-24 04:47:19,342] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  76%|███████▌  | 4723/6250 [4:54:40<1:37:50,  3.84s/it, gpt_loss=0.581, lr=4.67e-7][A
Train step of epoch 0:  76%|███████▌  | 4724/6250 [4:54:40<1:38:06,  3.86s/it, gpt_loss=0.581, lr=4.67e-7][A
Train step of epoch 0:  76%|███████▌  | 4724/6250 [4:54:44<1:38:06,  3.86s/it, gpt_loss=0.56, lr=4.67e-7] [A
Train step of epoch 0:  76%|███████▌  | 4725/6250 [4:54:44<1:36:44,  3.81s/it, gpt_loss=0.56, lr=4.67e-7][A
Train step of epoch 0:  76%|███████▌  | 4725/6250 [4:54:47<1:36:44,  3.81s/it, gpt_loss=0.607, lr=4.67e-7][A
Train step of epoch 0:  76%|███████▌  | 4726/6250 [4:54:47<1:31:31,  3.60s/it, gpt_loss=0.607, lr=4.67e-7][A
Train step of epoch 0:  76%|███████▌  | 4726/6250 [4:54:50<1:31:31,  3.60s/it, gpt_loss=0.533, lr=4.67e-7][A
Train step of epoch 0:  76%|███████▌  | 4727/6250 [4:54:50<1:26:14,  3.40s/it, gpt_loss=0.533, lr=4.67e-7][A[2025-04-24 04:47:33,535] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  76%|███████▌  | 4727/6250 [4:54:54<1:26:14,  3.40s/it, gpt_loss=0.622, lr=4.65e-7][A
Train step of epoch 0:  76%|███████▌  | 4728/6250 [4:54:54<1:34:15,  3.72s/it, gpt_loss=0.622, lr=4.65e-7][A
Train step of epoch 0:  76%|███████▌  | 4728/6250 [4:54:59<1:34:15,  3.72s/it, gpt_loss=0.637, lr=4.65e-7][A
Train step of epoch 0:  76%|███████▌  | 4729/6250 [4:54:59<1:38:13,  3.87s/it, gpt_loss=0.637, lr=4.65e-7][A
Train step of epoch 0:  76%|███████▌  | 4729/6250 [4:55:03<1:38:13,  3.87s/it, gpt_loss=0.607, lr=4.65e-7][A
Train step of epoch 0:  76%|███████▌  | 4730/6250 [4:55:03<1:39:33,  3.93s/it, gpt_loss=0.607, lr=4.65e-7][A
Train step of epoch 0:  76%|███████▌  | 4730/6250 [4:55:06<1:39:33,  3.93s/it, gpt_loss=0.452, lr=4.65e-7][A
Train step of epoch 0:  76%|███████▌  | 4731/6250 [4:55:06<1:38:19,  3.88s/it, gpt_loss=0.452, lr=4.65e-7][A[2025-04-24 04:47:49,526] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  76%|███████▌  | 4731/6250 [4:55:10<1:38:19,  3.88s/it, gpt_loss=0.728, lr=4.64e-7][A
Train step of epoch 0:  76%|███████▌  | 4732/6250 [4:55:10<1:38:28,  3.89s/it, gpt_loss=0.728, lr=4.64e-7][A
Train step of epoch 0:  76%|███████▌  | 4732/6250 [4:55:14<1:38:28,  3.89s/it, gpt_loss=0.674, lr=4.64e-7][A
Train step of epoch 0:  76%|███████▌  | 4733/6250 [4:55:14<1:35:58,  3.80s/it, gpt_loss=0.674, lr=4.64e-7][A
Train step of epoch 0:  76%|███████▌  | 4733/6250 [4:55:18<1:35:58,  3.80s/it, gpt_loss=0.473, lr=4.64e-7][A
Train step of epoch 0:  76%|███████▌  | 4734/6250 [4:55:18<1:37:29,  3.86s/it, gpt_loss=0.473, lr=4.64e-7][A
Train step of epoch 0:  76%|███████▌  | 4734/6250 [4:55:22<1:37:29,  3.86s/it, gpt_loss=0.745, lr=4.64e-7][A
Train step of epoch 0:  76%|███████▌  | 4735/6250 [4:55:22<1:42:54,  4.08s/it, gpt_loss=0.745, lr=4.64e-7][A[2025-04-24 04:48:05,454] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  76%|███████▌  | 4735/6250 [4:55:26<1:42:54,  4.08s/it, gpt_loss=0.539, lr=4.63e-7][A
Train step of epoch 0:  76%|███████▌  | 4736/6250 [4:55:26<1:40:31,  3.98s/it, gpt_loss=0.539, lr=4.63e-7][A
Train step of epoch 0:  76%|███████▌  | 4736/6250 [4:55:30<1:40:31,  3.98s/it, gpt_loss=0.673, lr=4.63e-7][A
Train step of epoch 0:  76%|███████▌  | 4737/6250 [4:55:30<1:40:18,  3.98s/it, gpt_loss=0.673, lr=4.63e-7][A
Train step of epoch 0:  76%|███████▌  | 4737/6250 [4:55:33<1:40:18,  3.98s/it, gpt_loss=0.446, lr=4.63e-7][A
Train step of epoch 0:  76%|███████▌  | 4738/6250 [4:55:33<1:32:10,  3.66s/it, gpt_loss=0.446, lr=4.63e-7][A
Train step of epoch 0:  76%|███████▌  | 4738/6250 [4:55:37<1:32:10,  3.66s/it, gpt_loss=0.602, lr=4.63e-7][A
Train step of epoch 0:  76%|███████▌  | 4739/6250 [4:55:37<1:33:02,  3.69s/it, gpt_loss=0.602, lr=4.63e-7][A[2025-04-24 04:48:19,607] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  76%|███████▌  | 4739/6250 [4:55:40<1:33:02,  3.69s/it, gpt_loss=0.652, lr=4.61e-7][A
Train step of epoch 0:  76%|███████▌  | 4740/6250 [4:55:40<1:31:29,  3.64s/it, gpt_loss=0.652, lr=4.61e-7][A
Train step of epoch 0:  76%|███████▌  | 4740/6250 [4:55:44<1:31:29,  3.64s/it, gpt_loss=0.773, lr=4.61e-7][A
Train step of epoch 0:  76%|███████▌  | 4741/6250 [4:55:44<1:30:06,  3.58s/it, gpt_loss=0.773, lr=4.61e-7][A
Train step of epoch 0:  76%|███████▌  | 4741/6250 [4:55:48<1:30:06,  3.58s/it, gpt_loss=0.607, lr=4.61e-7][A
Train step of epoch 0:  76%|███████▌  | 4742/6250 [4:55:48<1:33:30,  3.72s/it, gpt_loss=0.607, lr=4.61e-7][A
Train step of epoch 0:  76%|███████▌  | 4742/6250 [4:55:51<1:33:30,  3.72s/it, gpt_loss=0.758, lr=4.61e-7][A
Train step of epoch 0:  76%|███████▌  | 4743/6250 [4:55:51<1:28:50,  3.54s/it, gpt_loss=0.758, lr=4.61e-7][A[2025-04-24 04:48:33,578] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  76%|███████▌  | 4743/6250 [4:55:54<1:28:50,  3.54s/it, gpt_loss=0.639, lr=4.6e-7] [A
Train step of epoch 0:  76%|███████▌  | 4744/6250 [4:55:54<1:27:27,  3.48s/it, gpt_loss=0.639, lr=4.6e-7][A
Train step of epoch 0:  76%|███████▌  | 4744/6250 [4:55:58<1:27:27,  3.48s/it, gpt_loss=0.679, lr=4.6e-7][A
Train step of epoch 0:  76%|███████▌  | 4745/6250 [4:55:58<1:31:29,  3.65s/it, gpt_loss=0.679, lr=4.6e-7][A
Train step of epoch 0:  76%|███████▌  | 4745/6250 [4:56:03<1:31:29,  3.65s/it, gpt_loss=0.587, lr=4.6e-7][A
Train step of epoch 0:  76%|███████▌  | 4746/6250 [4:56:03<1:36:56,  3.87s/it, gpt_loss=0.587, lr=4.6e-7][A
Train step of epoch 0:  76%|███████▌  | 4746/6250 [4:56:07<1:36:56,  3.87s/it, gpt_loss=0.655, lr=4.6e-7][A
Train step of epoch 0:  76%|███████▌  | 4747/6250 [4:56:07<1:41:26,  4.05s/it, gpt_loss=0.655, lr=4.6e-7][A[2025-04-24 04:48:50,063] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  76%|███████▌  | 4747/6250 [4:56:11<1:41:26,  4.05s/it, gpt_loss=0.733, lr=4.59e-7][A
Train step of epoch 0:  76%|███████▌  | 4748/6250 [4:56:11<1:37:59,  3.91s/it, gpt_loss=0.733, lr=4.59e-7][A
Train step of epoch 0:  76%|███████▌  | 4748/6250 [4:56:15<1:37:59,  3.91s/it, gpt_loss=0.668, lr=4.59e-7][A
Train step of epoch 0:  76%|███████▌  | 4749/6250 [4:56:15<1:42:06,  4.08s/it, gpt_loss=0.668, lr=4.59e-7][A
Train step of epoch 0:  76%|███████▌  | 4749/6250 [4:56:19<1:42:06,  4.08s/it, gpt_loss=0.735, lr=4.59e-7][A
Train step of epoch 0:  76%|███████▌  | 4750/6250 [4:56:19<1:37:01,  3.88s/it, gpt_loss=0.735, lr=4.59e-7][A
Train step of epoch 0:  76%|███████▌  | 4750/6250 [4:56:22<1:37:01,  3.88s/it, gpt_loss=0.516, lr=4.59e-7][A
Train step of epoch 0:  76%|███████▌  | 4751/6250 [4:56:22<1:31:17,  3.65s/it, gpt_loss=0.516, lr=4.59e-7][A[2025-04-24 04:49:05,893] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  76%|███████▌  | 4751/6250 [4:56:27<1:31:17,  3.65s/it, gpt_loss=0.736, lr=4.57e-7][A
Train step of epoch 0:  76%|███████▌  | 4752/6250 [4:56:27<1:39:58,  4.00s/it, gpt_loss=0.736, lr=4.57e-7][A
Train step of epoch 0:  76%|███████▌  | 4752/6250 [4:56:30<1:39:58,  4.00s/it, gpt_loss=0.535, lr=4.57e-7][A
Train step of epoch 0:  76%|███████▌  | 4753/6250 [4:56:30<1:36:45,  3.88s/it, gpt_loss=0.535, lr=4.57e-7][A
Train step of epoch 0:  76%|███████▌  | 4753/6250 [4:56:35<1:36:45,  3.88s/it, gpt_loss=0.535, lr=4.57e-7][A
Train step of epoch 0:  76%|███████▌  | 4754/6250 [4:56:35<1:40:34,  4.03s/it, gpt_loss=0.535, lr=4.57e-7][A
Train step of epoch 0:  76%|███████▌  | 4754/6250 [4:56:39<1:40:34,  4.03s/it, gpt_loss=0.759, lr=4.57e-7][A
Train step of epoch 0:  76%|███████▌  | 4755/6250 [4:56:39<1:39:31,  3.99s/it, gpt_loss=0.759, lr=4.57e-7][A[2025-04-24 04:49:21,743] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  76%|███████▌  | 4755/6250 [4:56:43<1:39:31,  3.99s/it, gpt_loss=0.563, lr=4.56e-7][A
Train step of epoch 0:  76%|███████▌  | 4756/6250 [4:56:43<1:39:14,  3.99s/it, gpt_loss=0.563, lr=4.56e-7][A
Train step of epoch 0:  76%|███████▌  | 4756/6250 [4:56:46<1:39:14,  3.99s/it, gpt_loss=0.585, lr=4.56e-7][A
Train step of epoch 0:  76%|███████▌  | 4757/6250 [4:56:46<1:37:14,  3.91s/it, gpt_loss=0.585, lr=4.56e-7][A
Train step of epoch 0:  76%|███████▌  | 4757/6250 [4:56:49<1:37:14,  3.91s/it, gpt_loss=0.652, lr=4.56e-7][A
Train step of epoch 0:  76%|███████▌  | 4758/6250 [4:56:49<1:32:20,  3.71s/it, gpt_loss=0.652, lr=4.56e-7][A
Train step of epoch 0:  76%|███████▌  | 4758/6250 [4:56:53<1:32:20,  3.71s/it, gpt_loss=0.596, lr=4.56e-7][A
Train step of epoch 0:  76%|███████▌  | 4759/6250 [4:56:53<1:34:07,  3.79s/it, gpt_loss=0.596, lr=4.56e-7][A[2025-04-24 04:49:36,309] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  76%|███████▌  | 4759/6250 [4:56:57<1:34:07,  3.79s/it, gpt_loss=0.739, lr=4.55e-7][A
Train step of epoch 0:  76%|███████▌  | 4760/6250 [4:56:57<1:32:48,  3.74s/it, gpt_loss=0.739, lr=4.55e-7][A
Train step of epoch 0:  76%|███████▌  | 4760/6250 [4:57:01<1:32:48,  3.74s/it, gpt_loss=0.531, lr=4.55e-7][A
Train step of epoch 0:  76%|███████▌  | 4761/6250 [4:57:01<1:32:20,  3.72s/it, gpt_loss=0.531, lr=4.55e-7][A
Train step of epoch 0:  76%|███████▌  | 4761/6250 [4:57:05<1:32:20,  3.72s/it, gpt_loss=0.722, lr=4.55e-7][A
Train step of epoch 0:  76%|███████▌  | 4762/6250 [4:57:05<1:35:16,  3.84s/it, gpt_loss=0.722, lr=4.55e-7][A
Train step of epoch 0:  76%|███████▌  | 4762/6250 [4:57:09<1:35:16,  3.84s/it, gpt_loss=0.554, lr=4.55e-7][A
Train step of epoch 0:  76%|███████▌  | 4763/6250 [4:57:09<1:37:01,  3.91s/it, gpt_loss=0.554, lr=4.55e-7][A[2025-04-24 04:49:51,759] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  76%|███████▌  | 4763/6250 [4:57:13<1:37:01,  3.91s/it, gpt_loss=0.525, lr=4.53e-7][A
Train step of epoch 0:  76%|███████▌  | 4764/6250 [4:57:13<1:34:18,  3.81s/it, gpt_loss=0.525, lr=4.53e-7][A
Train step of epoch 0:  76%|███████▌  | 4764/6250 [4:57:17<1:34:18,  3.81s/it, gpt_loss=0.564, lr=4.53e-7][A
Train step of epoch 0:  76%|███████▌  | 4765/6250 [4:57:17<1:36:46,  3.91s/it, gpt_loss=0.564, lr=4.53e-7][A
Train step of epoch 0:  76%|███████▌  | 4765/6250 [4:57:21<1:36:46,  3.91s/it, gpt_loss=0.754, lr=4.53e-7][A
Train step of epoch 0:  76%|███████▋  | 4766/6250 [4:57:21<1:36:15,  3.89s/it, gpt_loss=0.754, lr=4.53e-7][A
Train step of epoch 0:  76%|███████▋  | 4766/6250 [4:57:23<1:36:15,  3.89s/it, gpt_loss=0.479, lr=4.53e-7][A
Train step of epoch 0:  76%|███████▋  | 4767/6250 [4:57:23<1:27:10,  3.53s/it, gpt_loss=0.479, lr=4.53e-7][A[2025-04-24 04:50:07,294] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  76%|███████▋  | 4767/6250 [4:57:28<1:27:10,  3.53s/it, gpt_loss=0.62, lr=4.52e-7] [A
Train step of epoch 0:  76%|███████▋  | 4768/6250 [4:57:28<1:37:00,  3.93s/it, gpt_loss=0.62, lr=4.52e-7][A
Train step of epoch 0:  76%|███████▋  | 4768/6250 [4:57:33<1:37:00,  3.93s/it, gpt_loss=0.723, lr=4.52e-7][A
Train step of epoch 0:  76%|███████▋  | 4769/6250 [4:57:33<1:41:07,  4.10s/it, gpt_loss=0.723, lr=4.52e-7][A
Train step of epoch 0:  76%|███████▋  | 4769/6250 [4:57:36<1:41:07,  4.10s/it, gpt_loss=0.574, lr=4.52e-7][A
Train step of epoch 0:  76%|███████▋  | 4770/6250 [4:57:36<1:34:29,  3.83s/it, gpt_loss=0.574, lr=4.52e-7][A
Train step of epoch 0:  76%|███████▋  | 4770/6250 [4:57:39<1:34:29,  3.83s/it, gpt_loss=0.577, lr=4.52e-7][A
Train step of epoch 0:  76%|███████▋  | 4771/6250 [4:57:39<1:31:10,  3.70s/it, gpt_loss=0.577, lr=4.52e-7][A[2025-04-24 04:50:22,123] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  76%|███████▋  | 4771/6250 [4:57:43<1:31:10,  3.70s/it, gpt_loss=0.691, lr=4.51e-7][A
Train step of epoch 0:  76%|███████▋  | 4772/6250 [4:57:43<1:31:24,  3.71s/it, gpt_loss=0.691, lr=4.51e-7][A
Train step of epoch 0:  76%|███████▋  | 4772/6250 [4:57:47<1:31:24,  3.71s/it, gpt_loss=0.568, lr=4.51e-7][A
Train step of epoch 0:  76%|███████▋  | 4773/6250 [4:57:47<1:33:00,  3.78s/it, gpt_loss=0.568, lr=4.51e-7][A
Train step of epoch 0:  76%|███████▋  | 4773/6250 [4:57:50<1:33:00,  3.78s/it, gpt_loss=0.603, lr=4.51e-7][A
Train step of epoch 0:  76%|███████▋  | 4774/6250 [4:57:50<1:26:33,  3.52s/it, gpt_loss=0.603, lr=4.51e-7][A
Train step of epoch 0:  76%|███████▋  | 4774/6250 [4:57:53<1:26:33,  3.52s/it, gpt_loss=0.443, lr=4.51e-7][A
Train step of epoch 0:  76%|███████▋  | 4775/6250 [4:57:53<1:21:15,  3.31s/it, gpt_loss=0.443, lr=4.51e-7][A[2025-04-24 04:50:36,592] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  76%|███████▋  | 4775/6250 [4:57:57<1:21:15,  3.31s/it, gpt_loss=0.442, lr=4.5e-7] [A
Train step of epoch 0:  76%|███████▋  | 4776/6250 [4:57:57<1:32:18,  3.76s/it, gpt_loss=0.442, lr=4.5e-7][A
Train step of epoch 0:  76%|███████▋  | 4776/6250 [4:58:01<1:32:18,  3.76s/it, gpt_loss=0.606, lr=4.5e-7][A
Train step of epoch 0:  76%|███████▋  | 4777/6250 [4:58:01<1:34:17,  3.84s/it, gpt_loss=0.606, lr=4.5e-7][A
Train step of epoch 0:  76%|███████▋  | 4777/6250 [4:58:06<1:34:17,  3.84s/it, gpt_loss=0.713, lr=4.5e-7][A
Train step of epoch 0:  76%|███████▋  | 4778/6250 [4:58:06<1:40:37,  4.10s/it, gpt_loss=0.713, lr=4.5e-7][A
Train step of epoch 0:  76%|███████▋  | 4778/6250 [4:58:10<1:40:37,  4.10s/it, gpt_loss=0.51, lr=4.5e-7] [A
Train step of epoch 0:  76%|███████▋  | 4779/6250 [4:58:10<1:38:34,  4.02s/it, gpt_loss=0.51, lr=4.5e-7][A[2025-04-24 04:50:52,613] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  76%|███████▋  | 4779/6250 [4:58:13<1:38:34,  4.02s/it, gpt_loss=0.619, lr=4.48e-7][A
Train step of epoch 0:  76%|███████▋  | 4780/6250 [4:58:13<1:34:14,  3.85s/it, gpt_loss=0.619, lr=4.48e-7][A
Train step of epoch 0:  76%|███████▋  | 4780/6250 [4:58:17<1:34:14,  3.85s/it, gpt_loss=0.676, lr=4.48e-7][A
Train step of epoch 0:  76%|███████▋  | 4781/6250 [4:58:17<1:29:44,  3.67s/it, gpt_loss=0.676, lr=4.48e-7][A
Train step of epoch 0:  76%|███████▋  | 4781/6250 [4:58:21<1:29:44,  3.67s/it, gpt_loss=0.624, lr=4.48e-7][A
Train step of epoch 0:  77%|███████▋  | 4782/6250 [4:58:21<1:32:26,  3.78s/it, gpt_loss=0.624, lr=4.48e-7][A
Train step of epoch 0:  77%|███████▋  | 4782/6250 [4:58:23<1:32:26,  3.78s/it, gpt_loss=0.704, lr=4.48e-7][A
Train step of epoch 0:  77%|███████▋  | 4783/6250 [4:58:23<1:22:43,  3.38s/it, gpt_loss=0.704, lr=4.48e-7][A[2025-04-24 04:51:07,088] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  77%|███████▋  | 4783/6250 [4:58:28<1:22:43,  3.38s/it, gpt_loss=0.608, lr=4.47e-7][A
Train step of epoch 0:  77%|███████▋  | 4784/6250 [4:58:28<1:32:32,  3.79s/it, gpt_loss=0.608, lr=4.47e-7][A
Train step of epoch 0:  77%|███████▋  | 4784/6250 [4:58:32<1:32:32,  3.79s/it, gpt_loss=0.741, lr=4.47e-7][A
Train step of epoch 0:  77%|███████▋  | 4785/6250 [4:58:32<1:33:00,  3.81s/it, gpt_loss=0.741, lr=4.47e-7][A
Train step of epoch 0:  77%|███████▋  | 4785/6250 [4:58:36<1:33:00,  3.81s/it, gpt_loss=0.459, lr=4.47e-7][A
Train step of epoch 0:  77%|███████▋  | 4786/6250 [4:58:36<1:34:44,  3.88s/it, gpt_loss=0.459, lr=4.47e-7][A
Train step of epoch 0:  77%|███████▋  | 4786/6250 [4:58:38<1:34:44,  3.88s/it, gpt_loss=0.505, lr=4.47e-7][A
Train step of epoch 0:  77%|███████▋  | 4787/6250 [4:58:38<1:26:12,  3.54s/it, gpt_loss=0.505, lr=4.47e-7][A[2025-04-24 04:51:21,169] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  77%|███████▋  | 4787/6250 [4:58:42<1:26:12,  3.54s/it, gpt_loss=0.566, lr=4.46e-7][A
Train step of epoch 0:  77%|███████▋  | 4788/6250 [4:58:42<1:25:27,  3.51s/it, gpt_loss=0.566, lr=4.46e-7][A
Train step of epoch 0:  77%|███████▋  | 4788/6250 [4:58:46<1:25:27,  3.51s/it, gpt_loss=0.447, lr=4.46e-7][A
Train step of epoch 0:  77%|███████▋  | 4789/6250 [4:58:46<1:29:49,  3.69s/it, gpt_loss=0.447, lr=4.46e-7][A
Train step of epoch 0:  77%|███████▋  | 4789/6250 [4:58:50<1:29:49,  3.69s/it, gpt_loss=0.614, lr=4.46e-7][A
Train step of epoch 0:  77%|███████▋  | 4790/6250 [4:58:50<1:28:39,  3.64s/it, gpt_loss=0.614, lr=4.46e-7][A
Train step of epoch 0:  77%|███████▋  | 4790/6250 [4:58:52<1:28:39,  3.64s/it, gpt_loss=0.531, lr=4.46e-7][A
Train step of epoch 0:  77%|███████▋  | 4791/6250 [4:58:52<1:18:02,  3.21s/it, gpt_loss=0.531, lr=4.46e-7][A[2025-04-24 04:51:34,875] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  77%|███████▋  | 4791/6250 [4:58:56<1:18:02,  3.21s/it, gpt_loss=0.658, lr=4.44e-7][A
Train step of epoch 0:  77%|███████▋  | 4792/6250 [4:58:56<1:22:43,  3.40s/it, gpt_loss=0.658, lr=4.44e-7][A
Train step of epoch 0:  77%|███████▋  | 4792/6250 [4:59:00<1:22:43,  3.40s/it, gpt_loss=0.749, lr=4.44e-7][A
Train step of epoch 0:  77%|███████▋  | 4793/6250 [4:59:00<1:27:44,  3.61s/it, gpt_loss=0.749, lr=4.44e-7][A
Train step of epoch 0:  77%|███████▋  | 4793/6250 [4:59:03<1:27:44,  3.61s/it, gpt_loss=0.651, lr=4.44e-7][A
Train step of epoch 0:  77%|███████▋  | 4794/6250 [4:59:03<1:28:01,  3.63s/it, gpt_loss=0.651, lr=4.44e-7][A
Train step of epoch 0:  77%|███████▋  | 4794/6250 [4:59:06<1:28:01,  3.63s/it, gpt_loss=0.711, lr=4.44e-7][A
Train step of epoch 0:  77%|███████▋  | 4795/6250 [4:59:06<1:24:01,  3.47s/it, gpt_loss=0.711, lr=4.44e-7][A[2025-04-24 04:51:50,039] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  77%|███████▋  | 4795/6250 [4:59:11<1:24:01,  3.47s/it, gpt_loss=0.379, lr=4.43e-7][A
Train step of epoch 0:  77%|███████▋  | 4796/6250 [4:59:11<1:30:09,  3.72s/it, gpt_loss=0.379, lr=4.43e-7][A
Train step of epoch 0:  77%|███████▋  | 4796/6250 [4:59:15<1:30:09,  3.72s/it, gpt_loss=0.548, lr=4.43e-7][A
Train step of epoch 0:  77%|███████▋  | 4797/6250 [4:59:15<1:30:56,  3.76s/it, gpt_loss=0.548, lr=4.43e-7][A
Train step of epoch 0:  77%|███████▋  | 4797/6250 [4:59:19<1:30:56,  3.76s/it, gpt_loss=0.58, lr=4.43e-7] [A
Train step of epoch 0:  77%|███████▋  | 4798/6250 [4:59:19<1:35:51,  3.96s/it, gpt_loss=0.58, lr=4.43e-7][A
Train step of epoch 0:  77%|███████▋  | 4798/6250 [4:59:22<1:35:51,  3.96s/it, gpt_loss=0.717, lr=4.43e-7][A
Train step of epoch 0:  77%|███████▋  | 4799/6250 [4:59:22<1:27:30,  3.62s/it, gpt_loss=0.717, lr=4.43e-7][A[2025-04-24 04:52:04,661] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-04-24 04:52:04,662] [INFO] [logging.py:107:log_dist] [Rank 0] step=1200, skipped=0, lr=[4.41887745748026e-07, 4.41887745748026e-07], mom=[(0.9, 0.95), (0.9, 0.95)]
[2025-04-24 04:52:04,662] [INFO] [timer.py:264:stop] epoch=0/micro_step=4800/global_step=1200, RunningAvgSamplesPerSec=2.2236255238862697, CurrSamplesPerSec=2.2731881447710096, MemAllocated=40.57GB, MaxMemAllocated=60.14GB

Train step of epoch 0:  77%|███████▋  | 4799/6250 [4:59:25<1:27:30,  3.62s/it, gpt_loss=0.489, lr=4.42e-7][A
Train step of epoch 0:  77%|███████▋  | 4800/6250 [4:59:25<1:26:46,  3.59s/it, gpt_loss=0.489, lr=4.42e-7][A
Train step of epoch 0:  77%|███████▋  | 4800/6250 [4:59:29<1:26:46,  3.59s/it, gpt_loss=0.602, lr=4.42e-7][A
Train step of epoch 0:  77%|███████▋  | 4801/6250 [4:59:29<1:27:46,  3.63s/it, gpt_loss=0.602, lr=4.42e-7][A
Train step of epoch 0:  77%|███████▋  | 4801/6250 [4:59:32<1:27:46,  3.63s/it, gpt_loss=0.512, lr=4.42e-7][A
Train step of epoch 0:  77%|███████▋  | 4802/6250 [4:59:32<1:24:46,  3.51s/it, gpt_loss=0.512, lr=4.42e-7][A
Train step of epoch 0:  77%|███████▋  | 4802/6250 [4:59:36<1:24:46,  3.51s/it, gpt_loss=0.702, lr=4.42e-7][A
Train step of epoch 0:  77%|███████▋  | 4803/6250 [4:59:36<1:26:31,  3.59s/it, gpt_loss=0.702, lr=4.42e-7][A[2025-04-24 04:52:19,674] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  77%|███████▋  | 4803/6250 [4:59:40<1:26:31,  3.59s/it, gpt_loss=0.562, lr=4.41e-7][A
Train step of epoch 0:  77%|███████▋  | 4804/6250 [4:59:40<1:31:29,  3.80s/it, gpt_loss=0.562, lr=4.41e-7][A
Train step of epoch 0:  77%|███████▋  | 4804/6250 [4:59:44<1:31:29,  3.80s/it, gpt_loss=0.597, lr=4.41e-7][A
Train step of epoch 0:  77%|███████▋  | 4805/6250 [4:59:44<1:31:17,  3.79s/it, gpt_loss=0.597, lr=4.41e-7][A
Train step of epoch 0:  77%|███████▋  | 4805/6250 [4:59:49<1:31:17,  3.79s/it, gpt_loss=0.397, lr=4.41e-7][A
Train step of epoch 0:  77%|███████▋  | 4806/6250 [4:59:49<1:38:42,  4.10s/it, gpt_loss=0.397, lr=4.41e-7][A
Train step of epoch 0:  77%|███████▋  | 4806/6250 [4:59:52<1:38:42,  4.10s/it, gpt_loss=0.641, lr=4.41e-7][A
Train step of epoch 0:  77%|███████▋  | 4807/6250 [4:59:52<1:32:30,  3.85s/it, gpt_loss=0.641, lr=4.41e-7][A[2025-04-24 04:52:35,924] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  77%|███████▋  | 4807/6250 [4:59:57<1:32:30,  3.85s/it, gpt_loss=0.73, lr=4.39e-7] [A
Train step of epoch 0:  77%|███████▋  | 4808/6250 [4:59:57<1:36:24,  4.01s/it, gpt_loss=0.73, lr=4.39e-7][A
Train step of epoch 0:  77%|███████▋  | 4808/6250 [5:00:01<1:36:24,  4.01s/it, gpt_loss=0.483, lr=4.39e-7][A
Train step of epoch 0:  77%|███████▋  | 4809/6250 [5:00:01<1:37:54,  4.08s/it, gpt_loss=0.483, lr=4.39e-7][A
Train step of epoch 0:  77%|███████▋  | 4809/6250 [5:00:05<1:37:54,  4.08s/it, gpt_loss=0.614, lr=4.39e-7][A
Train step of epoch 0:  77%|███████▋  | 4810/6250 [5:00:05<1:38:45,  4.11s/it, gpt_loss=0.614, lr=4.39e-7][A
Train step of epoch 0:  77%|███████▋  | 4810/6250 [5:00:09<1:38:45,  4.11s/it, gpt_loss=0.627, lr=4.39e-7][A
Train step of epoch 0:  77%|███████▋  | 4811/6250 [5:00:09<1:39:13,  4.14s/it, gpt_loss=0.627, lr=4.39e-7][A[2025-04-24 04:52:52,588] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  77%|███████▋  | 4811/6250 [5:00:13<1:39:13,  4.14s/it, gpt_loss=0.569, lr=4.38e-7][A
Train step of epoch 0:  77%|███████▋  | 4812/6250 [5:00:13<1:38:27,  4.11s/it, gpt_loss=0.569, lr=4.38e-7][A
Train step of epoch 0:  77%|███████▋  | 4812/6250 [5:00:18<1:38:27,  4.11s/it, gpt_loss=0.545, lr=4.38e-7][A
Train step of epoch 0:  77%|███████▋  | 4813/6250 [5:00:18<1:43:41,  4.33s/it, gpt_loss=0.545, lr=4.38e-7][A
Train step of epoch 0:  77%|███████▋  | 4813/6250 [5:00:21<1:43:41,  4.33s/it, gpt_loss=0.484, lr=4.38e-7][A
Train step of epoch 0:  77%|███████▋  | 4814/6250 [5:00:21<1:32:53,  3.88s/it, gpt_loss=0.484, lr=4.38e-7][A
Train step of epoch 0:  77%|███████▋  | 4814/6250 [5:00:25<1:32:53,  3.88s/it, gpt_loss=0.66, lr=4.38e-7] [A
Train step of epoch 0:  77%|███████▋  | 4815/6250 [5:00:25<1:29:55,  3.76s/it, gpt_loss=0.66, lr=4.38e-7][A[2025-04-24 04:53:06,531] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  77%|███████▋  | 4815/6250 [5:00:27<1:29:55,  3.76s/it, gpt_loss=0.436, lr=4.37e-7][A
Train step of epoch 0:  77%|███████▋  | 4816/6250 [5:00:27<1:22:52,  3.47s/it, gpt_loss=0.436, lr=4.37e-7][A
Train step of epoch 0:  77%|███████▋  | 4816/6250 [5:00:32<1:22:52,  3.47s/it, gpt_loss=0.59, lr=4.37e-7] [A
Train step of epoch 0:  77%|███████▋  | 4817/6250 [5:00:32<1:28:11,  3.69s/it, gpt_loss=0.59, lr=4.37e-7][A
Train step of epoch 0:  77%|███████▋  | 4817/6250 [5:00:35<1:28:11,  3.69s/it, gpt_loss=0.471, lr=4.37e-7][A
Train step of epoch 0:  77%|███████▋  | 4818/6250 [5:00:35<1:29:50,  3.76s/it, gpt_loss=0.471, lr=4.37e-7][A
Train step of epoch 0:  77%|███████▋  | 4818/6250 [5:00:39<1:29:50,  3.76s/it, gpt_loss=0.573, lr=4.37e-7][A
Train step of epoch 0:  77%|███████▋  | 4819/6250 [5:00:39<1:29:38,  3.76s/it, gpt_loss=0.573, lr=4.37e-7][A[2025-04-24 04:53:22,559] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  77%|███████▋  | 4819/6250 [5:00:43<1:29:38,  3.76s/it, gpt_loss=0.481, lr=4.36e-7][A
Train step of epoch 0:  77%|███████▋  | 4820/6250 [5:00:43<1:32:15,  3.87s/it, gpt_loss=0.481, lr=4.36e-7][A
Train step of epoch 0:  77%|███████▋  | 4820/6250 [5:00:47<1:32:15,  3.87s/it, gpt_loss=0.626, lr=4.36e-7][A
Train step of epoch 0:  77%|███████▋  | 4821/6250 [5:00:47<1:32:24,  3.88s/it, gpt_loss=0.626, lr=4.36e-7][A
Train step of epoch 0:  77%|███████▋  | 4821/6250 [5:00:50<1:32:24,  3.88s/it, gpt_loss=0.547, lr=4.36e-7][A
Train step of epoch 0:  77%|███████▋  | 4822/6250 [5:00:50<1:23:33,  3.51s/it, gpt_loss=0.547, lr=4.36e-7][A
Train step of epoch 0:  77%|███████▋  | 4822/6250 [5:00:54<1:23:33,  3.51s/it, gpt_loss=0.638, lr=4.36e-7][A
Train step of epoch 0:  77%|███████▋  | 4823/6250 [5:00:54<1:28:58,  3.74s/it, gpt_loss=0.638, lr=4.36e-7][A[2025-04-24 04:53:36,696] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  77%|███████▋  | 4823/6250 [5:00:57<1:28:58,  3.74s/it, gpt_loss=0.692, lr=4.34e-7][A
Train step of epoch 0:  77%|███████▋  | 4824/6250 [5:00:57<1:25:49,  3.61s/it, gpt_loss=0.692, lr=4.34e-7][A
Train step of epoch 0:  77%|███████▋  | 4824/6250 [5:01:01<1:25:49,  3.61s/it, gpt_loss=0.599, lr=4.34e-7][A
Train step of epoch 0:  77%|███████▋  | 4825/6250 [5:01:01<1:24:36,  3.56s/it, gpt_loss=0.599, lr=4.34e-7][A
Train step of epoch 0:  77%|███████▋  | 4825/6250 [5:01:05<1:24:36,  3.56s/it, gpt_loss=0.522, lr=4.34e-7][A
Train step of epoch 0:  77%|███████▋  | 4826/6250 [5:01:05<1:28:48,  3.74s/it, gpt_loss=0.522, lr=4.34e-7][A
Train step of epoch 0:  77%|███████▋  | 4826/6250 [5:01:08<1:28:48,  3.74s/it, gpt_loss=0.588, lr=4.34e-7][A
Train step of epoch 0:  77%|███████▋  | 4827/6250 [5:01:08<1:26:03,  3.63s/it, gpt_loss=0.588, lr=4.34e-7][A[2025-04-24 04:53:51,086] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  77%|███████▋  | 4827/6250 [5:01:12<1:26:03,  3.63s/it, gpt_loss=0.548, lr=4.33e-7][A
Train step of epoch 0:  77%|███████▋  | 4828/6250 [5:01:12<1:24:29,  3.56s/it, gpt_loss=0.548, lr=4.33e-7][A
Train step of epoch 0:  77%|███████▋  | 4828/6250 [5:01:16<1:24:29,  3.56s/it, gpt_loss=0.672, lr=4.33e-7][A
Train step of epoch 0:  77%|███████▋  | 4829/6250 [5:01:16<1:29:28,  3.78s/it, gpt_loss=0.672, lr=4.33e-7][A
Train step of epoch 0:  77%|███████▋  | 4829/6250 [5:01:20<1:29:28,  3.78s/it, gpt_loss=0.531, lr=4.33e-7][A
Train step of epoch 0:  77%|███████▋  | 4830/6250 [5:01:20<1:29:23,  3.78s/it, gpt_loss=0.531, lr=4.33e-7][A
Train step of epoch 0:  77%|███████▋  | 4830/6250 [5:01:24<1:29:23,  3.78s/it, gpt_loss=0.661, lr=4.33e-7][A
Train step of epoch 0:  77%|███████▋  | 4831/6250 [5:01:24<1:31:36,  3.87s/it, gpt_loss=0.661, lr=4.33e-7][A[2025-04-24 04:54:06,404] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  77%|███████▋  | 4831/6250 [5:01:27<1:31:36,  3.87s/it, gpt_loss=0.65, lr=4.32e-7] [A
Train step of epoch 0:  77%|███████▋  | 4832/6250 [5:01:27<1:26:33,  3.66s/it, gpt_loss=0.65, lr=4.32e-7][A
Train step of epoch 0:  77%|███████▋  | 4832/6250 [5:01:32<1:26:33,  3.66s/it, gpt_loss=0.482, lr=4.32e-7][A
Train step of epoch 0:  77%|███████▋  | 4833/6250 [5:01:32<1:32:06,  3.90s/it, gpt_loss=0.482, lr=4.32e-7][A
Train step of epoch 0:  77%|███████▋  | 4833/6250 [5:01:35<1:32:06,  3.90s/it, gpt_loss=0.497, lr=4.32e-7][A
Train step of epoch 0:  77%|███████▋  | 4834/6250 [5:01:35<1:25:28,  3.62s/it, gpt_loss=0.497, lr=4.32e-7][A
Train step of epoch 0:  77%|███████▋  | 4834/6250 [5:01:39<1:25:28,  3.62s/it, gpt_loss=0.771, lr=4.32e-7][A
Train step of epoch 0:  77%|███████▋  | 4835/6250 [5:01:39<1:30:18,  3.83s/it, gpt_loss=0.771, lr=4.32e-7][A[2025-04-24 04:54:21,942] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  77%|███████▋  | 4835/6250 [5:01:43<1:30:18,  3.83s/it, gpt_loss=0.578, lr=4.31e-7][A
Train step of epoch 0:  77%|███████▋  | 4836/6250 [5:01:43<1:30:00,  3.82s/it, gpt_loss=0.578, lr=4.31e-7][A
Train step of epoch 0:  77%|███████▋  | 4836/6250 [5:01:47<1:30:00,  3.82s/it, gpt_loss=0.597, lr=4.31e-7][A
Train step of epoch 0:  77%|███████▋  | 4837/6250 [5:01:47<1:32:03,  3.91s/it, gpt_loss=0.597, lr=4.31e-7][A
Train step of epoch 0:  77%|███████▋  | 4837/6250 [5:01:50<1:32:03,  3.91s/it, gpt_loss=0.604, lr=4.31e-7][A
Train step of epoch 0:  77%|███████▋  | 4838/6250 [5:01:50<1:27:08,  3.70s/it, gpt_loss=0.604, lr=4.31e-7][A
Train step of epoch 0:  77%|███████▋  | 4838/6250 [5:01:54<1:27:08,  3.70s/it, gpt_loss=0.759, lr=4.31e-7][A
Train step of epoch 0:  77%|███████▋  | 4839/6250 [5:01:54<1:25:34,  3.64s/it, gpt_loss=0.759, lr=4.31e-7][A[2025-04-24 04:54:36,832] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  77%|███████▋  | 4839/6250 [5:01:58<1:25:34,  3.64s/it, gpt_loss=0.571, lr=4.29e-7][A
Train step of epoch 0:  77%|███████▋  | 4840/6250 [5:01:58<1:28:29,  3.77s/it, gpt_loss=0.571, lr=4.29e-7][A
Train step of epoch 0:  77%|███████▋  | 4840/6250 [5:02:01<1:28:29,  3.77s/it, gpt_loss=0.588, lr=4.29e-7][A
Train step of epoch 0:  77%|███████▋  | 4841/6250 [5:02:01<1:27:59,  3.75s/it, gpt_loss=0.588, lr=4.29e-7][A
Train step of epoch 0:  77%|███████▋  | 4841/6250 [5:02:04<1:27:59,  3.75s/it, gpt_loss=0.702, lr=4.29e-7][A
Train step of epoch 0:  77%|███████▋  | 4842/6250 [5:02:04<1:24:01,  3.58s/it, gpt_loss=0.702, lr=4.29e-7][A
Train step of epoch 0:  77%|███████▋  | 4842/6250 [5:02:09<1:24:01,  3.58s/it, gpt_loss=0.79, lr=4.29e-7] [A
Train step of epoch 0:  77%|███████▋  | 4843/6250 [5:02:09<1:31:18,  3.89s/it, gpt_loss=0.79, lr=4.29e-7][A[2025-04-24 04:54:51,927] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  77%|███████▋  | 4843/6250 [5:02:13<1:31:18,  3.89s/it, gpt_loss=0.683, lr=4.28e-7][A
Train step of epoch 0:  78%|███████▊  | 4844/6250 [5:02:13<1:28:59,  3.80s/it, gpt_loss=0.683, lr=4.28e-7][A
Train step of epoch 0:  78%|███████▊  | 4844/6250 [5:02:17<1:28:59,  3.80s/it, gpt_loss=0.723, lr=4.28e-7][A
Train step of epoch 0:  78%|███████▊  | 4845/6250 [5:02:17<1:30:44,  3.87s/it, gpt_loss=0.723, lr=4.28e-7][A
Train step of epoch 0:  78%|███████▊  | 4845/6250 [5:02:20<1:30:44,  3.87s/it, gpt_loss=0.541, lr=4.28e-7][A
Train step of epoch 0:  78%|███████▊  | 4846/6250 [5:02:20<1:28:08,  3.77s/it, gpt_loss=0.541, lr=4.28e-7][A
Train step of epoch 0:  78%|███████▊  | 4846/6250 [5:02:24<1:28:08,  3.77s/it, gpt_loss=0.785, lr=4.28e-7][A
Train step of epoch 0:  78%|███████▊  | 4847/6250 [5:02:24<1:25:48,  3.67s/it, gpt_loss=0.785, lr=4.28e-7][A[2025-04-24 04:55:05,592] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  78%|███████▊  | 4847/6250 [5:02:26<1:25:48,  3.67s/it, gpt_loss=0.599, lr=4.27e-7][A
Train step of epoch 0:  78%|███████▊  | 4848/6250 [5:02:26<1:18:37,  3.36s/it, gpt_loss=0.599, lr=4.27e-7][A
Train step of epoch 0:  78%|███████▊  | 4848/6250 [5:02:30<1:18:37,  3.36s/it, gpt_loss=0.563, lr=4.27e-7][A
Train step of epoch 0:  78%|███████▊  | 4849/6250 [5:02:30<1:17:44,  3.33s/it, gpt_loss=0.563, lr=4.27e-7][A
Train step of epoch 0:  78%|███████▊  | 4849/6250 [5:02:33<1:17:44,  3.33s/it, gpt_loss=0.572, lr=4.27e-7][A
Train step of epoch 0:  78%|███████▊  | 4850/6250 [5:02:33<1:16:11,  3.27s/it, gpt_loss=0.572, lr=4.27e-7][A
Train step of epoch 0:  78%|███████▊  | 4850/6250 [5:02:36<1:16:11,  3.27s/it, gpt_loss=0.591, lr=4.27e-7][A
Train step of epoch 0:  78%|███████▊  | 4851/6250 [5:02:36<1:17:17,  3.31s/it, gpt_loss=0.591, lr=4.27e-7][A[2025-04-24 04:55:19,105] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  78%|███████▊  | 4851/6250 [5:02:40<1:17:17,  3.31s/it, gpt_loss=0.775, lr=4.26e-7][A
Train step of epoch 0:  78%|███████▊  | 4852/6250 [5:02:40<1:20:04,  3.44s/it, gpt_loss=0.775, lr=4.26e-7][A
Train step of epoch 0:  78%|███████▊  | 4852/6250 [5:02:44<1:20:04,  3.44s/it, gpt_loss=0.581, lr=4.26e-7][A
Train step of epoch 0:  78%|███████▊  | 4853/6250 [5:02:44<1:24:57,  3.65s/it, gpt_loss=0.581, lr=4.26e-7][A
Train step of epoch 0:  78%|███████▊  | 4853/6250 [5:02:47<1:24:57,  3.65s/it, gpt_loss=0.722, lr=4.26e-7][A
Train step of epoch 0:  78%|███████▊  | 4854/6250 [5:02:47<1:22:10,  3.53s/it, gpt_loss=0.722, lr=4.26e-7][A
Train step of epoch 0:  78%|███████▊  | 4854/6250 [5:02:50<1:22:10,  3.53s/it, gpt_loss=0.628, lr=4.26e-7][A
Train step of epoch 0:  78%|███████▊  | 4855/6250 [5:02:50<1:16:42,  3.30s/it, gpt_loss=0.628, lr=4.26e-7][A[2025-04-24 04:55:32,681] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  78%|███████▊  | 4855/6250 [5:02:53<1:16:42,  3.30s/it, gpt_loss=0.531, lr=4.24e-7][A
Train step of epoch 0:  78%|███████▊  | 4856/6250 [5:02:53<1:17:27,  3.33s/it, gpt_loss=0.531, lr=4.24e-7][A
Train step of epoch 0:  78%|███████▊  | 4856/6250 [5:02:58<1:17:27,  3.33s/it, gpt_loss=0.657, lr=4.24e-7][A
Train step of epoch 0:  78%|███████▊  | 4857/6250 [5:02:58<1:22:27,  3.55s/it, gpt_loss=0.657, lr=4.24e-7][A
Train step of epoch 0:  78%|███████▊  | 4857/6250 [5:03:00<1:22:27,  3.55s/it, gpt_loss=0.417, lr=4.24e-7][A
Train step of epoch 0:  78%|███████▊  | 4858/6250 [5:03:00<1:17:50,  3.36s/it, gpt_loss=0.417, lr=4.24e-7][A
Train step of epoch 0:  78%|███████▊  | 4858/6250 [5:03:05<1:17:50,  3.36s/it, gpt_loss=0.646, lr=4.24e-7][A
Train step of epoch 0:  78%|███████▊  | 4859/6250 [5:03:05<1:23:38,  3.61s/it, gpt_loss=0.646, lr=4.24e-7][A[2025-04-24 04:55:48,031] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  78%|███████▊  | 4859/6250 [5:03:09<1:23:38,  3.61s/it, gpt_loss=0.655, lr=4.23e-7][A
Train step of epoch 0:  78%|███████▊  | 4860/6250 [5:03:09<1:27:40,  3.78s/it, gpt_loss=0.655, lr=4.23e-7][A
Train step of epoch 0:  78%|███████▊  | 4860/6250 [5:03:13<1:27:40,  3.78s/it, gpt_loss=0.667, lr=4.23e-7][A
Train step of epoch 0:  78%|███████▊  | 4861/6250 [5:03:13<1:29:19,  3.86s/it, gpt_loss=0.667, lr=4.23e-7][A
Train step of epoch 0:  78%|███████▊  | 4861/6250 [5:03:16<1:29:19,  3.86s/it, gpt_loss=0.615, lr=4.23e-7][A
Train step of epoch 0:  78%|███████▊  | 4862/6250 [5:03:16<1:26:27,  3.74s/it, gpt_loss=0.615, lr=4.23e-7][A
Train step of epoch 0:  78%|███████▊  | 4862/6250 [5:03:20<1:26:27,  3.74s/it, gpt_loss=0.637, lr=4.23e-7][A
Train step of epoch 0:  78%|███████▊  | 4863/6250 [5:03:20<1:25:13,  3.69s/it, gpt_loss=0.637, lr=4.23e-7][A[2025-04-24 04:56:02,887] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  78%|███████▊  | 4863/6250 [5:03:24<1:25:13,  3.69s/it, gpt_loss=0.524, lr=4.22e-7][A
Train step of epoch 0:  78%|███████▊  | 4864/6250 [5:03:24<1:25:57,  3.72s/it, gpt_loss=0.524, lr=4.22e-7][A
Train step of epoch 0:  78%|███████▊  | 4864/6250 [5:03:28<1:25:57,  3.72s/it, gpt_loss=0.647, lr=4.22e-7][A
Train step of epoch 0:  78%|███████▊  | 4865/6250 [5:03:28<1:31:48,  3.98s/it, gpt_loss=0.647, lr=4.22e-7][A
Train step of epoch 0:  78%|███████▊  | 4865/6250 [5:03:32<1:31:48,  3.98s/it, gpt_loss=0.634, lr=4.22e-7][A
Train step of epoch 0:  78%|███████▊  | 4866/6250 [5:03:32<1:29:55,  3.90s/it, gpt_loss=0.634, lr=4.22e-7][A
Train step of epoch 0:  78%|███████▊  | 4866/6250 [5:03:36<1:29:55,  3.90s/it, gpt_loss=0.56, lr=4.22e-7] [A
Train step of epoch 0:  78%|███████▊  | 4867/6250 [5:03:36<1:28:24,  3.84s/it, gpt_loss=0.56, lr=4.22e-7][A[2025-04-24 04:56:18,853] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  78%|███████▊  | 4867/6250 [5:03:40<1:28:24,  3.84s/it, gpt_loss=0.695, lr=4.21e-7][A
Train step of epoch 0:  78%|███████▊  | 4868/6250 [5:03:40<1:29:23,  3.88s/it, gpt_loss=0.695, lr=4.21e-7][A
Train step of epoch 0:  78%|███████▊  | 4868/6250 [5:03:43<1:29:23,  3.88s/it, gpt_loss=0.583, lr=4.21e-7][A
Train step of epoch 0:  78%|███████▊  | 4869/6250 [5:03:43<1:28:54,  3.86s/it, gpt_loss=0.583, lr=4.21e-7][A
Train step of epoch 0:  78%|███████▊  | 4869/6250 [5:03:46<1:28:54,  3.86s/it, gpt_loss=0.684, lr=4.21e-7][A
Train step of epoch 0:  78%|███████▊  | 4870/6250 [5:03:46<1:20:35,  3.50s/it, gpt_loss=0.684, lr=4.21e-7][A
Train step of epoch 0:  78%|███████▊  | 4870/6250 [5:03:50<1:20:35,  3.50s/it, gpt_loss=0.57, lr=4.21e-7] [A
Train step of epoch 0:  78%|███████▊  | 4871/6250 [5:03:50<1:23:03,  3.61s/it, gpt_loss=0.57, lr=4.21e-7][A[2025-04-24 04:56:33,694] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  78%|███████▊  | 4871/6250 [5:03:54<1:23:03,  3.61s/it, gpt_loss=0.634, lr=4.19e-7][A
Train step of epoch 0:  78%|███████▊  | 4872/6250 [5:03:54<1:28:59,  3.88s/it, gpt_loss=0.634, lr=4.19e-7][A
Train step of epoch 0:  78%|███████▊  | 4872/6250 [5:03:58<1:28:59,  3.88s/it, gpt_loss=0.496, lr=4.19e-7][A
Train step of epoch 0:  78%|███████▊  | 4873/6250 [5:03:58<1:28:07,  3.84s/it, gpt_loss=0.496, lr=4.19e-7][A
Train step of epoch 0:  78%|███████▊  | 4873/6250 [5:04:02<1:28:07,  3.84s/it, gpt_loss=0.693, lr=4.19e-7][A
Train step of epoch 0:  78%|███████▊  | 4874/6250 [5:04:02<1:27:37,  3.82s/it, gpt_loss=0.693, lr=4.19e-7][A
Train step of epoch 0:  78%|███████▊  | 4874/6250 [5:04:05<1:27:37,  3.82s/it, gpt_loss=0.548, lr=4.19e-7][A
Train step of epoch 0:  78%|███████▊  | 4875/6250 [5:04:05<1:22:27,  3.60s/it, gpt_loss=0.548, lr=4.19e-7][A[2025-04-24 04:56:47,858] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  78%|███████▊  | 4875/6250 [5:04:09<1:22:27,  3.60s/it, gpt_loss=0.464, lr=4.18e-7][A
Train step of epoch 0:  78%|███████▊  | 4876/6250 [5:04:09<1:22:04,  3.58s/it, gpt_loss=0.464, lr=4.18e-7][A
Train step of epoch 0:  78%|███████▊  | 4876/6250 [5:04:13<1:22:04,  3.58s/it, gpt_loss=0.672, lr=4.18e-7][A
Train step of epoch 0:  78%|███████▊  | 4877/6250 [5:04:13<1:29:50,  3.93s/it, gpt_loss=0.672, lr=4.18e-7][A
Train step of epoch 0:  78%|███████▊  | 4877/6250 [5:04:16<1:29:50,  3.93s/it, gpt_loss=0.653, lr=4.18e-7][A
Train step of epoch 0:  78%|███████▊  | 4878/6250 [5:04:16<1:24:08,  3.68s/it, gpt_loss=0.653, lr=4.18e-7][A
Train step of epoch 0:  78%|███████▊  | 4878/6250 [5:04:20<1:24:08,  3.68s/it, gpt_loss=0.598, lr=4.18e-7][A
Train step of epoch 0:  78%|███████▊  | 4879/6250 [5:04:20<1:19:48,  3.49s/it, gpt_loss=0.598, lr=4.18e-7][A[2025-04-24 04:57:01,648] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  78%|███████▊  | 4879/6250 [5:04:22<1:19:48,  3.49s/it, gpt_loss=0.48, lr=4.17e-7] [A
Train step of epoch 0:  78%|███████▊  | 4880/6250 [5:04:22<1:15:43,  3.32s/it, gpt_loss=0.48, lr=4.17e-7][A
Train step of epoch 0:  78%|███████▊  | 4880/6250 [5:04:26<1:15:43,  3.32s/it, gpt_loss=0.571, lr=4.17e-7][A
Train step of epoch 0:  78%|███████▊  | 4881/6250 [5:04:26<1:18:37,  3.45s/it, gpt_loss=0.571, lr=4.17e-7][A
Train step of epoch 0:  78%|███████▊  | 4881/6250 [5:04:29<1:18:37,  3.45s/it, gpt_loss=0.643, lr=4.17e-7][A
Train step of epoch 0:  78%|███████▊  | 4882/6250 [5:04:29<1:16:22,  3.35s/it, gpt_loss=0.643, lr=4.17e-7][A
Train step of epoch 0:  78%|███████▊  | 4882/6250 [5:04:34<1:16:22,  3.35s/it, gpt_loss=0.604, lr=4.17e-7][A
Train step of epoch 0:  78%|███████▊  | 4883/6250 [5:04:34<1:22:24,  3.62s/it, gpt_loss=0.604, lr=4.17e-7][A[2025-04-24 04:57:16,369] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  78%|███████▊  | 4883/6250 [5:04:37<1:22:24,  3.62s/it, gpt_loss=0.544, lr=4.16e-7][A
Train step of epoch 0:  78%|███████▊  | 4884/6250 [5:04:37<1:22:16,  3.61s/it, gpt_loss=0.544, lr=4.16e-7][A
Train step of epoch 0:  78%|███████▊  | 4884/6250 [5:04:41<1:22:16,  3.61s/it, gpt_loss=0.55, lr=4.16e-7] [A
Train step of epoch 0:  78%|███████▊  | 4885/6250 [5:04:41<1:26:02,  3.78s/it, gpt_loss=0.55, lr=4.16e-7][A
Train step of epoch 0:  78%|███████▊  | 4885/6250 [5:04:45<1:26:02,  3.78s/it, gpt_loss=0.568, lr=4.16e-7][A
Train step of epoch 0:  78%|███████▊  | 4886/6250 [5:04:45<1:26:57,  3.83s/it, gpt_loss=0.568, lr=4.16e-7][A
Train step of epoch 0:  78%|███████▊  | 4886/6250 [5:04:48<1:26:57,  3.83s/it, gpt_loss=0.599, lr=4.16e-7][A
Train step of epoch 0:  78%|███████▊  | 4887/6250 [5:04:48<1:21:56,  3.61s/it, gpt_loss=0.599, lr=4.16e-7][A[2025-04-24 04:57:31,042] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  78%|███████▊  | 4887/6250 [5:04:52<1:21:56,  3.61s/it, gpt_loss=0.616, lr=4.15e-7][A
Train step of epoch 0:  78%|███████▊  | 4888/6250 [5:04:52<1:20:58,  3.57s/it, gpt_loss=0.616, lr=4.15e-7][A
Train step of epoch 0:  78%|███████▊  | 4888/6250 [5:04:54<1:20:58,  3.57s/it, gpt_loss=0.567, lr=4.15e-7][A
Train step of epoch 0:  78%|███████▊  | 4889/6250 [5:04:54<1:13:07,  3.22s/it, gpt_loss=0.567, lr=4.15e-7][A
Train step of epoch 0:  78%|███████▊  | 4889/6250 [5:04:58<1:13:07,  3.22s/it, gpt_loss=0.415, lr=4.15e-7][A
Train step of epoch 0:  78%|███████▊  | 4890/6250 [5:04:58<1:13:25,  3.24s/it, gpt_loss=0.415, lr=4.15e-7][A
Train step of epoch 0:  78%|███████▊  | 4890/6250 [5:05:00<1:13:25,  3.24s/it, gpt_loss=0.621, lr=4.15e-7][A
Train step of epoch 0:  78%|███████▊  | 4891/6250 [5:05:00<1:10:30,  3.11s/it, gpt_loss=0.621, lr=4.15e-7][A[2025-04-24 04:57:42,466] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  78%|███████▊  | 4891/6250 [5:05:03<1:10:30,  3.11s/it, gpt_loss=0.531, lr=4.13e-7][A
Train step of epoch 0:  78%|███████▊  | 4892/6250 [5:05:03<1:09:03,  3.05s/it, gpt_loss=0.531, lr=4.13e-7][A
Train step of epoch 0:  78%|███████▊  | 4892/6250 [5:05:07<1:09:03,  3.05s/it, gpt_loss=0.459, lr=4.13e-7][A
Train step of epoch 0:  78%|███████▊  | 4893/6250 [5:05:07<1:13:37,  3.26s/it, gpt_loss=0.459, lr=4.13e-7][A
Train step of epoch 0:  78%|███████▊  | 4893/6250 [5:05:11<1:13:37,  3.26s/it, gpt_loss=0.594, lr=4.13e-7][A
Train step of epoch 0:  78%|███████▊  | 4894/6250 [5:05:11<1:18:27,  3.47s/it, gpt_loss=0.594, lr=4.13e-7][A
Train step of epoch 0:  78%|███████▊  | 4894/6250 [5:05:15<1:18:27,  3.47s/it, gpt_loss=0.677, lr=4.13e-7][A
Train step of epoch 0:  78%|███████▊  | 4895/6250 [5:05:15<1:25:20,  3.78s/it, gpt_loss=0.677, lr=4.13e-7][A[2025-04-24 04:57:59,035] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  78%|███████▊  | 4895/6250 [5:05:20<1:25:20,  3.78s/it, gpt_loss=0.581, lr=4.12e-7][A
Train step of epoch 0:  78%|███████▊  | 4896/6250 [5:05:20<1:29:14,  3.95s/it, gpt_loss=0.581, lr=4.12e-7][A
Train step of epoch 0:  78%|███████▊  | 4896/6250 [5:05:24<1:29:14,  3.95s/it, gpt_loss=0.761, lr=4.12e-7][A
Train step of epoch 0:  78%|███████▊  | 4897/6250 [5:05:24<1:29:10,  3.95s/it, gpt_loss=0.761, lr=4.12e-7][A
Train step of epoch 0:  78%|███████▊  | 4897/6250 [5:05:27<1:29:10,  3.95s/it, gpt_loss=0.7, lr=4.12e-7]  [A
Train step of epoch 0:  78%|███████▊  | 4898/6250 [5:05:27<1:23:21,  3.70s/it, gpt_loss=0.7, lr=4.12e-7][A
Train step of epoch 0:  78%|███████▊  | 4898/6250 [5:05:30<1:23:21,  3.70s/it, gpt_loss=0.51, lr=4.12e-7][A
Train step of epoch 0:  78%|███████▊  | 4899/6250 [5:05:30<1:21:11,  3.61s/it, gpt_loss=0.51, lr=4.12e-7][A[2025-04-24 04:58:13,565] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  78%|███████▊  | 4899/6250 [5:05:34<1:21:11,  3.61s/it, gpt_loss=0.539, lr=4.11e-7][A
Train step of epoch 0:  78%|███████▊  | 4900/6250 [5:05:34<1:24:21,  3.75s/it, gpt_loss=0.539, lr=4.11e-7][A
Train step of epoch 0:  78%|███████▊  | 4900/6250 [5:05:39<1:24:21,  3.75s/it, gpt_loss=0.583, lr=4.11e-7][A
Train step of epoch 0:  78%|███████▊  | 4901/6250 [5:05:39<1:28:50,  3.95s/it, gpt_loss=0.583, lr=4.11e-7][A
Train step of epoch 0:  78%|███████▊  | 4901/6250 [5:05:43<1:28:50,  3.95s/it, gpt_loss=0.69, lr=4.11e-7] [A
Train step of epoch 0:  78%|███████▊  | 4902/6250 [5:05:43<1:28:21,  3.93s/it, gpt_loss=0.69, lr=4.11e-7][A
Train step of epoch 0:  78%|███████▊  | 4902/6250 [5:05:46<1:28:21,  3.93s/it, gpt_loss=0.492, lr=4.11e-7][A
Train step of epoch 0:  78%|███████▊  | 4903/6250 [5:05:46<1:25:29,  3.81s/it, gpt_loss=0.492, lr=4.11e-7][A[2025-04-24 04:58:28,665] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  78%|███████▊  | 4903/6250 [5:05:49<1:25:29,  3.81s/it, gpt_loss=0.578, lr=4.1e-7] [A
Train step of epoch 0:  78%|███████▊  | 4904/6250 [5:05:49<1:21:48,  3.65s/it, gpt_loss=0.578, lr=4.1e-7][A
Train step of epoch 0:  78%|███████▊  | 4904/6250 [5:05:54<1:21:48,  3.65s/it, gpt_loss=0.627, lr=4.1e-7][A
Train step of epoch 0:  78%|███████▊  | 4905/6250 [5:05:54<1:25:06,  3.80s/it, gpt_loss=0.627, lr=4.1e-7][A
Train step of epoch 0:  78%|███████▊  | 4905/6250 [5:05:57<1:25:06,  3.80s/it, gpt_loss=0.505, lr=4.1e-7][A
Train step of epoch 0:  78%|███████▊  | 4906/6250 [5:05:57<1:20:49,  3.61s/it, gpt_loss=0.505, lr=4.1e-7][A
Train step of epoch 0:  78%|███████▊  | 4906/6250 [5:06:02<1:20:49,  3.61s/it, gpt_loss=0.504, lr=4.1e-7][A
Train step of epoch 0:  79%|███████▊  | 4907/6250 [5:06:02<1:28:45,  3.97s/it, gpt_loss=0.504, lr=4.1e-7][A[2025-04-24 04:58:44,665] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  79%|███████▊  | 4907/6250 [5:06:05<1:28:45,  3.97s/it, gpt_loss=0.549, lr=4.09e-7][A
Train step of epoch 0:  79%|███████▊  | 4908/6250 [5:06:05<1:28:09,  3.94s/it, gpt_loss=0.549, lr=4.09e-7][A
Train step of epoch 0:  79%|███████▊  | 4908/6250 [5:06:10<1:28:09,  3.94s/it, gpt_loss=0.595, lr=4.09e-7][A
Train step of epoch 0:  79%|███████▊  | 4909/6250 [5:06:10<1:29:31,  4.01s/it, gpt_loss=0.595, lr=4.09e-7][A
Train step of epoch 0:  79%|███████▊  | 4909/6250 [5:06:13<1:29:31,  4.01s/it, gpt_loss=0.623, lr=4.09e-7][A
Train step of epoch 0:  79%|███████▊  | 4910/6250 [5:06:13<1:27:38,  3.92s/it, gpt_loss=0.623, lr=4.09e-7][A
Train step of epoch 0:  79%|███████▊  | 4910/6250 [5:06:15<1:27:38,  3.92s/it, gpt_loss=0.556, lr=4.09e-7][A
Train step of epoch 0:  79%|███████▊  | 4911/6250 [5:06:15<1:13:01,  3.27s/it, gpt_loss=0.556, lr=4.09e-7][A[2025-04-24 04:58:58,449] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  79%|███████▊  | 4911/6250 [5:06:19<1:13:01,  3.27s/it, gpt_loss=0.592, lr=4.07e-7][A
Train step of epoch 0:  79%|███████▊  | 4912/6250 [5:06:19<1:18:47,  3.53s/it, gpt_loss=0.592, lr=4.07e-7][A
Train step of epoch 0:  79%|███████▊  | 4912/6250 [5:06:23<1:18:47,  3.53s/it, gpt_loss=0.64, lr=4.07e-7] [A
Train step of epoch 0:  79%|███████▊  | 4913/6250 [5:06:23<1:20:47,  3.63s/it, gpt_loss=0.64, lr=4.07e-7][A
Train step of epoch 0:  79%|███████▊  | 4913/6250 [5:06:26<1:20:47,  3.63s/it, gpt_loss=0.657, lr=4.07e-7][A
Train step of epoch 0:  79%|███████▊  | 4914/6250 [5:06:26<1:18:57,  3.55s/it, gpt_loss=0.657, lr=4.07e-7][A
Train step of epoch 0:  79%|███████▊  | 4914/6250 [5:06:30<1:18:57,  3.55s/it, gpt_loss=0.543, lr=4.07e-7][A
Train step of epoch 0:  79%|███████▊  | 4915/6250 [5:06:30<1:19:13,  3.56s/it, gpt_loss=0.543, lr=4.07e-7][A[2025-04-24 04:59:13,558] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  79%|███████▊  | 4915/6250 [5:06:34<1:19:13,  3.56s/it, gpt_loss=0.61, lr=4.06e-7] [A
Train step of epoch 0:  79%|███████▊  | 4916/6250 [5:06:34<1:24:10,  3.79s/it, gpt_loss=0.61, lr=4.06e-7][A
Train step of epoch 0:  79%|███████▊  | 4916/6250 [5:06:38<1:24:10,  3.79s/it, gpt_loss=0.541, lr=4.06e-7][A
Train step of epoch 0:  79%|███████▊  | 4917/6250 [5:06:38<1:21:45,  3.68s/it, gpt_loss=0.541, lr=4.06e-7][A
Train step of epoch 0:  79%|███████▊  | 4917/6250 [5:06:41<1:21:45,  3.68s/it, gpt_loss=0.49, lr=4.06e-7] [A
Train step of epoch 0:  79%|███████▊  | 4918/6250 [5:06:41<1:16:40,  3.45s/it, gpt_loss=0.49, lr=4.06e-7][A
Train step of epoch 0:  79%|███████▊  | 4918/6250 [5:06:45<1:16:40,  3.45s/it, gpt_loss=0.687, lr=4.06e-7][A
Train step of epoch 0:  79%|███████▊  | 4919/6250 [5:06:45<1:25:03,  3.83s/it, gpt_loss=0.687, lr=4.06e-7][A[2025-04-24 04:59:28,486] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  79%|███████▊  | 4919/6250 [5:06:49<1:25:03,  3.83s/it, gpt_loss=0.56, lr=4.05e-7] [A
Train step of epoch 0:  79%|███████▊  | 4920/6250 [5:06:49<1:25:04,  3.84s/it, gpt_loss=0.56, lr=4.05e-7][A
Train step of epoch 0:  79%|███████▊  | 4920/6250 [5:06:53<1:25:04,  3.84s/it, gpt_loss=0.624, lr=4.05e-7][A
Train step of epoch 0:  79%|███████▊  | 4921/6250 [5:06:53<1:22:14,  3.71s/it, gpt_loss=0.624, lr=4.05e-7][A
Train step of epoch 0:  79%|███████▊  | 4921/6250 [5:06:56<1:22:14,  3.71s/it, gpt_loss=0.541, lr=4.05e-7][A
Train step of epoch 0:  79%|███████▉  | 4922/6250 [5:06:56<1:19:19,  3.58s/it, gpt_loss=0.541, lr=4.05e-7][A
Train step of epoch 0:  79%|███████▉  | 4922/6250 [5:07:00<1:19:19,  3.58s/it, gpt_loss=0.581, lr=4.05e-7][A
Train step of epoch 0:  79%|███████▉  | 4923/6250 [5:07:00<1:22:51,  3.75s/it, gpt_loss=0.581, lr=4.05e-7][A[2025-04-24 04:59:43,047] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  79%|███████▉  | 4923/6250 [5:07:04<1:22:51,  3.75s/it, gpt_loss=0.703, lr=4.04e-7][A
Train step of epoch 0:  79%|███████▉  | 4924/6250 [5:07:04<1:22:41,  3.74s/it, gpt_loss=0.703, lr=4.04e-7][A
Train step of epoch 0:  79%|███████▉  | 4924/6250 [5:07:07<1:22:41,  3.74s/it, gpt_loss=0.596, lr=4.04e-7][A
Train step of epoch 0:  79%|███████▉  | 4925/6250 [5:07:07<1:19:36,  3.60s/it, gpt_loss=0.596, lr=4.04e-7][A
Train step of epoch 0:  79%|███████▉  | 4925/6250 [5:07:11<1:19:36,  3.60s/it, gpt_loss=0.629, lr=4.04e-7][A
Train step of epoch 0:  79%|███████▉  | 4926/6250 [5:07:11<1:23:08,  3.77s/it, gpt_loss=0.629, lr=4.04e-7][A
Train step of epoch 0:  79%|███████▉  | 4926/6250 [5:07:16<1:23:08,  3.77s/it, gpt_loss=0.577, lr=4.04e-7][A
Train step of epoch 0:  79%|███████▉  | 4927/6250 [5:07:16<1:27:23,  3.96s/it, gpt_loss=0.577, lr=4.04e-7][A[2025-04-24 04:59:58,360] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  79%|███████▉  | 4927/6250 [5:07:19<1:27:23,  3.96s/it, gpt_loss=0.618, lr=4.03e-7][A
Train step of epoch 0:  79%|███████▉  | 4928/6250 [5:07:19<1:23:59,  3.81s/it, gpt_loss=0.618, lr=4.03e-7][A
Train step of epoch 0:  79%|███████▉  | 4928/6250 [5:07:23<1:23:59,  3.81s/it, gpt_loss=0.419, lr=4.03e-7][A
Train step of epoch 0:  79%|███████▉  | 4929/6250 [5:07:23<1:26:26,  3.93s/it, gpt_loss=0.419, lr=4.03e-7][A
Train step of epoch 0:  79%|███████▉  | 4929/6250 [5:07:28<1:26:26,  3.93s/it, gpt_loss=0.479, lr=4.03e-7][A
Train step of epoch 0:  79%|███████▉  | 4930/6250 [5:07:28<1:28:30,  4.02s/it, gpt_loss=0.479, lr=4.03e-7][A
Train step of epoch 0:  79%|███████▉  | 4930/6250 [5:07:32<1:28:30,  4.02s/it, gpt_loss=0.586, lr=4.03e-7][A
Train step of epoch 0:  79%|███████▉  | 4931/6250 [5:07:32<1:28:01,  4.00s/it, gpt_loss=0.586, lr=4.03e-7][A[2025-04-24 05:00:14,928] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  79%|███████▉  | 4931/6250 [5:07:36<1:28:01,  4.00s/it, gpt_loss=0.519, lr=4.01e-7][A
Train step of epoch 0:  79%|███████▉  | 4932/6250 [5:07:36<1:29:01,  4.05s/it, gpt_loss=0.519, lr=4.01e-7][A
Train step of epoch 0:  79%|███████▉  | 4932/6250 [5:07:39<1:29:01,  4.05s/it, gpt_loss=0.502, lr=4.01e-7][A
Train step of epoch 0:  79%|███████▉  | 4933/6250 [5:07:39<1:23:07,  3.79s/it, gpt_loss=0.502, lr=4.01e-7][A
Train step of epoch 0:  79%|███████▉  | 4933/6250 [5:07:44<1:23:07,  3.79s/it, gpt_loss=0.605, lr=4.01e-7][A
Train step of epoch 0:  79%|███████▉  | 4934/6250 [5:07:44<1:29:03,  4.06s/it, gpt_loss=0.605, lr=4.01e-7][A
Train step of epoch 0:  79%|███████▉  | 4934/6250 [5:07:47<1:29:03,  4.06s/it, gpt_loss=0.682, lr=4.01e-7][A
Train step of epoch 0:  79%|███████▉  | 4935/6250 [5:07:47<1:26:34,  3.95s/it, gpt_loss=0.682, lr=4.01e-7][A[2025-04-24 05:00:29,363] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  79%|███████▉  | 4935/6250 [5:07:50<1:26:34,  3.95s/it, gpt_loss=0.567, lr=4e-7]   [A
Train step of epoch 0:  79%|███████▉  | 4936/6250 [5:07:50<1:19:27,  3.63s/it, gpt_loss=0.567, lr=4e-7][A
Train step of epoch 0:  79%|███████▉  | 4936/6250 [5:07:53<1:19:27,  3.63s/it, gpt_loss=0.432, lr=4e-7][A
Train step of epoch 0:  79%|███████▉  | 4937/6250 [5:07:53<1:11:57,  3.29s/it, gpt_loss=0.432, lr=4e-7][A
Train step of epoch 0:  79%|███████▉  | 4937/6250 [5:07:56<1:11:57,  3.29s/it, gpt_loss=0.578, lr=4e-7][A
Train step of epoch 0:  79%|███████▉  | 4938/6250 [5:07:56<1:13:09,  3.35s/it, gpt_loss=0.578, lr=4e-7][A
Train step of epoch 0:  79%|███████▉  | 4938/6250 [5:07:59<1:13:09,  3.35s/it, gpt_loss=0.545, lr=4e-7][A
Train step of epoch 0:  79%|███████▉  | 4939/6250 [5:07:59<1:08:11,  3.12s/it, gpt_loss=0.545, lr=4e-7][A[2025-04-24 05:00:43,286] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  79%|███████▉  | 4939/6250 [5:08:04<1:08:11,  3.12s/it, gpt_loss=0.441, lr=3.99e-7][A
Train step of epoch 0:  79%|███████▉  | 4940/6250 [5:08:04<1:22:45,  3.79s/it, gpt_loss=0.441, lr=3.99e-7][A
Train step of epoch 0:  79%|███████▉  | 4940/6250 [5:08:08<1:22:45,  3.79s/it, gpt_loss=0.489, lr=3.99e-7][A
Train step of epoch 0:  79%|███████▉  | 4941/6250 [5:08:08<1:20:47,  3.70s/it, gpt_loss=0.489, lr=3.99e-7][A
Train step of epoch 0:  79%|███████▉  | 4941/6250 [5:08:11<1:20:47,  3.70s/it, gpt_loss=0.729, lr=3.99e-7][A
Train step of epoch 0:  79%|███████▉  | 4942/6250 [5:08:11<1:19:29,  3.65s/it, gpt_loss=0.729, lr=3.99e-7][A
Train step of epoch 0:  79%|███████▉  | 4942/6250 [5:08:15<1:19:29,  3.65s/it, gpt_loss=0.644, lr=3.99e-7][A
Train step of epoch 0:  79%|███████▉  | 4943/6250 [5:08:15<1:23:01,  3.81s/it, gpt_loss=0.644, lr=3.99e-7][A[2025-04-24 05:00:58,432] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  79%|███████▉  | 4943/6250 [5:08:19<1:23:01,  3.81s/it, gpt_loss=0.667, lr=3.98e-7][A
Train step of epoch 0:  79%|███████▉  | 4944/6250 [5:08:19<1:23:46,  3.85s/it, gpt_loss=0.667, lr=3.98e-7][A
Train step of epoch 0:  79%|███████▉  | 4944/6250 [5:08:23<1:23:46,  3.85s/it, gpt_loss=0.703, lr=3.98e-7][A
Train step of epoch 0:  79%|███████▉  | 4945/6250 [5:08:23<1:23:53,  3.86s/it, gpt_loss=0.703, lr=3.98e-7][A
Train step of epoch 0:  79%|███████▉  | 4945/6250 [5:08:27<1:23:53,  3.86s/it, gpt_loss=0.487, lr=3.98e-7][A
Train step of epoch 0:  79%|███████▉  | 4946/6250 [5:08:27<1:21:32,  3.75s/it, gpt_loss=0.487, lr=3.98e-7][A
Train step of epoch 0:  79%|███████▉  | 4946/6250 [5:08:30<1:21:32,  3.75s/it, gpt_loss=0.619, lr=3.98e-7][A
Train step of epoch 0:  79%|███████▉  | 4947/6250 [5:08:30<1:21:29,  3.75s/it, gpt_loss=0.619, lr=3.98e-7][A[2025-04-24 05:01:14,137] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  79%|███████▉  | 4947/6250 [5:08:35<1:21:29,  3.75s/it, gpt_loss=0.403, lr=3.97e-7][A
Train step of epoch 0:  79%|███████▉  | 4948/6250 [5:08:35<1:26:44,  4.00s/it, gpt_loss=0.403, lr=3.97e-7][A
Train step of epoch 0:  79%|███████▉  | 4948/6250 [5:08:39<1:26:44,  4.00s/it, gpt_loss=0.736, lr=3.97e-7][A
Train step of epoch 0:  79%|███████▉  | 4949/6250 [5:08:39<1:27:09,  4.02s/it, gpt_loss=0.736, lr=3.97e-7][A
Train step of epoch 0:  79%|███████▉  | 4949/6250 [5:08:42<1:27:09,  4.02s/it, gpt_loss=0.449, lr=3.97e-7][A
Train step of epoch 0:  79%|███████▉  | 4950/6250 [5:08:42<1:21:27,  3.76s/it, gpt_loss=0.449, lr=3.97e-7][A
Train step of epoch 0:  79%|███████▉  | 4950/6250 [5:08:45<1:21:27,  3.76s/it, gpt_loss=0.524, lr=3.97e-7][A
Train step of epoch 0:  79%|███████▉  | 4951/6250 [5:08:45<1:16:30,  3.53s/it, gpt_loss=0.524, lr=3.97e-7][A[2025-04-24 05:01:28,527] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  79%|███████▉  | 4951/6250 [5:08:49<1:16:30,  3.53s/it, gpt_loss=0.635, lr=3.96e-7][A
Train step of epoch 0:  79%|███████▉  | 4952/6250 [5:08:49<1:20:29,  3.72s/it, gpt_loss=0.635, lr=3.96e-7][A
Train step of epoch 0:  79%|███████▉  | 4952/6250 [5:08:52<1:20:29,  3.72s/it, gpt_loss=0.413, lr=3.96e-7][A
Train step of epoch 0:  79%|███████▉  | 4953/6250 [5:08:52<1:14:33,  3.45s/it, gpt_loss=0.413, lr=3.96e-7][A
Train step of epoch 0:  79%|███████▉  | 4953/6250 [5:08:57<1:14:33,  3.45s/it, gpt_loss=0.517, lr=3.96e-7][A
Train step of epoch 0:  79%|███████▉  | 4954/6250 [5:08:57<1:23:06,  3.85s/it, gpt_loss=0.517, lr=3.96e-7][A
Train step of epoch 0:  79%|███████▉  | 4954/6250 [5:09:00<1:23:06,  3.85s/it, gpt_loss=0.564, lr=3.96e-7][A
Train step of epoch 0:  79%|███████▉  | 4955/6250 [5:09:00<1:20:46,  3.74s/it, gpt_loss=0.564, lr=3.96e-7][A[2025-04-24 05:01:44,183] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  79%|███████▉  | 4955/6250 [5:09:05<1:20:46,  3.74s/it, gpt_loss=0.539, lr=3.94e-7][A
Train step of epoch 0:  79%|███████▉  | 4956/6250 [5:09:05<1:26:02,  3.99s/it, gpt_loss=0.539, lr=3.94e-7][A
Train step of epoch 0:  79%|███████▉  | 4956/6250 [5:09:08<1:26:02,  3.99s/it, gpt_loss=0.593, lr=3.94e-7][A
Train step of epoch 0:  79%|███████▉  | 4957/6250 [5:09:08<1:21:25,  3.78s/it, gpt_loss=0.593, lr=3.94e-7][A
Train step of epoch 0:  79%|███████▉  | 4957/6250 [5:09:12<1:21:25,  3.78s/it, gpt_loss=0.464, lr=3.94e-7][A
Train step of epoch 0:  79%|███████▉  | 4958/6250 [5:09:12<1:19:43,  3.70s/it, gpt_loss=0.464, lr=3.94e-7][A
Train step of epoch 0:  79%|███████▉  | 4958/6250 [5:09:15<1:19:43,  3.70s/it, gpt_loss=0.627, lr=3.94e-7][A
Train step of epoch 0:  79%|███████▉  | 4959/6250 [5:09:15<1:18:46,  3.66s/it, gpt_loss=0.627, lr=3.94e-7][A[2025-04-24 05:01:57,868] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  79%|███████▉  | 4959/6250 [5:09:19<1:18:46,  3.66s/it, gpt_loss=0.74, lr=3.93e-7] [A
Train step of epoch 0:  79%|███████▉  | 4960/6250 [5:09:19<1:16:26,  3.56s/it, gpt_loss=0.74, lr=3.93e-7][A
Train step of epoch 0:  79%|███████▉  | 4960/6250 [5:09:23<1:16:26,  3.56s/it, gpt_loss=0.767, lr=3.93e-7][A
Train step of epoch 0:  79%|███████▉  | 4961/6250 [5:09:23<1:21:32,  3.80s/it, gpt_loss=0.767, lr=3.93e-7][A
Train step of epoch 0:  79%|███████▉  | 4961/6250 [5:09:26<1:21:32,  3.80s/it, gpt_loss=0.717, lr=3.93e-7][A
Train step of epoch 0:  79%|███████▉  | 4962/6250 [5:09:26<1:15:02,  3.50s/it, gpt_loss=0.717, lr=3.93e-7][A
Train step of epoch 0:  79%|███████▉  | 4962/6250 [5:09:29<1:15:02,  3.50s/it, gpt_loss=0.5, lr=3.93e-7]  [A
Train step of epoch 0:  79%|███████▉  | 4963/6250 [5:09:29<1:10:27,  3.29s/it, gpt_loss=0.5, lr=3.93e-7][A[2025-04-24 05:02:11,558] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  79%|███████▉  | 4963/6250 [5:09:32<1:10:27,  3.29s/it, gpt_loss=0.484, lr=3.92e-7][A
Train step of epoch 0:  79%|███████▉  | 4964/6250 [5:09:32<1:13:22,  3.42s/it, gpt_loss=0.484, lr=3.92e-7][A
Train step of epoch 0:  79%|███████▉  | 4964/6250 [5:09:36<1:13:22,  3.42s/it, gpt_loss=0.634, lr=3.92e-7][A
Train step of epoch 0:  79%|███████▉  | 4965/6250 [5:09:36<1:16:06,  3.55s/it, gpt_loss=0.634, lr=3.92e-7][A
Train step of epoch 0:  79%|███████▉  | 4965/6250 [5:09:39<1:16:06,  3.55s/it, gpt_loss=0.456, lr=3.92e-7][A
Train step of epoch 0:  79%|███████▉  | 4966/6250 [5:09:39<1:10:32,  3.30s/it, gpt_loss=0.456, lr=3.92e-7][A
Train step of epoch 0:  79%|███████▉  | 4966/6250 [5:09:42<1:10:32,  3.30s/it, gpt_loss=0.464, lr=3.92e-7][A
Train step of epoch 0:  79%|███████▉  | 4967/6250 [5:09:42<1:08:28,  3.20s/it, gpt_loss=0.464, lr=3.92e-7][A[2025-04-24 05:02:24,579] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  79%|███████▉  | 4967/6250 [5:09:45<1:08:28,  3.20s/it, gpt_loss=0.484, lr=3.91e-7][A
Train step of epoch 0:  79%|███████▉  | 4968/6250 [5:09:45<1:10:13,  3.29s/it, gpt_loss=0.484, lr=3.91e-7][A
Train step of epoch 0:  79%|███████▉  | 4968/6250 [5:09:49<1:10:13,  3.29s/it, gpt_loss=0.681, lr=3.91e-7][A
Train step of epoch 0:  80%|███████▉  | 4969/6250 [5:09:49<1:13:00,  3.42s/it, gpt_loss=0.681, lr=3.91e-7][A
Train step of epoch 0:  80%|███████▉  | 4969/6250 [5:09:52<1:13:00,  3.42s/it, gpt_loss=0.559, lr=3.91e-7][A
Train step of epoch 0:  80%|███████▉  | 4970/6250 [5:09:52<1:12:16,  3.39s/it, gpt_loss=0.559, lr=3.91e-7][A
Train step of epoch 0:  80%|███████▉  | 4970/6250 [5:09:56<1:12:16,  3.39s/it, gpt_loss=0.641, lr=3.91e-7][A
Train step of epoch 0:  80%|███████▉  | 4971/6250 [5:09:56<1:12:09,  3.39s/it, gpt_loss=0.641, lr=3.91e-7][A[2025-04-24 05:02:38,962] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  80%|███████▉  | 4971/6250 [5:10:00<1:12:09,  3.39s/it, gpt_loss=0.581, lr=3.9e-7] [A
Train step of epoch 0:  80%|███████▉  | 4972/6250 [5:10:00<1:15:46,  3.56s/it, gpt_loss=0.581, lr=3.9e-7][A
Train step of epoch 0:  80%|███████▉  | 4972/6250 [5:10:04<1:15:46,  3.56s/it, gpt_loss=0.481, lr=3.9e-7][A
Train step of epoch 0:  80%|███████▉  | 4973/6250 [5:10:04<1:21:38,  3.84s/it, gpt_loss=0.481, lr=3.9e-7][A
Train step of epoch 0:  80%|███████▉  | 4973/6250 [5:10:08<1:21:38,  3.84s/it, gpt_loss=0.698, lr=3.9e-7][A
Train step of epoch 0:  80%|███████▉  | 4974/6250 [5:10:08<1:23:59,  3.95s/it, gpt_loss=0.698, lr=3.9e-7][A
Train step of epoch 0:  80%|███████▉  | 4974/6250 [5:10:13<1:23:59,  3.95s/it, gpt_loss=0.833, lr=3.9e-7][A
Train step of epoch 0:  80%|███████▉  | 4975/6250 [5:10:13<1:25:38,  4.03s/it, gpt_loss=0.833, lr=3.9e-7][A[2025-04-24 05:02:55,924] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  80%|███████▉  | 4975/6250 [5:10:17<1:25:38,  4.03s/it, gpt_loss=0.45, lr=3.89e-7][A
Train step of epoch 0:  80%|███████▉  | 4976/6250 [5:10:17<1:25:40,  4.03s/it, gpt_loss=0.45, lr=3.89e-7][A
Train step of epoch 0:  80%|███████▉  | 4976/6250 [5:10:20<1:25:40,  4.03s/it, gpt_loss=0.548, lr=3.89e-7][A
Train step of epoch 0:  80%|███████▉  | 4977/6250 [5:10:20<1:23:10,  3.92s/it, gpt_loss=0.548, lr=3.89e-7][A
Train step of epoch 0:  80%|███████▉  | 4977/6250 [5:10:23<1:23:10,  3.92s/it, gpt_loss=0.504, lr=3.89e-7][A
Train step of epoch 0:  80%|███████▉  | 4978/6250 [5:10:23<1:15:13,  3.55s/it, gpt_loss=0.504, lr=3.89e-7][A
Train step of epoch 0:  80%|███████▉  | 4978/6250 [5:10:27<1:15:13,  3.55s/it, gpt_loss=0.721, lr=3.89e-7][A
Train step of epoch 0:  80%|███████▉  | 4979/6250 [5:10:27<1:21:04,  3.83s/it, gpt_loss=0.721, lr=3.89e-7][A[2025-04-24 05:03:11,010] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  80%|███████▉  | 4979/6250 [5:10:32<1:21:04,  3.83s/it, gpt_loss=0.59, lr=3.88e-7] [A
Train step of epoch 0:  80%|███████▉  | 4980/6250 [5:10:32<1:23:50,  3.96s/it, gpt_loss=0.59, lr=3.88e-7][A
Train step of epoch 0:  80%|███████▉  | 4980/6250 [5:10:36<1:23:50,  3.96s/it, gpt_loss=0.689, lr=3.88e-7][A
Train step of epoch 0:  80%|███████▉  | 4981/6250 [5:10:36<1:24:11,  3.98s/it, gpt_loss=0.689, lr=3.88e-7][A
Train step of epoch 0:  80%|███████▉  | 4981/6250 [5:10:39<1:24:11,  3.98s/it, gpt_loss=0.617, lr=3.88e-7][A
Train step of epoch 0:  80%|███████▉  | 4982/6250 [5:10:39<1:18:30,  3.71s/it, gpt_loss=0.617, lr=3.88e-7][A
Train step of epoch 0:  80%|███████▉  | 4982/6250 [5:10:43<1:18:30,  3.71s/it, gpt_loss=0.571, lr=3.88e-7][A
Train step of epoch 0:  80%|███████▉  | 4983/6250 [5:10:43<1:17:50,  3.69s/it, gpt_loss=0.571, lr=3.88e-7][A[2025-04-24 05:03:26,256] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  80%|███████▉  | 4983/6250 [5:10:47<1:17:50,  3.69s/it, gpt_loss=0.637, lr=3.86e-7][A
Train step of epoch 0:  80%|███████▉  | 4984/6250 [5:10:47<1:22:57,  3.93s/it, gpt_loss=0.637, lr=3.86e-7][A
Train step of epoch 0:  80%|███████▉  | 4984/6250 [5:10:51<1:22:57,  3.93s/it, gpt_loss=0.678, lr=3.86e-7][A
Train step of epoch 0:  80%|███████▉  | 4985/6250 [5:10:51<1:21:20,  3.86s/it, gpt_loss=0.678, lr=3.86e-7][A
Train step of epoch 0:  80%|███████▉  | 4985/6250 [5:10:55<1:21:20,  3.86s/it, gpt_loss=0.657, lr=3.86e-7][A
Train step of epoch 0:  80%|███████▉  | 4986/6250 [5:10:55<1:23:20,  3.96s/it, gpt_loss=0.657, lr=3.86e-7][A
Train step of epoch 0:  80%|███████▉  | 4986/6250 [5:10:58<1:23:20,  3.96s/it, gpt_loss=0.682, lr=3.86e-7][A
Train step of epoch 0:  80%|███████▉  | 4987/6250 [5:10:58<1:17:28,  3.68s/it, gpt_loss=0.682, lr=3.86e-7][A[2025-04-24 05:03:41,329] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  80%|███████▉  | 4987/6250 [5:11:02<1:17:28,  3.68s/it, gpt_loss=0.635, lr=3.85e-7][A
Train step of epoch 0:  80%|███████▉  | 4988/6250 [5:11:02<1:20:27,  3.83s/it, gpt_loss=0.635, lr=3.85e-7][A
Train step of epoch 0:  80%|███████▉  | 4988/6250 [5:11:06<1:20:27,  3.83s/it, gpt_loss=0.579, lr=3.85e-7][A
Train step of epoch 0:  80%|███████▉  | 4989/6250 [5:11:06<1:23:15,  3.96s/it, gpt_loss=0.579, lr=3.85e-7][A
Train step of epoch 0:  80%|███████▉  | 4989/6250 [5:11:10<1:23:15,  3.96s/it, gpt_loss=0.783, lr=3.85e-7][A
Train step of epoch 0:  80%|███████▉  | 4990/6250 [5:11:10<1:20:08,  3.82s/it, gpt_loss=0.783, lr=3.85e-7][A
Train step of epoch 0:  80%|███████▉  | 4990/6250 [5:11:14<1:20:08,  3.82s/it, gpt_loss=0.53, lr=3.85e-7] [A
Train step of epoch 0:  80%|███████▉  | 4991/6250 [5:11:14<1:19:59,  3.81s/it, gpt_loss=0.53, lr=3.85e-7][A[2025-04-24 05:03:57,208] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  80%|███████▉  | 4991/6250 [5:11:18<1:19:59,  3.81s/it, gpt_loss=0.629, lr=3.84e-7][A
Train step of epoch 0:  80%|███████▉  | 4992/6250 [5:11:18<1:23:08,  3.97s/it, gpt_loss=0.629, lr=3.84e-7][A
Train step of epoch 0:  80%|███████▉  | 4992/6250 [5:11:22<1:23:08,  3.97s/it, gpt_loss=0.621, lr=3.84e-7][A
Train step of epoch 0:  80%|███████▉  | 4993/6250 [5:11:22<1:21:39,  3.90s/it, gpt_loss=0.621, lr=3.84e-7][A
Train step of epoch 0:  80%|███████▉  | 4993/6250 [5:11:25<1:21:39,  3.90s/it, gpt_loss=0.52, lr=3.84e-7] [A
Train step of epoch 0:  80%|███████▉  | 4994/6250 [5:11:25<1:20:09,  3.83s/it, gpt_loss=0.52, lr=3.84e-7][A
Train step of epoch 0:  80%|███████▉  | 4994/6250 [5:11:29<1:20:09,  3.83s/it, gpt_loss=0.633, lr=3.84e-7][A
Train step of epoch 0:  80%|███████▉  | 4995/6250 [5:11:29<1:21:22,  3.89s/it, gpt_loss=0.633, lr=3.84e-7][A[2025-04-24 05:04:12,230] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  80%|███████▉  | 4995/6250 [5:11:33<1:21:22,  3.89s/it, gpt_loss=0.487, lr=3.83e-7][A
Train step of epoch 0:  80%|███████▉  | 4996/6250 [5:11:33<1:19:22,  3.80s/it, gpt_loss=0.487, lr=3.83e-7][A
Train step of epoch 0:  80%|███████▉  | 4996/6250 [5:11:37<1:19:22,  3.80s/it, gpt_loss=0.486, lr=3.83e-7][A
Train step of epoch 0:  80%|███████▉  | 4997/6250 [5:11:37<1:23:04,  3.98s/it, gpt_loss=0.486, lr=3.83e-7][A
Train step of epoch 0:  80%|███████▉  | 4997/6250 [5:11:40<1:23:04,  3.98s/it, gpt_loss=0.57, lr=3.83e-7] [A
Train step of epoch 0:  80%|███████▉  | 4998/6250 [5:11:40<1:16:09,  3.65s/it, gpt_loss=0.57, lr=3.83e-7][A
Train step of epoch 0:  80%|███████▉  | 4998/6250 [5:11:44<1:16:09,  3.65s/it, gpt_loss=0.628, lr=3.83e-7][A
Train step of epoch 0:  80%|███████▉  | 4999/6250 [5:11:44<1:16:26,  3.67s/it, gpt_loss=0.628, lr=3.83e-7][A[2025-04-24 05:04:26,728] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  80%|███████▉  | 4999/6250 [5:11:47<1:16:26,  3.67s/it, gpt_loss=0.645, lr=3.82e-7][A
Train step of epoch 0:  80%|████████  | 5000/6250 [5:11:47<1:15:23,  3.62s/it, gpt_loss=0.645, lr=3.82e-7][A
Train step of epoch 0:  80%|████████  | 5000/6250 [5:11:50<1:15:23,  3.62s/it, gpt_loss=0.755, lr=3.82e-7][A
Train step of epoch 0:  80%|████████  | 5001/6250 [5:11:50<1:09:46,  3.35s/it, gpt_loss=0.755, lr=3.82e-7][A
Train step of epoch 0:  80%|████████  | 5001/6250 [5:11:53<1:09:46,  3.35s/it, gpt_loss=0.527, lr=3.82e-7][A
Train step of epoch 0:  80%|████████  | 5002/6250 [5:11:53<1:08:10,  3.28s/it, gpt_loss=0.527, lr=3.82e-7][A
Train step of epoch 0:  80%|████████  | 5002/6250 [5:11:58<1:08:10,  3.28s/it, gpt_loss=0.804, lr=3.82e-7][A
Train step of epoch 0:  80%|████████  | 5003/6250 [5:11:58<1:14:48,  3.60s/it, gpt_loss=0.804, lr=3.82e-7][A[2025-04-24 05:04:41,445] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  80%|████████  | 5003/6250 [5:12:02<1:14:48,  3.60s/it, gpt_loss=0.588, lr=3.81e-7][A
Train step of epoch 0:  80%|████████  | 5004/6250 [5:12:02<1:20:34,  3.88s/it, gpt_loss=0.588, lr=3.81e-7][A
Train step of epoch 0:  80%|████████  | 5004/6250 [5:12:06<1:20:34,  3.88s/it, gpt_loss=0.605, lr=3.81e-7][A
Train step of epoch 0:  80%|████████  | 5005/6250 [5:12:06<1:18:17,  3.77s/it, gpt_loss=0.605, lr=3.81e-7][A
Train step of epoch 0:  80%|████████  | 5005/6250 [5:12:10<1:18:17,  3.77s/it, gpt_loss=0.644, lr=3.81e-7][A
Train step of epoch 0:  80%|████████  | 5006/6250 [5:12:10<1:19:34,  3.84s/it, gpt_loss=0.644, lr=3.81e-7][A
Train step of epoch 0:  80%|████████  | 5006/6250 [5:12:13<1:19:34,  3.84s/it, gpt_loss=0.557, lr=3.81e-7][A
Train step of epoch 0:  80%|████████  | 5007/6250 [5:12:13<1:16:06,  3.67s/it, gpt_loss=0.557, lr=3.81e-7][A[2025-04-24 05:04:55,958] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  80%|████████  | 5007/6250 [5:12:17<1:16:06,  3.67s/it, gpt_loss=0.622, lr=3.8e-7] [A
Train step of epoch 0:  80%|████████  | 5008/6250 [5:12:17<1:16:15,  3.68s/it, gpt_loss=0.622, lr=3.8e-7][A
Train step of epoch 0:  80%|████████  | 5008/6250 [5:12:20<1:16:15,  3.68s/it, gpt_loss=0.602, lr=3.8e-7][A
Train step of epoch 0:  80%|████████  | 5009/6250 [5:12:20<1:16:45,  3.71s/it, gpt_loss=0.602, lr=3.8e-7][A
Train step of epoch 0:  80%|████████  | 5009/6250 [5:12:24<1:16:45,  3.71s/it, gpt_loss=0.693, lr=3.8e-7][A
Train step of epoch 0:  80%|████████  | 5010/6250 [5:12:24<1:16:06,  3.68s/it, gpt_loss=0.693, lr=3.8e-7][A
Train step of epoch 0:  80%|████████  | 5010/6250 [5:12:27<1:16:06,  3.68s/it, gpt_loss=0.617, lr=3.8e-7][A
Train step of epoch 0:  80%|████████  | 5011/6250 [5:12:27<1:11:12,  3.45s/it, gpt_loss=0.617, lr=3.8e-7][A[2025-04-24 05:05:10,341] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  80%|████████  | 5011/6250 [5:12:31<1:11:12,  3.45s/it, gpt_loss=0.639, lr=3.79e-7][A
Train step of epoch 0:  80%|████████  | 5012/6250 [5:12:31<1:15:08,  3.64s/it, gpt_loss=0.639, lr=3.79e-7][A
Train step of epoch 0:  80%|████████  | 5012/6250 [5:12:35<1:15:08,  3.64s/it, gpt_loss=0.691, lr=3.79e-7][A
Train step of epoch 0:  80%|████████  | 5013/6250 [5:12:35<1:19:22,  3.85s/it, gpt_loss=0.691, lr=3.79e-7][A
Train step of epoch 0:  80%|████████  | 5013/6250 [5:12:40<1:19:22,  3.85s/it, gpt_loss=0.705, lr=3.79e-7][A
Train step of epoch 0:  80%|████████  | 5014/6250 [5:12:40<1:22:48,  4.02s/it, gpt_loss=0.705, lr=3.79e-7][A
Train step of epoch 0:  80%|████████  | 5014/6250 [5:12:43<1:22:48,  4.02s/it, gpt_loss=0.519, lr=3.79e-7][A
Train step of epoch 0:  80%|████████  | 5015/6250 [5:12:43<1:15:28,  3.67s/it, gpt_loss=0.519, lr=3.79e-7][A[2025-04-24 05:05:26,492] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  80%|████████  | 5015/6250 [5:12:47<1:15:28,  3.67s/it, gpt_loss=0.683, lr=3.77e-7][A
Train step of epoch 0:  80%|████████  | 5016/6250 [5:12:47<1:20:53,  3.93s/it, gpt_loss=0.683, lr=3.77e-7][A
Train step of epoch 0:  80%|████████  | 5016/6250 [5:12:50<1:20:53,  3.93s/it, gpt_loss=0.623, lr=3.77e-7][A
Train step of epoch 0:  80%|████████  | 5017/6250 [5:12:50<1:15:06,  3.66s/it, gpt_loss=0.623, lr=3.77e-7][A
Train step of epoch 0:  80%|████████  | 5017/6250 [5:12:54<1:15:06,  3.66s/it, gpt_loss=0.514, lr=3.77e-7][A
Train step of epoch 0:  80%|████████  | 5018/6250 [5:12:54<1:13:24,  3.57s/it, gpt_loss=0.514, lr=3.77e-7][A
Train step of epoch 0:  80%|████████  | 5018/6250 [5:12:57<1:13:24,  3.57s/it, gpt_loss=0.543, lr=3.77e-7][A
Train step of epoch 0:  80%|████████  | 5019/6250 [5:12:57<1:10:56,  3.46s/it, gpt_loss=0.543, lr=3.77e-7][A[2025-04-24 05:05:39,891] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  80%|████████  | 5019/6250 [5:13:01<1:10:56,  3.46s/it, gpt_loss=0.726, lr=3.76e-7][A
Train step of epoch 0:  80%|████████  | 5020/6250 [5:13:01<1:13:07,  3.57s/it, gpt_loss=0.726, lr=3.76e-7][A
Train step of epoch 0:  80%|████████  | 5020/6250 [5:13:04<1:13:07,  3.57s/it, gpt_loss=0.723, lr=3.76e-7][A
Train step of epoch 0:  80%|████████  | 5021/6250 [5:13:04<1:12:09,  3.52s/it, gpt_loss=0.723, lr=3.76e-7][A
Train step of epoch 0:  80%|████████  | 5021/6250 [5:13:09<1:12:09,  3.52s/it, gpt_loss=0.632, lr=3.76e-7][A
Train step of epoch 0:  80%|████████  | 5022/6250 [5:13:09<1:18:35,  3.84s/it, gpt_loss=0.632, lr=3.76e-7][A
Train step of epoch 0:  80%|████████  | 5022/6250 [5:13:12<1:18:35,  3.84s/it, gpt_loss=0.611, lr=3.76e-7][A
Train step of epoch 0:  80%|████████  | 5023/6250 [5:13:12<1:16:01,  3.72s/it, gpt_loss=0.611, lr=3.76e-7][A[2025-04-24 05:05:54,517] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  80%|████████  | 5023/6250 [5:13:15<1:16:01,  3.72s/it, gpt_loss=0.562, lr=3.75e-7][A
Train step of epoch 0:  80%|████████  | 5024/6250 [5:13:15<1:12:45,  3.56s/it, gpt_loss=0.562, lr=3.75e-7][A
Train step of epoch 0:  80%|████████  | 5024/6250 [5:13:19<1:12:45,  3.56s/it, gpt_loss=0.685, lr=3.75e-7][A
Train step of epoch 0:  80%|████████  | 5025/6250 [5:13:19<1:14:33,  3.65s/it, gpt_loss=0.685, lr=3.75e-7][A
Train step of epoch 0:  80%|████████  | 5025/6250 [5:13:23<1:14:33,  3.65s/it, gpt_loss=0.54, lr=3.75e-7] [A
Train step of epoch 0:  80%|████████  | 5026/6250 [5:13:23<1:13:24,  3.60s/it, gpt_loss=0.54, lr=3.75e-7][A
Train step of epoch 0:  80%|████████  | 5026/6250 [5:13:26<1:13:24,  3.60s/it, gpt_loss=0.796, lr=3.75e-7][A
Train step of epoch 0:  80%|████████  | 5027/6250 [5:13:26<1:10:55,  3.48s/it, gpt_loss=0.796, lr=3.75e-7][A[2025-04-24 05:06:09,662] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  80%|████████  | 5027/6250 [5:13:30<1:10:55,  3.48s/it, gpt_loss=0.646, lr=3.74e-7][A
Train step of epoch 0:  80%|████████  | 5028/6250 [5:13:30<1:17:43,  3.82s/it, gpt_loss=0.646, lr=3.74e-7][A
Train step of epoch 0:  80%|████████  | 5028/6250 [5:13:33<1:17:43,  3.82s/it, gpt_loss=0.614, lr=3.74e-7][A
Train step of epoch 0:  80%|████████  | 5029/6250 [5:13:33<1:10:50,  3.48s/it, gpt_loss=0.614, lr=3.74e-7][A
Train step of epoch 0:  80%|████████  | 5029/6250 [5:13:36<1:10:50,  3.48s/it, gpt_loss=0.452, lr=3.74e-7][A
Train step of epoch 0:  80%|████████  | 5030/6250 [5:13:36<1:08:42,  3.38s/it, gpt_loss=0.452, lr=3.74e-7][A
Train step of epoch 0:  80%|████████  | 5030/6250 [5:13:40<1:08:42,  3.38s/it, gpt_loss=0.585, lr=3.74e-7][A
Train step of epoch 0:  80%|████████  | 5031/6250 [5:13:40<1:10:30,  3.47s/it, gpt_loss=0.585, lr=3.74e-7][A[2025-04-24 05:06:23,100] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  80%|████████  | 5031/6250 [5:13:44<1:10:30,  3.47s/it, gpt_loss=0.619, lr=3.73e-7][A
Train step of epoch 0:  81%|████████  | 5032/6250 [5:13:44<1:13:09,  3.60s/it, gpt_loss=0.619, lr=3.73e-7][A
Train step of epoch 0:  81%|████████  | 5032/6250 [5:13:48<1:13:09,  3.60s/it, gpt_loss=0.582, lr=3.73e-7][A
Train step of epoch 0:  81%|████████  | 5033/6250 [5:13:48<1:15:04,  3.70s/it, gpt_loss=0.582, lr=3.73e-7][A
Train step of epoch 0:  81%|████████  | 5033/6250 [5:13:51<1:15:04,  3.70s/it, gpt_loss=0.511, lr=3.73e-7][A
Train step of epoch 0:  81%|████████  | 5034/6250 [5:13:51<1:11:48,  3.54s/it, gpt_loss=0.511, lr=3.73e-7][A
Train step of epoch 0:  81%|████████  | 5034/6250 [5:13:54<1:11:48,  3.54s/it, gpt_loss=0.526, lr=3.73e-7][A
Train step of epoch 0:  81%|████████  | 5035/6250 [5:13:54<1:10:32,  3.48s/it, gpt_loss=0.526, lr=3.73e-7][A[2025-04-24 05:06:38,411] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  81%|████████  | 5035/6250 [5:13:59<1:10:32,  3.48s/it, gpt_loss=0.574, lr=3.72e-7][A
Train step of epoch 0:  81%|████████  | 5036/6250 [5:13:59<1:18:51,  3.90s/it, gpt_loss=0.574, lr=3.72e-7][A
Train step of epoch 0:  81%|████████  | 5036/6250 [5:14:03<1:18:51,  3.90s/it, gpt_loss=0.644, lr=3.72e-7][A
Train step of epoch 0:  81%|████████  | 5037/6250 [5:14:03<1:18:47,  3.90s/it, gpt_loss=0.644, lr=3.72e-7][A
Train step of epoch 0:  81%|████████  | 5037/6250 [5:14:07<1:18:47,  3.90s/it, gpt_loss=0.569, lr=3.72e-7][A
Train step of epoch 0:  81%|████████  | 5038/6250 [5:14:07<1:19:47,  3.95s/it, gpt_loss=0.569, lr=3.72e-7][A
Train step of epoch 0:  81%|████████  | 5038/6250 [5:14:12<1:19:47,  3.95s/it, gpt_loss=0.585, lr=3.72e-7][A
Train step of epoch 0:  81%|████████  | 5039/6250 [5:14:12<1:22:45,  4.10s/it, gpt_loss=0.585, lr=3.72e-7][A[2025-04-24 05:06:54,616] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  81%|████████  | 5039/6250 [5:14:15<1:22:45,  4.10s/it, gpt_loss=0.594, lr=3.71e-7][A
Train step of epoch 0:  81%|████████  | 5040/6250 [5:14:15<1:20:46,  4.01s/it, gpt_loss=0.594, lr=3.71e-7][A
Train step of epoch 0:  81%|████████  | 5040/6250 [5:14:19<1:20:46,  4.01s/it, gpt_loss=0.519, lr=3.71e-7][A
Train step of epoch 0:  81%|████████  | 5041/6250 [5:14:19<1:16:12,  3.78s/it, gpt_loss=0.519, lr=3.71e-7][A
Train step of epoch 0:  81%|████████  | 5041/6250 [5:14:21<1:16:12,  3.78s/it, gpt_loss=0.536, lr=3.71e-7][A
Train step of epoch 0:  81%|████████  | 5042/6250 [5:14:21<1:08:50,  3.42s/it, gpt_loss=0.536, lr=3.71e-7][A
Train step of epoch 0:  81%|████████  | 5042/6250 [5:14:25<1:08:50,  3.42s/it, gpt_loss=0.675, lr=3.71e-7][A
Train step of epoch 0:  81%|████████  | 5043/6250 [5:14:25<1:11:23,  3.55s/it, gpt_loss=0.675, lr=3.71e-7][A[2025-04-24 05:07:07,997] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  81%|████████  | 5043/6250 [5:14:29<1:11:23,  3.55s/it, gpt_loss=0.596, lr=3.7e-7] [A
Train step of epoch 0:  81%|████████  | 5044/6250 [5:14:29<1:12:13,  3.59s/it, gpt_loss=0.596, lr=3.7e-7][A
Train step of epoch 0:  81%|████████  | 5044/6250 [5:14:33<1:12:13,  3.59s/it, gpt_loss=0.527, lr=3.7e-7][A
Train step of epoch 0:  81%|████████  | 5045/6250 [5:14:33<1:13:04,  3.64s/it, gpt_loss=0.527, lr=3.7e-7][A
Train step of epoch 0:  81%|████████  | 5045/6250 [5:14:37<1:13:04,  3.64s/it, gpt_loss=0.618, lr=3.7e-7][A
Train step of epoch 0:  81%|████████  | 5046/6250 [5:14:37<1:19:07,  3.94s/it, gpt_loss=0.618, lr=3.7e-7][A
Train step of epoch 0:  81%|████████  | 5046/6250 [5:14:40<1:19:07,  3.94s/it, gpt_loss=0.763, lr=3.7e-7][A
Train step of epoch 0:  81%|████████  | 5047/6250 [5:14:40<1:14:14,  3.70s/it, gpt_loss=0.763, lr=3.7e-7][A[2025-04-24 05:07:23,773] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  81%|████████  | 5047/6250 [5:14:45<1:14:14,  3.70s/it, gpt_loss=0.63, lr=3.69e-7][A
Train step of epoch 0:  81%|████████  | 5048/6250 [5:14:45<1:17:22,  3.86s/it, gpt_loss=0.63, lr=3.69e-7][A
Train step of epoch 0:  81%|████████  | 5048/6250 [5:14:48<1:17:22,  3.86s/it, gpt_loss=0.552, lr=3.69e-7][A
Train step of epoch 0:  81%|████████  | 5049/6250 [5:14:48<1:15:11,  3.76s/it, gpt_loss=0.552, lr=3.69e-7][A
Train step of epoch 0:  81%|████████  | 5049/6250 [5:14:52<1:15:11,  3.76s/it, gpt_loss=0.597, lr=3.69e-7][A
Train step of epoch 0:  81%|████████  | 5050/6250 [5:14:52<1:14:56,  3.75s/it, gpt_loss=0.597, lr=3.69e-7][A
Train step of epoch 0:  81%|████████  | 5050/6250 [5:14:55<1:14:56,  3.75s/it, gpt_loss=0.535, lr=3.69e-7][A
Train step of epoch 0:  81%|████████  | 5051/6250 [5:14:55<1:11:47,  3.59s/it, gpt_loss=0.535, lr=3.69e-7][A[2025-04-24 05:07:38,588] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  81%|████████  | 5051/6250 [5:14:59<1:11:47,  3.59s/it, gpt_loss=0.681, lr=3.68e-7][A
Train step of epoch 0:  81%|████████  | 5052/6250 [5:14:59<1:16:15,  3.82s/it, gpt_loss=0.681, lr=3.68e-7][A
Train step of epoch 0:  81%|████████  | 5052/6250 [5:15:03<1:16:15,  3.82s/it, gpt_loss=0.611, lr=3.68e-7][A
Train step of epoch 0:  81%|████████  | 5053/6250 [5:15:03<1:15:37,  3.79s/it, gpt_loss=0.611, lr=3.68e-7][A
Train step of epoch 0:  81%|████████  | 5053/6250 [5:15:07<1:15:37,  3.79s/it, gpt_loss=0.605, lr=3.68e-7][A
Train step of epoch 0:  81%|████████  | 5054/6250 [5:15:07<1:17:35,  3.89s/it, gpt_loss=0.605, lr=3.68e-7][A
Train step of epoch 0:  81%|████████  | 5054/6250 [5:15:11<1:17:35,  3.89s/it, gpt_loss=0.71, lr=3.68e-7] [A
Train step of epoch 0:  81%|████████  | 5055/6250 [5:15:11<1:16:15,  3.83s/it, gpt_loss=0.71, lr=3.68e-7][A[2025-04-24 05:07:53,935] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  81%|████████  | 5055/6250 [5:15:15<1:16:15,  3.83s/it, gpt_loss=0.635, lr=3.66e-7][A
Train step of epoch 0:  81%|████████  | 5056/6250 [5:15:15<1:16:05,  3.82s/it, gpt_loss=0.635, lr=3.66e-7][A
Train step of epoch 0:  81%|████████  | 5056/6250 [5:15:19<1:16:05,  3.82s/it, gpt_loss=0.602, lr=3.66e-7][A
Train step of epoch 0:  81%|████████  | 5057/6250 [5:15:19<1:16:26,  3.84s/it, gpt_loss=0.602, lr=3.66e-7][A
Train step of epoch 0:  81%|████████  | 5057/6250 [5:15:22<1:16:26,  3.84s/it, gpt_loss=0.695, lr=3.66e-7][A
Train step of epoch 0:  81%|████████  | 5058/6250 [5:15:22<1:14:20,  3.74s/it, gpt_loss=0.695, lr=3.66e-7][A
Train step of epoch 0:  81%|████████  | 5058/6250 [5:15:25<1:14:20,  3.74s/it, gpt_loss=0.533, lr=3.66e-7][A
Train step of epoch 0:  81%|████████  | 5059/6250 [5:15:25<1:09:54,  3.52s/it, gpt_loss=0.533, lr=3.66e-7][A[2025-04-24 05:08:08,307] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  81%|████████  | 5059/6250 [5:15:29<1:09:54,  3.52s/it, gpt_loss=0.583, lr=3.65e-7][A
Train step of epoch 0:  81%|████████  | 5060/6250 [5:15:29<1:12:30,  3.66s/it, gpt_loss=0.583, lr=3.65e-7][A
Train step of epoch 0:  81%|████████  | 5060/6250 [5:15:32<1:12:30,  3.66s/it, gpt_loss=0.605, lr=3.65e-7][A
Train step of epoch 0:  81%|████████  | 5061/6250 [5:15:32<1:06:36,  3.36s/it, gpt_loss=0.605, lr=3.65e-7][A
Train step of epoch 0:  81%|████████  | 5061/6250 [5:15:35<1:06:36,  3.36s/it, gpt_loss=0.547, lr=3.65e-7][A
Train step of epoch 0:  81%|████████  | 5062/6250 [5:15:35<1:04:47,  3.27s/it, gpt_loss=0.547, lr=3.65e-7][A
Train step of epoch 0:  81%|████████  | 5062/6250 [5:15:38<1:04:47,  3.27s/it, gpt_loss=0.465, lr=3.65e-7][A
Train step of epoch 0:  81%|████████  | 5063/6250 [5:15:38<1:06:07,  3.34s/it, gpt_loss=0.465, lr=3.65e-7][A[2025-04-24 05:08:21,181] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  81%|████████  | 5063/6250 [5:15:42<1:06:07,  3.34s/it, gpt_loss=0.55, lr=3.64e-7] [A
Train step of epoch 0:  81%|████████  | 5064/6250 [5:15:42<1:07:46,  3.43s/it, gpt_loss=0.55, lr=3.64e-7][A
Train step of epoch 0:  81%|████████  | 5064/6250 [5:15:45<1:07:46,  3.43s/it, gpt_loss=0.569, lr=3.64e-7][A
Train step of epoch 0:  81%|████████  | 5065/6250 [5:15:45<1:07:50,  3.44s/it, gpt_loss=0.569, lr=3.64e-7][A
Train step of epoch 0:  81%|████████  | 5065/6250 [5:15:49<1:07:50,  3.44s/it, gpt_loss=0.575, lr=3.64e-7][A
Train step of epoch 0:  81%|████████  | 5066/6250 [5:15:49<1:10:00,  3.55s/it, gpt_loss=0.575, lr=3.64e-7][A
Train step of epoch 0:  81%|████████  | 5066/6250 [5:15:52<1:10:00,  3.55s/it, gpt_loss=0.733, lr=3.64e-7][A
Train step of epoch 0:  81%|████████  | 5067/6250 [5:15:52<1:06:40,  3.38s/it, gpt_loss=0.733, lr=3.64e-7][A[2025-04-24 05:08:34,238] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  81%|████████  | 5067/6250 [5:15:55<1:06:40,  3.38s/it, gpt_loss=0.593, lr=3.63e-7][A
Train step of epoch 0:  81%|████████  | 5068/6250 [5:15:55<1:03:11,  3.21s/it, gpt_loss=0.593, lr=3.63e-7][A
Train step of epoch 0:  81%|████████  | 5068/6250 [5:15:59<1:03:11,  3.21s/it, gpt_loss=0.618, lr=3.63e-7][A
Train step of epoch 0:  81%|████████  | 5069/6250 [5:15:59<1:07:28,  3.43s/it, gpt_loss=0.618, lr=3.63e-7][A
Train step of epoch 0:  81%|████████  | 5069/6250 [5:16:03<1:07:28,  3.43s/it, gpt_loss=0.584, lr=3.63e-7][A
Train step of epoch 0:  81%|████████  | 5070/6250 [5:16:03<1:09:09,  3.52s/it, gpt_loss=0.584, lr=3.63e-7][A
Train step of epoch 0:  81%|████████  | 5070/6250 [5:16:07<1:09:09,  3.52s/it, gpt_loss=0.487, lr=3.63e-7][A
Train step of epoch 0:  81%|████████  | 5071/6250 [5:16:07<1:11:53,  3.66s/it, gpt_loss=0.487, lr=3.63e-7][A[2025-04-24 05:08:49,554] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  81%|████████  | 5071/6250 [5:16:10<1:11:53,  3.66s/it, gpt_loss=0.417, lr=3.62e-7][A
Train step of epoch 0:  81%|████████  | 5072/6250 [5:16:10<1:11:50,  3.66s/it, gpt_loss=0.417, lr=3.62e-7][A
Train step of epoch 0:  81%|████████  | 5072/6250 [5:16:15<1:11:50,  3.66s/it, gpt_loss=0.62, lr=3.62e-7] [A
Train step of epoch 0:  81%|████████  | 5073/6250 [5:16:15<1:16:02,  3.88s/it, gpt_loss=0.62, lr=3.62e-7][A
Train step of epoch 0:  81%|████████  | 5073/6250 [5:16:18<1:16:02,  3.88s/it, gpt_loss=0.508, lr=3.62e-7][A
Train step of epoch 0:  81%|████████  | 5074/6250 [5:16:18<1:11:32,  3.65s/it, gpt_loss=0.508, lr=3.62e-7][A
Train step of epoch 0:  81%|████████  | 5074/6250 [5:16:22<1:11:32,  3.65s/it, gpt_loss=0.656, lr=3.62e-7][A
Train step of epoch 0:  81%|████████  | 5075/6250 [5:16:22<1:11:48,  3.67s/it, gpt_loss=0.656, lr=3.62e-7][A[2025-04-24 05:09:04,368] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  81%|████████  | 5075/6250 [5:16:25<1:11:48,  3.67s/it, gpt_loss=0.731, lr=3.61e-7][A
Train step of epoch 0:  81%|████████  | 5076/6250 [5:16:25<1:11:22,  3.65s/it, gpt_loss=0.731, lr=3.61e-7][A
Train step of epoch 0:  81%|████████  | 5076/6250 [5:16:28<1:11:22,  3.65s/it, gpt_loss=0.512, lr=3.61e-7][A
Train step of epoch 0:  81%|████████  | 5077/6250 [5:16:28<1:08:34,  3.51s/it, gpt_loss=0.512, lr=3.61e-7][A
Train step of epoch 0:  81%|████████  | 5077/6250 [5:16:32<1:08:34,  3.51s/it, gpt_loss=0.566, lr=3.61e-7][A
Train step of epoch 0:  81%|████████  | 5078/6250 [5:16:32<1:10:25,  3.61s/it, gpt_loss=0.566, lr=3.61e-7][A
Train step of epoch 0:  81%|████████  | 5078/6250 [5:16:35<1:10:25,  3.61s/it, gpt_loss=0.61, lr=3.61e-7] [A
Train step of epoch 0:  81%|████████▏ | 5079/6250 [5:16:35<1:04:10,  3.29s/it, gpt_loss=0.61, lr=3.61e-7][A[2025-04-24 05:09:18,039] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  81%|████████▏ | 5079/6250 [5:16:39<1:04:10,  3.29s/it, gpt_loss=0.724, lr=3.6e-7][A
Train step of epoch 0:  81%|████████▏ | 5080/6250 [5:16:39<1:08:55,  3.53s/it, gpt_loss=0.724, lr=3.6e-7][A
Train step of epoch 0:  81%|████████▏ | 5080/6250 [5:16:42<1:08:55,  3.53s/it, gpt_loss=0.521, lr=3.6e-7][A
Train step of epoch 0:  81%|████████▏ | 5081/6250 [5:16:42<1:09:20,  3.56s/it, gpt_loss=0.521, lr=3.6e-7][A
Train step of epoch 0:  81%|████████▏ | 5081/6250 [5:16:46<1:09:20,  3.56s/it, gpt_loss=0.648, lr=3.6e-7][A
Train step of epoch 0:  81%|████████▏ | 5082/6250 [5:16:46<1:06:46,  3.43s/it, gpt_loss=0.648, lr=3.6e-7][A
Train step of epoch 0:  81%|████████▏ | 5082/6250 [5:16:49<1:06:46,  3.43s/it, gpt_loss=0.428, lr=3.6e-7][A
Train step of epoch 0:  81%|████████▏ | 5083/6250 [5:16:49<1:05:33,  3.37s/it, gpt_loss=0.428, lr=3.6e-7][A[2025-04-24 05:09:31,702] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  81%|████████▏ | 5083/6250 [5:16:52<1:05:33,  3.37s/it, gpt_loss=0.607, lr=3.59e-7][A
Train step of epoch 0:  81%|████████▏ | 5084/6250 [5:16:52<1:07:20,  3.46s/it, gpt_loss=0.607, lr=3.59e-7][A
Train step of epoch 0:  81%|████████▏ | 5084/6250 [5:16:56<1:07:20,  3.46s/it, gpt_loss=0.639, lr=3.59e-7][A
Train step of epoch 0:  81%|████████▏ | 5085/6250 [5:16:56<1:05:48,  3.39s/it, gpt_loss=0.639, lr=3.59e-7][A
Train step of epoch 0:  81%|████████▏ | 5085/6250 [5:16:58<1:05:48,  3.39s/it, gpt_loss=0.568, lr=3.59e-7][A
Train step of epoch 0:  81%|████████▏ | 5086/6250 [5:16:58<1:01:53,  3.19s/it, gpt_loss=0.568, lr=3.59e-7][A
Train step of epoch 0:  81%|████████▏ | 5086/6250 [5:17:02<1:01:53,  3.19s/it, gpt_loss=0.552, lr=3.59e-7][A
Train step of epoch 0:  81%|████████▏ | 5087/6250 [5:17:02<1:04:51,  3.35s/it, gpt_loss=0.552, lr=3.59e-7][A[2025-04-24 05:09:45,511] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  81%|████████▏ | 5087/6250 [5:17:06<1:04:51,  3.35s/it, gpt_loss=0.554, lr=3.58e-7][A
Train step of epoch 0:  81%|████████▏ | 5088/6250 [5:17:06<1:09:32,  3.59s/it, gpt_loss=0.554, lr=3.58e-7][A
Train step of epoch 0:  81%|████████▏ | 5088/6250 [5:17:10<1:09:32,  3.59s/it, gpt_loss=0.719, lr=3.58e-7][A
Train step of epoch 0:  81%|████████▏ | 5089/6250 [5:17:10<1:13:01,  3.77s/it, gpt_loss=0.719, lr=3.58e-7][A
Train step of epoch 0:  81%|████████▏ | 5089/6250 [5:17:14<1:13:01,  3.77s/it, gpt_loss=0.584, lr=3.58e-7][A
Train step of epoch 0:  81%|████████▏ | 5090/6250 [5:17:14<1:13:58,  3.83s/it, gpt_loss=0.584, lr=3.58e-7][A
Train step of epoch 0:  81%|████████▏ | 5090/6250 [5:17:18<1:13:58,  3.83s/it, gpt_loss=0.703, lr=3.58e-7][A
Train step of epoch 0:  81%|████████▏ | 5091/6250 [5:17:18<1:13:27,  3.80s/it, gpt_loss=0.703, lr=3.58e-7][A[2025-04-24 05:10:00,773] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  81%|████████▏ | 5091/6250 [5:17:22<1:13:27,  3.80s/it, gpt_loss=0.693, lr=3.57e-7][A
Train step of epoch 0:  81%|████████▏ | 5092/6250 [5:17:22<1:10:51,  3.67s/it, gpt_loss=0.693, lr=3.57e-7][A
Train step of epoch 0:  81%|████████▏ | 5092/6250 [5:17:26<1:10:51,  3.67s/it, gpt_loss=0.539, lr=3.57e-7][A
Train step of epoch 0:  81%|████████▏ | 5093/6250 [5:17:26<1:12:51,  3.78s/it, gpt_loss=0.539, lr=3.57e-7][A
Train step of epoch 0:  81%|████████▏ | 5093/6250 [5:17:29<1:12:51,  3.78s/it, gpt_loss=0.705, lr=3.57e-7][A
Train step of epoch 0:  82%|████████▏ | 5094/6250 [5:17:29<1:09:24,  3.60s/it, gpt_loss=0.705, lr=3.57e-7][A
Train step of epoch 0:  82%|████████▏ | 5094/6250 [5:17:31<1:09:24,  3.60s/it, gpt_loss=0.445, lr=3.57e-7][A
Train step of epoch 0:  82%|████████▏ | 5095/6250 [5:17:31<1:03:48,  3.31s/it, gpt_loss=0.445, lr=3.57e-7][A[2025-04-24 05:10:14,733] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  82%|████████▏ | 5095/6250 [5:17:35<1:03:48,  3.31s/it, gpt_loss=0.446, lr=3.56e-7][A
Train step of epoch 0:  82%|████████▏ | 5096/6250 [5:17:35<1:08:15,  3.55s/it, gpt_loss=0.446, lr=3.56e-7][A
Train step of epoch 0:  82%|████████▏ | 5096/6250 [5:17:39<1:08:15,  3.55s/it, gpt_loss=0.685, lr=3.56e-7][A
Train step of epoch 0:  82%|████████▏ | 5097/6250 [5:17:39<1:08:36,  3.57s/it, gpt_loss=0.685, lr=3.56e-7][A
Train step of epoch 0:  82%|████████▏ | 5097/6250 [5:17:43<1:08:36,  3.57s/it, gpt_loss=0.576, lr=3.56e-7][A
Train step of epoch 0:  82%|████████▏ | 5098/6250 [5:17:43<1:09:39,  3.63s/it, gpt_loss=0.576, lr=3.56e-7][A
Train step of epoch 0:  82%|████████▏ | 5098/6250 [5:17:45<1:09:39,  3.63s/it, gpt_loss=0.542, lr=3.56e-7][A
Train step of epoch 0:  82%|████████▏ | 5099/6250 [5:17:45<1:02:26,  3.25s/it, gpt_loss=0.542, lr=3.56e-7][A[2025-04-24 05:10:28,570] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  82%|████████▏ | 5099/6250 [5:17:49<1:02:26,  3.25s/it, gpt_loss=0.493, lr=3.55e-7][A
Train step of epoch 0:  82%|████████▏ | 5100/6250 [5:17:49<1:07:04,  3.50s/it, gpt_loss=0.493, lr=3.55e-7][A
Train step of epoch 0:  82%|████████▏ | 5100/6250 [5:17:53<1:07:04,  3.50s/it, gpt_loss=0.593, lr=3.55e-7][A
Train step of epoch 0:  82%|████████▏ | 5101/6250 [5:17:53<1:06:58,  3.50s/it, gpt_loss=0.593, lr=3.55e-7][A
Train step of epoch 0:  82%|████████▏ | 5101/6250 [5:17:56<1:06:58,  3.50s/it, gpt_loss=0.675, lr=3.55e-7][A
Train step of epoch 0:  82%|████████▏ | 5102/6250 [5:17:56<1:06:31,  3.48s/it, gpt_loss=0.675, lr=3.55e-7][A
Train step of epoch 0:  82%|████████▏ | 5102/6250 [5:18:00<1:06:31,  3.48s/it, gpt_loss=0.644, lr=3.55e-7][A
Train step of epoch 0:  82%|████████▏ | 5103/6250 [5:18:00<1:05:54,  3.45s/it, gpt_loss=0.644, lr=3.55e-7][A[2025-04-24 05:10:42,840] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  82%|████████▏ | 5103/6250 [5:18:04<1:05:54,  3.45s/it, gpt_loss=0.633, lr=3.54e-7][A
Train step of epoch 0:  82%|████████▏ | 5104/6250 [5:18:04<1:08:50,  3.60s/it, gpt_loss=0.633, lr=3.54e-7][A
Train step of epoch 0:  82%|████████▏ | 5104/6250 [5:18:07<1:08:50,  3.60s/it, gpt_loss=0.633, lr=3.54e-7][A
Train step of epoch 0:  82%|████████▏ | 5105/6250 [5:18:07<1:10:01,  3.67s/it, gpt_loss=0.633, lr=3.54e-7][A
Train step of epoch 0:  82%|████████▏ | 5105/6250 [5:18:12<1:10:01,  3.67s/it, gpt_loss=0.589, lr=3.54e-7][A
Train step of epoch 0:  82%|████████▏ | 5106/6250 [5:18:12<1:14:29,  3.91s/it, gpt_loss=0.589, lr=3.54e-7][A
Train step of epoch 0:  82%|████████▏ | 5106/6250 [5:18:15<1:14:29,  3.91s/it, gpt_loss=0.71, lr=3.54e-7] [A
Train step of epoch 0:  82%|████████▏ | 5107/6250 [5:18:15<1:12:34,  3.81s/it, gpt_loss=0.71, lr=3.54e-7][A[2025-04-24 05:10:58,692] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  82%|████████▏ | 5107/6250 [5:18:19<1:12:34,  3.81s/it, gpt_loss=0.622, lr=3.53e-7][A
Train step of epoch 0:  82%|████████▏ | 5108/6250 [5:18:19<1:13:30,  3.86s/it, gpt_loss=0.622, lr=3.53e-7][A
Train step of epoch 0:  82%|████████▏ | 5108/6250 [5:18:24<1:13:30,  3.86s/it, gpt_loss=0.593, lr=3.53e-7][A
Train step of epoch 0:  82%|████████▏ | 5109/6250 [5:18:24<1:15:33,  3.97s/it, gpt_loss=0.593, lr=3.53e-7][A
Train step of epoch 0:  82%|████████▏ | 5109/6250 [5:18:26<1:15:33,  3.97s/it, gpt_loss=0.543, lr=3.53e-7][A
Train step of epoch 0:  82%|████████▏ | 5110/6250 [5:18:26<1:07:40,  3.56s/it, gpt_loss=0.543, lr=3.53e-7][A
Train step of epoch 0:  82%|████████▏ | 5110/6250 [5:18:30<1:07:40,  3.56s/it, gpt_loss=0.649, lr=3.53e-7][A
Train step of epoch 0:  82%|████████▏ | 5111/6250 [5:18:30<1:09:25,  3.66s/it, gpt_loss=0.649, lr=3.53e-7][A[2025-04-24 05:11:13,856] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  82%|████████▏ | 5111/6250 [5:18:35<1:09:25,  3.66s/it, gpt_loss=0.55, lr=3.52e-7] [A
Train step of epoch 0:  82%|████████▏ | 5112/6250 [5:18:35<1:13:52,  3.90s/it, gpt_loss=0.55, lr=3.52e-7][A
Train step of epoch 0:  82%|████████▏ | 5112/6250 [5:18:39<1:13:52,  3.90s/it, gpt_loss=0.532, lr=3.52e-7][A
Train step of epoch 0:  82%|████████▏ | 5113/6250 [5:18:39<1:15:31,  3.99s/it, gpt_loss=0.532, lr=3.52e-7][A
Train step of epoch 0:  82%|████████▏ | 5113/6250 [5:18:43<1:15:31,  3.99s/it, gpt_loss=0.707, lr=3.52e-7][A
Train step of epoch 0:  82%|████████▏ | 5114/6250 [5:18:43<1:13:52,  3.90s/it, gpt_loss=0.707, lr=3.52e-7][A
Train step of epoch 0:  82%|████████▏ | 5114/6250 [5:18:46<1:13:52,  3.90s/it, gpt_loss=0.561, lr=3.52e-7][A
Train step of epoch 0:  82%|████████▏ | 5115/6250 [5:18:46<1:09:40,  3.68s/it, gpt_loss=0.561, lr=3.52e-7][A[2025-04-24 05:11:28,411] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  82%|████████▏ | 5115/6250 [5:18:49<1:09:40,  3.68s/it, gpt_loss=0.588, lr=3.51e-7][A
Train step of epoch 0:  82%|████████▏ | 5116/6250 [5:18:49<1:08:27,  3.62s/it, gpt_loss=0.588, lr=3.51e-7][A
Train step of epoch 0:  82%|████████▏ | 5116/6250 [5:18:53<1:08:27,  3.62s/it, gpt_loss=0.662, lr=3.51e-7][A
Train step of epoch 0:  82%|████████▏ | 5117/6250 [5:18:53<1:06:50,  3.54s/it, gpt_loss=0.662, lr=3.51e-7][A
Train step of epoch 0:  82%|████████▏ | 5117/6250 [5:18:56<1:06:50,  3.54s/it, gpt_loss=0.622, lr=3.51e-7][A
Train step of epoch 0:  82%|████████▏ | 5118/6250 [5:18:56<1:05:36,  3.48s/it, gpt_loss=0.622, lr=3.51e-7][A
Train step of epoch 0:  82%|████████▏ | 5118/6250 [5:19:01<1:05:36,  3.48s/it, gpt_loss=0.669, lr=3.51e-7][A
Train step of epoch 0:  82%|████████▏ | 5119/6250 [5:19:01<1:14:22,  3.95s/it, gpt_loss=0.669, lr=3.51e-7][A[2025-04-24 05:11:44,265] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  82%|████████▏ | 5119/6250 [5:19:05<1:14:22,  3.95s/it, gpt_loss=0.442, lr=3.5e-7] [A
Train step of epoch 0:  82%|████████▏ | 5120/6250 [5:19:05<1:15:23,  4.00s/it, gpt_loss=0.442, lr=3.5e-7][A
Train step of epoch 0:  82%|████████▏ | 5120/6250 [5:19:09<1:15:23,  4.00s/it, gpt_loss=0.611, lr=3.5e-7][A
Train step of epoch 0:  82%|████████▏ | 5121/6250 [5:19:09<1:15:49,  4.03s/it, gpt_loss=0.611, lr=3.5e-7][A
Train step of epoch 0:  82%|████████▏ | 5121/6250 [5:19:13<1:15:49,  4.03s/it, gpt_loss=0.578, lr=3.5e-7][A
Train step of epoch 0:  82%|████████▏ | 5122/6250 [5:19:13<1:14:24,  3.96s/it, gpt_loss=0.578, lr=3.5e-7][A
Train step of epoch 0:  82%|████████▏ | 5122/6250 [5:19:17<1:14:24,  3.96s/it, gpt_loss=0.536, lr=3.5e-7][A
Train step of epoch 0:  82%|████████▏ | 5123/6250 [5:19:17<1:13:21,  3.91s/it, gpt_loss=0.536, lr=3.5e-7][A[2025-04-24 05:11:59,025] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  82%|████████▏ | 5123/6250 [5:19:20<1:13:21,  3.91s/it, gpt_loss=0.529, lr=3.49e-7][A
Train step of epoch 0:  82%|████████▏ | 5124/6250 [5:19:20<1:08:43,  3.66s/it, gpt_loss=0.529, lr=3.49e-7][A
Train step of epoch 0:  82%|████████▏ | 5124/6250 [5:19:24<1:08:43,  3.66s/it, gpt_loss=0.713, lr=3.49e-7][A
Train step of epoch 0:  82%|████████▏ | 5125/6250 [5:19:24<1:11:06,  3.79s/it, gpt_loss=0.713, lr=3.49e-7][A
Train step of epoch 0:  82%|████████▏ | 5125/6250 [5:19:27<1:11:06,  3.79s/it, gpt_loss=0.711, lr=3.49e-7][A
Train step of epoch 0:  82%|████████▏ | 5126/6250 [5:19:27<1:08:24,  3.65s/it, gpt_loss=0.711, lr=3.49e-7][A
Train step of epoch 0:  82%|████████▏ | 5126/6250 [5:19:31<1:08:24,  3.65s/it, gpt_loss=0.72, lr=3.49e-7] [A
Train step of epoch 0:  82%|████████▏ | 5127/6250 [5:19:31<1:07:04,  3.58s/it, gpt_loss=0.72, lr=3.49e-7][A[2025-04-24 05:12:13,862] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  82%|████████▏ | 5127/6250 [5:19:35<1:07:04,  3.58s/it, gpt_loss=0.787, lr=3.47e-7][A
Train step of epoch 0:  82%|████████▏ | 5128/6250 [5:19:35<1:09:18,  3.71s/it, gpt_loss=0.787, lr=3.47e-7][A
Train step of epoch 0:  82%|████████▏ | 5128/6250 [5:19:39<1:09:18,  3.71s/it, gpt_loss=0.481, lr=3.47e-7][A
Train step of epoch 0:  82%|████████▏ | 5129/6250 [5:19:39<1:10:45,  3.79s/it, gpt_loss=0.481, lr=3.47e-7][A
Train step of epoch 0:  82%|████████▏ | 5129/6250 [5:19:42<1:10:45,  3.79s/it, gpt_loss=0.638, lr=3.47e-7][A
Train step of epoch 0:  82%|████████▏ | 5130/6250 [5:19:42<1:09:20,  3.71s/it, gpt_loss=0.638, lr=3.47e-7][A
Train step of epoch 0:  82%|████████▏ | 5130/6250 [5:19:46<1:09:20,  3.71s/it, gpt_loss=0.504, lr=3.47e-7][A
Train step of epoch 0:  82%|████████▏ | 5131/6250 [5:19:46<1:07:24,  3.61s/it, gpt_loss=0.504, lr=3.47e-7][A[2025-04-24 05:12:28,023] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  82%|████████▏ | 5131/6250 [5:19:49<1:07:24,  3.61s/it, gpt_loss=0.71, lr=3.46e-7] [A
Train step of epoch 0:  82%|████████▏ | 5132/6250 [5:19:49<1:05:21,  3.51s/it, gpt_loss=0.71, lr=3.46e-7][A
Train step of epoch 0:  82%|████████▏ | 5132/6250 [5:19:52<1:05:21,  3.51s/it, gpt_loss=0.585, lr=3.46e-7][A
Train step of epoch 0:  82%|████████▏ | 5133/6250 [5:19:52<1:06:13,  3.56s/it, gpt_loss=0.585, lr=3.46e-7][A
Train step of epoch 0:  82%|████████▏ | 5133/6250 [5:19:56<1:06:13,  3.56s/it, gpt_loss=0.54, lr=3.46e-7] [A
Train step of epoch 0:  82%|████████▏ | 5134/6250 [5:19:56<1:07:32,  3.63s/it, gpt_loss=0.54, lr=3.46e-7][A
Train step of epoch 0:  82%|████████▏ | 5134/6250 [5:20:00<1:07:32,  3.63s/it, gpt_loss=0.599, lr=3.46e-7][A
Train step of epoch 0:  82%|████████▏ | 5135/6250 [5:20:00<1:09:27,  3.74s/it, gpt_loss=0.599, lr=3.46e-7][A[2025-04-24 05:12:43,255] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  82%|████████▏ | 5135/6250 [5:20:04<1:09:27,  3.74s/it, gpt_loss=0.6, lr=3.45e-7]  [A
Train step of epoch 0:  82%|████████▏ | 5136/6250 [5:20:04<1:09:34,  3.75s/it, gpt_loss=0.6, lr=3.45e-7][A
Train step of epoch 0:  82%|████████▏ | 5136/6250 [5:20:08<1:09:34,  3.75s/it, gpt_loss=0.683, lr=3.45e-7][A
Train step of epoch 0:  82%|████████▏ | 5137/6250 [5:20:08<1:10:42,  3.81s/it, gpt_loss=0.683, lr=3.45e-7][A
Train step of epoch 0:  82%|████████▏ | 5137/6250 [5:20:11<1:10:42,  3.81s/it, gpt_loss=0.6, lr=3.45e-7]  [A
Train step of epoch 0:  82%|████████▏ | 5138/6250 [5:20:11<1:07:57,  3.67s/it, gpt_loss=0.6, lr=3.45e-7][A
Train step of epoch 0:  82%|████████▏ | 5138/6250 [5:20:16<1:07:57,  3.67s/it, gpt_loss=0.726, lr=3.45e-7][A
Train step of epoch 0:  82%|████████▏ | 5139/6250 [5:20:16<1:12:00,  3.89s/it, gpt_loss=0.726, lr=3.45e-7][A[2025-04-24 05:12:58,862] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  82%|████████▏ | 5139/6250 [5:20:20<1:12:00,  3.89s/it, gpt_loss=0.689, lr=3.44e-7][A
Train step of epoch 0:  82%|████████▏ | 5140/6250 [5:20:20<1:12:03,  3.89s/it, gpt_loss=0.689, lr=3.44e-7][A
Train step of epoch 0:  82%|████████▏ | 5140/6250 [5:20:23<1:12:03,  3.89s/it, gpt_loss=0.622, lr=3.44e-7][A
Train step of epoch 0:  82%|████████▏ | 5141/6250 [5:20:23<1:09:20,  3.75s/it, gpt_loss=0.622, lr=3.44e-7][A
Train step of epoch 0:  82%|████████▏ | 5141/6250 [5:20:26<1:09:20,  3.75s/it, gpt_loss=0.488, lr=3.44e-7][A
Train step of epoch 0:  82%|████████▏ | 5142/6250 [5:20:26<1:06:43,  3.61s/it, gpt_loss=0.488, lr=3.44e-7][A
Train step of epoch 0:  82%|████████▏ | 5142/6250 [5:20:30<1:06:43,  3.61s/it, gpt_loss=0.621, lr=3.44e-7][A
Train step of epoch 0:  82%|████████▏ | 5143/6250 [5:20:30<1:09:37,  3.77s/it, gpt_loss=0.621, lr=3.44e-7][A[2025-04-24 05:13:12,282] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  82%|████████▏ | 5143/6250 [5:20:33<1:09:37,  3.77s/it, gpt_loss=0.516, lr=3.43e-7][A
Train step of epoch 0:  82%|████████▏ | 5144/6250 [5:20:33<1:02:52,  3.41s/it, gpt_loss=0.516, lr=3.43e-7][A
Train step of epoch 0:  82%|████████▏ | 5144/6250 [5:20:36<1:02:52,  3.41s/it, gpt_loss=0.686, lr=3.43e-7][A
Train step of epoch 0:  82%|████████▏ | 5145/6250 [5:20:36<1:01:05,  3.32s/it, gpt_loss=0.686, lr=3.43e-7][A
Train step of epoch 0:  82%|████████▏ | 5145/6250 [5:20:41<1:01:05,  3.32s/it, gpt_loss=0.64, lr=3.43e-7] [A
Train step of epoch 0:  82%|████████▏ | 5146/6250 [5:20:41<1:08:38,  3.73s/it, gpt_loss=0.64, lr=3.43e-7][A
Train step of epoch 0:  82%|████████▏ | 5146/6250 [5:20:44<1:08:38,  3.73s/it, gpt_loss=0.637, lr=3.43e-7][A
Train step of epoch 0:  82%|████████▏ | 5147/6250 [5:20:44<1:05:50,  3.58s/it, gpt_loss=0.637, lr=3.43e-7][A[2025-04-24 05:13:26,137] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  82%|████████▏ | 5147/6250 [5:20:47<1:05:50,  3.58s/it, gpt_loss=0.791, lr=3.42e-7][A
Train step of epoch 0:  82%|████████▏ | 5148/6250 [5:20:47<1:01:37,  3.36s/it, gpt_loss=0.791, lr=3.42e-7][A
Train step of epoch 0:  82%|████████▏ | 5148/6250 [5:20:51<1:01:37,  3.36s/it, gpt_loss=0.691, lr=3.42e-7][A
Train step of epoch 0:  82%|████████▏ | 5149/6250 [5:20:51<1:04:07,  3.49s/it, gpt_loss=0.691, lr=3.42e-7][A
Train step of epoch 0:  82%|████████▏ | 5149/6250 [5:20:55<1:04:07,  3.49s/it, gpt_loss=0.724, lr=3.42e-7][A
Train step of epoch 0:  82%|████████▏ | 5150/6250 [5:20:55<1:09:04,  3.77s/it, gpt_loss=0.724, lr=3.42e-7][A
Train step of epoch 0:  82%|████████▏ | 5150/6250 [5:20:59<1:09:04,  3.77s/it, gpt_loss=0.508, lr=3.42e-7][A
Train step of epoch 0:  82%|████████▏ | 5151/6250 [5:20:59<1:08:33,  3.74s/it, gpt_loss=0.508, lr=3.42e-7][A[2025-04-24 05:13:42,044] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  82%|████████▏ | 5151/6250 [5:21:03<1:08:33,  3.74s/it, gpt_loss=0.614, lr=3.41e-7][A
Train step of epoch 0:  82%|████████▏ | 5152/6250 [5:21:03<1:09:53,  3.82s/it, gpt_loss=0.614, lr=3.41e-7][A
Train step of epoch 0:  82%|████████▏ | 5152/6250 [5:21:06<1:09:53,  3.82s/it, gpt_loss=0.509, lr=3.41e-7][A
Train step of epoch 0:  82%|████████▏ | 5153/6250 [5:21:06<1:08:49,  3.76s/it, gpt_loss=0.509, lr=3.41e-7][A
Train step of epoch 0:  82%|████████▏ | 5153/6250 [5:21:10<1:08:49,  3.76s/it, gpt_loss=0.646, lr=3.41e-7][A
Train step of epoch 0:  82%|████████▏ | 5154/6250 [5:21:10<1:08:20,  3.74s/it, gpt_loss=0.646, lr=3.41e-7][A
Train step of epoch 0:  82%|████████▏ | 5154/6250 [5:21:14<1:08:20,  3.74s/it, gpt_loss=0.485, lr=3.41e-7][A
Train step of epoch 0:  82%|████████▏ | 5155/6250 [5:21:14<1:07:36,  3.70s/it, gpt_loss=0.485, lr=3.41e-7][A[2025-04-24 05:13:56,447] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  82%|████████▏ | 5155/6250 [5:21:17<1:07:36,  3.70s/it, gpt_loss=0.567, lr=3.4e-7] [A
Train step of epoch 0:  82%|████████▏ | 5156/6250 [5:21:17<1:06:12,  3.63s/it, gpt_loss=0.567, lr=3.4e-7][A
Train step of epoch 0:  82%|████████▏ | 5156/6250 [5:21:21<1:06:12,  3.63s/it, gpt_loss=0.648, lr=3.4e-7][A
Train step of epoch 0:  83%|████████▎ | 5157/6250 [5:21:21<1:04:49,  3.56s/it, gpt_loss=0.648, lr=3.4e-7][A
Train step of epoch 0:  83%|████████▎ | 5157/6250 [5:21:23<1:04:49,  3.56s/it, gpt_loss=0.529, lr=3.4e-7][A
Train step of epoch 0:  83%|████████▎ | 5158/6250 [5:21:23<59:34,  3.27s/it, gpt_loss=0.529, lr=3.4e-7]  [A
Train step of epoch 0:  83%|████████▎ | 5158/6250 [5:21:27<59:34,  3.27s/it, gpt_loss=0.625, lr=3.4e-7][A
Train step of epoch 0:  83%|████████▎ | 5159/6250 [5:21:27<1:03:23,  3.49s/it, gpt_loss=0.625, lr=3.4e-7][A[2025-04-24 05:14:09,968] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  83%|████████▎ | 5159/6250 [5:21:31<1:03:23,  3.49s/it, gpt_loss=0.542, lr=3.39e-7][A
Train step of epoch 0:  83%|████████▎ | 5160/6250 [5:21:31<1:03:38,  3.50s/it, gpt_loss=0.542, lr=3.39e-7][A
Train step of epoch 0:  83%|████████▎ | 5160/6250 [5:21:35<1:03:38,  3.50s/it, gpt_loss=0.571, lr=3.39e-7][A
Train step of epoch 0:  83%|████████▎ | 5161/6250 [5:21:35<1:08:54,  3.80s/it, gpt_loss=0.571, lr=3.39e-7][A
Train step of epoch 0:  83%|████████▎ | 5161/6250 [5:21:39<1:08:54,  3.80s/it, gpt_loss=0.486, lr=3.39e-7][A
Train step of epoch 0:  83%|████████▎ | 5162/6250 [5:21:39<1:07:41,  3.73s/it, gpt_loss=0.486, lr=3.39e-7][A
Train step of epoch 0:  83%|████████▎ | 5162/6250 [5:21:42<1:07:41,  3.73s/it, gpt_loss=0.567, lr=3.39e-7][A
Train step of epoch 0:  83%|████████▎ | 5163/6250 [5:21:42<1:06:16,  3.66s/it, gpt_loss=0.567, lr=3.39e-7][A[2025-04-24 05:14:25,266] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  83%|████████▎ | 5163/6250 [5:21:46<1:06:16,  3.66s/it, gpt_loss=0.634, lr=3.38e-7][A
Train step of epoch 0:  83%|████████▎ | 5164/6250 [5:21:46<1:06:42,  3.69s/it, gpt_loss=0.634, lr=3.38e-7][A
Train step of epoch 0:  83%|████████▎ | 5164/6250 [5:21:49<1:06:42,  3.69s/it, gpt_loss=0.63, lr=3.38e-7] [A
Train step of epoch 0:  83%|████████▎ | 5165/6250 [5:21:49<1:03:55,  3.53s/it, gpt_loss=0.63, lr=3.38e-7][A
Train step of epoch 0:  83%|████████▎ | 5165/6250 [5:21:53<1:03:55,  3.53s/it, gpt_loss=0.599, lr=3.38e-7][A
Train step of epoch 0:  83%|████████▎ | 5166/6250 [5:21:53<1:03:05,  3.49s/it, gpt_loss=0.599, lr=3.38e-7][A
Train step of epoch 0:  83%|████████▎ | 5166/6250 [5:21:56<1:03:05,  3.49s/it, gpt_loss=0.617, lr=3.38e-7][A
Train step of epoch 0:  83%|████████▎ | 5167/6250 [5:21:56<1:01:46,  3.42s/it, gpt_loss=0.617, lr=3.38e-7][A[2025-04-24 05:14:38,951] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  83%|████████▎ | 5167/6250 [5:22:00<1:01:46,  3.42s/it, gpt_loss=0.522, lr=3.37e-7][A
Train step of epoch 0:  83%|████████▎ | 5168/6250 [5:22:00<1:04:01,  3.55s/it, gpt_loss=0.522, lr=3.37e-7][A
Train step of epoch 0:  83%|████████▎ | 5168/6250 [5:22:04<1:04:01,  3.55s/it, gpt_loss=0.538, lr=3.37e-7][A
Train step of epoch 0:  83%|████████▎ | 5169/6250 [5:22:04<1:05:24,  3.63s/it, gpt_loss=0.538, lr=3.37e-7][A
Train step of epoch 0:  83%|████████▎ | 5169/6250 [5:22:08<1:05:24,  3.63s/it, gpt_loss=0.626, lr=3.37e-7][A
Train step of epoch 0:  83%|████████▎ | 5170/6250 [5:22:08<1:10:24,  3.91s/it, gpt_loss=0.626, lr=3.37e-7][A
Train step of epoch 0:  83%|████████▎ | 5170/6250 [5:22:12<1:10:24,  3.91s/it, gpt_loss=0.565, lr=3.37e-7][A
Train step of epoch 0:  83%|████████▎ | 5171/6250 [5:22:12<1:10:21,  3.91s/it, gpt_loss=0.565, lr=3.37e-7][A[2025-04-24 05:14:55,138] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  83%|████████▎ | 5171/6250 [5:22:16<1:10:21,  3.91s/it, gpt_loss=0.63, lr=3.36e-7] [A
Train step of epoch 0:  83%|████████▎ | 5172/6250 [5:22:16<1:10:09,  3.90s/it, gpt_loss=0.63, lr=3.36e-7][A
Train step of epoch 0:  83%|████████▎ | 5172/6250 [5:22:20<1:10:09,  3.90s/it, gpt_loss=0.613, lr=3.36e-7][A
Train step of epoch 0:  83%|████████▎ | 5173/6250 [5:22:20<1:13:10,  4.08s/it, gpt_loss=0.613, lr=3.36e-7][A
Train step of epoch 0:  83%|████████▎ | 5173/6250 [5:22:25<1:13:10,  4.08s/it, gpt_loss=0.557, lr=3.36e-7][A
Train step of epoch 0:  83%|████████▎ | 5174/6250 [5:22:25<1:15:56,  4.23s/it, gpt_loss=0.557, lr=3.36e-7][A
Train step of epoch 0:  83%|████████▎ | 5174/6250 [5:22:28<1:15:56,  4.23s/it, gpt_loss=0.744, lr=3.36e-7][A
Train step of epoch 0:  83%|████████▎ | 5175/6250 [5:22:28<1:11:14,  3.98s/it, gpt_loss=0.744, lr=3.36e-7][A[2025-04-24 05:15:12,191] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  83%|████████▎ | 5175/6250 [5:22:33<1:11:14,  3.98s/it, gpt_loss=0.727, lr=3.35e-7][A
Train step of epoch 0:  83%|████████▎ | 5176/6250 [5:22:33<1:14:30,  4.16s/it, gpt_loss=0.727, lr=3.35e-7][A
Train step of epoch 0:  83%|████████▎ | 5176/6250 [5:22:37<1:14:30,  4.16s/it, gpt_loss=0.645, lr=3.35e-7][A
Train step of epoch 0:  83%|████████▎ | 5177/6250 [5:22:37<1:13:54,  4.13s/it, gpt_loss=0.645, lr=3.35e-7][A
Train step of epoch 0:  83%|████████▎ | 5177/6250 [5:22:40<1:13:54,  4.13s/it, gpt_loss=0.558, lr=3.35e-7][A
Train step of epoch 0:  83%|████████▎ | 5178/6250 [5:22:40<1:09:44,  3.90s/it, gpt_loss=0.558, lr=3.35e-7][A
Train step of epoch 0:  83%|████████▎ | 5178/6250 [5:22:44<1:09:44,  3.90s/it, gpt_loss=0.382, lr=3.35e-7][A
Train step of epoch 0:  83%|████████▎ | 5179/6250 [5:22:44<1:06:35,  3.73s/it, gpt_loss=0.382, lr=3.35e-7][A[2025-04-24 05:15:25,968] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  83%|████████▎ | 5179/6250 [5:22:47<1:06:35,  3.73s/it, gpt_loss=0.488, lr=3.34e-7][A
Train step of epoch 0:  83%|████████▎ | 5180/6250 [5:22:47<1:02:43,  3.52s/it, gpt_loss=0.488, lr=3.34e-7][A
Train step of epoch 0:  83%|████████▎ | 5180/6250 [5:22:50<1:02:43,  3.52s/it, gpt_loss=0.615, lr=3.34e-7][A
Train step of epoch 0:  83%|████████▎ | 5181/6250 [5:22:50<1:03:09,  3.55s/it, gpt_loss=0.615, lr=3.34e-7][A
Train step of epoch 0:  83%|████████▎ | 5181/6250 [5:22:53<1:03:09,  3.55s/it, gpt_loss=0.578, lr=3.34e-7][A
Train step of epoch 0:  83%|████████▎ | 5182/6250 [5:22:53<1:00:03,  3.37s/it, gpt_loss=0.578, lr=3.34e-7][A
Train step of epoch 0:  83%|████████▎ | 5182/6250 [5:22:57<1:00:03,  3.37s/it, gpt_loss=0.639, lr=3.34e-7][A
Train step of epoch 0:  83%|████████▎ | 5183/6250 [5:22:57<1:03:08,  3.55s/it, gpt_loss=0.639, lr=3.34e-7][A[2025-04-24 05:15:41,207] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  83%|████████▎ | 5183/6250 [5:23:02<1:03:08,  3.55s/it, gpt_loss=0.638, lr=3.33e-7][A
Train step of epoch 0:  83%|████████▎ | 5184/6250 [5:23:02<1:09:09,  3.89s/it, gpt_loss=0.638, lr=3.33e-7][A
Train step of epoch 0:  83%|████████▎ | 5184/6250 [5:23:06<1:09:09,  3.89s/it, gpt_loss=0.551, lr=3.33e-7][A
Train step of epoch 0:  83%|████████▎ | 5185/6250 [5:23:06<1:09:45,  3.93s/it, gpt_loss=0.551, lr=3.33e-7][A
Train step of epoch 0:  83%|████████▎ | 5185/6250 [5:23:10<1:09:45,  3.93s/it, gpt_loss=0.634, lr=3.33e-7][A
Train step of epoch 0:  83%|████████▎ | 5186/6250 [5:23:10<1:08:44,  3.88s/it, gpt_loss=0.634, lr=3.33e-7][A
Train step of epoch 0:  83%|████████▎ | 5186/6250 [5:23:13<1:08:44,  3.88s/it, gpt_loss=0.551, lr=3.33e-7][A
Train step of epoch 0:  83%|████████▎ | 5187/6250 [5:23:13<1:03:45,  3.60s/it, gpt_loss=0.551, lr=3.33e-7][A[2025-04-24 05:15:56,530] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  83%|████████▎ | 5187/6250 [5:23:17<1:03:45,  3.60s/it, gpt_loss=0.936, lr=3.33e-7][A
Train step of epoch 0:  83%|████████▎ | 5188/6250 [5:23:17<1:09:01,  3.90s/it, gpt_loss=0.936, lr=3.33e-7][A
Train step of epoch 0:  83%|████████▎ | 5188/6250 [5:23:21<1:09:01,  3.90s/it, gpt_loss=0.558, lr=3.33e-7][A
Train step of epoch 0:  83%|████████▎ | 5189/6250 [5:23:21<1:07:34,  3.82s/it, gpt_loss=0.558, lr=3.33e-7][A
Train step of epoch 0:  83%|████████▎ | 5189/6250 [5:23:24<1:07:34,  3.82s/it, gpt_loss=0.564, lr=3.33e-7][A
Train step of epoch 0:  83%|████████▎ | 5190/6250 [5:23:24<1:04:14,  3.64s/it, gpt_loss=0.564, lr=3.33e-7][A
Train step of epoch 0:  83%|████████▎ | 5190/6250 [5:23:27<1:04:14,  3.64s/it, gpt_loss=0.446, lr=3.33e-7][A
Train step of epoch 0:  83%|████████▎ | 5191/6250 [5:23:27<1:01:38,  3.49s/it, gpt_loss=0.446, lr=3.33e-7][A[2025-04-24 05:16:10,039] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  83%|████████▎ | 5191/6250 [5:23:31<1:01:38,  3.49s/it, gpt_loss=0.556, lr=3.32e-7][A
Train step of epoch 0:  83%|████████▎ | 5192/6250 [5:23:31<1:01:40,  3.50s/it, gpt_loss=0.556, lr=3.32e-7][A
Train step of epoch 0:  83%|████████▎ | 5192/6250 [5:23:34<1:01:40,  3.50s/it, gpt_loss=0.669, lr=3.32e-7][A
Train step of epoch 0:  83%|████████▎ | 5193/6250 [5:23:34<1:01:50,  3.51s/it, gpt_loss=0.669, lr=3.32e-7][A
Train step of epoch 0:  83%|████████▎ | 5193/6250 [5:23:37<1:01:50,  3.51s/it, gpt_loss=0.508, lr=3.32e-7][A
Train step of epoch 0:  83%|████████▎ | 5194/6250 [5:23:37<59:44,  3.39s/it, gpt_loss=0.508, lr=3.32e-7]  [A
Train step of epoch 0:  83%|████████▎ | 5194/6250 [5:23:41<59:44,  3.39s/it, gpt_loss=0.645, lr=3.32e-7][A
Train step of epoch 0:  83%|████████▎ | 5195/6250 [5:23:41<1:02:14,  3.54s/it, gpt_loss=0.645, lr=3.32e-7][A[2025-04-24 05:16:24,196] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  83%|████████▎ | 5195/6250 [5:23:45<1:02:14,  3.54s/it, gpt_loss=0.553, lr=3.31e-7][A
Train step of epoch 0:  83%|████████▎ | 5196/6250 [5:23:45<1:02:34,  3.56s/it, gpt_loss=0.553, lr=3.31e-7][A
Train step of epoch 0:  83%|████████▎ | 5196/6250 [5:23:49<1:02:34,  3.56s/it, gpt_loss=0.842, lr=3.31e-7][A
Train step of epoch 0:  83%|████████▎ | 5197/6250 [5:23:49<1:06:30,  3.79s/it, gpt_loss=0.842, lr=3.31e-7][A
Train step of epoch 0:  83%|████████▎ | 5197/6250 [5:23:53<1:06:30,  3.79s/it, gpt_loss=0.658, lr=3.31e-7][A
Train step of epoch 0:  83%|████████▎ | 5198/6250 [5:23:53<1:04:00,  3.65s/it, gpt_loss=0.658, lr=3.31e-7][A
Train step of epoch 0:  83%|████████▎ | 5198/6250 [5:23:56<1:04:00,  3.65s/it, gpt_loss=0.585, lr=3.31e-7][A
Train step of epoch 0:  83%|████████▎ | 5199/6250 [5:23:56<1:00:09,  3.43s/it, gpt_loss=0.585, lr=3.31e-7][A[2025-04-24 05:16:38,065] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-04-24 05:16:38,066] [INFO] [logging.py:107:log_dist] [Rank 0] step=1300, skipped=0, lr=[3.29592687855263e-07, 3.29592687855263e-07], mom=[(0.9, 0.95), (0.9, 0.95)]
[2025-04-24 05:16:38,066] [INFO] [timer.py:264:stop] epoch=0/micro_step=5200/global_step=1300, RunningAvgSamplesPerSec=2.226389879284739, CurrSamplesPerSec=2.399910959930709, MemAllocated=40.57GB, MaxMemAllocated=60.14GB

Train step of epoch 0:  83%|████████▎ | 5199/6250 [5:23:59<1:00:09,  3.43s/it, gpt_loss=0.538, lr=3.3e-7] [A
Train step of epoch 0:  83%|████████▎ | 5200/6250 [5:23:59<59:21,  3.39s/it, gpt_loss=0.538, lr=3.3e-7]  [A
Train step of epoch 0:  83%|████████▎ | 5200/6250 [5:24:02<59:21,  3.39s/it, gpt_loss=0.566, lr=3.3e-7][A
Train step of epoch 0:  83%|████████▎ | 5201/6250 [5:24:02<1:00:02,  3.43s/it, gpt_loss=0.566, lr=3.3e-7][A
Train step of epoch 0:  83%|████████▎ | 5201/6250 [5:24:07<1:00:02,  3.43s/it, gpt_loss=0.833, lr=3.3e-7][A
Train step of epoch 0:  83%|████████▎ | 5202/6250 [5:24:07<1:04:30,  3.69s/it, gpt_loss=0.833, lr=3.3e-7][A
Train step of epoch 0:  83%|████████▎ | 5202/6250 [5:24:11<1:04:30,  3.69s/it, gpt_loss=0.758, lr=3.3e-7][A
Train step of epoch 0:  83%|████████▎ | 5203/6250 [5:24:11<1:08:14,  3.91s/it, gpt_loss=0.758, lr=3.3e-7][A[2025-04-24 05:16:53,684] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  83%|████████▎ | 5203/6250 [5:24:14<1:08:14,  3.91s/it, gpt_loss=0.678, lr=3.29e-7][A
Train step of epoch 0:  83%|████████▎ | 5204/6250 [5:24:14<1:05:20,  3.75s/it, gpt_loss=0.678, lr=3.29e-7][A
Train step of epoch 0:  83%|████████▎ | 5204/6250 [5:24:18<1:05:20,  3.75s/it, gpt_loss=0.465, lr=3.29e-7][A
Train step of epoch 0:  83%|████████▎ | 5205/6250 [5:24:18<1:06:06,  3.80s/it, gpt_loss=0.465, lr=3.29e-7][A
Train step of epoch 0:  83%|████████▎ | 5205/6250 [5:24:21<1:06:06,  3.80s/it, gpt_loss=0.55, lr=3.29e-7] [A
Train step of epoch 0:  83%|████████▎ | 5206/6250 [5:24:21<1:00:18,  3.47s/it, gpt_loss=0.55, lr=3.29e-7][A
Train step of epoch 0:  83%|████████▎ | 5206/6250 [5:24:24<1:00:18,  3.47s/it, gpt_loss=0.628, lr=3.29e-7][A
Train step of epoch 0:  83%|████████▎ | 5207/6250 [5:24:24<59:20,  3.41s/it, gpt_loss=0.628, lr=3.29e-7]  [A[2025-04-24 05:17:07,117] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  83%|████████▎ | 5207/6250 [5:24:28<59:20,  3.41s/it, gpt_loss=0.653, lr=3.28e-7][A
Train step of epoch 0:  83%|████████▎ | 5208/6250 [5:24:28<59:56,  3.45s/it, gpt_loss=0.653, lr=3.28e-7][A
Train step of epoch 0:  83%|████████▎ | 5208/6250 [5:24:32<59:56,  3.45s/it, gpt_loss=0.574, lr=3.28e-7][A
Train step of epoch 0:  83%|████████▎ | 5209/6250 [5:24:32<1:02:00,  3.57s/it, gpt_loss=0.574, lr=3.28e-7][A
Train step of epoch 0:  83%|████████▎ | 5209/6250 [5:24:36<1:02:00,  3.57s/it, gpt_loss=0.568, lr=3.28e-7][A
Train step of epoch 0:  83%|████████▎ | 5210/6250 [5:24:36<1:03:48,  3.68s/it, gpt_loss=0.568, lr=3.28e-7][A
Train step of epoch 0:  83%|████████▎ | 5210/6250 [5:24:39<1:03:48,  3.68s/it, gpt_loss=0.489, lr=3.28e-7][A
Train step of epoch 0:  83%|████████▎ | 5211/6250 [5:24:39<1:01:04,  3.53s/it, gpt_loss=0.489, lr=3.28e-7][A[2025-04-24 05:17:21,945] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  83%|████████▎ | 5211/6250 [5:24:43<1:01:04,  3.53s/it, gpt_loss=0.437, lr=3.27e-7][A
Train step of epoch 0:  83%|████████▎ | 5212/6250 [5:24:43<1:02:47,  3.63s/it, gpt_loss=0.437, lr=3.27e-7][A
Train step of epoch 0:  83%|████████▎ | 5212/6250 [5:24:46<1:02:47,  3.63s/it, gpt_loss=0.606, lr=3.27e-7][A
Train step of epoch 0:  83%|████████▎ | 5213/6250 [5:24:46<1:02:23,  3.61s/it, gpt_loss=0.606, lr=3.27e-7][A
Train step of epoch 0:  83%|████████▎ | 5213/6250 [5:24:50<1:02:23,  3.61s/it, gpt_loss=0.516, lr=3.27e-7][A
Train step of epoch 0:  83%|████████▎ | 5214/6250 [5:24:50<1:02:08,  3.60s/it, gpt_loss=0.516, lr=3.27e-7][A
Train step of epoch 0:  83%|████████▎ | 5214/6250 [5:24:53<1:02:08,  3.60s/it, gpt_loss=0.667, lr=3.27e-7][A
Train step of epoch 0:  83%|████████▎ | 5215/6250 [5:24:53<57:32,  3.34s/it, gpt_loss=0.667, lr=3.27e-7]  [A[2025-04-24 05:17:35,756] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  83%|████████▎ | 5215/6250 [5:24:57<57:32,  3.34s/it, gpt_loss=0.605, lr=3.26e-7][A
Train step of epoch 0:  83%|████████▎ | 5216/6250 [5:24:57<1:00:40,  3.52s/it, gpt_loss=0.605, lr=3.26e-7][A
Train step of epoch 0:  83%|████████▎ | 5216/6250 [5:25:01<1:00:40,  3.52s/it, gpt_loss=0.654, lr=3.26e-7][A
Train step of epoch 0:  83%|████████▎ | 5217/6250 [5:25:01<1:03:33,  3.69s/it, gpt_loss=0.654, lr=3.26e-7][A
Train step of epoch 0:  83%|████████▎ | 5217/6250 [5:25:03<1:03:33,  3.69s/it, gpt_loss=0.673, lr=3.26e-7][A
Train step of epoch 0:  83%|████████▎ | 5218/6250 [5:25:03<58:31,  3.40s/it, gpt_loss=0.673, lr=3.26e-7]  [A
Train step of epoch 0:  83%|████████▎ | 5218/6250 [5:25:07<58:31,  3.40s/it, gpt_loss=0.724, lr=3.26e-7][A
Train step of epoch 0:  84%|████████▎ | 5219/6250 [5:25:07<59:41,  3.47s/it, gpt_loss=0.724, lr=3.26e-7][A[2025-04-24 05:17:49,871] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  84%|████████▎ | 5219/6250 [5:25:11<59:41,  3.47s/it, gpt_loss=0.466, lr=3.25e-7][A
Train step of epoch 0:  84%|████████▎ | 5220/6250 [5:25:11<1:00:34,  3.53s/it, gpt_loss=0.466, lr=3.25e-7][A
Train step of epoch 0:  84%|████████▎ | 5220/6250 [5:25:14<1:00:34,  3.53s/it, gpt_loss=0.596, lr=3.25e-7][A
Train step of epoch 0:  84%|████████▎ | 5221/6250 [5:25:14<1:01:10,  3.57s/it, gpt_loss=0.596, lr=3.25e-7][A
Train step of epoch 0:  84%|████████▎ | 5221/6250 [5:25:18<1:01:10,  3.57s/it, gpt_loss=0.705, lr=3.25e-7][A
Train step of epoch 0:  84%|████████▎ | 5222/6250 [5:25:18<1:02:56,  3.67s/it, gpt_loss=0.705, lr=3.25e-7][A
Train step of epoch 0:  84%|████████▎ | 5222/6250 [5:25:22<1:02:56,  3.67s/it, gpt_loss=0.51, lr=3.25e-7] [A
Train step of epoch 0:  84%|████████▎ | 5223/6250 [5:25:22<1:03:23,  3.70s/it, gpt_loss=0.51, lr=3.25e-7][A[2025-04-24 05:18:05,992] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  84%|████████▎ | 5223/6250 [5:25:27<1:03:23,  3.70s/it, gpt_loss=0.604, lr=3.24e-7][A
Train step of epoch 0:  84%|████████▎ | 5224/6250 [5:25:27<1:08:47,  4.02s/it, gpt_loss=0.604, lr=3.24e-7][A
Train step of epoch 0:  84%|████████▎ | 5224/6250 [5:25:30<1:08:47,  4.02s/it, gpt_loss=0.554, lr=3.24e-7][A
Train step of epoch 0:  84%|████████▎ | 5225/6250 [5:25:30<1:05:49,  3.85s/it, gpt_loss=0.554, lr=3.24e-7][A
Train step of epoch 0:  84%|████████▎ | 5225/6250 [5:25:34<1:05:49,  3.85s/it, gpt_loss=0.609, lr=3.24e-7][A
Train step of epoch 0:  84%|████████▎ | 5226/6250 [5:25:34<1:06:09,  3.88s/it, gpt_loss=0.609, lr=3.24e-7][A
Train step of epoch 0:  84%|████████▎ | 5226/6250 [5:25:38<1:06:09,  3.88s/it, gpt_loss=0.618, lr=3.24e-7][A
Train step of epoch 0:  84%|████████▎ | 5227/6250 [5:25:38<1:08:13,  4.00s/it, gpt_loss=0.618, lr=3.24e-7][A[2025-04-24 05:18:21,100] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  84%|████████▎ | 5227/6250 [5:25:42<1:08:13,  4.00s/it, gpt_loss=0.474, lr=3.23e-7][A
Train step of epoch 0:  84%|████████▎ | 5228/6250 [5:25:42<1:05:13,  3.83s/it, gpt_loss=0.474, lr=3.23e-7][A
Train step of epoch 0:  84%|████████▎ | 5228/6250 [5:25:46<1:05:13,  3.83s/it, gpt_loss=0.783, lr=3.23e-7][A
Train step of epoch 0:  84%|████████▎ | 5229/6250 [5:25:46<1:06:28,  3.91s/it, gpt_loss=0.783, lr=3.23e-7][A
Train step of epoch 0:  84%|████████▎ | 5229/6250 [5:25:50<1:06:28,  3.91s/it, gpt_loss=0.569, lr=3.23e-7][A
Train step of epoch 0:  84%|████████▎ | 5230/6250 [5:25:50<1:06:34,  3.92s/it, gpt_loss=0.569, lr=3.23e-7][A
Train step of epoch 0:  84%|████████▎ | 5230/6250 [5:25:53<1:06:34,  3.92s/it, gpt_loss=0.572, lr=3.23e-7][A
Train step of epoch 0:  84%|████████▎ | 5231/6250 [5:25:53<1:01:55,  3.65s/it, gpt_loss=0.572, lr=3.23e-7][A[2025-04-24 05:18:34,885] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  84%|████████▎ | 5231/6250 [5:25:56<1:01:55,  3.65s/it, gpt_loss=0.455, lr=3.22e-7][A
Train step of epoch 0:  84%|████████▎ | 5232/6250 [5:25:56<57:15,  3.38s/it, gpt_loss=0.455, lr=3.22e-7]  [A
Train step of epoch 0:  84%|████████▎ | 5232/6250 [5:25:59<57:15,  3.38s/it, gpt_loss=0.53, lr=3.22e-7] [A
Train step of epoch 0:  84%|████████▎ | 5233/6250 [5:25:59<59:28,  3.51s/it, gpt_loss=0.53, lr=3.22e-7][A
Train step of epoch 0:  84%|████████▎ | 5233/6250 [5:26:03<59:28,  3.51s/it, gpt_loss=0.435, lr=3.22e-7][A
Train step of epoch 0:  84%|████████▎ | 5234/6250 [5:26:03<57:18,  3.38s/it, gpt_loss=0.435, lr=3.22e-7][A
Train step of epoch 0:  84%|████████▎ | 5234/6250 [5:26:06<57:18,  3.38s/it, gpt_loss=0.56, lr=3.22e-7] [A
Train step of epoch 0:  84%|████████▍ | 5235/6250 [5:26:06<56:51,  3.36s/it, gpt_loss=0.56, lr=3.22e-7][A[2025-04-24 05:18:48,797] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  84%|████████▍ | 5235/6250 [5:26:10<56:51,  3.36s/it, gpt_loss=0.692, lr=3.21e-7][A
Train step of epoch 0:  84%|████████▍ | 5236/6250 [5:26:10<58:28,  3.46s/it, gpt_loss=0.692, lr=3.21e-7][A
Train step of epoch 0:  84%|████████▍ | 5236/6250 [5:26:14<58:28,  3.46s/it, gpt_loss=0.673, lr=3.21e-7][A
Train step of epoch 0:  84%|████████▍ | 5237/6250 [5:26:14<1:03:30,  3.76s/it, gpt_loss=0.673, lr=3.21e-7][A
Train step of epoch 0:  84%|████████▍ | 5237/6250 [5:26:18<1:03:30,  3.76s/it, gpt_loss=0.436, lr=3.21e-7][A
Train step of epoch 0:  84%|████████▍ | 5238/6250 [5:26:18<1:03:12,  3.75s/it, gpt_loss=0.436, lr=3.21e-7][A
Train step of epoch 0:  84%|████████▍ | 5238/6250 [5:26:21<1:03:12,  3.75s/it, gpt_loss=0.849, lr=3.21e-7][A
Train step of epoch 0:  84%|████████▍ | 5239/6250 [5:26:21<58:34,  3.48s/it, gpt_loss=0.849, lr=3.21e-7]  [A[2025-04-24 05:19:02,543] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  84%|████████▍ | 5239/6250 [5:26:23<58:34,  3.48s/it, gpt_loss=0.611, lr=3.2e-7] [A
Train step of epoch 0:  84%|████████▍ | 5240/6250 [5:26:23<54:42,  3.25s/it, gpt_loss=0.611, lr=3.2e-7][A
Train step of epoch 0:  84%|████████▍ | 5240/6250 [5:26:28<54:42,  3.25s/it, gpt_loss=0.51, lr=3.2e-7] [A
Train step of epoch 0:  84%|████████▍ | 5241/6250 [5:26:28<1:01:22,  3.65s/it, gpt_loss=0.51, lr=3.2e-7][A
Train step of epoch 0:  84%|████████▍ | 5241/6250 [5:26:32<1:01:22,  3.65s/it, gpt_loss=0.669, lr=3.2e-7][A
Train step of epoch 0:  84%|████████▍ | 5242/6250 [5:26:32<1:02:16,  3.71s/it, gpt_loss=0.669, lr=3.2e-7][A
Train step of epoch 0:  84%|████████▍ | 5242/6250 [5:26:35<1:02:16,  3.71s/it, gpt_loss=0.62, lr=3.2e-7] [A
Train step of epoch 0:  84%|████████▍ | 5243/6250 [5:26:35<58:40,  3.50s/it, gpt_loss=0.62, lr=3.2e-7]  [A[2025-04-24 05:19:18,642] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  84%|████████▍ | 5243/6250 [5:26:39<58:40,  3.50s/it, gpt_loss=0.58, lr=3.19e-7][A
Train step of epoch 0:  84%|████████▍ | 5244/6250 [5:26:39<1:04:31,  3.85s/it, gpt_loss=0.58, lr=3.19e-7][A
Train step of epoch 0:  84%|████████▍ | 5244/6250 [5:26:43<1:04:31,  3.85s/it, gpt_loss=0.558, lr=3.19e-7][A
Train step of epoch 0:  84%|████████▍ | 5245/6250 [5:26:43<1:03:12,  3.77s/it, gpt_loss=0.558, lr=3.19e-7][A
Train step of epoch 0:  84%|████████▍ | 5245/6250 [5:26:47<1:03:12,  3.77s/it, gpt_loss=0.53, lr=3.19e-7] [A
Train step of epoch 0:  84%|████████▍ | 5246/6250 [5:26:47<1:04:26,  3.85s/it, gpt_loss=0.53, lr=3.19e-7][A
Train step of epoch 0:  84%|████████▍ | 5246/6250 [5:26:51<1:04:26,  3.85s/it, gpt_loss=0.474, lr=3.19e-7][A
Train step of epoch 0:  84%|████████▍ | 5247/6250 [5:26:51<1:02:35,  3.74s/it, gpt_loss=0.474, lr=3.19e-7][A[2025-04-24 05:19:33,555] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  84%|████████▍ | 5247/6250 [5:26:54<1:02:35,  3.74s/it, gpt_loss=0.458, lr=3.18e-7][A
Train step of epoch 0:  84%|████████▍ | 5248/6250 [5:26:54<1:02:44,  3.76s/it, gpt_loss=0.458, lr=3.18e-7][A
Train step of epoch 0:  84%|████████▍ | 5248/6250 [5:26:58<1:02:44,  3.76s/it, gpt_loss=0.667, lr=3.18e-7][A
Train step of epoch 0:  84%|████████▍ | 5249/6250 [5:26:58<1:02:49,  3.77s/it, gpt_loss=0.667, lr=3.18e-7][A
Train step of epoch 0:  84%|████████▍ | 5249/6250 [5:27:03<1:02:49,  3.77s/it, gpt_loss=0.618, lr=3.18e-7][A
Train step of epoch 0:  84%|████████▍ | 5250/6250 [5:27:03<1:06:26,  3.99s/it, gpt_loss=0.618, lr=3.18e-7][A
Train step of epoch 0:  84%|████████▍ | 5250/6250 [5:27:05<1:06:26,  3.99s/it, gpt_loss=0.592, lr=3.18e-7][A
Train step of epoch 0:  84%|████████▍ | 5251/6250 [5:27:05<1:00:32,  3.64s/it, gpt_loss=0.592, lr=3.18e-7][A[2025-04-24 05:19:49,834] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  84%|████████▍ | 5251/6250 [5:27:11<1:00:32,  3.64s/it, gpt_loss=0.578, lr=3.17e-7][A
Train step of epoch 0:  84%|████████▍ | 5252/6250 [5:27:11<1:08:09,  4.10s/it, gpt_loss=0.578, lr=3.17e-7][A
Train step of epoch 0:  84%|████████▍ | 5252/6250 [5:27:14<1:08:09,  4.10s/it, gpt_loss=0.563, lr=3.17e-7][A
Train step of epoch 0:  84%|████████▍ | 5253/6250 [5:27:14<1:06:50,  4.02s/it, gpt_loss=0.563, lr=3.17e-7][A
Train step of epoch 0:  84%|████████▍ | 5253/6250 [5:27:18<1:06:50,  4.02s/it, gpt_loss=0.634, lr=3.17e-7][A
Train step of epoch 0:  84%|████████▍ | 5254/6250 [5:27:18<1:03:27,  3.82s/it, gpt_loss=0.634, lr=3.17e-7][A
Train step of epoch 0:  84%|████████▍ | 5254/6250 [5:27:21<1:03:27,  3.82s/it, gpt_loss=0.674, lr=3.17e-7][A
Train step of epoch 0:  84%|████████▍ | 5255/6250 [5:27:21<1:01:50,  3.73s/it, gpt_loss=0.674, lr=3.17e-7][A[2025-04-24 05:20:04,493] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  84%|████████▍ | 5255/6250 [5:27:25<1:01:50,  3.73s/it, gpt_loss=0.599, lr=3.16e-7][A
Train step of epoch 0:  84%|████████▍ | 5256/6250 [5:27:25<1:02:50,  3.79s/it, gpt_loss=0.599, lr=3.16e-7][A
Train step of epoch 0:  84%|████████▍ | 5256/6250 [5:27:29<1:02:50,  3.79s/it, gpt_loss=0.642, lr=3.16e-7][A
Train step of epoch 0:  84%|████████▍ | 5257/6250 [5:27:29<1:04:36,  3.90s/it, gpt_loss=0.642, lr=3.16e-7][A
Train step of epoch 0:  84%|████████▍ | 5257/6250 [5:27:33<1:04:36,  3.90s/it, gpt_loss=0.568, lr=3.16e-7][A
Train step of epoch 0:  84%|████████▍ | 5258/6250 [5:27:33<1:04:41,  3.91s/it, gpt_loss=0.568, lr=3.16e-7][A
Train step of epoch 0:  84%|████████▍ | 5258/6250 [5:27:37<1:04:41,  3.91s/it, gpt_loss=0.621, lr=3.16e-7][A
Train step of epoch 0:  84%|████████▍ | 5259/6250 [5:27:37<1:02:57,  3.81s/it, gpt_loss=0.621, lr=3.16e-7][A[2025-04-24 05:20:20,587] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  84%|████████▍ | 5259/6250 [5:27:41<1:02:57,  3.81s/it, gpt_loss=0.733, lr=3.15e-7][A
Train step of epoch 0:  84%|████████▍ | 5260/6250 [5:27:41<1:05:55,  4.00s/it, gpt_loss=0.733, lr=3.15e-7][A
Train step of epoch 0:  84%|████████▍ | 5260/6250 [5:27:45<1:05:55,  4.00s/it, gpt_loss=0.606, lr=3.15e-7][A
Train step of epoch 0:  84%|████████▍ | 5261/6250 [5:27:45<1:03:43,  3.87s/it, gpt_loss=0.606, lr=3.15e-7][A
Train step of epoch 0:  84%|████████▍ | 5261/6250 [5:27:48<1:03:43,  3.87s/it, gpt_loss=0.708, lr=3.15e-7][A
Train step of epoch 0:  84%|████████▍ | 5262/6250 [5:27:48<1:00:10,  3.65s/it, gpt_loss=0.708, lr=3.15e-7][A
Train step of epoch 0:  84%|████████▍ | 5262/6250 [5:27:52<1:00:10,  3.65s/it, gpt_loss=0.457, lr=3.15e-7][A
Train step of epoch 0:  84%|████████▍ | 5263/6250 [5:27:52<59:19,  3.61s/it, gpt_loss=0.457, lr=3.15e-7]  [A[2025-04-24 05:20:34,519] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  84%|████████▍ | 5263/6250 [5:27:55<59:19,  3.61s/it, gpt_loss=0.555, lr=3.15e-7][A
Train step of epoch 0:  84%|████████▍ | 5264/6250 [5:27:55<59:47,  3.64s/it, gpt_loss=0.555, lr=3.15e-7][A
Train step of epoch 0:  84%|████████▍ | 5264/6250 [5:27:59<59:47,  3.64s/it, gpt_loss=0.686, lr=3.15e-7][A
Train step of epoch 0:  84%|████████▍ | 5265/6250 [5:27:59<59:01,  3.60s/it, gpt_loss=0.686, lr=3.15e-7][A
Train step of epoch 0:  84%|████████▍ | 5265/6250 [5:28:04<59:01,  3.60s/it, gpt_loss=0.665, lr=3.15e-7][A
Train step of epoch 0:  84%|████████▍ | 5266/6250 [5:28:04<1:08:22,  4.17s/it, gpt_loss=0.665, lr=3.15e-7][A
Train step of epoch 0:  84%|████████▍ | 5266/6250 [5:28:07<1:08:22,  4.17s/it, gpt_loss=0.553, lr=3.15e-7][A
Train step of epoch 0:  84%|████████▍ | 5267/6250 [5:28:07<1:01:02,  3.73s/it, gpt_loss=0.553, lr=3.15e-7][A[2025-04-24 05:20:49,765] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  84%|████████▍ | 5267/6250 [5:28:11<1:01:02,  3.73s/it, gpt_loss=0.589, lr=3.14e-7][A
Train step of epoch 0:  84%|████████▍ | 5268/6250 [5:28:11<1:00:07,  3.67s/it, gpt_loss=0.589, lr=3.14e-7][A
Train step of epoch 0:  84%|████████▍ | 5268/6250 [5:28:14<1:00:07,  3.67s/it, gpt_loss=0.505, lr=3.14e-7][A
Train step of epoch 0:  84%|████████▍ | 5269/6250 [5:28:14<1:01:11,  3.74s/it, gpt_loss=0.505, lr=3.14e-7][A
Train step of epoch 0:  84%|████████▍ | 5269/6250 [5:28:17<1:01:11,  3.74s/it, gpt_loss=0.562, lr=3.14e-7][A
Train step of epoch 0:  84%|████████▍ | 5270/6250 [5:28:17<55:50,  3.42s/it, gpt_loss=0.562, lr=3.14e-7]  [A
Train step of epoch 0:  84%|████████▍ | 5270/6250 [5:28:21<55:50,  3.42s/it, gpt_loss=0.642, lr=3.14e-7][A
Train step of epoch 0:  84%|████████▍ | 5271/6250 [5:28:21<57:04,  3.50s/it, gpt_loss=0.642, lr=3.14e-7][A[2025-04-24 05:21:03,197] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  84%|████████▍ | 5271/6250 [5:28:24<57:04,  3.50s/it, gpt_loss=0.668, lr=3.13e-7][A
Train step of epoch 0:  84%|████████▍ | 5272/6250 [5:28:24<55:28,  3.40s/it, gpt_loss=0.668, lr=3.13e-7][A
Train step of epoch 0:  84%|████████▍ | 5272/6250 [5:28:28<55:28,  3.40s/it, gpt_loss=0.618, lr=3.13e-7][A
Train step of epoch 0:  84%|████████▍ | 5273/6250 [5:28:28<56:47,  3.49s/it, gpt_loss=0.618, lr=3.13e-7][A
Train step of epoch 0:  84%|████████▍ | 5273/6250 [5:28:31<56:47,  3.49s/it, gpt_loss=0.595, lr=3.13e-7][A
Train step of epoch 0:  84%|████████▍ | 5274/6250 [5:28:31<54:55,  3.38s/it, gpt_loss=0.595, lr=3.13e-7][A
Train step of epoch 0:  84%|████████▍ | 5274/6250 [5:28:35<54:55,  3.38s/it, gpt_loss=0.611, lr=3.13e-7][A
Train step of epoch 0:  84%|████████▍ | 5275/6250 [5:28:35<1:01:24,  3.78s/it, gpt_loss=0.611, lr=3.13e-7][A[2025-04-24 05:21:18,237] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  84%|████████▍ | 5275/6250 [5:28:39<1:01:24,  3.78s/it, gpt_loss=0.458, lr=3.12e-7][A
Train step of epoch 0:  84%|████████▍ | 5276/6250 [5:28:39<1:00:04,  3.70s/it, gpt_loss=0.458, lr=3.12e-7][A
Train step of epoch 0:  84%|████████▍ | 5276/6250 [5:28:43<1:00:04,  3.70s/it, gpt_loss=0.553, lr=3.12e-7][A
Train step of epoch 0:  84%|████████▍ | 5277/6250 [5:28:43<1:02:55,  3.88s/it, gpt_loss=0.553, lr=3.12e-7][A
Train step of epoch 0:  84%|████████▍ | 5277/6250 [5:28:47<1:02:55,  3.88s/it, gpt_loss=0.537, lr=3.12e-7][A
Train step of epoch 0:  84%|████████▍ | 5278/6250 [5:28:47<1:01:57,  3.82s/it, gpt_loss=0.537, lr=3.12e-7][A
Train step of epoch 0:  84%|████████▍ | 5278/6250 [5:28:50<1:01:57,  3.82s/it, gpt_loss=0.729, lr=3.12e-7][A
Train step of epoch 0:  84%|████████▍ | 5279/6250 [5:28:50<58:52,  3.64s/it, gpt_loss=0.729, lr=3.12e-7]  [A[2025-04-24 05:21:34,051] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  84%|████████▍ | 5279/6250 [5:28:55<58:52,  3.64s/it, gpt_loss=0.629, lr=3.11e-7][A
Train step of epoch 0:  84%|████████▍ | 5280/6250 [5:28:55<1:03:34,  3.93s/it, gpt_loss=0.629, lr=3.11e-7][A
Train step of epoch 0:  84%|████████▍ | 5280/6250 [5:28:59<1:03:34,  3.93s/it, gpt_loss=0.688, lr=3.11e-7][A
Train step of epoch 0:  84%|████████▍ | 5281/6250 [5:28:59<1:04:56,  4.02s/it, gpt_loss=0.688, lr=3.11e-7][A
Train step of epoch 0:  84%|████████▍ | 5281/6250 [5:29:03<1:04:56,  4.02s/it, gpt_loss=0.616, lr=3.11e-7][A
Train step of epoch 0:  85%|████████▍ | 5282/6250 [5:29:03<1:03:18,  3.92s/it, gpt_loss=0.616, lr=3.11e-7][A
Train step of epoch 0:  85%|████████▍ | 5282/6250 [5:29:06<1:03:18,  3.92s/it, gpt_loss=0.52, lr=3.11e-7] [A
Train step of epoch 0:  85%|████████▍ | 5283/6250 [5:29:06<59:46,  3.71s/it, gpt_loss=0.52, lr=3.11e-7]  [A[2025-04-24 05:21:50,056] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  85%|████████▍ | 5283/6250 [5:29:11<59:46,  3.71s/it, gpt_loss=0.457, lr=3.1e-7][A
Train step of epoch 0:  85%|████████▍ | 5284/6250 [5:29:11<1:05:20,  4.06s/it, gpt_loss=0.457, lr=3.1e-7][A
Train step of epoch 0:  85%|████████▍ | 5284/6250 [5:29:15<1:05:20,  4.06s/it, gpt_loss=0.615, lr=3.1e-7][A
Train step of epoch 0:  85%|████████▍ | 5285/6250 [5:29:15<1:04:06,  3.99s/it, gpt_loss=0.615, lr=3.1e-7][A
Train step of epoch 0:  85%|████████▍ | 5285/6250 [5:29:18<1:04:06,  3.99s/it, gpt_loss=0.508, lr=3.1e-7][A
Train step of epoch 0:  85%|████████▍ | 5286/6250 [5:29:18<58:52,  3.66s/it, gpt_loss=0.508, lr=3.1e-7]  [A
Train step of epoch 0:  85%|████████▍ | 5286/6250 [5:29:21<58:52,  3.66s/it, gpt_loss=0.467, lr=3.1e-7][A
Train step of epoch 0:  85%|████████▍ | 5287/6250 [5:29:21<55:55,  3.48s/it, gpt_loss=0.467, lr=3.1e-7][A[2025-04-24 05:22:02,597] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  85%|████████▍ | 5287/6250 [5:29:23<55:55,  3.48s/it, gpt_loss=0.412, lr=3.09e-7][A
Train step of epoch 0:  85%|████████▍ | 5288/6250 [5:29:23<52:18,  3.26s/it, gpt_loss=0.412, lr=3.09e-7][A
Train step of epoch 0:  85%|████████▍ | 5288/6250 [5:29:27<52:18,  3.26s/it, gpt_loss=0.45, lr=3.09e-7] [A
Train step of epoch 0:  85%|████████▍ | 5289/6250 [5:29:27<54:35,  3.41s/it, gpt_loss=0.45, lr=3.09e-7][A
Train step of epoch 0:  85%|████████▍ | 5289/6250 [5:29:31<54:35,  3.41s/it, gpt_loss=0.725, lr=3.09e-7][A
Train step of epoch 0:  85%|████████▍ | 5290/6250 [5:29:31<57:28,  3.59s/it, gpt_loss=0.725, lr=3.09e-7][A
Train step of epoch 0:  85%|████████▍ | 5290/6250 [5:29:33<57:28,  3.59s/it, gpt_loss=0.557, lr=3.09e-7][A
Train step of epoch 0:  85%|████████▍ | 5291/6250 [5:29:33<51:07,  3.20s/it, gpt_loss=0.557, lr=3.09e-7][A[2025-04-24 05:22:15,642] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  85%|████████▍ | 5291/6250 [5:29:36<51:07,  3.20s/it, gpt_loss=0.627, lr=3.08e-7][A
Train step of epoch 0:  85%|████████▍ | 5292/6250 [5:29:36<50:05,  3.14s/it, gpt_loss=0.627, lr=3.08e-7][A
Train step of epoch 0:  85%|████████▍ | 5292/6250 [5:29:41<50:05,  3.14s/it, gpt_loss=0.606, lr=3.08e-7][A
Train step of epoch 0:  85%|████████▍ | 5293/6250 [5:29:41<56:07,  3.52s/it, gpt_loss=0.606, lr=3.08e-7][A
Train step of epoch 0:  85%|████████▍ | 5293/6250 [5:29:44<56:07,  3.52s/it, gpt_loss=0.551, lr=3.08e-7][A
Train step of epoch 0:  85%|████████▍ | 5294/6250 [5:29:44<54:17,  3.41s/it, gpt_loss=0.551, lr=3.08e-7][A
Train step of epoch 0:  85%|████████▍ | 5294/6250 [5:29:48<54:17,  3.41s/it, gpt_loss=0.746, lr=3.08e-7][A
Train step of epoch 0:  85%|████████▍ | 5295/6250 [5:29:48<56:31,  3.55s/it, gpt_loss=0.746, lr=3.08e-7][A[2025-04-24 05:22:31,506] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  85%|████████▍ | 5295/6250 [5:29:52<56:31,  3.55s/it, gpt_loss=0.718, lr=3.07e-7][A
Train step of epoch 0:  85%|████████▍ | 5296/6250 [5:29:52<1:00:37,  3.81s/it, gpt_loss=0.718, lr=3.07e-7][A
Train step of epoch 0:  85%|████████▍ | 5296/6250 [5:29:56<1:00:37,  3.81s/it, gpt_loss=0.615, lr=3.07e-7][A
Train step of epoch 0:  85%|████████▍ | 5297/6250 [5:29:56<1:02:03,  3.91s/it, gpt_loss=0.615, lr=3.07e-7][A
Train step of epoch 0:  85%|████████▍ | 5297/6250 [5:30:01<1:02:03,  3.91s/it, gpt_loss=0.706, lr=3.07e-7][A
Train step of epoch 0:  85%|████████▍ | 5298/6250 [5:30:01<1:05:37,  4.14s/it, gpt_loss=0.706, lr=3.07e-7][A
Train step of epoch 0:  85%|████████▍ | 5298/6250 [5:30:04<1:05:37,  4.14s/it, gpt_loss=0.5, lr=3.07e-7]  [A
Train step of epoch 0:  85%|████████▍ | 5299/6250 [5:30:04<1:00:57,  3.85s/it, gpt_loss=0.5, lr=3.07e-7][A[2025-04-24 05:22:48,256] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  85%|████████▍ | 5299/6250 [5:30:09<1:00:57,  3.85s/it, gpt_loss=0.81, lr=3.07e-7][A
Train step of epoch 0:  85%|████████▍ | 5300/6250 [5:30:09<1:05:20,  4.13s/it, gpt_loss=0.81, lr=3.07e-7][A
Train step of epoch 0:  85%|████████▍ | 5300/6250 [5:30:13<1:05:20,  4.13s/it, gpt_loss=0.705, lr=3.07e-7][A
Train step of epoch 0:  85%|████████▍ | 5301/6250 [5:30:13<1:05:49,  4.16s/it, gpt_loss=0.705, lr=3.07e-7][A
Train step of epoch 0:  85%|████████▍ | 5301/6250 [5:30:16<1:05:49,  4.16s/it, gpt_loss=0.599, lr=3.07e-7][A
Train step of epoch 0:  85%|████████▍ | 5302/6250 [5:30:16<59:27,  3.76s/it, gpt_loss=0.599, lr=3.07e-7]  [A
Train step of epoch 0:  85%|████████▍ | 5302/6250 [5:30:20<59:27,  3.76s/it, gpt_loss=0.664, lr=3.07e-7][A
Train step of epoch 0:  85%|████████▍ | 5303/6250 [5:30:20<57:46,  3.66s/it, gpt_loss=0.664, lr=3.07e-7][A[2025-04-24 05:23:02,100] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  85%|████████▍ | 5303/6250 [5:30:23<57:46,  3.66s/it, gpt_loss=0.539, lr=3.06e-7][A
Train step of epoch 0:  85%|████████▍ | 5304/6250 [5:30:23<56:13,  3.57s/it, gpt_loss=0.539, lr=3.06e-7][A
Train step of epoch 0:  85%|████████▍ | 5304/6250 [5:30:27<56:13,  3.57s/it, gpt_loss=0.707, lr=3.06e-7][A
Train step of epoch 0:  85%|████████▍ | 5305/6250 [5:30:27<57:22,  3.64s/it, gpt_loss=0.707, lr=3.06e-7][A
Train step of epoch 0:  85%|████████▍ | 5305/6250 [5:30:30<57:22,  3.64s/it, gpt_loss=0.57, lr=3.06e-7] [A
Train step of epoch 0:  85%|████████▍ | 5306/6250 [5:30:30<57:02,  3.63s/it, gpt_loss=0.57, lr=3.06e-7][A
Train step of epoch 0:  85%|████████▍ | 5306/6250 [5:30:33<57:02,  3.63s/it, gpt_loss=0.584, lr=3.06e-7][A
Train step of epoch 0:  85%|████████▍ | 5307/6250 [5:30:33<53:42,  3.42s/it, gpt_loss=0.584, lr=3.06e-7][A[2025-04-24 05:23:16,465] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  85%|████████▍ | 5307/6250 [5:30:37<53:42,  3.42s/it, gpt_loss=0.588, lr=3.05e-7][A
Train step of epoch 0:  85%|████████▍ | 5308/6250 [5:30:37<56:31,  3.60s/it, gpt_loss=0.588, lr=3.05e-7][A
Train step of epoch 0:  85%|████████▍ | 5308/6250 [5:30:42<56:31,  3.60s/it, gpt_loss=0.673, lr=3.05e-7][A
Train step of epoch 0:  85%|████████▍ | 5309/6250 [5:30:42<1:01:41,  3.93s/it, gpt_loss=0.673, lr=3.05e-7][A
Train step of epoch 0:  85%|████████▍ | 5309/6250 [5:30:47<1:01:41,  3.93s/it, gpt_loss=0.628, lr=3.05e-7][A
Train step of epoch 0:  85%|████████▍ | 5310/6250 [5:30:47<1:06:04,  4.22s/it, gpt_loss=0.628, lr=3.05e-7][A
Train step of epoch 0:  85%|████████▍ | 5310/6250 [5:30:49<1:06:04,  4.22s/it, gpt_loss=0.591, lr=3.05e-7][A
Train step of epoch 0:  85%|████████▍ | 5311/6250 [5:30:49<58:02,  3.71s/it, gpt_loss=0.591, lr=3.05e-7]  [A[2025-04-24 05:23:31,951] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  85%|████████▍ | 5311/6250 [5:30:53<58:02,  3.71s/it, gpt_loss=0.652, lr=3.04e-7][A
Train step of epoch 0:  85%|████████▍ | 5312/6250 [5:30:53<56:24,  3.61s/it, gpt_loss=0.652, lr=3.04e-7][A
Train step of epoch 0:  85%|████████▍ | 5312/6250 [5:30:57<56:24,  3.61s/it, gpt_loss=0.723, lr=3.04e-7][A
Train step of epoch 0:  85%|████████▌ | 5313/6250 [5:30:57<1:00:24,  3.87s/it, gpt_loss=0.723, lr=3.04e-7][A
Train step of epoch 0:  85%|████████▌ | 5313/6250 [5:31:00<1:00:24,  3.87s/it, gpt_loss=0.547, lr=3.04e-7][A
Train step of epoch 0:  85%|████████▌ | 5314/6250 [5:31:00<56:58,  3.65s/it, gpt_loss=0.547, lr=3.04e-7]  [A
Train step of epoch 0:  85%|████████▌ | 5314/6250 [5:31:03<56:58,  3.65s/it, gpt_loss=0.516, lr=3.04e-7][A
Train step of epoch 0:  85%|████████▌ | 5315/6250 [5:31:03<53:04,  3.41s/it, gpt_loss=0.516, lr=3.04e-7][A[2025-04-24 05:23:46,189] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  85%|████████▌ | 5315/6250 [5:31:07<53:04,  3.41s/it, gpt_loss=0.627, lr=3.03e-7][A
Train step of epoch 0:  85%|████████▌ | 5316/6250 [5:31:07<54:47,  3.52s/it, gpt_loss=0.627, lr=3.03e-7][A
Train step of epoch 0:  85%|████████▌ | 5316/6250 [5:31:11<54:47,  3.52s/it, gpt_loss=0.52, lr=3.03e-7] [A
Train step of epoch 0:  85%|████████▌ | 5317/6250 [5:31:11<57:00,  3.67s/it, gpt_loss=0.52, lr=3.03e-7][A
Train step of epoch 0:  85%|████████▌ | 5317/6250 [5:31:16<57:00,  3.67s/it, gpt_loss=0.664, lr=3.03e-7][A
Train step of epoch 0:  85%|████████▌ | 5318/6250 [5:31:16<1:02:26,  4.02s/it, gpt_loss=0.664, lr=3.03e-7][A
Train step of epoch 0:  85%|████████▌ | 5318/6250 [5:31:19<1:02:26,  4.02s/it, gpt_loss=0.556, lr=3.03e-7][A
Train step of epoch 0:  85%|████████▌ | 5319/6250 [5:31:19<56:27,  3.64s/it, gpt_loss=0.556, lr=3.03e-7]  [A[2025-04-24 05:24:00,431] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  85%|████████▌ | 5319/6250 [5:31:21<56:27,  3.64s/it, gpt_loss=0.442, lr=3.02e-7][A
Train step of epoch 0:  85%|████████▌ | 5320/6250 [5:31:21<51:44,  3.34s/it, gpt_loss=0.442, lr=3.02e-7][A
Train step of epoch 0:  85%|████████▌ | 5320/6250 [5:31:24<51:44,  3.34s/it, gpt_loss=0.635, lr=3.02e-7][A
Train step of epoch 0:  85%|████████▌ | 5321/6250 [5:31:24<49:12,  3.18s/it, gpt_loss=0.635, lr=3.02e-7][A
Train step of epoch 0:  85%|████████▌ | 5321/6250 [5:31:27<49:12,  3.18s/it, gpt_loss=0.479, lr=3.02e-7][A
Train step of epoch 0:  85%|████████▌ | 5322/6250 [5:31:27<48:02,  3.11s/it, gpt_loss=0.479, lr=3.02e-7][A
Train step of epoch 0:  85%|████████▌ | 5322/6250 [5:31:30<48:02,  3.11s/it, gpt_loss=0.466, lr=3.02e-7][A
Train step of epoch 0:  85%|████████▌ | 5323/6250 [5:31:30<49:09,  3.18s/it, gpt_loss=0.466, lr=3.02e-7][A[2025-04-24 05:24:13,960] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  85%|████████▌ | 5323/6250 [5:31:35<49:09,  3.18s/it, gpt_loss=0.67, lr=3.01e-7] [A
Train step of epoch 0:  85%|████████▌ | 5324/6250 [5:31:35<54:52,  3.56s/it, gpt_loss=0.67, lr=3.01e-7][A
Train step of epoch 0:  85%|████████▌ | 5324/6250 [5:31:39<54:52,  3.56s/it, gpt_loss=0.618, lr=3.01e-7][A
Train step of epoch 0:  85%|████████▌ | 5325/6250 [5:31:39<58:18,  3.78s/it, gpt_loss=0.618, lr=3.01e-7][A
Train step of epoch 0:  85%|████████▌ | 5325/6250 [5:31:44<58:18,  3.78s/it, gpt_loss=0.5, lr=3.01e-7]  [A
Train step of epoch 0:  85%|████████▌ | 5326/6250 [5:31:44<1:02:40,  4.07s/it, gpt_loss=0.5, lr=3.01e-7][A
Train step of epoch 0:  85%|████████▌ | 5326/6250 [5:31:48<1:02:40,  4.07s/it, gpt_loss=0.628, lr=3.01e-7][A
Train step of epoch 0:  85%|████████▌ | 5327/6250 [5:31:48<1:02:49,  4.08s/it, gpt_loss=0.628, lr=3.01e-7][A[2025-04-24 05:24:31,198] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  85%|████████▌ | 5327/6250 [5:31:52<1:02:49,  4.08s/it, gpt_loss=0.647, lr=3e-7]   [A
Train step of epoch 0:  85%|████████▌ | 5328/6250 [5:31:52<1:02:41,  4.08s/it, gpt_loss=0.647, lr=3e-7][A
Train step of epoch 0:  85%|████████▌ | 5328/6250 [5:31:56<1:02:41,  4.08s/it, gpt_loss=0.505, lr=3e-7][A
Train step of epoch 0:  85%|████████▌ | 5329/6250 [5:31:56<1:01:21,  4.00s/it, gpt_loss=0.505, lr=3e-7][A
Train step of epoch 0:  85%|████████▌ | 5329/6250 [5:31:59<1:01:21,  4.00s/it, gpt_loss=0.771, lr=3e-7][A
Train step of epoch 0:  85%|████████▌ | 5330/6250 [5:31:59<57:34,  3.76s/it, gpt_loss=0.771, lr=3e-7]  [A
Train step of epoch 0:  85%|████████▌ | 5330/6250 [5:32:03<57:34,  3.76s/it, gpt_loss=0.47, lr=3e-7] [A
Train step of epoch 0:  85%|████████▌ | 5331/6250 [5:32:03<59:01,  3.85s/it, gpt_loss=0.47, lr=3e-7][A[2025-04-24 05:24:45,685] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  85%|████████▌ | 5331/6250 [5:32:06<59:01,  3.85s/it, gpt_loss=0.76, lr=3e-7][A
Train step of epoch 0:  85%|████████▌ | 5332/6250 [5:32:06<56:55,  3.72s/it, gpt_loss=0.76, lr=3e-7][A
Train step of epoch 0:  85%|████████▌ | 5332/6250 [5:32:11<56:55,  3.72s/it, gpt_loss=0.605, lr=3e-7][A
Train step of epoch 0:  85%|████████▌ | 5333/6250 [5:32:11<1:00:26,  3.95s/it, gpt_loss=0.605, lr=3e-7][A
Train step of epoch 0:  85%|████████▌ | 5333/6250 [5:32:15<1:00:26,  3.95s/it, gpt_loss=0.56, lr=3e-7] [A
Train step of epoch 0:  85%|████████▌ | 5334/6250 [5:32:15<59:46,  3.92s/it, gpt_loss=0.56, lr=3e-7]  [A
Train step of epoch 0:  85%|████████▌ | 5334/6250 [5:32:19<59:46,  3.92s/it, gpt_loss=0.476, lr=3e-7][A
Train step of epoch 0:  85%|████████▌ | 5335/6250 [5:32:19<1:00:30,  3.97s/it, gpt_loss=0.476, lr=3e-7][A[2025-04-24 05:25:01,585] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  85%|████████▌ | 5335/6250 [5:32:22<1:00:30,  3.97s/it, gpt_loss=0.643, lr=2.99e-7][A
Train step of epoch 0:  85%|████████▌ | 5336/6250 [5:32:22<58:13,  3.82s/it, gpt_loss=0.643, lr=2.99e-7]  [A
Train step of epoch 0:  85%|████████▌ | 5336/6250 [5:32:26<58:13,  3.82s/it, gpt_loss=0.665, lr=2.99e-7][A
Train step of epoch 0:  85%|████████▌ | 5337/6250 [5:32:26<58:16,  3.83s/it, gpt_loss=0.665, lr=2.99e-7][A
Train step of epoch 0:  85%|████████▌ | 5337/6250 [5:32:29<58:16,  3.83s/it, gpt_loss=0.614, lr=2.99e-7][A
Train step of epoch 0:  85%|████████▌ | 5338/6250 [5:32:29<54:07,  3.56s/it, gpt_loss=0.614, lr=2.99e-7][A
Train step of epoch 0:  85%|████████▌ | 5338/6250 [5:32:33<54:07,  3.56s/it, gpt_loss=0.574, lr=2.99e-7][A
Train step of epoch 0:  85%|████████▌ | 5339/6250 [5:32:33<56:22,  3.71s/it, gpt_loss=0.574, lr=2.99e-7][A[2025-04-24 05:25:15,879] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  85%|████████▌ | 5339/6250 [5:32:37<56:22,  3.71s/it, gpt_loss=0.653, lr=2.98e-7][A
Train step of epoch 0:  85%|████████▌ | 5340/6250 [5:32:37<55:05,  3.63s/it, gpt_loss=0.653, lr=2.98e-7][A
Train step of epoch 0:  85%|████████▌ | 5340/6250 [5:32:41<55:05,  3.63s/it, gpt_loss=0.768, lr=2.98e-7][A
Train step of epoch 0:  85%|████████▌ | 5341/6250 [5:32:41<1:00:15,  3.98s/it, gpt_loss=0.768, lr=2.98e-7][A
Train step of epoch 0:  85%|████████▌ | 5341/6250 [5:32:46<1:00:15,  3.98s/it, gpt_loss=0.621, lr=2.98e-7][A
Train step of epoch 0:  85%|████████▌ | 5342/6250 [5:32:46<1:00:57,  4.03s/it, gpt_loss=0.621, lr=2.98e-7][A
Train step of epoch 0:  85%|████████▌ | 5342/6250 [5:32:49<1:00:57,  4.03s/it, gpt_loss=0.513, lr=2.98e-7][A
Train step of epoch 0:  85%|████████▌ | 5343/6250 [5:32:49<55:58,  3.70s/it, gpt_loss=0.513, lr=2.98e-7]  [A[2025-04-24 05:25:31,699] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  85%|████████▌ | 5343/6250 [5:32:52<55:58,  3.70s/it, gpt_loss=0.701, lr=2.97e-7][A
Train step of epoch 0:  86%|████████▌ | 5344/6250 [5:32:52<57:01,  3.78s/it, gpt_loss=0.701, lr=2.97e-7][A
Train step of epoch 0:  86%|████████▌ | 5344/6250 [5:32:56<57:01,  3.78s/it, gpt_loss=0.587, lr=2.97e-7][A
Train step of epoch 0:  86%|████████▌ | 5345/6250 [5:32:56<55:55,  3.71s/it, gpt_loss=0.587, lr=2.97e-7][A
Train step of epoch 0:  86%|████████▌ | 5345/6250 [5:33:00<55:55,  3.71s/it, gpt_loss=0.757, lr=2.97e-7][A
Train step of epoch 0:  86%|████████▌ | 5346/6250 [5:33:00<58:14,  3.87s/it, gpt_loss=0.757, lr=2.97e-7][A
Train step of epoch 0:  86%|████████▌ | 5346/6250 [5:33:04<58:14,  3.87s/it, gpt_loss=0.485, lr=2.97e-7][A
Train step of epoch 0:  86%|████████▌ | 5347/6250 [5:33:04<55:33,  3.69s/it, gpt_loss=0.485, lr=2.97e-7][A[2025-04-24 05:25:46,443] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  86%|████████▌ | 5347/6250 [5:33:07<55:33,  3.69s/it, gpt_loss=0.661, lr=2.96e-7][A
Train step of epoch 0:  86%|████████▌ | 5348/6250 [5:33:07<55:25,  3.69s/it, gpt_loss=0.661, lr=2.96e-7][A
Train step of epoch 0:  86%|████████▌ | 5348/6250 [5:33:12<55:25,  3.69s/it, gpt_loss=0.554, lr=2.96e-7][A
Train step of epoch 0:  86%|████████▌ | 5349/6250 [5:33:12<1:02:28,  4.16s/it, gpt_loss=0.554, lr=2.96e-7][A
Train step of epoch 0:  86%|████████▌ | 5349/6250 [5:33:14<1:02:28,  4.16s/it, gpt_loss=0.601, lr=2.96e-7][A
Train step of epoch 0:  86%|████████▌ | 5350/6250 [5:33:14<52:44,  3.52s/it, gpt_loss=0.601, lr=2.96e-7]  [A
Train step of epoch 0:  86%|████████▌ | 5350/6250 [5:33:18<52:44,  3.52s/it, gpt_loss=0.565, lr=2.96e-7][A
Train step of epoch 0:  86%|████████▌ | 5351/6250 [5:33:18<54:02,  3.61s/it, gpt_loss=0.565, lr=2.96e-7][A[2025-04-24 05:26:01,727] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  86%|████████▌ | 5351/6250 [5:33:22<54:02,  3.61s/it, gpt_loss=0.544, lr=2.95e-7][A
Train step of epoch 0:  86%|████████▌ | 5352/6250 [5:33:22<56:35,  3.78s/it, gpt_loss=0.544, lr=2.95e-7][A
Train step of epoch 0:  86%|████████▌ | 5352/6250 [5:33:26<56:35,  3.78s/it, gpt_loss=0.47, lr=2.95e-7] [A
Train step of epoch 0:  86%|████████▌ | 5353/6250 [5:33:26<57:19,  3.83s/it, gpt_loss=0.47, lr=2.95e-7][A
Train step of epoch 0:  86%|████████▌ | 5353/6250 [5:33:30<57:19,  3.83s/it, gpt_loss=0.626, lr=2.95e-7][A
Train step of epoch 0:  86%|████████▌ | 5354/6250 [5:33:30<54:05,  3.62s/it, gpt_loss=0.626, lr=2.95e-7][A
Train step of epoch 0:  86%|████████▌ | 5354/6250 [5:33:33<54:05,  3.62s/it, gpt_loss=0.474, lr=2.95e-7][A
Train step of epoch 0:  86%|████████▌ | 5355/6250 [5:33:33<53:37,  3.59s/it, gpt_loss=0.474, lr=2.95e-7][A[2025-04-24 05:26:15,961] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  86%|████████▌ | 5355/6250 [5:33:37<53:37,  3.59s/it, gpt_loss=0.686, lr=2.95e-7][A
Train step of epoch 0:  86%|████████▌ | 5356/6250 [5:33:37<53:39,  3.60s/it, gpt_loss=0.686, lr=2.95e-7][A
Train step of epoch 0:  86%|████████▌ | 5356/6250 [5:33:41<53:39,  3.60s/it, gpt_loss=0.715, lr=2.95e-7][A
Train step of epoch 0:  86%|████████▌ | 5357/6250 [5:33:41<56:46,  3.82s/it, gpt_loss=0.715, lr=2.95e-7][A
Train step of epoch 0:  86%|████████▌ | 5357/6250 [5:33:44<56:46,  3.82s/it, gpt_loss=0.485, lr=2.95e-7][A
Train step of epoch 0:  86%|████████▌ | 5358/6250 [5:33:44<55:02,  3.70s/it, gpt_loss=0.485, lr=2.95e-7][A
Train step of epoch 0:  86%|████████▌ | 5358/6250 [5:33:49<55:02,  3.70s/it, gpt_loss=0.628, lr=2.95e-7][A
Train step of epoch 0:  86%|████████▌ | 5359/6250 [5:33:49<59:09,  3.98s/it, gpt_loss=0.628, lr=2.95e-7][A[2025-04-24 05:26:32,340] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  86%|████████▌ | 5359/6250 [5:33:53<59:09,  3.98s/it, gpt_loss=0.628, lr=2.94e-7][A
Train step of epoch 0:  86%|████████▌ | 5360/6250 [5:33:53<59:06,  3.98s/it, gpt_loss=0.628, lr=2.94e-7][A
Train step of epoch 0:  86%|████████▌ | 5360/6250 [5:33:57<59:06,  3.98s/it, gpt_loss=0.59, lr=2.94e-7] [A
Train step of epoch 0:  86%|████████▌ | 5361/6250 [5:33:57<59:42,  4.03s/it, gpt_loss=0.59, lr=2.94e-7][A
Train step of epoch 0:  86%|████████▌ | 5361/6250 [5:34:00<59:42,  4.03s/it, gpt_loss=0.447, lr=2.94e-7][A
Train step of epoch 0:  86%|████████▌ | 5362/6250 [5:34:00<55:13,  3.73s/it, gpt_loss=0.447, lr=2.94e-7][A
Train step of epoch 0:  86%|████████▌ | 5362/6250 [5:34:05<55:13,  3.73s/it, gpt_loss=0.671, lr=2.94e-7][A
Train step of epoch 0:  86%|████████▌ | 5363/6250 [5:34:05<58:26,  3.95s/it, gpt_loss=0.671, lr=2.94e-7][A[2025-04-24 05:26:47,913] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  86%|████████▌ | 5363/6250 [5:34:09<58:26,  3.95s/it, gpt_loss=0.442, lr=2.93e-7][A
Train step of epoch 0:  86%|████████▌ | 5364/6250 [5:34:09<58:16,  3.95s/it, gpt_loss=0.442, lr=2.93e-7][A
Train step of epoch 0:  86%|████████▌ | 5364/6250 [5:34:13<58:16,  3.95s/it, gpt_loss=0.47, lr=2.93e-7] [A
Train step of epoch 0:  86%|████████▌ | 5365/6250 [5:34:13<1:01:08,  4.14s/it, gpt_loss=0.47, lr=2.93e-7][A
Train step of epoch 0:  86%|████████▌ | 5365/6250 [5:34:17<1:01:08,  4.14s/it, gpt_loss=0.646, lr=2.93e-7][A
Train step of epoch 0:  86%|████████▌ | 5366/6250 [5:34:17<57:40,  3.91s/it, gpt_loss=0.646, lr=2.93e-7]  [A
Train step of epoch 0:  86%|████████▌ | 5366/6250 [5:34:20<57:40,  3.91s/it, gpt_loss=0.487, lr=2.93e-7][A
Train step of epoch 0:  86%|████████▌ | 5367/6250 [5:34:20<54:53,  3.73s/it, gpt_loss=0.487, lr=2.93e-7][A[2025-04-24 05:27:03,495] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  86%|████████▌ | 5367/6250 [5:34:24<54:53,  3.73s/it, gpt_loss=0.541, lr=2.92e-7][A
Train step of epoch 0:  86%|████████▌ | 5368/6250 [5:34:24<57:20,  3.90s/it, gpt_loss=0.541, lr=2.92e-7][A
Train step of epoch 0:  86%|████████▌ | 5368/6250 [5:34:28<57:20,  3.90s/it, gpt_loss=0.713, lr=2.92e-7][A
Train step of epoch 0:  86%|████████▌ | 5369/6250 [5:34:28<56:36,  3.85s/it, gpt_loss=0.713, lr=2.92e-7][A
Train step of epoch 0:  86%|████████▌ | 5369/6250 [5:34:32<56:36,  3.85s/it, gpt_loss=0.63, lr=2.92e-7] [A
Train step of epoch 0:  86%|████████▌ | 5370/6250 [5:34:32<57:55,  3.95s/it, gpt_loss=0.63, lr=2.92e-7][A
Train step of epoch 0:  86%|████████▌ | 5370/6250 [5:34:36<57:55,  3.95s/it, gpt_loss=0.606, lr=2.92e-7][A
Train step of epoch 0:  86%|████████▌ | 5371/6250 [5:34:36<58:28,  3.99s/it, gpt_loss=0.606, lr=2.92e-7][A[2025-04-24 05:27:20,324] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  86%|████████▌ | 5371/6250 [5:34:41<58:28,  3.99s/it, gpt_loss=0.886, lr=2.91e-7][A
Train step of epoch 0:  86%|████████▌ | 5372/6250 [5:34:41<1:02:02,  4.24s/it, gpt_loss=0.886, lr=2.91e-7][A
Train step of epoch 0:  86%|████████▌ | 5372/6250 [5:34:45<1:02:02,  4.24s/it, gpt_loss=0.764, lr=2.91e-7][A
Train step of epoch 0:  86%|████████▌ | 5373/6250 [5:34:45<59:57,  4.10s/it, gpt_loss=0.764, lr=2.91e-7]  [A
Train step of epoch 0:  86%|████████▌ | 5373/6250 [5:34:49<59:57,  4.10s/it, gpt_loss=0.612, lr=2.91e-7][A
Train step of epoch 0:  86%|████████▌ | 5374/6250 [5:34:49<1:01:49,  4.23s/it, gpt_loss=0.612, lr=2.91e-7][A
Train step of epoch 0:  86%|████████▌ | 5374/6250 [5:34:54<1:01:49,  4.23s/it, gpt_loss=0.693, lr=2.91e-7][A
Train step of epoch 0:  86%|████████▌ | 5375/6250 [5:34:54<1:02:29,  4.28s/it, gpt_loss=0.693, lr=2.91e-7][A[2025-04-24 05:27:37,408] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  86%|████████▌ | 5375/6250 [5:34:58<1:02:29,  4.28s/it, gpt_loss=0.656, lr=2.9e-7] [A
Train step of epoch 0:  86%|████████▌ | 5376/6250 [5:34:58<1:02:44,  4.31s/it, gpt_loss=0.656, lr=2.9e-7][A
Train step of epoch 0:  86%|████████▌ | 5376/6250 [5:35:02<1:02:44,  4.31s/it, gpt_loss=0.673, lr=2.9e-7][A
Train step of epoch 0:  86%|████████▌ | 5377/6250 [5:35:02<58:30,  4.02s/it, gpt_loss=0.673, lr=2.9e-7]  [A
Train step of epoch 0:  86%|████████▌ | 5377/6250 [5:35:05<58:30,  4.02s/it, gpt_loss=0.497, lr=2.9e-7][A
Train step of epoch 0:  86%|████████▌ | 5378/6250 [5:35:05<56:50,  3.91s/it, gpt_loss=0.497, lr=2.9e-7][A
Train step of epoch 0:  86%|████████▌ | 5378/6250 [5:35:09<56:50,  3.91s/it, gpt_loss=0.566, lr=2.9e-7][A
Train step of epoch 0:  86%|████████▌ | 5379/6250 [5:35:09<57:40,  3.97s/it, gpt_loss=0.566, lr=2.9e-7][A[2025-04-24 05:27:53,218] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  86%|████████▌ | 5379/6250 [5:35:14<57:40,  3.97s/it, gpt_loss=0.584, lr=2.9e-7][A
Train step of epoch 0:  86%|████████▌ | 5380/6250 [5:35:14<1:00:41,  4.19s/it, gpt_loss=0.584, lr=2.9e-7][A
Train step of epoch 0:  86%|████████▌ | 5380/6250 [5:35:18<1:00:41,  4.19s/it, gpt_loss=0.682, lr=2.9e-7][A
Train step of epoch 0:  86%|████████▌ | 5381/6250 [5:35:18<59:51,  4.13s/it, gpt_loss=0.682, lr=2.9e-7]  [A
Train step of epoch 0:  86%|████████▌ | 5381/6250 [5:35:22<59:51,  4.13s/it, gpt_loss=0.658, lr=2.9e-7][A
Train step of epoch 0:  86%|████████▌ | 5382/6250 [5:35:22<58:42,  4.06s/it, gpt_loss=0.658, lr=2.9e-7][A
Train step of epoch 0:  86%|████████▌ | 5382/6250 [5:35:25<58:42,  4.06s/it, gpt_loss=0.644, lr=2.9e-7][A
Train step of epoch 0:  86%|████████▌ | 5383/6250 [5:35:25<55:23,  3.83s/it, gpt_loss=0.644, lr=2.9e-7][A[2025-04-24 05:28:08,351] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  86%|████████▌ | 5383/6250 [5:35:29<55:23,  3.83s/it, gpt_loss=0.575, lr=2.89e-7][A
Train step of epoch 0:  86%|████████▌ | 5384/6250 [5:35:29<55:45,  3.86s/it, gpt_loss=0.575, lr=2.89e-7][A
Train step of epoch 0:  86%|████████▌ | 5384/6250 [5:35:34<55:45,  3.86s/it, gpt_loss=0.45, lr=2.89e-7] [A
Train step of epoch 0:  86%|████████▌ | 5385/6250 [5:35:34<59:26,  4.12s/it, gpt_loss=0.45, lr=2.89e-7][A
Train step of epoch 0:  86%|████████▌ | 5385/6250 [5:35:38<59:26,  4.12s/it, gpt_loss=0.637, lr=2.89e-7][A
Train step of epoch 0:  86%|████████▌ | 5386/6250 [5:35:38<57:22,  3.98s/it, gpt_loss=0.637, lr=2.89e-7][A
Train step of epoch 0:  86%|████████▌ | 5386/6250 [5:35:43<57:22,  3.98s/it, gpt_loss=0.666, lr=2.89e-7][A
Train step of epoch 0:  86%|████████▌ | 5387/6250 [5:35:43<1:01:47,  4.30s/it, gpt_loss=0.666, lr=2.89e-7][A[2025-04-24 05:28:25,822] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  86%|████████▌ | 5387/6250 [5:35:47<1:01:47,  4.30s/it, gpt_loss=0.745, lr=2.88e-7][A
Train step of epoch 0:  86%|████████▌ | 5388/6250 [5:35:47<1:00:41,  4.22s/it, gpt_loss=0.745, lr=2.88e-7][A
Train step of epoch 0:  86%|████████▌ | 5388/6250 [5:35:50<1:00:41,  4.22s/it, gpt_loss=0.557, lr=2.88e-7][A
Train step of epoch 0:  86%|████████▌ | 5389/6250 [5:35:50<56:39,  3.95s/it, gpt_loss=0.557, lr=2.88e-7]  [A
Train step of epoch 0:  86%|████████▌ | 5389/6250 [5:35:53<56:39,  3.95s/it, gpt_loss=0.707, lr=2.88e-7][A
Train step of epoch 0:  86%|████████▌ | 5390/6250 [5:35:53<53:17,  3.72s/it, gpt_loss=0.707, lr=2.88e-7][A
Train step of epoch 0:  86%|████████▌ | 5390/6250 [5:35:57<53:17,  3.72s/it, gpt_loss=0.646, lr=2.88e-7][A
Train step of epoch 0:  86%|████████▋ | 5391/6250 [5:35:57<53:23,  3.73s/it, gpt_loss=0.646, lr=2.88e-7][A[2025-04-24 05:28:39,497] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  86%|████████▋ | 5391/6250 [5:36:00<53:23,  3.73s/it, gpt_loss=0.634, lr=2.87e-7][A
Train step of epoch 0:  86%|████████▋ | 5392/6250 [5:36:00<52:03,  3.64s/it, gpt_loss=0.634, lr=2.87e-7][A
Train step of epoch 0:  86%|████████▋ | 5392/6250 [5:36:04<52:03,  3.64s/it, gpt_loss=0.596, lr=2.87e-7][A
Train step of epoch 0:  86%|████████▋ | 5393/6250 [5:36:04<53:28,  3.74s/it, gpt_loss=0.596, lr=2.87e-7][A
Train step of epoch 0:  86%|████████▋ | 5393/6250 [5:36:08<53:28,  3.74s/it, gpt_loss=0.513, lr=2.87e-7][A
Train step of epoch 0:  86%|████████▋ | 5394/6250 [5:36:08<53:12,  3.73s/it, gpt_loss=0.513, lr=2.87e-7][A
Train step of epoch 0:  86%|████████▋ | 5394/6250 [5:36:11<53:12,  3.73s/it, gpt_loss=0.575, lr=2.87e-7][A
Train step of epoch 0:  86%|████████▋ | 5395/6250 [5:36:11<52:02,  3.65s/it, gpt_loss=0.575, lr=2.87e-7][A[2025-04-24 05:28:54,678] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  86%|████████▋ | 5395/6250 [5:36:15<52:02,  3.65s/it, gpt_loss=0.46, lr=2.86e-7] [A
Train step of epoch 0:  86%|████████▋ | 5396/6250 [5:36:15<53:35,  3.77s/it, gpt_loss=0.46, lr=2.86e-7][A
Train step of epoch 0:  86%|████████▋ | 5396/6250 [5:36:19<53:35,  3.77s/it, gpt_loss=0.422, lr=2.86e-7][A
Train step of epoch 0:  86%|████████▋ | 5397/6250 [5:36:19<53:09,  3.74s/it, gpt_loss=0.422, lr=2.86e-7][A
Train step of epoch 0:  86%|████████▋ | 5397/6250 [5:36:23<53:09,  3.74s/it, gpt_loss=0.625, lr=2.86e-7][A
Train step of epoch 0:  86%|████████▋ | 5398/6250 [5:36:23<52:30,  3.70s/it, gpt_loss=0.625, lr=2.86e-7][A
Train step of epoch 0:  86%|████████▋ | 5398/6250 [5:36:27<52:30,  3.70s/it, gpt_loss=0.607, lr=2.86e-7][A
Train step of epoch 0:  86%|████████▋ | 5399/6250 [5:36:27<52:52,  3.73s/it, gpt_loss=0.607, lr=2.86e-7][A[2025-04-24 05:29:08,890] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  86%|████████▋ | 5399/6250 [5:36:30<52:52,  3.73s/it, gpt_loss=0.651, lr=2.86e-7][A
Train step of epoch 0:  86%|████████▋ | 5400/6250 [5:36:30<50:17,  3.55s/it, gpt_loss=0.651, lr=2.86e-7][A
Train step of epoch 0:  86%|████████▋ | 5400/6250 [5:36:33<50:17,  3.55s/it, gpt_loss=0.577, lr=2.86e-7][A
Train step of epoch 0:  86%|████████▋ | 5401/6250 [5:36:33<50:12,  3.55s/it, gpt_loss=0.577, lr=2.86e-7][A
Train step of epoch 0:  86%|████████▋ | 5401/6250 [5:36:36<50:12,  3.55s/it, gpt_loss=0.502, lr=2.86e-7][A
Train step of epoch 0:  86%|████████▋ | 5402/6250 [5:36:36<46:26,  3.29s/it, gpt_loss=0.502, lr=2.86e-7][A
Train step of epoch 0:  86%|████████▋ | 5402/6250 [5:36:39<46:26,  3.29s/it, gpt_loss=0.6, lr=2.86e-7]  [A
Train step of epoch 0:  86%|████████▋ | 5403/6250 [5:36:39<44:06,  3.12s/it, gpt_loss=0.6, lr=2.86e-7][A[2025-04-24 05:29:21,987] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  86%|████████▋ | 5403/6250 [5:36:43<44:06,  3.12s/it, gpt_loss=0.677, lr=2.85e-7][A
Train step of epoch 0:  86%|████████▋ | 5404/6250 [5:36:43<48:18,  3.43s/it, gpt_loss=0.677, lr=2.85e-7][A
Train step of epoch 0:  86%|████████▋ | 5404/6250 [5:36:47<48:18,  3.43s/it, gpt_loss=0.585, lr=2.85e-7][A
Train step of epoch 0:  86%|████████▋ | 5405/6250 [5:36:47<51:24,  3.65s/it, gpt_loss=0.585, lr=2.85e-7][A
Train step of epoch 0:  86%|████████▋ | 5405/6250 [5:36:51<51:24,  3.65s/it, gpt_loss=0.573, lr=2.85e-7][A
Train step of epoch 0:  86%|████████▋ | 5406/6250 [5:36:51<51:40,  3.67s/it, gpt_loss=0.573, lr=2.85e-7][A
Train step of epoch 0:  86%|████████▋ | 5406/6250 [5:36:54<51:40,  3.67s/it, gpt_loss=0.696, lr=2.85e-7][A
Train step of epoch 0:  87%|████████▋ | 5407/6250 [5:36:54<49:59,  3.56s/it, gpt_loss=0.696, lr=2.85e-7][A[2025-04-24 05:29:37,007] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  87%|████████▋ | 5407/6250 [5:36:58<49:59,  3.56s/it, gpt_loss=0.724, lr=2.84e-7][A
Train step of epoch 0:  87%|████████▋ | 5408/6250 [5:36:58<51:05,  3.64s/it, gpt_loss=0.724, lr=2.84e-7][A
Train step of epoch 0:  87%|████████▋ | 5408/6250 [5:37:01<51:05,  3.64s/it, gpt_loss=0.486, lr=2.84e-7][A
Train step of epoch 0:  87%|████████▋ | 5409/6250 [5:37:01<50:37,  3.61s/it, gpt_loss=0.486, lr=2.84e-7][A
Train step of epoch 0:  87%|████████▋ | 5409/6250 [5:37:05<50:37,  3.61s/it, gpt_loss=0.575, lr=2.84e-7][A
Train step of epoch 0:  87%|████████▋ | 5410/6250 [5:37:05<49:39,  3.55s/it, gpt_loss=0.575, lr=2.84e-7][A
Train step of epoch 0:  87%|████████▋ | 5410/6250 [5:37:09<49:39,  3.55s/it, gpt_loss=0.768, lr=2.84e-7][A
Train step of epoch 0:  87%|████████▋ | 5411/6250 [5:37:09<54:27,  3.89s/it, gpt_loss=0.768, lr=2.84e-7][A[2025-04-24 05:29:52,560] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  87%|████████▋ | 5411/6250 [5:37:13<54:27,  3.89s/it, gpt_loss=0.683, lr=2.83e-7][A
Train step of epoch 0:  87%|████████▋ | 5412/6250 [5:37:13<54:26,  3.90s/it, gpt_loss=0.683, lr=2.83e-7][A
Train step of epoch 0:  87%|████████▋ | 5412/6250 [5:37:18<54:26,  3.90s/it, gpt_loss=0.712, lr=2.83e-7][A
Train step of epoch 0:  87%|████████▋ | 5413/6250 [5:37:18<58:03,  4.16s/it, gpt_loss=0.712, lr=2.83e-7][A
Train step of epoch 0:  87%|████████▋ | 5413/6250 [5:37:22<58:03,  4.16s/it, gpt_loss=0.738, lr=2.83e-7][A
Train step of epoch 0:  87%|████████▋ | 5414/6250 [5:37:22<55:32,  3.99s/it, gpt_loss=0.738, lr=2.83e-7][A
Train step of epoch 0:  87%|████████▋ | 5414/6250 [5:37:27<55:32,  3.99s/it, gpt_loss=0.605, lr=2.83e-7][A
Train step of epoch 0:  87%|████████▋ | 5415/6250 [5:37:27<1:00:02,  4.31s/it, gpt_loss=0.605, lr=2.83e-7][A[2025-04-24 05:30:10,688] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  87%|████████▋ | 5415/6250 [5:37:31<1:00:02,  4.31s/it, gpt_loss=0.702, lr=2.82e-7][A
Train step of epoch 0:  87%|████████▋ | 5416/6250 [5:37:31<1:01:33,  4.43s/it, gpt_loss=0.702, lr=2.82e-7][A
Train step of epoch 0:  87%|████████▋ | 5416/6250 [5:37:35<1:01:33,  4.43s/it, gpt_loss=0.653, lr=2.82e-7][A
Train step of epoch 0:  87%|████████▋ | 5417/6250 [5:37:35<57:45,  4.16s/it, gpt_loss=0.653, lr=2.82e-7]  [A
Train step of epoch 0:  87%|████████▋ | 5417/6250 [5:37:40<57:45,  4.16s/it, gpt_loss=0.769, lr=2.82e-7][A
Train step of epoch 0:  87%|████████▋ | 5418/6250 [5:37:40<59:49,  4.31s/it, gpt_loss=0.769, lr=2.82e-7][A
Train step of epoch 0:  87%|████████▋ | 5418/6250 [5:37:44<59:49,  4.31s/it, gpt_loss=0.714, lr=2.82e-7][A
Train step of epoch 0:  87%|████████▋ | 5419/6250 [5:37:44<1:00:53,  4.40s/it, gpt_loss=0.714, lr=2.82e-7][A[2025-04-24 05:30:27,548] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  87%|████████▋ | 5419/6250 [5:37:48<1:00:53,  4.40s/it, gpt_loss=0.642, lr=2.82e-7][A
Train step of epoch 0:  87%|████████▋ | 5420/6250 [5:37:48<59:26,  4.30s/it, gpt_loss=0.642, lr=2.82e-7]  [A
Train step of epoch 0:  87%|████████▋ | 5420/6250 [5:37:52<59:26,  4.30s/it, gpt_loss=0.707, lr=2.82e-7][A
Train step of epoch 0:  87%|████████▋ | 5421/6250 [5:37:52<57:44,  4.18s/it, gpt_loss=0.707, lr=2.82e-7][A
Train step of epoch 0:  87%|████████▋ | 5421/6250 [5:37:56<57:44,  4.18s/it, gpt_loss=0.542, lr=2.82e-7][A
Train step of epoch 0:  87%|████████▋ | 5422/6250 [5:37:56<55:25,  4.02s/it, gpt_loss=0.542, lr=2.82e-7][A
Train step of epoch 0:  87%|████████▋ | 5422/6250 [5:38:00<55:25,  4.02s/it, gpt_loss=0.591, lr=2.82e-7][A
Train step of epoch 0:  87%|████████▋ | 5423/6250 [5:38:00<55:57,  4.06s/it, gpt_loss=0.591, lr=2.82e-7][A[2025-04-24 05:30:42,124] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  87%|████████▋ | 5423/6250 [5:38:03<55:57,  4.06s/it, gpt_loss=0.728, lr=2.81e-7][A
Train step of epoch 0:  87%|████████▋ | 5424/6250 [5:38:03<50:59,  3.70s/it, gpt_loss=0.728, lr=2.81e-7][A
Train step of epoch 0:  87%|████████▋ | 5424/6250 [5:38:06<50:59,  3.70s/it, gpt_loss=0.537, lr=2.81e-7][A
Train step of epoch 0:  87%|████████▋ | 5425/6250 [5:38:06<49:27,  3.60s/it, gpt_loss=0.537, lr=2.81e-7][A
Train step of epoch 0:  87%|████████▋ | 5425/6250 [5:38:09<49:27,  3.60s/it, gpt_loss=0.701, lr=2.81e-7][A
Train step of epoch 0:  87%|████████▋ | 5426/6250 [5:38:09<47:24,  3.45s/it, gpt_loss=0.701, lr=2.81e-7][A
Train step of epoch 0:  87%|████████▋ | 5426/6250 [5:38:13<47:24,  3.45s/it, gpt_loss=0.503, lr=2.81e-7][A
Train step of epoch 0:  87%|████████▋ | 5427/6250 [5:38:13<48:35,  3.54s/it, gpt_loss=0.503, lr=2.81e-7][A[2025-04-24 05:30:55,207] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  87%|████████▋ | 5427/6250 [5:38:16<48:35,  3.54s/it, gpt_loss=0.58, lr=2.8e-7]  [A
Train step of epoch 0:  87%|████████▋ | 5428/6250 [5:38:16<45:46,  3.34s/it, gpt_loss=0.58, lr=2.8e-7][A
Train step of epoch 0:  87%|████████▋ | 5428/6250 [5:38:20<45:46,  3.34s/it, gpt_loss=0.604, lr=2.8e-7][A
Train step of epoch 0:  87%|████████▋ | 5429/6250 [5:38:20<47:14,  3.45s/it, gpt_loss=0.604, lr=2.8e-7][A
Train step of epoch 0:  87%|████████▋ | 5429/6250 [5:38:23<47:14,  3.45s/it, gpt_loss=0.751, lr=2.8e-7][A
Train step of epoch 0:  87%|████████▋ | 5430/6250 [5:38:23<45:17,  3.31s/it, gpt_loss=0.751, lr=2.8e-7][A
Train step of epoch 0:  87%|████████▋ | 5430/6250 [5:38:26<45:17,  3.31s/it, gpt_loss=0.641, lr=2.8e-7][A
Train step of epoch 0:  87%|████████▋ | 5431/6250 [5:38:26<43:25,  3.18s/it, gpt_loss=0.641, lr=2.8e-7][A[2025-04-24 05:31:07,446] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  87%|████████▋ | 5431/6250 [5:38:28<43:25,  3.18s/it, gpt_loss=0.618, lr=2.79e-7][A
Train step of epoch 0:  87%|████████▋ | 5432/6250 [5:38:28<41:15,  3.03s/it, gpt_loss=0.618, lr=2.79e-7][A
Train step of epoch 0:  87%|████████▋ | 5432/6250 [5:38:32<41:15,  3.03s/it, gpt_loss=0.517, lr=2.79e-7][A
Train step of epoch 0:  87%|████████▋ | 5433/6250 [5:38:32<46:01,  3.38s/it, gpt_loss=0.517, lr=2.79e-7][A
Train step of epoch 0:  87%|████████▋ | 5433/6250 [5:38:35<46:01,  3.38s/it, gpt_loss=0.659, lr=2.79e-7][A
Train step of epoch 0:  87%|████████▋ | 5434/6250 [5:38:35<42:08,  3.10s/it, gpt_loss=0.659, lr=2.79e-7][A
Train step of epoch 0:  87%|████████▋ | 5434/6250 [5:38:38<42:08,  3.10s/it, gpt_loss=0.441, lr=2.79e-7][A
Train step of epoch 0:  87%|████████▋ | 5435/6250 [5:38:38<41:58,  3.09s/it, gpt_loss=0.441, lr=2.79e-7][A[2025-04-24 05:31:21,726] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  87%|████████▋ | 5435/6250 [5:38:42<41:58,  3.09s/it, gpt_loss=0.575, lr=2.79e-7][A
Train step of epoch 0:  87%|████████▋ | 5436/6250 [5:38:42<47:54,  3.53s/it, gpt_loss=0.575, lr=2.79e-7][A
Train step of epoch 0:  87%|████████▋ | 5436/6250 [5:38:46<47:54,  3.53s/it, gpt_loss=0.509, lr=2.79e-7][A
Train step of epoch 0:  87%|████████▋ | 5437/6250 [5:38:46<48:47,  3.60s/it, gpt_loss=0.509, lr=2.79e-7][A
Train step of epoch 0:  87%|████████▋ | 5437/6250 [5:38:50<48:47,  3.60s/it, gpt_loss=0.554, lr=2.79e-7][A
Train step of epoch 0:  87%|████████▋ | 5438/6250 [5:38:50<49:35,  3.66s/it, gpt_loss=0.554, lr=2.79e-7][A
Train step of epoch 0:  87%|████████▋ | 5438/6250 [5:38:53<49:35,  3.66s/it, gpt_loss=0.46, lr=2.79e-7] [A
Train step of epoch 0:  87%|████████▋ | 5439/6250 [5:38:53<48:16,  3.57s/it, gpt_loss=0.46, lr=2.79e-7][A[2025-04-24 05:31:36,705] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  87%|████████▋ | 5439/6250 [5:38:57<48:16,  3.57s/it, gpt_loss=0.557, lr=2.78e-7][A
Train step of epoch 0:  87%|████████▋ | 5440/6250 [5:38:57<50:08,  3.71s/it, gpt_loss=0.557, lr=2.78e-7][A
Train step of epoch 0:  87%|████████▋ | 5440/6250 [5:39:01<50:08,  3.71s/it, gpt_loss=0.63, lr=2.78e-7] [A
Train step of epoch 0:  87%|████████▋ | 5441/6250 [5:39:01<50:23,  3.74s/it, gpt_loss=0.63, lr=2.78e-7][A
Train step of epoch 0:  87%|████████▋ | 5441/6250 [5:39:05<50:23,  3.74s/it, gpt_loss=0.513, lr=2.78e-7][A
Train step of epoch 0:  87%|████████▋ | 5442/6250 [5:39:05<49:51,  3.70s/it, gpt_loss=0.513, lr=2.78e-7][A
Train step of epoch 0:  87%|████████▋ | 5442/6250 [5:39:08<49:51,  3.70s/it, gpt_loss=0.736, lr=2.78e-7][A
Train step of epoch 0:  87%|████████▋ | 5443/6250 [5:39:08<48:21,  3.60s/it, gpt_loss=0.736, lr=2.78e-7][A[2025-04-24 05:31:52,398] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  87%|████████▋ | 5443/6250 [5:39:13<48:21,  3.60s/it, gpt_loss=0.656, lr=2.77e-7][A
Train step of epoch 0:  87%|████████▋ | 5444/6250 [5:39:13<53:41,  4.00s/it, gpt_loss=0.656, lr=2.77e-7][A
Train step of epoch 0:  87%|████████▋ | 5444/6250 [5:39:17<53:41,  4.00s/it, gpt_loss=0.568, lr=2.77e-7][A
Train step of epoch 0:  87%|████████▋ | 5445/6250 [5:39:17<52:19,  3.90s/it, gpt_loss=0.568, lr=2.77e-7][A
Train step of epoch 0:  87%|████████▋ | 5445/6250 [5:39:21<52:19,  3.90s/it, gpt_loss=0.634, lr=2.77e-7][A
Train step of epoch 0:  87%|████████▋ | 5446/6250 [5:39:21<53:30,  3.99s/it, gpt_loss=0.634, lr=2.77e-7][A
Train step of epoch 0:  87%|████████▋ | 5446/6250 [5:39:24<53:30,  3.99s/it, gpt_loss=0.748, lr=2.77e-7][A
Train step of epoch 0:  87%|████████▋ | 5447/6250 [5:39:24<48:10,  3.60s/it, gpt_loss=0.748, lr=2.77e-7][A[2025-04-24 05:32:06,885] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  87%|████████▋ | 5447/6250 [5:39:28<48:10,  3.60s/it, gpt_loss=0.657, lr=2.76e-7][A
Train step of epoch 0:  87%|████████▋ | 5448/6250 [5:39:28<49:24,  3.70s/it, gpt_loss=0.657, lr=2.76e-7][A
Train step of epoch 0:  87%|████████▋ | 5448/6250 [5:39:31<49:24,  3.70s/it, gpt_loss=0.475, lr=2.76e-7][A
Train step of epoch 0:  87%|████████▋ | 5449/6250 [5:39:31<48:46,  3.65s/it, gpt_loss=0.475, lr=2.76e-7][A
Train step of epoch 0:  87%|████████▋ | 5449/6250 [5:39:34<48:46,  3.65s/it, gpt_loss=0.669, lr=2.76e-7][A
Train step of epoch 0:  87%|████████▋ | 5450/6250 [5:39:34<45:46,  3.43s/it, gpt_loss=0.669, lr=2.76e-7][A
Train step of epoch 0:  87%|████████▋ | 5450/6250 [5:39:38<45:46,  3.43s/it, gpt_loss=0.717, lr=2.76e-7][A
Train step of epoch 0:  87%|████████▋ | 5451/6250 [5:39:38<46:44,  3.51s/it, gpt_loss=0.717, lr=2.76e-7][A[2025-04-24 05:32:21,686] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  87%|████████▋ | 5451/6250 [5:39:42<46:44,  3.51s/it, gpt_loss=0.624, lr=2.76e-7][A
Train step of epoch 0:  87%|████████▋ | 5452/6250 [5:39:42<51:11,  3.85s/it, gpt_loss=0.624, lr=2.76e-7][A
Train step of epoch 0:  87%|████████▋ | 5452/6250 [5:39:46<51:11,  3.85s/it, gpt_loss=0.642, lr=2.76e-7][A
Train step of epoch 0:  87%|████████▋ | 5453/6250 [5:39:46<49:53,  3.76s/it, gpt_loss=0.642, lr=2.76e-7][A
Train step of epoch 0:  87%|████████▋ | 5453/6250 [5:39:49<49:53,  3.76s/it, gpt_loss=0.507, lr=2.76e-7][A
Train step of epoch 0:  87%|████████▋ | 5454/6250 [5:39:49<46:49,  3.53s/it, gpt_loss=0.507, lr=2.76e-7][A
Train step of epoch 0:  87%|████████▋ | 5454/6250 [5:39:53<46:49,  3.53s/it, gpt_loss=0.595, lr=2.76e-7][A
Train step of epoch 0:  87%|████████▋ | 5455/6250 [5:39:53<48:45,  3.68s/it, gpt_loss=0.595, lr=2.76e-7][A[2025-04-24 05:32:36,815] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  87%|████████▋ | 5455/6250 [5:39:58<48:45,  3.68s/it, gpt_loss=0.56, lr=2.75e-7] [A
Train step of epoch 0:  87%|████████▋ | 5456/6250 [5:39:58<52:10,  3.94s/it, gpt_loss=0.56, lr=2.75e-7][A
Train step of epoch 0:  87%|████████▋ | 5456/6250 [5:40:02<52:10,  3.94s/it, gpt_loss=0.592, lr=2.75e-7][A
Train step of epoch 0:  87%|████████▋ | 5457/6250 [5:40:02<54:14,  4.10s/it, gpt_loss=0.592, lr=2.75e-7][A
Train step of epoch 0:  87%|████████▋ | 5457/6250 [5:40:05<54:14,  4.10s/it, gpt_loss=0.641, lr=2.75e-7][A
Train step of epoch 0:  87%|████████▋ | 5458/6250 [5:40:05<50:43,  3.84s/it, gpt_loss=0.641, lr=2.75e-7][A
Train step of epoch 0:  87%|████████▋ | 5458/6250 [5:40:09<50:43,  3.84s/it, gpt_loss=0.545, lr=2.75e-7][A
Train step of epoch 0:  87%|████████▋ | 5459/6250 [5:40:09<48:41,  3.69s/it, gpt_loss=0.545, lr=2.75e-7][A[2025-04-24 05:32:51,204] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  87%|████████▋ | 5459/6250 [5:40:12<48:41,  3.69s/it, gpt_loss=0.768, lr=2.74e-7][A
Train step of epoch 0:  87%|████████▋ | 5460/6250 [5:40:12<47:11,  3.58s/it, gpt_loss=0.768, lr=2.74e-7][A
Train step of epoch 0:  87%|████████▋ | 5460/6250 [5:40:15<47:11,  3.58s/it, gpt_loss=0.614, lr=2.74e-7][A
Train step of epoch 0:  87%|████████▋ | 5461/6250 [5:40:15<46:11,  3.51s/it, gpt_loss=0.614, lr=2.74e-7][A
Train step of epoch 0:  87%|████████▋ | 5461/6250 [5:40:18<46:11,  3.51s/it, gpt_loss=0.57, lr=2.74e-7] [A
Train step of epoch 0:  87%|████████▋ | 5462/6250 [5:40:18<43:55,  3.34s/it, gpt_loss=0.57, lr=2.74e-7][A
Train step of epoch 0:  87%|████████▋ | 5462/6250 [5:40:21<43:55,  3.34s/it, gpt_loss=0.629, lr=2.74e-7][A
Train step of epoch 0:  87%|████████▋ | 5463/6250 [5:40:21<41:13,  3.14s/it, gpt_loss=0.629, lr=2.74e-7][A[2025-04-24 05:33:02,958] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  87%|████████▋ | 5463/6250 [5:40:24<41:13,  3.14s/it, gpt_loss=0.676, lr=2.73e-7][A
Train step of epoch 0:  87%|████████▋ | 5464/6250 [5:40:24<39:45,  3.04s/it, gpt_loss=0.676, lr=2.73e-7][A
Train step of epoch 0:  87%|████████▋ | 5464/6250 [5:40:28<39:45,  3.04s/it, gpt_loss=0.652, lr=2.73e-7][A
Train step of epoch 0:  87%|████████▋ | 5465/6250 [5:40:28<42:42,  3.26s/it, gpt_loss=0.652, lr=2.73e-7][A
Train step of epoch 0:  87%|████████▋ | 5465/6250 [5:40:31<42:42,  3.26s/it, gpt_loss=0.411, lr=2.73e-7][A
Train step of epoch 0:  87%|████████▋ | 5466/6250 [5:40:31<42:37,  3.26s/it, gpt_loss=0.411, lr=2.73e-7][A
Train step of epoch 0:  87%|████████▋ | 5466/6250 [5:40:34<42:37,  3.26s/it, gpt_loss=0.578, lr=2.73e-7][A
Train step of epoch 0:  87%|████████▋ | 5467/6250 [5:40:34<41:21,  3.17s/it, gpt_loss=0.578, lr=2.73e-7][A[2025-04-24 05:33:17,358] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  87%|████████▋ | 5467/6250 [5:40:38<41:21,  3.17s/it, gpt_loss=0.519, lr=2.73e-7][A
Train step of epoch 0:  87%|████████▋ | 5468/6250 [5:40:38<46:04,  3.54s/it, gpt_loss=0.519, lr=2.73e-7][A
Train step of epoch 0:  87%|████████▋ | 5468/6250 [5:40:41<46:04,  3.54s/it, gpt_loss=0.627, lr=2.73e-7][A
Train step of epoch 0:  88%|████████▊ | 5469/6250 [5:40:41<44:27,  3.42s/it, gpt_loss=0.627, lr=2.73e-7][A
Train step of epoch 0:  88%|████████▊ | 5469/6250 [5:40:46<44:27,  3.42s/it, gpt_loss=0.675, lr=2.73e-7][A
Train step of epoch 0:  88%|████████▊ | 5470/6250 [5:40:46<49:26,  3.80s/it, gpt_loss=0.675, lr=2.73e-7][A
Train step of epoch 0:  88%|████████▊ | 5470/6250 [5:40:49<49:26,  3.80s/it, gpt_loss=0.728, lr=2.73e-7][A
Train step of epoch 0:  88%|████████▊ | 5471/6250 [5:40:49<45:58,  3.54s/it, gpt_loss=0.728, lr=2.73e-7][A[2025-04-24 05:33:32,020] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  88%|████████▊ | 5471/6250 [5:40:53<45:58,  3.54s/it, gpt_loss=0.631, lr=2.72e-7][A
Train step of epoch 0:  88%|████████▊ | 5472/6250 [5:40:53<47:16,  3.65s/it, gpt_loss=0.631, lr=2.72e-7][A
Train step of epoch 0:  88%|████████▊ | 5472/6250 [5:40:57<47:16,  3.65s/it, gpt_loss=0.621, lr=2.72e-7][A
Train step of epoch 0:  88%|████████▊ | 5473/6250 [5:40:57<49:35,  3.83s/it, gpt_loss=0.621, lr=2.72e-7][A
Train step of epoch 0:  88%|████████▊ | 5473/6250 [5:41:00<49:35,  3.83s/it, gpt_loss=0.635, lr=2.72e-7][A
Train step of epoch 0:  88%|████████▊ | 5474/6250 [5:41:00<47:23,  3.66s/it, gpt_loss=0.635, lr=2.72e-7][A
Train step of epoch 0:  88%|████████▊ | 5474/6250 [5:41:04<47:23,  3.66s/it, gpt_loss=0.702, lr=2.72e-7][A
Train step of epoch 0:  88%|████████▊ | 5475/6250 [5:41:04<47:03,  3.64s/it, gpt_loss=0.702, lr=2.72e-7][A[2025-04-24 05:33:46,287] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  88%|████████▊ | 5475/6250 [5:41:07<47:03,  3.64s/it, gpt_loss=0.722, lr=2.71e-7][A
Train step of epoch 0:  88%|████████▊ | 5476/6250 [5:41:07<45:01,  3.49s/it, gpt_loss=0.722, lr=2.71e-7][A
Train step of epoch 0:  88%|████████▊ | 5476/6250 [5:41:11<45:01,  3.49s/it, gpt_loss=0.627, lr=2.71e-7][A
Train step of epoch 0:  88%|████████▊ | 5477/6250 [5:41:11<47:11,  3.66s/it, gpt_loss=0.627, lr=2.71e-7][A
Train step of epoch 0:  88%|████████▊ | 5477/6250 [5:41:15<47:11,  3.66s/it, gpt_loss=0.75, lr=2.71e-7] [A
Train step of epoch 0:  88%|████████▊ | 5478/6250 [5:41:15<48:05,  3.74s/it, gpt_loss=0.75, lr=2.71e-7][A
Train step of epoch 0:  88%|████████▊ | 5478/6250 [5:41:19<48:05,  3.74s/it, gpt_loss=0.561, lr=2.71e-7][A
Train step of epoch 0:  88%|████████▊ | 5479/6250 [5:41:19<47:29,  3.70s/it, gpt_loss=0.561, lr=2.71e-7][A[2025-04-24 05:34:01,657] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  88%|████████▊ | 5479/6250 [5:41:22<47:29,  3.70s/it, gpt_loss=0.523, lr=2.7e-7] [A
Train step of epoch 0:  88%|████████▊ | 5480/6250 [5:41:22<47:48,  3.73s/it, gpt_loss=0.523, lr=2.7e-7][A
Train step of epoch 0:  88%|████████▊ | 5480/6250 [5:41:26<47:48,  3.73s/it, gpt_loss=0.611, lr=2.7e-7][A
Train step of epoch 0:  88%|████████▊ | 5481/6250 [5:41:26<47:09,  3.68s/it, gpt_loss=0.611, lr=2.7e-7][A
Train step of epoch 0:  88%|████████▊ | 5481/6250 [5:41:31<47:09,  3.68s/it, gpt_loss=0.709, lr=2.7e-7][A
Train step of epoch 0:  88%|████████▊ | 5482/6250 [5:41:31<51:19,  4.01s/it, gpt_loss=0.709, lr=2.7e-7][A
Train step of epoch 0:  88%|████████▊ | 5482/6250 [5:41:34<51:19,  4.01s/it, gpt_loss=0.518, lr=2.7e-7][A
Train step of epoch 0:  88%|████████▊ | 5483/6250 [5:41:34<48:26,  3.79s/it, gpt_loss=0.518, lr=2.7e-7][A[2025-04-24 05:34:16,503] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  88%|████████▊ | 5483/6250 [5:41:37<48:26,  3.79s/it, gpt_loss=0.547, lr=2.7e-7][A
Train step of epoch 0:  88%|████████▊ | 5484/6250 [5:41:37<46:11,  3.62s/it, gpt_loss=0.547, lr=2.7e-7][A
Train step of epoch 0:  88%|████████▊ | 5484/6250 [5:41:41<46:11,  3.62s/it, gpt_loss=0.509, lr=2.7e-7][A
Train step of epoch 0:  88%|████████▊ | 5485/6250 [5:41:41<45:57,  3.60s/it, gpt_loss=0.509, lr=2.7e-7][A
Train step of epoch 0:  88%|████████▊ | 5485/6250 [5:41:45<45:57,  3.60s/it, gpt_loss=0.667, lr=2.7e-7][A
Train step of epoch 0:  88%|████████▊ | 5486/6250 [5:41:45<49:08,  3.86s/it, gpt_loss=0.667, lr=2.7e-7][A
Train step of epoch 0:  88%|████████▊ | 5486/6250 [5:41:49<49:08,  3.86s/it, gpt_loss=0.699, lr=2.7e-7][A
Train step of epoch 0:  88%|████████▊ | 5487/6250 [5:41:49<47:38,  3.75s/it, gpt_loss=0.699, lr=2.7e-7][A[2025-04-24 05:34:30,781] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  88%|████████▊ | 5487/6250 [5:41:52<47:38,  3.75s/it, gpt_loss=0.538, lr=2.69e-7][A
Train step of epoch 0:  88%|████████▊ | 5488/6250 [5:41:52<43:51,  3.45s/it, gpt_loss=0.538, lr=2.69e-7][A
Train step of epoch 0:  88%|████████▊ | 5488/6250 [5:41:56<43:51,  3.45s/it, gpt_loss=0.655, lr=2.69e-7][A
Train step of epoch 0:  88%|████████▊ | 5489/6250 [5:41:56<48:27,  3.82s/it, gpt_loss=0.655, lr=2.69e-7][A
Train step of epoch 0:  88%|████████▊ | 5489/6250 [5:41:59<48:27,  3.82s/it, gpt_loss=0.706, lr=2.69e-7][A
Train step of epoch 0:  88%|████████▊ | 5490/6250 [5:41:59<45:27,  3.59s/it, gpt_loss=0.706, lr=2.69e-7][A
Train step of epoch 0:  88%|████████▊ | 5490/6250 [5:42:03<45:27,  3.59s/it, gpt_loss=0.636, lr=2.69e-7][A
Train step of epoch 0:  88%|████████▊ | 5491/6250 [5:42:03<46:41,  3.69s/it, gpt_loss=0.636, lr=2.69e-7][A[2025-04-24 05:34:46,290] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  88%|████████▊ | 5491/6250 [5:42:07<46:41,  3.69s/it, gpt_loss=0.639, lr=2.68e-7][A
Train step of epoch 0:  88%|████████▊ | 5492/6250 [5:42:07<47:14,  3.74s/it, gpt_loss=0.639, lr=2.68e-7][A
Train step of epoch 0:  88%|████████▊ | 5492/6250 [5:42:11<47:14,  3.74s/it, gpt_loss=0.461, lr=2.68e-7][A
Train step of epoch 0:  88%|████████▊ | 5493/6250 [5:42:11<49:12,  3.90s/it, gpt_loss=0.461, lr=2.68e-7][A
Train step of epoch 0:  88%|████████▊ | 5493/6250 [5:42:15<49:12,  3.90s/it, gpt_loss=0.639, lr=2.68e-7][A
Train step of epoch 0:  88%|████████▊ | 5494/6250 [5:42:15<47:11,  3.75s/it, gpt_loss=0.639, lr=2.68e-7][A
Train step of epoch 0:  88%|████████▊ | 5494/6250 [5:42:18<47:11,  3.75s/it, gpt_loss=0.552, lr=2.68e-7][A
Train step of epoch 0:  88%|████████▊ | 5495/6250 [5:42:18<46:54,  3.73s/it, gpt_loss=0.552, lr=2.68e-7][A[2025-04-24 05:35:00,832] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  88%|████████▊ | 5495/6250 [5:42:22<46:54,  3.73s/it, gpt_loss=0.552, lr=2.68e-7][A
Train step of epoch 0:  88%|████████▊ | 5496/6250 [5:42:22<44:50,  3.57s/it, gpt_loss=0.552, lr=2.68e-7][A
Train step of epoch 0:  88%|████████▊ | 5496/6250 [5:42:25<44:50,  3.57s/it, gpt_loss=0.526, lr=2.68e-7][A
Train step of epoch 0:  88%|████████▊ | 5497/6250 [5:42:25<45:45,  3.65s/it, gpt_loss=0.526, lr=2.68e-7][A
Train step of epoch 0:  88%|████████▊ | 5497/6250 [5:42:30<45:45,  3.65s/it, gpt_loss=0.766, lr=2.68e-7][A
Train step of epoch 0:  88%|████████▊ | 5498/6250 [5:42:30<47:55,  3.82s/it, gpt_loss=0.766, lr=2.68e-7][A
Train step of epoch 0:  88%|████████▊ | 5498/6250 [5:42:33<47:55,  3.82s/it, gpt_loss=0.496, lr=2.68e-7][A
Train step of epoch 0:  88%|████████▊ | 5499/6250 [5:42:33<45:00,  3.60s/it, gpt_loss=0.496, lr=2.68e-7][A[2025-04-24 05:35:15,435] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  88%|████████▊ | 5499/6250 [5:42:36<45:00,  3.60s/it, gpt_loss=0.512, lr=2.67e-7][A
Train step of epoch 0:  88%|████████▊ | 5500/6250 [5:42:36<44:29,  3.56s/it, gpt_loss=0.512, lr=2.67e-7][A
Train step of epoch 0:  88%|████████▊ | 5500/6250 [5:42:39<44:29,  3.56s/it, gpt_loss=0.632, lr=2.67e-7][A
Train step of epoch 0:  88%|████████▊ | 5501/6250 [5:42:39<41:26,  3.32s/it, gpt_loss=0.632, lr=2.67e-7][A
Train step of epoch 0:  88%|████████▊ | 5501/6250 [5:42:43<41:26,  3.32s/it, gpt_loss=0.625, lr=2.67e-7][A
Train step of epoch 0:  88%|████████▊ | 5502/6250 [5:42:43<43:10,  3.46s/it, gpt_loss=0.625, lr=2.67e-7][A
Train step of epoch 0:  88%|████████▊ | 5502/6250 [5:42:47<43:10,  3.46s/it, gpt_loss=0.702, lr=2.67e-7][A
Train step of epoch 0:  88%|████████▊ | 5503/6250 [5:42:47<46:12,  3.71s/it, gpt_loss=0.702, lr=2.67e-7][A[2025-04-24 05:35:29,837] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  88%|████████▊ | 5503/6250 [5:42:51<46:12,  3.71s/it, gpt_loss=0.589, lr=2.66e-7][A
Train step of epoch 0:  88%|████████▊ | 5504/6250 [5:42:51<45:32,  3.66s/it, gpt_loss=0.589, lr=2.66e-7][A
Train step of epoch 0:  88%|████████▊ | 5504/6250 [5:42:53<45:32,  3.66s/it, gpt_loss=0.539, lr=2.66e-7][A
Train step of epoch 0:  88%|████████▊ | 5505/6250 [5:42:53<41:06,  3.31s/it, gpt_loss=0.539, lr=2.66e-7][A
Train step of epoch 0:  88%|████████▊ | 5505/6250 [5:42:57<41:06,  3.31s/it, gpt_loss=0.741, lr=2.66e-7][A
Train step of epoch 0:  88%|████████▊ | 5506/6250 [5:42:57<43:29,  3.51s/it, gpt_loss=0.741, lr=2.66e-7][A
Train step of epoch 0:  88%|████████▊ | 5506/6250 [5:43:02<43:29,  3.51s/it, gpt_loss=0.737, lr=2.66e-7][A
Train step of epoch 0:  88%|████████▊ | 5507/6250 [5:43:02<47:18,  3.82s/it, gpt_loss=0.737, lr=2.66e-7][A[2025-04-24 05:35:44,283] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  88%|████████▊ | 5507/6250 [5:43:05<47:18,  3.82s/it, gpt_loss=0.516, lr=2.65e-7][A
Train step of epoch 0:  88%|████████▊ | 5508/6250 [5:43:05<45:50,  3.71s/it, gpt_loss=0.516, lr=2.65e-7][A
Train step of epoch 0:  88%|████████▊ | 5508/6250 [5:43:08<45:50,  3.71s/it, gpt_loss=0.543, lr=2.65e-7][A
Train step of epoch 0:  88%|████████▊ | 5509/6250 [5:43:08<44:43,  3.62s/it, gpt_loss=0.543, lr=2.65e-7][A
Train step of epoch 0:  88%|████████▊ | 5509/6250 [5:43:14<44:43,  3.62s/it, gpt_loss=0.473, lr=2.65e-7][A
Train step of epoch 0:  88%|████████▊ | 5510/6250 [5:43:14<49:56,  4.05s/it, gpt_loss=0.473, lr=2.65e-7][A
Train step of epoch 0:  88%|████████▊ | 5510/6250 [5:43:17<49:56,  4.05s/it, gpt_loss=0.558, lr=2.65e-7][A
Train step of epoch 0:  88%|████████▊ | 5511/6250 [5:43:17<46:26,  3.77s/it, gpt_loss=0.558, lr=2.65e-7][A[2025-04-24 05:35:59,447] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  88%|████████▊ | 5511/6250 [5:43:20<46:26,  3.77s/it, gpt_loss=0.579, lr=2.65e-7][A
Train step of epoch 0:  88%|████████▊ | 5512/6250 [5:43:20<45:39,  3.71s/it, gpt_loss=0.579, lr=2.65e-7][A
Train step of epoch 0:  88%|████████▊ | 5512/6250 [5:43:24<45:39,  3.71s/it, gpt_loss=0.704, lr=2.65e-7][A
Train step of epoch 0:  88%|████████▊ | 5513/6250 [5:43:24<46:56,  3.82s/it, gpt_loss=0.704, lr=2.65e-7][A
Train step of epoch 0:  88%|████████▊ | 5513/6250 [5:43:27<46:56,  3.82s/it, gpt_loss=0.442, lr=2.65e-7][A
Train step of epoch 0:  88%|████████▊ | 5514/6250 [5:43:27<44:38,  3.64s/it, gpt_loss=0.442, lr=2.65e-7][A
Train step of epoch 0:  88%|████████▊ | 5514/6250 [5:43:32<44:38,  3.64s/it, gpt_loss=0.644, lr=2.65e-7][A
Train step of epoch 0:  88%|████████▊ | 5515/6250 [5:43:32<47:55,  3.91s/it, gpt_loss=0.644, lr=2.65e-7][A[2025-04-24 05:36:14,542] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  88%|████████▊ | 5515/6250 [5:43:35<47:55,  3.91s/it, gpt_loss=0.725, lr=2.64e-7][A
Train step of epoch 0:  88%|████████▊ | 5516/6250 [5:43:35<45:26,  3.71s/it, gpt_loss=0.725, lr=2.64e-7][A
Train step of epoch 0:  88%|████████▊ | 5516/6250 [5:43:39<45:26,  3.71s/it, gpt_loss=0.596, lr=2.64e-7][A
Train step of epoch 0:  88%|████████▊ | 5517/6250 [5:43:39<44:15,  3.62s/it, gpt_loss=0.596, lr=2.64e-7][A
Train step of epoch 0:  88%|████████▊ | 5517/6250 [5:43:42<44:15,  3.62s/it, gpt_loss=0.737, lr=2.64e-7][A
Train step of epoch 0:  88%|████████▊ | 5518/6250 [5:43:42<44:32,  3.65s/it, gpt_loss=0.737, lr=2.64e-7][A
Train step of epoch 0:  88%|████████▊ | 5518/6250 [5:43:47<44:32,  3.65s/it, gpt_loss=0.547, lr=2.64e-7][A
Train step of epoch 0:  88%|████████▊ | 5519/6250 [5:43:47<47:29,  3.90s/it, gpt_loss=0.547, lr=2.64e-7][A[2025-04-24 05:36:30,171] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  88%|████████▊ | 5519/6250 [5:43:51<47:29,  3.90s/it, gpt_loss=0.517, lr=2.63e-7][A
Train step of epoch 0:  88%|████████▊ | 5520/6250 [5:43:51<47:54,  3.94s/it, gpt_loss=0.517, lr=2.63e-7][A
Train step of epoch 0:  88%|████████▊ | 5520/6250 [5:43:54<47:54,  3.94s/it, gpt_loss=0.702, lr=2.63e-7][A
Train step of epoch 0:  88%|████████▊ | 5521/6250 [5:43:54<45:14,  3.72s/it, gpt_loss=0.702, lr=2.63e-7][A
Train step of epoch 0:  88%|████████▊ | 5521/6250 [5:43:58<45:14,  3.72s/it, gpt_loss=0.594, lr=2.63e-7][A
Train step of epoch 0:  88%|████████▊ | 5522/6250 [5:43:58<46:20,  3.82s/it, gpt_loss=0.594, lr=2.63e-7][A
Train step of epoch 0:  88%|████████▊ | 5522/6250 [5:44:01<46:20,  3.82s/it, gpt_loss=0.663, lr=2.63e-7][A
Train step of epoch 0:  88%|████████▊ | 5523/6250 [5:44:01<43:42,  3.61s/it, gpt_loss=0.663, lr=2.63e-7][A[2025-04-24 05:36:44,171] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  88%|████████▊ | 5523/6250 [5:44:05<43:42,  3.61s/it, gpt_loss=0.572, lr=2.63e-7][A
Train step of epoch 0:  88%|████████▊ | 5524/6250 [5:44:05<43:41,  3.61s/it, gpt_loss=0.572, lr=2.63e-7][A
Train step of epoch 0:  88%|████████▊ | 5524/6250 [5:44:09<43:41,  3.61s/it, gpt_loss=0.665, lr=2.63e-7][A
Train step of epoch 0:  88%|████████▊ | 5525/6250 [5:44:09<45:07,  3.73s/it, gpt_loss=0.665, lr=2.63e-7][A
Train step of epoch 0:  88%|████████▊ | 5525/6250 [5:44:12<45:07,  3.73s/it, gpt_loss=0.593, lr=2.63e-7][A
Train step of epoch 0:  88%|████████▊ | 5526/6250 [5:44:12<43:02,  3.57s/it, gpt_loss=0.593, lr=2.63e-7][A
Train step of epoch 0:  88%|████████▊ | 5526/6250 [5:44:16<43:02,  3.57s/it, gpt_loss=0.58, lr=2.63e-7] [A
Train step of epoch 0:  88%|████████▊ | 5527/6250 [5:44:16<45:21,  3.76s/it, gpt_loss=0.58, lr=2.63e-7][A[2025-04-24 05:36:59,406] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  88%|████████▊ | 5527/6250 [5:44:20<45:21,  3.76s/it, gpt_loss=0.606, lr=2.62e-7][A
Train step of epoch 0:  88%|████████▊ | 5528/6250 [5:44:20<45:28,  3.78s/it, gpt_loss=0.606, lr=2.62e-7][A
Train step of epoch 0:  88%|████████▊ | 5528/6250 [5:44:24<45:28,  3.78s/it, gpt_loss=0.647, lr=2.62e-7][A
Train step of epoch 0:  88%|████████▊ | 5529/6250 [5:44:24<45:02,  3.75s/it, gpt_loss=0.647, lr=2.62e-7][A
Train step of epoch 0:  88%|████████▊ | 5529/6250 [5:44:28<45:02,  3.75s/it, gpt_loss=0.658, lr=2.62e-7][A
Train step of epoch 0:  88%|████████▊ | 5530/6250 [5:44:28<44:52,  3.74s/it, gpt_loss=0.658, lr=2.62e-7][A
Train step of epoch 0:  88%|████████▊ | 5530/6250 [5:44:32<44:52,  3.74s/it, gpt_loss=0.541, lr=2.62e-7][A
Train step of epoch 0:  88%|████████▊ | 5531/6250 [5:44:32<46:05,  3.85s/it, gpt_loss=0.541, lr=2.62e-7][A[2025-04-24 05:37:14,490] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  88%|████████▊ | 5531/6250 [5:44:35<46:05,  3.85s/it, gpt_loss=0.58, lr=2.61e-7] [A
Train step of epoch 0:  89%|████████▊ | 5532/6250 [5:44:35<45:07,  3.77s/it, gpt_loss=0.58, lr=2.61e-7][A
Train step of epoch 0:  89%|████████▊ | 5532/6250 [5:44:40<45:07,  3.77s/it, gpt_loss=0.596, lr=2.61e-7][A
Train step of epoch 0:  89%|████████▊ | 5533/6250 [5:44:40<47:39,  3.99s/it, gpt_loss=0.596, lr=2.61e-7][A
Train step of epoch 0:  89%|████████▊ | 5533/6250 [5:44:43<47:39,  3.99s/it, gpt_loss=0.714, lr=2.61e-7][A
Train step of epoch 0:  89%|████████▊ | 5534/6250 [5:44:43<46:32,  3.90s/it, gpt_loss=0.714, lr=2.61e-7][A
Train step of epoch 0:  89%|████████▊ | 5534/6250 [5:44:47<46:32,  3.90s/it, gpt_loss=0.824, lr=2.61e-7][A
Train step of epoch 0:  89%|████████▊ | 5535/6250 [5:44:47<46:41,  3.92s/it, gpt_loss=0.824, lr=2.61e-7][A[2025-04-24 05:37:29,162] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  89%|████████▊ | 5535/6250 [5:44:50<46:41,  3.92s/it, gpt_loss=0.696, lr=2.61e-7][A
Train step of epoch 0:  89%|████████▊ | 5536/6250 [5:44:50<41:37,  3.50s/it, gpt_loss=0.696, lr=2.61e-7][A
Train step of epoch 0:  89%|████████▊ | 5536/6250 [5:44:53<41:37,  3.50s/it, gpt_loss=0.52, lr=2.61e-7] [A
Train step of epoch 0:  89%|████████▊ | 5537/6250 [5:44:53<41:03,  3.46s/it, gpt_loss=0.52, lr=2.61e-7][A
Train step of epoch 0:  89%|████████▊ | 5537/6250 [5:44:57<41:03,  3.46s/it, gpt_loss=0.517, lr=2.61e-7][A
Train step of epoch 0:  89%|████████▊ | 5538/6250 [5:44:57<40:38,  3.42s/it, gpt_loss=0.517, lr=2.61e-7][A
Train step of epoch 0:  89%|████████▊ | 5538/6250 [5:44:59<40:38,  3.42s/it, gpt_loss=0.579, lr=2.61e-7][A
Train step of epoch 0:  89%|████████▊ | 5539/6250 [5:44:59<38:05,  3.21s/it, gpt_loss=0.579, lr=2.61e-7][A[2025-04-24 05:37:43,852] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  89%|████████▊ | 5539/6250 [5:45:05<38:05,  3.21s/it, gpt_loss=0.444, lr=2.6e-7] [A
Train step of epoch 0:  89%|████████▊ | 5540/6250 [5:45:05<45:17,  3.83s/it, gpt_loss=0.444, lr=2.6e-7][A
Train step of epoch 0:  89%|████████▊ | 5540/6250 [5:45:09<45:17,  3.83s/it, gpt_loss=0.461, lr=2.6e-7][A
Train step of epoch 0:  89%|████████▊ | 5541/6250 [5:45:09<46:07,  3.90s/it, gpt_loss=0.461, lr=2.6e-7][A
Train step of epoch 0:  89%|████████▊ | 5541/6250 [5:45:12<46:07,  3.90s/it, gpt_loss=0.631, lr=2.6e-7][A
Train step of epoch 0:  89%|████████▊ | 5542/6250 [5:45:12<42:27,  3.60s/it, gpt_loss=0.631, lr=2.6e-7][A
Train step of epoch 0:  89%|████████▊ | 5542/6250 [5:45:16<42:27,  3.60s/it, gpt_loss=0.51, lr=2.6e-7] [A
Train step of epoch 0:  89%|████████▊ | 5543/6250 [5:45:16<45:50,  3.89s/it, gpt_loss=0.51, lr=2.6e-7][A[2025-04-24 05:37:59,078] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  89%|████████▊ | 5543/6250 [5:45:20<45:50,  3.89s/it, gpt_loss=0.624, lr=2.59e-7][A
Train step of epoch 0:  89%|████████▊ | 5544/6250 [5:45:20<45:03,  3.83s/it, gpt_loss=0.624, lr=2.59e-7][A
Train step of epoch 0:  89%|████████▊ | 5544/6250 [5:45:24<45:03,  3.83s/it, gpt_loss=0.615, lr=2.59e-7][A
Train step of epoch 0:  89%|████████▊ | 5545/6250 [5:45:24<44:35,  3.79s/it, gpt_loss=0.615, lr=2.59e-7][A
Train step of epoch 0:  89%|████████▊ | 5545/6250 [5:45:27<44:35,  3.79s/it, gpt_loss=0.68, lr=2.59e-7] [A
Train step of epoch 0:  89%|████████▊ | 5546/6250 [5:45:27<42:21,  3.61s/it, gpt_loss=0.68, lr=2.59e-7][A
Train step of epoch 0:  89%|████████▊ | 5546/6250 [5:45:31<42:21,  3.61s/it, gpt_loss=0.566, lr=2.59e-7][A
Train step of epoch 0:  89%|████████▉ | 5547/6250 [5:45:31<43:47,  3.74s/it, gpt_loss=0.566, lr=2.59e-7][A[2025-04-24 05:38:13,688] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  89%|████████▉ | 5547/6250 [5:45:34<43:47,  3.74s/it, gpt_loss=0.699, lr=2.59e-7][A
Train step of epoch 0:  89%|████████▉ | 5548/6250 [5:45:34<43:31,  3.72s/it, gpt_loss=0.699, lr=2.59e-7][A
Train step of epoch 0:  89%|████████▉ | 5548/6250 [5:45:38<43:31,  3.72s/it, gpt_loss=0.694, lr=2.59e-7][A
Train step of epoch 0:  89%|████████▉ | 5549/6250 [5:45:38<42:53,  3.67s/it, gpt_loss=0.694, lr=2.59e-7][A
Train step of epoch 0:  89%|████████▉ | 5549/6250 [5:45:42<42:53,  3.67s/it, gpt_loss=0.777, lr=2.59e-7][A
Train step of epoch 0:  89%|████████▉ | 5550/6250 [5:45:42<45:22,  3.89s/it, gpt_loss=0.777, lr=2.59e-7][A
Train step of epoch 0:  89%|████████▉ | 5550/6250 [5:45:47<45:22,  3.89s/it, gpt_loss=0.877, lr=2.59e-7][A
Train step of epoch 0:  89%|████████▉ | 5551/6250 [5:45:47<48:00,  4.12s/it, gpt_loss=0.877, lr=2.59e-7][A[2025-04-24 05:38:30,071] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  89%|████████▉ | 5551/6250 [5:45:51<48:00,  4.12s/it, gpt_loss=0.81, lr=2.58e-7] [A
Train step of epoch 0:  89%|████████▉ | 5552/6250 [5:45:51<46:42,  4.02s/it, gpt_loss=0.81, lr=2.58e-7][A
Train step of epoch 0:  89%|████████▉ | 5552/6250 [5:45:53<46:42,  4.02s/it, gpt_loss=0.476, lr=2.58e-7][A
Train step of epoch 0:  89%|████████▉ | 5553/6250 [5:45:53<40:39,  3.50s/it, gpt_loss=0.476, lr=2.58e-7][A
Train step of epoch 0:  89%|████████▉ | 5553/6250 [5:45:57<40:39,  3.50s/it, gpt_loss=0.799, lr=2.58e-7][A
Train step of epoch 0:  89%|████████▉ | 5554/6250 [5:45:57<43:10,  3.72s/it, gpt_loss=0.799, lr=2.58e-7][A
Train step of epoch 0:  89%|████████▉ | 5554/6250 [5:46:01<43:10,  3.72s/it, gpt_loss=0.517, lr=2.58e-7][A
Train step of epoch 0:  89%|████████▉ | 5555/6250 [5:46:01<43:05,  3.72s/it, gpt_loss=0.517, lr=2.58e-7][A[2025-04-24 05:38:42,985] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  89%|████████▉ | 5555/6250 [5:46:04<43:05,  3.72s/it, gpt_loss=0.513, lr=2.57e-7][A
Train step of epoch 0:  89%|████████▉ | 5556/6250 [5:46:04<39:20,  3.40s/it, gpt_loss=0.513, lr=2.57e-7][A
Train step of epoch 0:  89%|████████▉ | 5556/6250 [5:46:08<39:20,  3.40s/it, gpt_loss=0.644, lr=2.57e-7][A
Train step of epoch 0:  89%|████████▉ | 5557/6250 [5:46:08<41:21,  3.58s/it, gpt_loss=0.644, lr=2.57e-7][A
Train step of epoch 0:  89%|████████▉ | 5557/6250 [5:46:11<41:21,  3.58s/it, gpt_loss=0.689, lr=2.57e-7][A
Train step of epoch 0:  89%|████████▉ | 5558/6250 [5:46:11<40:08,  3.48s/it, gpt_loss=0.689, lr=2.57e-7][A
Train step of epoch 0:  89%|████████▉ | 5558/6250 [5:46:14<40:08,  3.48s/it, gpt_loss=0.613, lr=2.57e-7][A
Train step of epoch 0:  89%|████████▉ | 5559/6250 [5:46:14<39:09,  3.40s/it, gpt_loss=0.613, lr=2.57e-7][A[2025-04-24 05:38:56,988] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  89%|████████▉ | 5559/6250 [5:46:18<39:09,  3.40s/it, gpt_loss=0.644, lr=2.57e-7][A
Train step of epoch 0:  89%|████████▉ | 5560/6250 [5:46:18<39:36,  3.44s/it, gpt_loss=0.644, lr=2.57e-7][A
Train step of epoch 0:  89%|████████▉ | 5560/6250 [5:46:22<39:36,  3.44s/it, gpt_loss=0.547, lr=2.57e-7][A
Train step of epoch 0:  89%|████████▉ | 5561/6250 [5:46:22<40:54,  3.56s/it, gpt_loss=0.547, lr=2.57e-7][A
Train step of epoch 0:  89%|████████▉ | 5561/6250 [5:46:25<40:54,  3.56s/it, gpt_loss=0.617, lr=2.57e-7][A
Train step of epoch 0:  89%|████████▉ | 5562/6250 [5:46:25<41:01,  3.58s/it, gpt_loss=0.617, lr=2.57e-7][A
Train step of epoch 0:  89%|████████▉ | 5562/6250 [5:46:29<41:01,  3.58s/it, gpt_loss=0.509, lr=2.57e-7][A
Train step of epoch 0:  89%|████████▉ | 5563/6250 [5:46:29<41:12,  3.60s/it, gpt_loss=0.509, lr=2.57e-7][A[2025-04-24 05:39:11,925] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  89%|████████▉ | 5563/6250 [5:46:33<41:12,  3.60s/it, gpt_loss=0.616, lr=2.56e-7][A
Train step of epoch 0:  89%|████████▉ | 5564/6250 [5:46:33<41:57,  3.67s/it, gpt_loss=0.616, lr=2.56e-7][A
Train step of epoch 0:  89%|████████▉ | 5564/6250 [5:46:37<41:57,  3.67s/it, gpt_loss=0.645, lr=2.56e-7][A
Train step of epoch 0:  89%|████████▉ | 5565/6250 [5:46:37<42:40,  3.74s/it, gpt_loss=0.645, lr=2.56e-7][A
Train step of epoch 0:  89%|████████▉ | 5565/6250 [5:46:40<42:40,  3.74s/it, gpt_loss=0.724, lr=2.56e-7][A
Train step of epoch 0:  89%|████████▉ | 5566/6250 [5:46:40<40:02,  3.51s/it, gpt_loss=0.724, lr=2.56e-7][A
Train step of epoch 0:  89%|████████▉ | 5566/6250 [5:46:43<40:02,  3.51s/it, gpt_loss=0.626, lr=2.56e-7][A
Train step of epoch 0:  89%|████████▉ | 5567/6250 [5:46:43<41:10,  3.62s/it, gpt_loss=0.626, lr=2.56e-7][A[2025-04-24 05:39:27,105] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  89%|████████▉ | 5567/6250 [5:46:48<41:10,  3.62s/it, gpt_loss=0.624, lr=2.55e-7][A
Train step of epoch 0:  89%|████████▉ | 5568/6250 [5:46:48<43:54,  3.86s/it, gpt_loss=0.624, lr=2.55e-7][A
Train step of epoch 0:  89%|████████▉ | 5568/6250 [5:46:52<43:54,  3.86s/it, gpt_loss=0.485, lr=2.55e-7][A
Train step of epoch 0:  89%|████████▉ | 5569/6250 [5:46:52<43:08,  3.80s/it, gpt_loss=0.485, lr=2.55e-7][A
Train step of epoch 0:  89%|████████▉ | 5569/6250 [5:46:55<43:08,  3.80s/it, gpt_loss=0.698, lr=2.55e-7][A
Train step of epoch 0:  89%|████████▉ | 5570/6250 [5:46:55<42:35,  3.76s/it, gpt_loss=0.698, lr=2.55e-7][A
Train step of epoch 0:  89%|████████▉ | 5570/6250 [5:46:58<42:35,  3.76s/it, gpt_loss=0.676, lr=2.55e-7][A
Train step of epoch 0:  89%|████████▉ | 5571/6250 [5:46:58<39:34,  3.50s/it, gpt_loss=0.676, lr=2.55e-7][A[2025-04-24 05:39:41,124] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  89%|████████▉ | 5571/6250 [5:47:02<39:34,  3.50s/it, gpt_loss=0.524, lr=2.55e-7][A
Train step of epoch 0:  89%|████████▉ | 5572/6250 [5:47:02<40:36,  3.59s/it, gpt_loss=0.524, lr=2.55e-7][A
Train step of epoch 0:  89%|████████▉ | 5572/6250 [5:47:06<40:36,  3.59s/it, gpt_loss=0.495, lr=2.55e-7][A
Train step of epoch 0:  89%|████████▉ | 5573/6250 [5:47:06<42:30,  3.77s/it, gpt_loss=0.495, lr=2.55e-7][A
Train step of epoch 0:  89%|████████▉ | 5573/6250 [5:47:09<42:30,  3.77s/it, gpt_loss=0.622, lr=2.55e-7][A
Train step of epoch 0:  89%|████████▉ | 5574/6250 [5:47:09<40:50,  3.62s/it, gpt_loss=0.622, lr=2.55e-7][A
Train step of epoch 0:  89%|████████▉ | 5574/6250 [5:47:12<40:50,  3.62s/it, gpt_loss=0.686, lr=2.55e-7][A
Train step of epoch 0:  89%|████████▉ | 5575/6250 [5:47:12<39:06,  3.48s/it, gpt_loss=0.686, lr=2.55e-7][A[2025-04-24 05:39:56,198] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  89%|████████▉ | 5575/6250 [5:47:17<39:06,  3.48s/it, gpt_loss=0.543, lr=2.54e-7][A
Train step of epoch 0:  89%|████████▉ | 5576/6250 [5:47:17<42:25,  3.78s/it, gpt_loss=0.543, lr=2.54e-7][A
Train step of epoch 0:  89%|████████▉ | 5576/6250 [5:47:22<42:25,  3.78s/it, gpt_loss=0.616, lr=2.54e-7][A
Train step of epoch 0:  89%|████████▉ | 5577/6250 [5:47:22<45:04,  4.02s/it, gpt_loss=0.616, lr=2.54e-7][A
Train step of epoch 0:  89%|████████▉ | 5577/6250 [5:47:27<45:04,  4.02s/it, gpt_loss=0.576, lr=2.54e-7][A
Train step of epoch 0:  89%|████████▉ | 5578/6250 [5:47:27<50:31,  4.51s/it, gpt_loss=0.576, lr=2.54e-7][A
Train step of epoch 0:  89%|████████▉ | 5578/6250 [5:47:30<50:31,  4.51s/it, gpt_loss=0.633, lr=2.54e-7][A
Train step of epoch 0:  89%|████████▉ | 5579/6250 [5:47:30<45:55,  4.11s/it, gpt_loss=0.633, lr=2.54e-7][A[2025-04-24 05:40:14,119] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  89%|████████▉ | 5579/6250 [5:47:35<45:55,  4.11s/it, gpt_loss=0.653, lr=2.53e-7][A
Train step of epoch 0:  89%|████████▉ | 5580/6250 [5:47:35<47:13,  4.23s/it, gpt_loss=0.653, lr=2.53e-7][A
Train step of epoch 0:  89%|████████▉ | 5580/6250 [5:47:38<47:13,  4.23s/it, gpt_loss=0.612, lr=2.53e-7][A
Train step of epoch 0:  89%|████████▉ | 5581/6250 [5:47:38<44:58,  4.03s/it, gpt_loss=0.612, lr=2.53e-7][A
Train step of epoch 0:  89%|████████▉ | 5581/6250 [5:47:43<44:58,  4.03s/it, gpt_loss=0.621, lr=2.53e-7][A
Train step of epoch 0:  89%|████████▉ | 5582/6250 [5:47:43<45:19,  4.07s/it, gpt_loss=0.621, lr=2.53e-7][A
Train step of epoch 0:  89%|████████▉ | 5582/6250 [5:47:47<45:19,  4.07s/it, gpt_loss=0.634, lr=2.53e-7][A
Train step of epoch 0:  89%|████████▉ | 5583/6250 [5:47:47<46:17,  4.16s/it, gpt_loss=0.634, lr=2.53e-7][A[2025-04-24 05:40:29,483] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  89%|████████▉ | 5583/6250 [5:47:50<46:17,  4.16s/it, gpt_loss=0.745, lr=2.53e-7][A
Train step of epoch 0:  89%|████████▉ | 5584/6250 [5:47:50<43:10,  3.89s/it, gpt_loss=0.745, lr=2.53e-7][A
Train step of epoch 0:  89%|████████▉ | 5584/6250 [5:47:53<43:10,  3.89s/it, gpt_loss=0.694, lr=2.53e-7][A
Train step of epoch 0:  89%|████████▉ | 5585/6250 [5:47:53<40:56,  3.69s/it, gpt_loss=0.694, lr=2.53e-7][A
Train step of epoch 0:  89%|████████▉ | 5585/6250 [5:47:57<40:56,  3.69s/it, gpt_loss=0.655, lr=2.53e-7][A
Train step of epoch 0:  89%|████████▉ | 5586/6250 [5:47:57<40:28,  3.66s/it, gpt_loss=0.655, lr=2.53e-7][A
Train step of epoch 0:  89%|████████▉ | 5586/6250 [5:48:01<40:28,  3.66s/it, gpt_loss=0.545, lr=2.53e-7][A
Train step of epoch 0:  89%|████████▉ | 5587/6250 [5:48:01<40:30,  3.67s/it, gpt_loss=0.545, lr=2.53e-7][A[2025-04-24 05:40:43,546] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  89%|████████▉ | 5587/6250 [5:48:04<40:30,  3.67s/it, gpt_loss=0.577, lr=2.52e-7][A
Train step of epoch 0:  89%|████████▉ | 5588/6250 [5:48:04<40:07,  3.64s/it, gpt_loss=0.577, lr=2.52e-7][A
Train step of epoch 0:  89%|████████▉ | 5588/6250 [5:48:08<40:07,  3.64s/it, gpt_loss=0.627, lr=2.52e-7][A
Train step of epoch 0:  89%|████████▉ | 5589/6250 [5:48:08<39:53,  3.62s/it, gpt_loss=0.627, lr=2.52e-7][A
Train step of epoch 0:  89%|████████▉ | 5589/6250 [5:48:12<39:53,  3.62s/it, gpt_loss=0.775, lr=2.52e-7][A
Train step of epoch 0:  89%|████████▉ | 5590/6250 [5:48:12<39:53,  3.63s/it, gpt_loss=0.775, lr=2.52e-7][A
Train step of epoch 0:  89%|████████▉ | 5590/6250 [5:48:15<39:53,  3.63s/it, gpt_loss=0.562, lr=2.52e-7][A
Train step of epoch 0:  89%|████████▉ | 5591/6250 [5:48:15<40:34,  3.69s/it, gpt_loss=0.562, lr=2.52e-7][A[2025-04-24 05:40:57,945] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  89%|████████▉ | 5591/6250 [5:48:19<40:34,  3.69s/it, gpt_loss=0.619, lr=2.52e-7][A
Train step of epoch 0:  89%|████████▉ | 5592/6250 [5:48:19<39:17,  3.58s/it, gpt_loss=0.619, lr=2.52e-7][A
Train step of epoch 0:  89%|████████▉ | 5592/6250 [5:48:22<39:17,  3.58s/it, gpt_loss=0.559, lr=2.52e-7][A
Train step of epoch 0:  89%|████████▉ | 5593/6250 [5:48:22<38:59,  3.56s/it, gpt_loss=0.559, lr=2.52e-7][A
Train step of epoch 0:  89%|████████▉ | 5593/6250 [5:48:25<38:59,  3.56s/it, gpt_loss=0.621, lr=2.52e-7][A
Train step of epoch 0:  90%|████████▉ | 5594/6250 [5:48:25<37:30,  3.43s/it, gpt_loss=0.621, lr=2.52e-7][A
Train step of epoch 0:  90%|████████▉ | 5594/6250 [5:48:30<37:30,  3.43s/it, gpt_loss=0.665, lr=2.52e-7][A
Train step of epoch 0:  90%|████████▉ | 5595/6250 [5:48:30<40:09,  3.68s/it, gpt_loss=0.665, lr=2.52e-7][A[2025-04-24 05:41:11,944] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  90%|████████▉ | 5595/6250 [5:48:33<40:09,  3.68s/it, gpt_loss=0.65, lr=2.51e-7] [A
Train step of epoch 0:  90%|████████▉ | 5596/6250 [5:48:33<38:13,  3.51s/it, gpt_loss=0.65, lr=2.51e-7][A
Train step of epoch 0:  90%|████████▉ | 5596/6250 [5:48:37<38:13,  3.51s/it, gpt_loss=0.625, lr=2.51e-7][A
Train step of epoch 0:  90%|████████▉ | 5597/6250 [5:48:37<39:22,  3.62s/it, gpt_loss=0.625, lr=2.51e-7][A
Train step of epoch 0:  90%|████████▉ | 5597/6250 [5:48:40<39:22,  3.62s/it, gpt_loss=0.65, lr=2.51e-7] [A
Train step of epoch 0:  90%|████████▉ | 5598/6250 [5:48:40<37:55,  3.49s/it, gpt_loss=0.65, lr=2.51e-7][A
Train step of epoch 0:  90%|████████▉ | 5598/6250 [5:48:43<37:55,  3.49s/it, gpt_loss=0.535, lr=2.51e-7][A
Train step of epoch 0:  90%|████████▉ | 5599/6250 [5:48:43<37:33,  3.46s/it, gpt_loss=0.535, lr=2.51e-7][A[2025-04-24 05:41:25,977] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-04-24 05:41:25,977] [INFO] [logging.py:107:log_dist] [Rank 0] step=1400, skipped=0, lr=[2.503070637053728e-07, 2.503070637053728e-07], mom=[(0.9, 0.95), (0.9, 0.95)]
[2025-04-24 05:41:25,977] [INFO] [timer.py:264:stop] epoch=0/micro_step=5600/global_step=1400, RunningAvgSamplesPerSec=2.2271315741931255, CurrSamplesPerSec=2.4087978989004366, MemAllocated=40.57GB, MaxMemAllocated=60.14GB

Train step of epoch 0:  90%|████████▉ | 5599/6250 [5:48:47<37:33,  3.46s/it, gpt_loss=0.568, lr=2.5e-7] [A
Train step of epoch 0:  90%|████████▉ | 5600/6250 [5:48:47<37:51,  3.49s/it, gpt_loss=0.568, lr=2.5e-7][A
Train step of epoch 0:  90%|████████▉ | 5600/6250 [5:48:50<37:51,  3.49s/it, gpt_loss=0.765, lr=2.5e-7][A
Train step of epoch 0:  90%|████████▉ | 5601/6250 [5:48:50<38:28,  3.56s/it, gpt_loss=0.765, lr=2.5e-7][A
Train step of epoch 0:  90%|████████▉ | 5601/6250 [5:48:53<38:28,  3.56s/it, gpt_loss=0.672, lr=2.5e-7][A
Train step of epoch 0:  90%|████████▉ | 5602/6250 [5:48:53<34:42,  3.21s/it, gpt_loss=0.672, lr=2.5e-7][A
Train step of epoch 0:  90%|████████▉ | 5602/6250 [5:48:56<34:42,  3.21s/it, gpt_loss=0.54, lr=2.5e-7] [A
Train step of epoch 0:  90%|████████▉ | 5603/6250 [5:48:56<35:32,  3.30s/it, gpt_loss=0.54, lr=2.5e-7][A[2025-04-24 05:41:38,869] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  90%|████████▉ | 5603/6250 [5:49:00<35:32,  3.30s/it, gpt_loss=0.631, lr=2.5e-7][A
Train step of epoch 0:  90%|████████▉ | 5604/6250 [5:49:00<35:27,  3.29s/it, gpt_loss=0.631, lr=2.5e-7][A
Train step of epoch 0:  90%|████████▉ | 5604/6250 [5:49:03<35:27,  3.29s/it, gpt_loss=0.446, lr=2.5e-7][A
Train step of epoch 0:  90%|████████▉ | 5605/6250 [5:49:03<35:39,  3.32s/it, gpt_loss=0.446, lr=2.5e-7][A
Train step of epoch 0:  90%|████████▉ | 5605/6250 [5:49:06<35:39,  3.32s/it, gpt_loss=0.696, lr=2.5e-7][A
Train step of epoch 0:  90%|████████▉ | 5606/6250 [5:49:06<35:41,  3.33s/it, gpt_loss=0.696, lr=2.5e-7][A
Train step of epoch 0:  90%|████████▉ | 5606/6250 [5:49:10<35:41,  3.33s/it, gpt_loss=0.413, lr=2.5e-7][A
Train step of epoch 0:  90%|████████▉ | 5607/6250 [5:49:10<36:20,  3.39s/it, gpt_loss=0.413, lr=2.5e-7][A[2025-04-24 05:41:52,503] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  90%|████████▉ | 5607/6250 [5:49:13<36:20,  3.39s/it, gpt_loss=0.57, lr=2.49e-7][A
Train step of epoch 0:  90%|████████▉ | 5608/6250 [5:49:13<36:13,  3.39s/it, gpt_loss=0.57, lr=2.49e-7][A
Train step of epoch 0:  90%|████████▉ | 5608/6250 [5:49:18<36:13,  3.39s/it, gpt_loss=0.628, lr=2.49e-7][A
Train step of epoch 0:  90%|████████▉ | 5609/6250 [5:49:18<40:43,  3.81s/it, gpt_loss=0.628, lr=2.49e-7][A
Train step of epoch 0:  90%|████████▉ | 5609/6250 [5:49:21<40:43,  3.81s/it, gpt_loss=0.551, lr=2.49e-7][A
Train step of epoch 0:  90%|████████▉ | 5610/6250 [5:49:21<39:23,  3.69s/it, gpt_loss=0.551, lr=2.49e-7][A
Train step of epoch 0:  90%|████████▉ | 5610/6250 [5:49:24<39:23,  3.69s/it, gpt_loss=0.547, lr=2.49e-7][A
Train step of epoch 0:  90%|████████▉ | 5611/6250 [5:49:24<37:04,  3.48s/it, gpt_loss=0.547, lr=2.49e-7][A[2025-04-24 05:42:06,677] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  90%|████████▉ | 5611/6250 [5:49:27<37:04,  3.48s/it, gpt_loss=0.602, lr=2.48e-7][A
Train step of epoch 0:  90%|████████▉ | 5612/6250 [5:49:27<35:21,  3.33s/it, gpt_loss=0.602, lr=2.48e-7][A
Train step of epoch 0:  90%|████████▉ | 5612/6250 [5:49:31<35:21,  3.33s/it, gpt_loss=0.44, lr=2.48e-7] [A
Train step of epoch 0:  90%|████████▉ | 5613/6250 [5:49:31<36:09,  3.41s/it, gpt_loss=0.44, lr=2.48e-7][A
Train step of epoch 0:  90%|████████▉ | 5613/6250 [5:49:35<36:09,  3.41s/it, gpt_loss=0.64, lr=2.48e-7][A
Train step of epoch 0:  90%|████████▉ | 5614/6250 [5:49:35<36:36,  3.45s/it, gpt_loss=0.64, lr=2.48e-7][A
Train step of epoch 0:  90%|████████▉ | 5614/6250 [5:49:38<36:36,  3.45s/it, gpt_loss=0.545, lr=2.48e-7][A
Train step of epoch 0:  90%|████████▉ | 5615/6250 [5:49:38<37:08,  3.51s/it, gpt_loss=0.545, lr=2.48e-7][A[2025-04-24 05:42:20,787] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  90%|████████▉ | 5615/6250 [5:49:42<37:08,  3.51s/it, gpt_loss=0.711, lr=2.48e-7][A
Train step of epoch 0:  90%|████████▉ | 5616/6250 [5:49:42<36:27,  3.45s/it, gpt_loss=0.711, lr=2.48e-7][A
Train step of epoch 0:  90%|████████▉ | 5616/6250 [5:49:44<36:27,  3.45s/it, gpt_loss=0.504, lr=2.48e-7][A
Train step of epoch 0:  90%|████████▉ | 5617/6250 [5:49:44<34:10,  3.24s/it, gpt_loss=0.504, lr=2.48e-7][A
Train step of epoch 0:  90%|████████▉ | 5617/6250 [5:49:49<34:10,  3.24s/it, gpt_loss=0.386, lr=2.48e-7][A
Train step of epoch 0:  90%|████████▉ | 5618/6250 [5:49:49<38:13,  3.63s/it, gpt_loss=0.386, lr=2.48e-7][A
Train step of epoch 0:  90%|████████▉ | 5618/6250 [5:49:52<38:13,  3.63s/it, gpt_loss=0.464, lr=2.48e-7][A
Train step of epoch 0:  90%|████████▉ | 5619/6250 [5:49:52<36:12,  3.44s/it, gpt_loss=0.464, lr=2.48e-7][A[2025-04-24 05:42:34,436] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  90%|████████▉ | 5619/6250 [5:49:55<36:12,  3.44s/it, gpt_loss=0.529, lr=2.47e-7][A
Train step of epoch 0:  90%|████████▉ | 5620/6250 [5:49:55<35:52,  3.42s/it, gpt_loss=0.529, lr=2.47e-7][A
Train step of epoch 0:  90%|████████▉ | 5620/6250 [5:49:59<35:52,  3.42s/it, gpt_loss=0.504, lr=2.47e-7][A
Train step of epoch 0:  90%|████████▉ | 5621/6250 [5:49:59<35:35,  3.40s/it, gpt_loss=0.504, lr=2.47e-7][A
Train step of epoch 0:  90%|████████▉ | 5621/6250 [5:50:02<35:35,  3.40s/it, gpt_loss=0.48, lr=2.47e-7] [A
Train step of epoch 0:  90%|████████▉ | 5622/6250 [5:50:02<35:42,  3.41s/it, gpt_loss=0.48, lr=2.47e-7][A
Train step of epoch 0:  90%|████████▉ | 5622/6250 [5:50:06<35:42,  3.41s/it, gpt_loss=0.494, lr=2.47e-7][A
Train step of epoch 0:  90%|████████▉ | 5623/6250 [5:50:06<36:58,  3.54s/it, gpt_loss=0.494, lr=2.47e-7][A[2025-04-24 05:42:48,112] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  90%|████████▉ | 5623/6250 [5:50:09<36:58,  3.54s/it, gpt_loss=0.633, lr=2.47e-7][A
Train step of epoch 0:  90%|████████▉ | 5624/6250 [5:50:09<35:22,  3.39s/it, gpt_loss=0.633, lr=2.47e-7][A
Train step of epoch 0:  90%|████████▉ | 5624/6250 [5:50:13<35:22,  3.39s/it, gpt_loss=0.559, lr=2.47e-7][A
Train step of epoch 0:  90%|█████████ | 5625/6250 [5:50:13<36:23,  3.49s/it, gpt_loss=0.559, lr=2.47e-7][A
Train step of epoch 0:  90%|█████████ | 5625/6250 [5:50:17<36:23,  3.49s/it, gpt_loss=0.554, lr=2.47e-7][A
Train step of epoch 0:  90%|█████████ | 5626/6250 [5:50:17<38:38,  3.72s/it, gpt_loss=0.554, lr=2.47e-7][A
Train step of epoch 0:  90%|█████████ | 5626/6250 [5:50:20<38:38,  3.72s/it, gpt_loss=0.506, lr=2.47e-7][A
Train step of epoch 0:  90%|█████████ | 5627/6250 [5:50:20<37:11,  3.58s/it, gpt_loss=0.506, lr=2.47e-7][A[2025-04-24 05:43:02,601] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  90%|█████████ | 5627/6250 [5:50:23<37:11,  3.58s/it, gpt_loss=0.546, lr=2.46e-7][A
Train step of epoch 0:  90%|█████████ | 5628/6250 [5:50:23<36:06,  3.48s/it, gpt_loss=0.546, lr=2.46e-7][A
Train step of epoch 0:  90%|█████████ | 5628/6250 [5:50:28<36:06,  3.48s/it, gpt_loss=0.646, lr=2.46e-7][A
Train step of epoch 0:  90%|█████████ | 5629/6250 [5:50:28<38:38,  3.73s/it, gpt_loss=0.646, lr=2.46e-7][A
Train step of epoch 0:  90%|█████████ | 5629/6250 [5:50:32<38:38,  3.73s/it, gpt_loss=0.672, lr=2.46e-7][A
Train step of epoch 0:  90%|█████████ | 5630/6250 [5:50:32<39:17,  3.80s/it, gpt_loss=0.672, lr=2.46e-7][A
Train step of epoch 0:  90%|█████████ | 5630/6250 [5:50:35<39:17,  3.80s/it, gpt_loss=0.608, lr=2.46e-7][A
Train step of epoch 0:  90%|█████████ | 5631/6250 [5:50:35<37:08,  3.60s/it, gpt_loss=0.608, lr=2.46e-7][A[2025-04-24 05:43:17,334] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  90%|█████████ | 5631/6250 [5:50:38<37:08,  3.60s/it, gpt_loss=0.71, lr=2.46e-7] [A
Train step of epoch 0:  90%|█████████ | 5632/6250 [5:50:38<36:13,  3.52s/it, gpt_loss=0.71, lr=2.46e-7][A
Train step of epoch 0:  90%|█████████ | 5632/6250 [5:50:42<36:13,  3.52s/it, gpt_loss=0.788, lr=2.46e-7][A
Train step of epoch 0:  90%|█████████ | 5633/6250 [5:50:42<37:17,  3.63s/it, gpt_loss=0.788, lr=2.46e-7][A
Train step of epoch 0:  90%|█████████ | 5633/6250 [5:50:46<37:17,  3.63s/it, gpt_loss=0.807, lr=2.46e-7][A
Train step of epoch 0:  90%|█████████ | 5634/6250 [5:50:46<38:08,  3.71s/it, gpt_loss=0.807, lr=2.46e-7][A
Train step of epoch 0:  90%|█████████ | 5634/6250 [5:50:50<38:08,  3.71s/it, gpt_loss=0.701, lr=2.46e-7][A
Train step of epoch 0:  90%|█████████ | 5635/6250 [5:50:50<37:46,  3.69s/it, gpt_loss=0.701, lr=2.46e-7][A[2025-04-24 05:43:33,419] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  90%|█████████ | 5635/6250 [5:50:54<37:46,  3.69s/it, gpt_loss=0.492, lr=2.45e-7][A
Train step of epoch 0:  90%|█████████ | 5636/6250 [5:50:54<40:43,  3.98s/it, gpt_loss=0.492, lr=2.45e-7][A
Train step of epoch 0:  90%|█████████ | 5636/6250 [5:50:58<40:43,  3.98s/it, gpt_loss=0.76, lr=2.45e-7] [A
Train step of epoch 0:  90%|█████████ | 5637/6250 [5:50:58<41:03,  4.02s/it, gpt_loss=0.76, lr=2.45e-7][A
Train step of epoch 0:  90%|█████████ | 5637/6250 [5:51:01<41:03,  4.02s/it, gpt_loss=0.713, lr=2.45e-7][A
Train step of epoch 0:  90%|█████████ | 5638/6250 [5:51:01<38:24,  3.77s/it, gpt_loss=0.713, lr=2.45e-7][A
Train step of epoch 0:  90%|█████████ | 5638/6250 [5:51:05<38:24,  3.77s/it, gpt_loss=0.576, lr=2.45e-7][A
Train step of epoch 0:  90%|█████████ | 5639/6250 [5:51:05<37:44,  3.71s/it, gpt_loss=0.576, lr=2.45e-7][A[2025-04-24 05:43:47,672] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  90%|█████████ | 5639/6250 [5:51:08<37:44,  3.71s/it, gpt_loss=0.702, lr=2.44e-7][A
Train step of epoch 0:  90%|█████████ | 5640/6250 [5:51:08<36:44,  3.61s/it, gpt_loss=0.702, lr=2.44e-7][A
Train step of epoch 0:  90%|█████████ | 5640/6250 [5:51:11<36:44,  3.61s/it, gpt_loss=0.602, lr=2.44e-7][A
Train step of epoch 0:  90%|█████████ | 5641/6250 [5:51:11<34:59,  3.45s/it, gpt_loss=0.602, lr=2.44e-7][A
Train step of epoch 0:  90%|█████████ | 5641/6250 [5:51:18<34:59,  3.45s/it, gpt_loss=0.805, lr=2.44e-7][A
Train step of epoch 0:  90%|█████████ | 5642/6250 [5:51:18<42:53,  4.23s/it, gpt_loss=0.805, lr=2.44e-7][A
Train step of epoch 0:  90%|█████████ | 5642/6250 [5:51:21<42:53,  4.23s/it, gpt_loss=0.653, lr=2.44e-7][A
Train step of epoch 0:  90%|█████████ | 5643/6250 [5:51:21<39:16,  3.88s/it, gpt_loss=0.653, lr=2.44e-7][A[2025-04-24 05:44:04,610] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  90%|█████████ | 5643/6250 [5:51:25<39:16,  3.88s/it, gpt_loss=0.622, lr=2.44e-7][A
Train step of epoch 0:  90%|█████████ | 5644/6250 [5:51:25<41:50,  4.14s/it, gpt_loss=0.622, lr=2.44e-7][A
Train step of epoch 0:  90%|█████████ | 5644/6250 [5:51:29<41:50,  4.14s/it, gpt_loss=0.545, lr=2.44e-7][A
Train step of epoch 0:  90%|█████████ | 5645/6250 [5:51:29<41:25,  4.11s/it, gpt_loss=0.545, lr=2.44e-7][A
Train step of epoch 0:  90%|█████████ | 5645/6250 [5:51:33<41:25,  4.11s/it, gpt_loss=0.481, lr=2.44e-7][A
Train step of epoch 0:  90%|█████████ | 5646/6250 [5:51:33<41:15,  4.10s/it, gpt_loss=0.481, lr=2.44e-7][A
Train step of epoch 0:  90%|█████████ | 5646/6250 [5:51:38<41:15,  4.10s/it, gpt_loss=0.687, lr=2.44e-7][A
Train step of epoch 0:  90%|█████████ | 5647/6250 [5:51:38<40:59,  4.08s/it, gpt_loss=0.687, lr=2.44e-7][A[2025-04-24 05:44:19,974] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  90%|█████████ | 5647/6250 [5:51:41<40:59,  4.08s/it, gpt_loss=0.43, lr=2.43e-7] [A
Train step of epoch 0:  90%|█████████ | 5648/6250 [5:51:41<38:21,  3.82s/it, gpt_loss=0.43, lr=2.43e-7][A
Train step of epoch 0:  90%|█████████ | 5648/6250 [5:51:44<38:21,  3.82s/it, gpt_loss=0.503, lr=2.43e-7][A
Train step of epoch 0:  90%|█████████ | 5649/6250 [5:51:44<35:56,  3.59s/it, gpt_loss=0.503, lr=2.43e-7][A
Train step of epoch 0:  90%|█████████ | 5649/6250 [5:51:48<35:56,  3.59s/it, gpt_loss=0.526, lr=2.43e-7][A
Train step of epoch 0:  90%|█████████ | 5650/6250 [5:51:48<37:41,  3.77s/it, gpt_loss=0.526, lr=2.43e-7][A
Train step of epoch 0:  90%|█████████ | 5650/6250 [5:51:50<37:41,  3.77s/it, gpt_loss=0.48, lr=2.43e-7] [A
Train step of epoch 0:  90%|█████████ | 5651/6250 [5:51:50<32:57,  3.30s/it, gpt_loss=0.48, lr=2.43e-7][A[2025-04-24 05:44:34,319] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  90%|█████████ | 5651/6250 [5:51:55<32:57,  3.30s/it, gpt_loss=0.677, lr=2.43e-7][A
Train step of epoch 0:  90%|█████████ | 5652/6250 [5:51:55<37:41,  3.78s/it, gpt_loss=0.677, lr=2.43e-7][A
Train step of epoch 0:  90%|█████████ | 5652/6250 [5:51:58<37:41,  3.78s/it, gpt_loss=0.568, lr=2.43e-7][A
Train step of epoch 0:  90%|█████████ | 5653/6250 [5:51:58<34:57,  3.51s/it, gpt_loss=0.568, lr=2.43e-7][A
Train step of epoch 0:  90%|█████████ | 5653/6250 [5:52:02<34:57,  3.51s/it, gpt_loss=0.661, lr=2.43e-7][A
Train step of epoch 0:  90%|█████████ | 5654/6250 [5:52:02<36:10,  3.64s/it, gpt_loss=0.661, lr=2.43e-7][A
Train step of epoch 0:  90%|█████████ | 5654/6250 [5:52:05<36:10,  3.64s/it, gpt_loss=0.565, lr=2.43e-7][A
Train step of epoch 0:  90%|█████████ | 5655/6250 [5:52:05<34:58,  3.53s/it, gpt_loss=0.565, lr=2.43e-7][A[2025-04-24 05:44:48,763] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  90%|█████████ | 5655/6250 [5:52:10<34:58,  3.53s/it, gpt_loss=0.749, lr=2.42e-7][A
Train step of epoch 0:  90%|█████████ | 5656/6250 [5:52:10<37:23,  3.78s/it, gpt_loss=0.749, lr=2.42e-7][A
Train step of epoch 0:  90%|█████████ | 5656/6250 [5:52:14<37:23,  3.78s/it, gpt_loss=0.576, lr=2.42e-7][A
Train step of epoch 0:  91%|█████████ | 5657/6250 [5:52:14<39:17,  3.98s/it, gpt_loss=0.576, lr=2.42e-7][A
Train step of epoch 0:  91%|█████████ | 5657/6250 [5:52:19<39:17,  3.98s/it, gpt_loss=0.553, lr=2.42e-7][A
Train step of epoch 0:  91%|█████████ | 5658/6250 [5:52:19<42:42,  4.33s/it, gpt_loss=0.553, lr=2.42e-7][A
Train step of epoch 0:  91%|█████████ | 5658/6250 [5:52:23<42:42,  4.33s/it, gpt_loss=0.535, lr=2.42e-7][A
Train step of epoch 0:  91%|█████████ | 5659/6250 [5:52:23<42:32,  4.32s/it, gpt_loss=0.535, lr=2.42e-7][A[2025-04-24 05:45:07,270] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  91%|█████████ | 5659/6250 [5:52:28<42:32,  4.32s/it, gpt_loss=0.689, lr=2.41e-7][A
Train step of epoch 0:  91%|█████████ | 5660/6250 [5:52:28<43:20,  4.41s/it, gpt_loss=0.689, lr=2.41e-7][A
Train step of epoch 0:  91%|█████████ | 5660/6250 [5:52:31<43:20,  4.41s/it, gpt_loss=0.543, lr=2.41e-7][A
Train step of epoch 0:  91%|█████████ | 5661/6250 [5:52:31<39:35,  4.03s/it, gpt_loss=0.543, lr=2.41e-7][A
Train step of epoch 0:  91%|█████████ | 5661/6250 [5:52:35<39:35,  4.03s/it, gpt_loss=0.46, lr=2.41e-7] [A
Train step of epoch 0:  91%|█████████ | 5662/6250 [5:52:35<39:20,  4.01s/it, gpt_loss=0.46, lr=2.41e-7][A
Train step of epoch 0:  91%|█████████ | 5662/6250 [5:52:39<39:20,  4.01s/it, gpt_loss=0.659, lr=2.41e-7][A
Train step of epoch 0:  91%|█████████ | 5663/6250 [5:52:39<39:35,  4.05s/it, gpt_loss=0.659, lr=2.41e-7][A[2025-04-24 05:45:22,016] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  91%|█████████ | 5663/6250 [5:52:43<39:35,  4.05s/it, gpt_loss=0.785, lr=2.41e-7][A
Train step of epoch 0:  91%|█████████ | 5664/6250 [5:52:43<37:54,  3.88s/it, gpt_loss=0.785, lr=2.41e-7][A
Train step of epoch 0:  91%|█████████ | 5664/6250 [5:52:47<37:54,  3.88s/it, gpt_loss=0.702, lr=2.41e-7][A
Train step of epoch 0:  91%|█████████ | 5665/6250 [5:52:47<37:51,  3.88s/it, gpt_loss=0.702, lr=2.41e-7][A
Train step of epoch 0:  91%|█████████ | 5665/6250 [5:52:51<37:51,  3.88s/it, gpt_loss=0.542, lr=2.41e-7][A
Train step of epoch 0:  91%|█████████ | 5666/6250 [5:52:51<38:59,  4.01s/it, gpt_loss=0.542, lr=2.41e-7][A
Train step of epoch 0:  91%|█████████ | 5666/6250 [5:52:54<38:59,  4.01s/it, gpt_loss=0.755, lr=2.41e-7][A
Train step of epoch 0:  91%|█████████ | 5667/6250 [5:52:54<37:24,  3.85s/it, gpt_loss=0.755, lr=2.41e-7][A[2025-04-24 05:45:38,522] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  91%|█████████ | 5667/6250 [5:52:59<37:24,  3.85s/it, gpt_loss=0.659, lr=2.4e-7] [A
Train step of epoch 0:  91%|█████████ | 5668/6250 [5:52:59<40:13,  4.15s/it, gpt_loss=0.659, lr=2.4e-7][A
Train step of epoch 0:  91%|█████████ | 5668/6250 [5:53:03<40:13,  4.15s/it, gpt_loss=0.613, lr=2.4e-7][A
Train step of epoch 0:  91%|█████████ | 5669/6250 [5:53:03<39:24,  4.07s/it, gpt_loss=0.613, lr=2.4e-7][A
Train step of epoch 0:  91%|█████████ | 5669/6250 [5:53:07<39:24,  4.07s/it, gpt_loss=0.622, lr=2.4e-7][A
Train step of epoch 0:  91%|█████████ | 5670/6250 [5:53:07<37:42,  3.90s/it, gpt_loss=0.622, lr=2.4e-7][A
Train step of epoch 0:  91%|█████████ | 5670/6250 [5:53:11<37:42,  3.90s/it, gpt_loss=0.598, lr=2.4e-7][A
Train step of epoch 0:  91%|█████████ | 5671/6250 [5:53:11<39:56,  4.14s/it, gpt_loss=0.598, lr=2.4e-7][A[2025-04-24 05:45:55,064] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  91%|█████████ | 5671/6250 [5:53:16<39:56,  4.14s/it, gpt_loss=0.715, lr=2.4e-7][A
Train step of epoch 0:  91%|█████████ | 5672/6250 [5:53:16<40:46,  4.23s/it, gpt_loss=0.715, lr=2.4e-7][A
Train step of epoch 0:  91%|█████████ | 5672/6250 [5:53:17<40:46,  4.23s/it, gpt_loss=0.459, lr=2.4e-7][A
Train step of epoch 0:  91%|█████████ | 5673/6250 [5:53:17<32:54,  3.42s/it, gpt_loss=0.459, lr=2.4e-7][A
Train step of epoch 0:  91%|█████████ | 5673/6250 [5:53:22<32:54,  3.42s/it, gpt_loss=0.704, lr=2.4e-7][A
Train step of epoch 0:  91%|█████████ | 5674/6250 [5:53:22<36:55,  3.85s/it, gpt_loss=0.704, lr=2.4e-7][A
Train step of epoch 0:  91%|█████████ | 5674/6250 [5:53:25<36:55,  3.85s/it, gpt_loss=0.519, lr=2.4e-7][A
Train step of epoch 0:  91%|█████████ | 5675/6250 [5:53:25<34:56,  3.65s/it, gpt_loss=0.519, lr=2.4e-7][A[2025-04-24 05:46:08,424] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  91%|█████████ | 5675/6250 [5:53:29<34:56,  3.65s/it, gpt_loss=0.571, lr=2.39e-7][A
Train step of epoch 0:  91%|█████████ | 5676/6250 [5:53:29<35:21,  3.70s/it, gpt_loss=0.571, lr=2.39e-7][A
Train step of epoch 0:  91%|█████████ | 5676/6250 [5:53:33<35:21,  3.70s/it, gpt_loss=0.66, lr=2.39e-7] [A
Train step of epoch 0:  91%|█████████ | 5677/6250 [5:53:33<35:02,  3.67s/it, gpt_loss=0.66, lr=2.39e-7][A
Train step of epoch 0:  91%|█████████ | 5677/6250 [5:53:36<35:02,  3.67s/it, gpt_loss=0.545, lr=2.39e-7][A
Train step of epoch 0:  91%|█████████ | 5678/6250 [5:53:36<34:00,  3.57s/it, gpt_loss=0.545, lr=2.39e-7][A
Train step of epoch 0:  91%|█████████ | 5678/6250 [5:53:39<34:00,  3.57s/it, gpt_loss=0.495, lr=2.39e-7][A
Train step of epoch 0:  91%|█████████ | 5679/6250 [5:53:39<31:33,  3.32s/it, gpt_loss=0.495, lr=2.39e-7][A[2025-04-24 05:46:22,032] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  91%|█████████ | 5679/6250 [5:53:43<31:33,  3.32s/it, gpt_loss=0.83, lr=2.39e-7] [A
Train step of epoch 0:  91%|█████████ | 5680/6250 [5:53:43<33:17,  3.50s/it, gpt_loss=0.83, lr=2.39e-7][A
Train step of epoch 0:  91%|█████████ | 5680/6250 [5:53:46<33:17,  3.50s/it, gpt_loss=0.593, lr=2.39e-7][A
Train step of epoch 0:  91%|█████████ | 5681/6250 [5:53:46<33:18,  3.51s/it, gpt_loss=0.593, lr=2.39e-7][A
Train step of epoch 0:  91%|█████████ | 5681/6250 [5:53:50<33:18,  3.51s/it, gpt_loss=0.6, lr=2.39e-7]  [A
Train step of epoch 0:  91%|█████████ | 5682/6250 [5:53:50<34:10,  3.61s/it, gpt_loss=0.6, lr=2.39e-7][A
Train step of epoch 0:  91%|█████████ | 5682/6250 [5:53:54<34:10,  3.61s/it, gpt_loss=0.64, lr=2.39e-7][A
Train step of epoch 0:  91%|█████████ | 5683/6250 [5:53:54<33:52,  3.59s/it, gpt_loss=0.64, lr=2.39e-7][A[2025-04-24 05:46:36,785] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  91%|█████████ | 5683/6250 [5:53:58<33:52,  3.59s/it, gpt_loss=0.516, lr=2.38e-7][A
Train step of epoch 0:  91%|█████████ | 5684/6250 [5:53:58<34:35,  3.67s/it, gpt_loss=0.516, lr=2.38e-7][A
Train step of epoch 0:  91%|█████████ | 5684/6250 [5:54:01<34:35,  3.67s/it, gpt_loss=0.662, lr=2.38e-7][A
Train step of epoch 0:  91%|█████████ | 5685/6250 [5:54:01<33:34,  3.57s/it, gpt_loss=0.662, lr=2.38e-7][A
Train step of epoch 0:  91%|█████████ | 5685/6250 [5:54:05<33:34,  3.57s/it, gpt_loss=0.54, lr=2.38e-7] [A
Train step of epoch 0:  91%|█████████ | 5686/6250 [5:54:05<34:07,  3.63s/it, gpt_loss=0.54, lr=2.38e-7][A
Train step of epoch 0:  91%|█████████ | 5686/6250 [5:54:08<34:07,  3.63s/it, gpt_loss=0.63, lr=2.38e-7][A
Train step of epoch 0:  91%|█████████ | 5687/6250 [5:54:08<32:55,  3.51s/it, gpt_loss=0.63, lr=2.38e-7][A[2025-04-24 05:46:51,480] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  91%|█████████ | 5687/6250 [5:54:12<32:55,  3.51s/it, gpt_loss=0.804, lr=2.38e-7][A
Train step of epoch 0:  91%|█████████ | 5688/6250 [5:54:12<35:15,  3.76s/it, gpt_loss=0.804, lr=2.38e-7][A
Train step of epoch 0:  91%|█████████ | 5688/6250 [5:54:16<35:15,  3.76s/it, gpt_loss=0.709, lr=2.38e-7][A
Train step of epoch 0:  91%|█████████ | 5689/6250 [5:54:16<35:10,  3.76s/it, gpt_loss=0.709, lr=2.38e-7][A
Train step of epoch 0:  91%|█████████ | 5689/6250 [5:54:19<35:10,  3.76s/it, gpt_loss=0.504, lr=2.38e-7][A
Train step of epoch 0:  91%|█████████ | 5690/6250 [5:54:19<33:05,  3.55s/it, gpt_loss=0.504, lr=2.38e-7][A
Train step of epoch 0:  91%|█████████ | 5690/6250 [5:54:24<33:05,  3.55s/it, gpt_loss=0.434, lr=2.38e-7][A
Train step of epoch 0:  91%|█████████ | 5691/6250 [5:54:24<36:09,  3.88s/it, gpt_loss=0.434, lr=2.38e-7][A[2025-04-24 05:47:06,718] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  91%|█████████ | 5691/6250 [5:54:27<36:09,  3.88s/it, gpt_loss=0.648, lr=2.37e-7][A
Train step of epoch 0:  91%|█████████ | 5692/6250 [5:54:27<35:47,  3.85s/it, gpt_loss=0.648, lr=2.37e-7][A
Train step of epoch 0:  91%|█████████ | 5692/6250 [5:54:31<35:47,  3.85s/it, gpt_loss=0.49, lr=2.37e-7] [A
Train step of epoch 0:  91%|█████████ | 5693/6250 [5:54:31<33:40,  3.63s/it, gpt_loss=0.49, lr=2.37e-7][A
Train step of epoch 0:  91%|█████████ | 5693/6250 [5:54:35<33:40,  3.63s/it, gpt_loss=0.762, lr=2.37e-7][A
Train step of epoch 0:  91%|█████████ | 5694/6250 [5:54:35<34:36,  3.74s/it, gpt_loss=0.762, lr=2.37e-7][A
Train step of epoch 0:  91%|█████████ | 5694/6250 [5:54:38<34:36,  3.74s/it, gpt_loss=0.54, lr=2.37e-7] [A
Train step of epoch 0:  91%|█████████ | 5695/6250 [5:54:38<34:19,  3.71s/it, gpt_loss=0.54, lr=2.37e-7][A[2025-04-24 05:47:21,902] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  91%|█████████ | 5695/6250 [5:54:43<34:19,  3.71s/it, gpt_loss=0.56, lr=2.37e-7][A
Train step of epoch 0:  91%|█████████ | 5696/6250 [5:54:43<36:15,  3.93s/it, gpt_loss=0.56, lr=2.37e-7][A
Train step of epoch 0:  91%|█████████ | 5696/6250 [5:54:46<36:15,  3.93s/it, gpt_loss=0.474, lr=2.37e-7][A
Train step of epoch 0:  91%|█████████ | 5697/6250 [5:54:46<34:57,  3.79s/it, gpt_loss=0.474, lr=2.37e-7][A
Train step of epoch 0:  91%|█████████ | 5697/6250 [5:54:50<34:57,  3.79s/it, gpt_loss=0.563, lr=2.37e-7][A
Train step of epoch 0:  91%|█████████ | 5698/6250 [5:54:50<34:42,  3.77s/it, gpt_loss=0.563, lr=2.37e-7][A
Train step of epoch 0:  91%|█████████ | 5698/6250 [5:54:55<34:42,  3.77s/it, gpt_loss=0.534, lr=2.37e-7][A
Train step of epoch 0:  91%|█████████ | 5699/6250 [5:54:55<37:13,  4.05s/it, gpt_loss=0.534, lr=2.37e-7][A[2025-04-24 05:47:37,567] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  91%|█████████ | 5699/6250 [5:54:58<37:13,  4.05s/it, gpt_loss=0.688, lr=2.36e-7][A
Train step of epoch 0:  91%|█████████ | 5700/6250 [5:54:58<36:19,  3.96s/it, gpt_loss=0.688, lr=2.36e-7][A
Train step of epoch 0:  91%|█████████ | 5700/6250 [5:55:02<36:19,  3.96s/it, gpt_loss=0.451, lr=2.36e-7][A
Train step of epoch 0:  91%|█████████ | 5701/6250 [5:55:02<36:05,  3.95s/it, gpt_loss=0.451, lr=2.36e-7][A
Train step of epoch 0:  91%|█████████ | 5701/6250 [5:55:06<36:05,  3.95s/it, gpt_loss=0.552, lr=2.36e-7][A
Train step of epoch 0:  91%|█████████ | 5702/6250 [5:55:06<34:41,  3.80s/it, gpt_loss=0.552, lr=2.36e-7][A
Train step of epoch 0:  91%|█████████ | 5702/6250 [5:55:10<34:41,  3.80s/it, gpt_loss=0.494, lr=2.36e-7][A
Train step of epoch 0:  91%|█████████ | 5703/6250 [5:55:10<35:17,  3.87s/it, gpt_loss=0.494, lr=2.36e-7][A[2025-04-24 05:47:54,236] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  91%|█████████ | 5703/6250 [5:55:15<35:17,  3.87s/it, gpt_loss=0.615, lr=2.36e-7][A
Train step of epoch 0:  91%|█████████▏| 5704/6250 [5:55:15<39:02,  4.29s/it, gpt_loss=0.615, lr=2.36e-7][A
Train step of epoch 0:  91%|█████████▏| 5704/6250 [5:55:19<39:02,  4.29s/it, gpt_loss=0.704, lr=2.36e-7][A
Train step of epoch 0:  91%|█████████▏| 5705/6250 [5:55:19<38:33,  4.25s/it, gpt_loss=0.704, lr=2.36e-7][A
Train step of epoch 0:  91%|█████████▏| 5705/6250 [5:55:23<38:33,  4.25s/it, gpt_loss=0.584, lr=2.36e-7][A
Train step of epoch 0:  91%|█████████▏| 5706/6250 [5:55:23<38:31,  4.25s/it, gpt_loss=0.584, lr=2.36e-7][A
Train step of epoch 0:  91%|█████████▏| 5706/6250 [5:55:28<38:31,  4.25s/it, gpt_loss=0.597, lr=2.36e-7][A
Train step of epoch 0:  91%|█████████▏| 5707/6250 [5:55:28<39:04,  4.32s/it, gpt_loss=0.597, lr=2.36e-7][A[2025-04-24 05:48:10,766] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  91%|█████████▏| 5707/6250 [5:55:32<39:04,  4.32s/it, gpt_loss=0.595, lr=2.35e-7][A
Train step of epoch 0:  91%|█████████▏| 5708/6250 [5:55:32<37:12,  4.12s/it, gpt_loss=0.595, lr=2.35e-7][A
Train step of epoch 0:  91%|█████████▏| 5708/6250 [5:55:35<37:12,  4.12s/it, gpt_loss=0.661, lr=2.35e-7][A
Train step of epoch 0:  91%|█████████▏| 5709/6250 [5:55:35<35:22,  3.92s/it, gpt_loss=0.661, lr=2.35e-7][A
Train step of epoch 0:  91%|█████████▏| 5709/6250 [5:55:38<35:22,  3.92s/it, gpt_loss=0.399, lr=2.35e-7][A
Train step of epoch 0:  91%|█████████▏| 5710/6250 [5:55:38<33:16,  3.70s/it, gpt_loss=0.399, lr=2.35e-7][A
Train step of epoch 0:  91%|█████████▏| 5710/6250 [5:55:41<33:16,  3.70s/it, gpt_loss=0.404, lr=2.35e-7][A
Train step of epoch 0:  91%|█████████▏| 5711/6250 [5:55:41<31:10,  3.47s/it, gpt_loss=0.404, lr=2.35e-7][A[2025-04-24 05:48:25,126] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  91%|█████████▏| 5711/6250 [5:55:46<31:10,  3.47s/it, gpt_loss=0.599, lr=2.35e-7][A
Train step of epoch 0:  91%|█████████▏| 5712/6250 [5:55:46<34:38,  3.86s/it, gpt_loss=0.599, lr=2.35e-7][A
Train step of epoch 0:  91%|█████████▏| 5712/6250 [5:55:50<34:38,  3.86s/it, gpt_loss=0.57, lr=2.35e-7] [A
Train step of epoch 0:  91%|█████████▏| 5713/6250 [5:55:50<36:15,  4.05s/it, gpt_loss=0.57, lr=2.35e-7][A
Train step of epoch 0:  91%|█████████▏| 5713/6250 [5:55:54<36:15,  4.05s/it, gpt_loss=0.596, lr=2.35e-7][A
Train step of epoch 0:  91%|█████████▏| 5714/6250 [5:55:54<35:29,  3.97s/it, gpt_loss=0.596, lr=2.35e-7][A
Train step of epoch 0:  91%|█████████▏| 5714/6250 [5:55:56<35:29,  3.97s/it, gpt_loss=0.524, lr=2.35e-7][A
Train step of epoch 0:  91%|█████████▏| 5715/6250 [5:55:56<29:57,  3.36s/it, gpt_loss=0.524, lr=2.35e-7][A[2025-04-24 05:48:40,003] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  91%|█████████▏| 5715/6250 [5:56:01<29:57,  3.36s/it, gpt_loss=0.683, lr=2.34e-7][A
Train step of epoch 0:  91%|█████████▏| 5716/6250 [5:56:01<33:24,  3.75s/it, gpt_loss=0.683, lr=2.34e-7][A
Train step of epoch 0:  91%|█████████▏| 5716/6250 [5:56:05<33:24,  3.75s/it, gpt_loss=0.552, lr=2.34e-7][A
Train step of epoch 0:  91%|█████████▏| 5717/6250 [5:56:05<34:22,  3.87s/it, gpt_loss=0.552, lr=2.34e-7][A
Train step of epoch 0:  91%|█████████▏| 5717/6250 [5:56:08<34:22,  3.87s/it, gpt_loss=0.576, lr=2.34e-7][A
Train step of epoch 0:  91%|█████████▏| 5718/6250 [5:56:08<31:15,  3.52s/it, gpt_loss=0.576, lr=2.34e-7][A
Train step of epoch 0:  91%|█████████▏| 5718/6250 [5:56:11<31:15,  3.52s/it, gpt_loss=0.553, lr=2.34e-7][A
Train step of epoch 0:  92%|█████████▏| 5719/6250 [5:56:11<30:35,  3.46s/it, gpt_loss=0.553, lr=2.34e-7][A[2025-04-24 05:48:54,599] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  92%|█████████▏| 5719/6250 [5:56:15<30:35,  3.46s/it, gpt_loss=0.589, lr=2.34e-7][A
Train step of epoch 0:  92%|█████████▏| 5720/6250 [5:56:15<33:07,  3.75s/it, gpt_loss=0.589, lr=2.34e-7][A
Train step of epoch 0:  92%|█████████▏| 5720/6250 [5:56:19<33:07,  3.75s/it, gpt_loss=0.633, lr=2.34e-7][A
Train step of epoch 0:  92%|█████████▏| 5721/6250 [5:56:19<33:47,  3.83s/it, gpt_loss=0.633, lr=2.34e-7][A
Train step of epoch 0:  92%|█████████▏| 5721/6250 [5:56:24<33:47,  3.83s/it, gpt_loss=0.646, lr=2.34e-7][A
Train step of epoch 0:  92%|█████████▏| 5722/6250 [5:56:24<35:01,  3.98s/it, gpt_loss=0.646, lr=2.34e-7][A
Train step of epoch 0:  92%|█████████▏| 5722/6250 [5:56:27<35:01,  3.98s/it, gpt_loss=0.604, lr=2.34e-7][A
Train step of epoch 0:  92%|█████████▏| 5723/6250 [5:56:27<33:19,  3.79s/it, gpt_loss=0.604, lr=2.34e-7][A[2025-04-24 05:49:10,166] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  92%|█████████▏| 5723/6250 [5:56:31<33:19,  3.79s/it, gpt_loss=0.68, lr=2.33e-7] [A
Train step of epoch 0:  92%|█████████▏| 5724/6250 [5:56:31<33:25,  3.81s/it, gpt_loss=0.68, lr=2.33e-7][A
Train step of epoch 0:  92%|█████████▏| 5724/6250 [5:56:35<33:25,  3.81s/it, gpt_loss=0.659, lr=2.33e-7][A
Train step of epoch 0:  92%|█████████▏| 5725/6250 [5:56:35<34:05,  3.90s/it, gpt_loss=0.659, lr=2.33e-7][A
Train step of epoch 0:  92%|█████████▏| 5725/6250 [5:56:39<34:05,  3.90s/it, gpt_loss=0.573, lr=2.33e-7][A
Train step of epoch 0:  92%|█████████▏| 5726/6250 [5:56:39<34:02,  3.90s/it, gpt_loss=0.573, lr=2.33e-7][A
Train step of epoch 0:  92%|█████████▏| 5726/6250 [5:56:43<34:02,  3.90s/it, gpt_loss=0.54, lr=2.33e-7] [A
Train step of epoch 0:  92%|█████████▏| 5727/6250 [5:56:43<34:04,  3.91s/it, gpt_loss=0.54, lr=2.33e-7][A[2025-04-24 05:49:26,433] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  92%|█████████▏| 5727/6250 [5:56:47<34:04,  3.91s/it, gpt_loss=0.599, lr=2.33e-7][A
Train step of epoch 0:  92%|█████████▏| 5728/6250 [5:56:47<35:08,  4.04s/it, gpt_loss=0.599, lr=2.33e-7][A
Train step of epoch 0:  92%|█████████▏| 5728/6250 [5:56:51<35:08,  4.04s/it, gpt_loss=0.747, lr=2.33e-7][A
Train step of epoch 0:  92%|█████████▏| 5729/6250 [5:56:51<35:36,  4.10s/it, gpt_loss=0.747, lr=2.33e-7][A
Train step of epoch 0:  92%|█████████▏| 5729/6250 [5:56:54<35:36,  4.10s/it, gpt_loss=0.511, lr=2.33e-7][A
Train step of epoch 0:  92%|█████████▏| 5730/6250 [5:56:54<31:39,  3.65s/it, gpt_loss=0.511, lr=2.33e-7][A
Train step of epoch 0:  92%|█████████▏| 5730/6250 [5:56:58<31:39,  3.65s/it, gpt_loss=0.54, lr=2.33e-7] [A
Train step of epoch 0:  92%|█████████▏| 5731/6250 [5:56:58<33:23,  3.86s/it, gpt_loss=0.54, lr=2.33e-7][A[2025-04-24 05:49:42,224] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  92%|█████████▏| 5731/6250 [5:57:03<33:23,  3.86s/it, gpt_loss=0.576, lr=2.32e-7][A
Train step of epoch 0:  92%|█████████▏| 5732/6250 [5:57:03<35:13,  4.08s/it, gpt_loss=0.576, lr=2.32e-7][A
Train step of epoch 0:  92%|█████████▏| 5732/6250 [5:57:07<35:13,  4.08s/it, gpt_loss=0.574, lr=2.32e-7][A
Train step of epoch 0:  92%|█████████▏| 5733/6250 [5:57:07<34:16,  3.98s/it, gpt_loss=0.574, lr=2.32e-7][A
Train step of epoch 0:  92%|█████████▏| 5733/6250 [5:57:11<34:16,  3.98s/it, gpt_loss=0.628, lr=2.32e-7][A
Train step of epoch 0:  92%|█████████▏| 5734/6250 [5:57:11<35:09,  4.09s/it, gpt_loss=0.628, lr=2.32e-7][A
Train step of epoch 0:  92%|█████████▏| 5734/6250 [5:57:15<35:09,  4.09s/it, gpt_loss=0.701, lr=2.32e-7][A
Train step of epoch 0:  92%|█████████▏| 5735/6250 [5:57:15<34:14,  3.99s/it, gpt_loss=0.701, lr=2.32e-7][A[2025-04-24 05:49:57,347] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  92%|█████████▏| 5735/6250 [5:57:18<34:14,  3.99s/it, gpt_loss=0.45, lr=2.32e-7] [A
Train step of epoch 0:  92%|█████████▏| 5736/6250 [5:57:18<32:20,  3.78s/it, gpt_loss=0.45, lr=2.32e-7][A
Train step of epoch 0:  92%|█████████▏| 5736/6250 [5:57:23<32:20,  3.78s/it, gpt_loss=0.502, lr=2.32e-7][A
Train step of epoch 0:  92%|█████████▏| 5737/6250 [5:57:23<34:49,  4.07s/it, gpt_loss=0.502, lr=2.32e-7][A
Train step of epoch 0:  92%|█████████▏| 5737/6250 [5:57:26<34:49,  4.07s/it, gpt_loss=0.585, lr=2.32e-7][A
Train step of epoch 0:  92%|█████████▏| 5738/6250 [5:57:26<33:17,  3.90s/it, gpt_loss=0.585, lr=2.32e-7][A
Train step of epoch 0:  92%|█████████▏| 5738/6250 [5:57:29<33:17,  3.90s/it, gpt_loss=0.626, lr=2.32e-7][A
Train step of epoch 0:  92%|█████████▏| 5739/6250 [5:57:29<30:47,  3.62s/it, gpt_loss=0.626, lr=2.32e-7][A[2025-04-24 05:50:12,854] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  92%|█████████▏| 5739/6250 [5:57:34<30:47,  3.62s/it, gpt_loss=0.733, lr=2.31e-7][A
Train step of epoch 0:  92%|█████████▏| 5740/6250 [5:57:34<32:27,  3.82s/it, gpt_loss=0.733, lr=2.31e-7][A
Train step of epoch 0:  92%|█████████▏| 5740/6250 [5:57:38<32:27,  3.82s/it, gpt_loss=0.507, lr=2.31e-7][A
Train step of epoch 0:  92%|█████████▏| 5741/6250 [5:57:38<33:12,  3.91s/it, gpt_loss=0.507, lr=2.31e-7][A
Train step of epoch 0:  92%|█████████▏| 5741/6250 [5:57:42<33:12,  3.91s/it, gpt_loss=0.784, lr=2.31e-7][A
Train step of epoch 0:  92%|█████████▏| 5742/6250 [5:57:42<34:07,  4.03s/it, gpt_loss=0.784, lr=2.31e-7][A
Train step of epoch 0:  92%|█████████▏| 5742/6250 [5:57:46<34:07,  4.03s/it, gpt_loss=0.75, lr=2.31e-7] [A
Train step of epoch 0:  92%|█████████▏| 5743/6250 [5:57:46<33:50,  4.01s/it, gpt_loss=0.75, lr=2.31e-7][A[2025-04-24 05:50:29,178] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  92%|█████████▏| 5743/6250 [5:57:50<33:50,  4.01s/it, gpt_loss=0.596, lr=2.31e-7][A
Train step of epoch 0:  92%|█████████▏| 5744/6250 [5:57:50<33:36,  3.99s/it, gpt_loss=0.596, lr=2.31e-7][A
Train step of epoch 0:  92%|█████████▏| 5744/6250 [5:57:52<33:36,  3.99s/it, gpt_loss=0.462, lr=2.31e-7][A
Train step of epoch 0:  92%|█████████▏| 5745/6250 [5:57:52<28:56,  3.44s/it, gpt_loss=0.462, lr=2.31e-7][A
Train step of epoch 0:  92%|█████████▏| 5745/6250 [5:57:56<28:56,  3.44s/it, gpt_loss=0.55, lr=2.31e-7] [A
Train step of epoch 0:  92%|█████████▏| 5746/6250 [5:57:56<29:09,  3.47s/it, gpt_loss=0.55, lr=2.31e-7][A
Train step of epoch 0:  92%|█████████▏| 5746/6250 [5:57:59<29:09,  3.47s/it, gpt_loss=0.836, lr=2.31e-7][A
Train step of epoch 0:  92%|█████████▏| 5747/6250 [5:57:59<29:14,  3.49s/it, gpt_loss=0.836, lr=2.31e-7][A[2025-04-24 05:50:42,440] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  92%|█████████▏| 5747/6250 [5:58:03<29:14,  3.49s/it, gpt_loss=0.602, lr=2.3e-7] [A
Train step of epoch 0:  92%|█████████▏| 5748/6250 [5:58:03<30:31,  3.65s/it, gpt_loss=0.602, lr=2.3e-7][A
Train step of epoch 0:  92%|█████████▏| 5748/6250 [5:58:06<30:31,  3.65s/it, gpt_loss=0.665, lr=2.3e-7][A
Train step of epoch 0:  92%|█████████▏| 5749/6250 [5:58:06<28:24,  3.40s/it, gpt_loss=0.665, lr=2.3e-7][A
Train step of epoch 0:  92%|█████████▏| 5749/6250 [5:58:09<28:24,  3.40s/it, gpt_loss=0.381, lr=2.3e-7][A
Train step of epoch 0:  92%|█████████▏| 5750/6250 [5:58:09<28:02,  3.36s/it, gpt_loss=0.381, lr=2.3e-7][A
Train step of epoch 0:  92%|█████████▏| 5750/6250 [5:58:13<28:02,  3.36s/it, gpt_loss=0.497, lr=2.3e-7][A
Train step of epoch 0:  92%|█████████▏| 5751/6250 [5:58:13<28:17,  3.40s/it, gpt_loss=0.497, lr=2.3e-7][A[2025-04-24 05:50:56,883] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  92%|█████████▏| 5751/6250 [5:58:18<28:17,  3.40s/it, gpt_loss=0.682, lr=2.3e-7][A
Train step of epoch 0:  92%|█████████▏| 5752/6250 [5:58:18<31:50,  3.84s/it, gpt_loss=0.682, lr=2.3e-7][A
Train step of epoch 0:  92%|█████████▏| 5752/6250 [5:58:22<31:50,  3.84s/it, gpt_loss=0.559, lr=2.3e-7][A
Train step of epoch 0:  92%|█████████▏| 5753/6250 [5:58:22<33:19,  4.02s/it, gpt_loss=0.559, lr=2.3e-7][A
Train step of epoch 0:  92%|█████████▏| 5753/6250 [5:58:26<33:19,  4.02s/it, gpt_loss=0.674, lr=2.3e-7][A
Train step of epoch 0:  92%|█████████▏| 5754/6250 [5:58:26<32:32,  3.94s/it, gpt_loss=0.674, lr=2.3e-7][A
Train step of epoch 0:  92%|█████████▏| 5754/6250 [5:58:29<32:32,  3.94s/it, gpt_loss=0.605, lr=2.3e-7][A
Train step of epoch 0:  92%|█████████▏| 5755/6250 [5:58:29<30:29,  3.70s/it, gpt_loss=0.605, lr=2.3e-7][A[2025-04-24 05:51:12,225] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  92%|█████████▏| 5755/6250 [5:58:33<30:29,  3.70s/it, gpt_loss=0.787, lr=2.29e-7][A
Train step of epoch 0:  92%|█████████▏| 5756/6250 [5:58:33<31:13,  3.79s/it, gpt_loss=0.787, lr=2.29e-7][A
Train step of epoch 0:  92%|█████████▏| 5756/6250 [5:58:37<31:13,  3.79s/it, gpt_loss=0.52, lr=2.29e-7] [A
Train step of epoch 0:  92%|█████████▏| 5757/6250 [5:58:37<31:13,  3.80s/it, gpt_loss=0.52, lr=2.29e-7][A
Train step of epoch 0:  92%|█████████▏| 5757/6250 [5:58:39<31:13,  3.80s/it, gpt_loss=0.851, lr=2.29e-7][A
Train step of epoch 0:  92%|█████████▏| 5758/6250 [5:58:39<28:06,  3.43s/it, gpt_loss=0.851, lr=2.29e-7][A
Train step of epoch 0:  92%|█████████▏| 5758/6250 [5:58:43<28:06,  3.43s/it, gpt_loss=0.643, lr=2.29e-7][A
Train step of epoch 0:  92%|█████████▏| 5759/6250 [5:58:43<29:37,  3.62s/it, gpt_loss=0.643, lr=2.29e-7][A[2025-04-24 05:51:26,209] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  92%|█████████▏| 5759/6250 [5:58:47<29:37,  3.62s/it, gpt_loss=0.674, lr=2.29e-7][A
Train step of epoch 0:  92%|█████████▏| 5760/6250 [5:58:47<29:21,  3.59s/it, gpt_loss=0.674, lr=2.29e-7][A
Train step of epoch 0:  92%|█████████▏| 5760/6250 [5:58:51<29:21,  3.59s/it, gpt_loss=0.467, lr=2.29e-7][A
Train step of epoch 0:  92%|█████████▏| 5761/6250 [5:58:51<29:23,  3.61s/it, gpt_loss=0.467, lr=2.29e-7][A
Train step of epoch 0:  92%|█████████▏| 5761/6250 [5:58:54<29:23,  3.61s/it, gpt_loss=0.787, lr=2.29e-7][A
Train step of epoch 0:  92%|█████████▏| 5762/6250 [5:58:54<29:54,  3.68s/it, gpt_loss=0.787, lr=2.29e-7][A
Train step of epoch 0:  92%|█████████▏| 5762/6250 [5:58:58<29:54,  3.68s/it, gpt_loss=0.772, lr=2.29e-7][A
Train step of epoch 0:  92%|█████████▏| 5763/6250 [5:58:58<30:03,  3.70s/it, gpt_loss=0.772, lr=2.29e-7][A[2025-04-24 05:51:41,507] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  92%|█████████▏| 5763/6250 [5:59:02<30:03,  3.70s/it, gpt_loss=0.682, lr=2.28e-7][A
Train step of epoch 0:  92%|█████████▏| 5764/6250 [5:59:02<30:51,  3.81s/it, gpt_loss=0.682, lr=2.28e-7][A
Train step of epoch 0:  92%|█████████▏| 5764/6250 [5:59:06<30:51,  3.81s/it, gpt_loss=0.628, lr=2.28e-7][A
Train step of epoch 0:  92%|█████████▏| 5765/6250 [5:59:06<31:22,  3.88s/it, gpt_loss=0.628, lr=2.28e-7][A
Train step of epoch 0:  92%|█████████▏| 5765/6250 [5:59:10<31:22,  3.88s/it, gpt_loss=0.408, lr=2.28e-7][A
Train step of epoch 0:  92%|█████████▏| 5766/6250 [5:59:10<30:21,  3.76s/it, gpt_loss=0.408, lr=2.28e-7][A
Train step of epoch 0:  92%|█████████▏| 5766/6250 [5:59:15<30:21,  3.76s/it, gpt_loss=0.593, lr=2.28e-7][A
Train step of epoch 0:  92%|█████████▏| 5767/6250 [5:59:15<32:43,  4.06s/it, gpt_loss=0.593, lr=2.28e-7][A[2025-04-24 05:51:57,459] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  92%|█████████▏| 5767/6250 [5:59:18<32:43,  4.06s/it, gpt_loss=0.61, lr=2.28e-7] [A
Train step of epoch 0:  92%|█████████▏| 5768/6250 [5:59:18<31:38,  3.94s/it, gpt_loss=0.61, lr=2.28e-7][A
Train step of epoch 0:  92%|█████████▏| 5768/6250 [5:59:23<31:38,  3.94s/it, gpt_loss=0.715, lr=2.28e-7][A
Train step of epoch 0:  92%|█████████▏| 5769/6250 [5:59:23<33:29,  4.18s/it, gpt_loss=0.715, lr=2.28e-7][A
Train step of epoch 0:  92%|█████████▏| 5769/6250 [5:59:27<33:29,  4.18s/it, gpt_loss=0.613, lr=2.28e-7][A
Train step of epoch 0:  92%|█████████▏| 5770/6250 [5:59:27<31:54,  3.99s/it, gpt_loss=0.613, lr=2.28e-7][A
Train step of epoch 0:  92%|█████████▏| 5770/6250 [5:59:30<31:54,  3.99s/it, gpt_loss=0.618, lr=2.28e-7][A
Train step of epoch 0:  92%|█████████▏| 5771/6250 [5:59:30<30:51,  3.86s/it, gpt_loss=0.618, lr=2.28e-7][A[2025-04-24 05:52:13,794] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  92%|█████████▏| 5771/6250 [5:59:35<30:51,  3.86s/it, gpt_loss=0.701, lr=2.27e-7][A
Train step of epoch 0:  92%|█████████▏| 5772/6250 [5:59:35<32:14,  4.05s/it, gpt_loss=0.701, lr=2.27e-7][A
Train step of epoch 0:  92%|█████████▏| 5772/6250 [5:59:38<32:14,  4.05s/it, gpt_loss=0.493, lr=2.27e-7][A
Train step of epoch 0:  92%|█████████▏| 5773/6250 [5:59:38<31:43,  3.99s/it, gpt_loss=0.493, lr=2.27e-7][A
Train step of epoch 0:  92%|█████████▏| 5773/6250 [5:59:42<31:43,  3.99s/it, gpt_loss=0.478, lr=2.27e-7][A
Train step of epoch 0:  92%|█████████▏| 5774/6250 [5:59:42<29:37,  3.74s/it, gpt_loss=0.478, lr=2.27e-7][A
Train step of epoch 0:  92%|█████████▏| 5774/6250 [5:59:46<29:37,  3.74s/it, gpt_loss=0.587, lr=2.27e-7][A
Train step of epoch 0:  92%|█████████▏| 5775/6250 [5:59:46<30:41,  3.88s/it, gpt_loss=0.587, lr=2.27e-7][A[2025-04-24 05:52:29,400] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  92%|█████████▏| 5775/6250 [5:59:50<30:41,  3.88s/it, gpt_loss=0.606, lr=2.27e-7][A
Train step of epoch 0:  92%|█████████▏| 5776/6250 [5:59:50<31:52,  4.03s/it, gpt_loss=0.606, lr=2.27e-7][A
Train step of epoch 0:  92%|█████████▏| 5776/6250 [5:59:55<31:52,  4.03s/it, gpt_loss=0.427, lr=2.27e-7][A
Train step of epoch 0:  92%|█████████▏| 5777/6250 [5:59:55<32:37,  4.14s/it, gpt_loss=0.427, lr=2.27e-7][A
Train step of epoch 0:  92%|█████████▏| 5777/6250 [5:59:58<32:37,  4.14s/it, gpt_loss=0.603, lr=2.27e-7][A
Train step of epoch 0:  92%|█████████▏| 5778/6250 [5:59:58<30:28,  3.87s/it, gpt_loss=0.603, lr=2.27e-7][A
Train step of epoch 0:  92%|█████████▏| 5778/6250 [6:00:01<30:28,  3.87s/it, gpt_loss=0.559, lr=2.27e-7][A
Train step of epoch 0:  92%|█████████▏| 5779/6250 [6:00:01<29:38,  3.78s/it, gpt_loss=0.559, lr=2.27e-7][A[2025-04-24 05:52:44,918] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  92%|█████████▏| 5779/6250 [6:00:06<29:38,  3.78s/it, gpt_loss=0.654, lr=2.26e-7][A
Train step of epoch 0:  92%|█████████▏| 5780/6250 [6:00:06<30:53,  3.94s/it, gpt_loss=0.654, lr=2.26e-7][A
Train step of epoch 0:  92%|█████████▏| 5780/6250 [6:00:10<30:53,  3.94s/it, gpt_loss=0.608, lr=2.26e-7][A
Train step of epoch 0:  92%|█████████▏| 5781/6250 [6:00:10<31:20,  4.01s/it, gpt_loss=0.608, lr=2.26e-7][A
Train step of epoch 0:  92%|█████████▏| 5781/6250 [6:00:14<31:20,  4.01s/it, gpt_loss=0.625, lr=2.26e-7][A
Train step of epoch 0:  93%|█████████▎| 5782/6250 [6:00:14<31:44,  4.07s/it, gpt_loss=0.625, lr=2.26e-7][A
Train step of epoch 0:  93%|█████████▎| 5782/6250 [6:00:17<31:44,  4.07s/it, gpt_loss=0.739, lr=2.26e-7][A
Train step of epoch 0:  93%|█████████▎| 5783/6250 [6:00:17<29:04,  3.73s/it, gpt_loss=0.739, lr=2.26e-7][A[2025-04-24 05:53:00,063] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  93%|█████████▎| 5783/6250 [6:00:21<29:04,  3.73s/it, gpt_loss=0.546, lr=2.26e-7][A
Train step of epoch 0:  93%|█████████▎| 5784/6250 [6:00:21<29:12,  3.76s/it, gpt_loss=0.546, lr=2.26e-7][A
Train step of epoch 0:  93%|█████████▎| 5784/6250 [6:00:25<29:12,  3.76s/it, gpt_loss=0.608, lr=2.26e-7][A
Train step of epoch 0:  93%|█████████▎| 5785/6250 [6:00:25<31:05,  4.01s/it, gpt_loss=0.608, lr=2.26e-7][A
Train step of epoch 0:  93%|█████████▎| 5785/6250 [6:00:29<31:05,  4.01s/it, gpt_loss=0.522, lr=2.26e-7][A
Train step of epoch 0:  93%|█████████▎| 5786/6250 [6:00:29<30:26,  3.94s/it, gpt_loss=0.522, lr=2.26e-7][A
Train step of epoch 0:  93%|█████████▎| 5786/6250 [6:00:32<30:26,  3.94s/it, gpt_loss=0.47, lr=2.26e-7] [A
Train step of epoch 0:  93%|█████████▎| 5787/6250 [6:00:32<28:52,  3.74s/it, gpt_loss=0.47, lr=2.26e-7][A[2025-04-24 05:53:16,138] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  93%|█████████▎| 5787/6250 [6:00:37<28:52,  3.74s/it, gpt_loss=0.602, lr=2.25e-7][A
Train step of epoch 0:  93%|█████████▎| 5788/6250 [6:00:37<30:23,  3.95s/it, gpt_loss=0.602, lr=2.25e-7][A
Train step of epoch 0:  93%|█████████▎| 5788/6250 [6:00:40<30:23,  3.95s/it, gpt_loss=0.611, lr=2.25e-7][A
Train step of epoch 0:  93%|█████████▎| 5789/6250 [6:00:40<28:59,  3.77s/it, gpt_loss=0.611, lr=2.25e-7][A
Train step of epoch 0:  93%|█████████▎| 5789/6250 [6:00:44<28:59,  3.77s/it, gpt_loss=0.591, lr=2.25e-7][A
Train step of epoch 0:  93%|█████████▎| 5790/6250 [6:00:44<28:04,  3.66s/it, gpt_loss=0.591, lr=2.25e-7][A
Train step of epoch 0:  93%|█████████▎| 5790/6250 [6:00:47<28:04,  3.66s/it, gpt_loss=0.584, lr=2.25e-7][A
Train step of epoch 0:  93%|█████████▎| 5791/6250 [6:00:47<26:42,  3.49s/it, gpt_loss=0.584, lr=2.25e-7][A[2025-04-24 05:53:29,697] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  93%|█████████▎| 5791/6250 [6:00:50<26:42,  3.49s/it, gpt_loss=0.61, lr=2.25e-7] [A
Train step of epoch 0:  93%|█████████▎| 5792/6250 [6:00:50<27:06,  3.55s/it, gpt_loss=0.61, lr=2.25e-7][A
Train step of epoch 0:  93%|█████████▎| 5792/6250 [6:00:55<27:06,  3.55s/it, gpt_loss=0.67, lr=2.25e-7][A
Train step of epoch 0:  93%|█████████▎| 5793/6250 [6:00:55<29:55,  3.93s/it, gpt_loss=0.67, lr=2.25e-7][A
Train step of epoch 0:  93%|█████████▎| 5793/6250 [6:00:59<29:55,  3.93s/it, gpt_loss=0.571, lr=2.25e-7][A
Train step of epoch 0:  93%|█████████▎| 5794/6250 [6:00:59<29:50,  3.93s/it, gpt_loss=0.571, lr=2.25e-7][A
Train step of epoch 0:  93%|█████████▎| 5794/6250 [6:01:03<29:50,  3.93s/it, gpt_loss=0.604, lr=2.25e-7][A
Train step of epoch 0:  93%|█████████▎| 5795/6250 [6:01:03<29:04,  3.83s/it, gpt_loss=0.604, lr=2.25e-7][A[2025-04-24 05:53:46,811] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  93%|█████████▎| 5795/6250 [6:01:08<29:04,  3.83s/it, gpt_loss=0.49, lr=2.25e-7] [A
Train step of epoch 0:  93%|█████████▎| 5796/6250 [6:01:08<31:07,  4.11s/it, gpt_loss=0.49, lr=2.25e-7][A
Train step of epoch 0:  93%|█████████▎| 5796/6250 [6:01:11<31:07,  4.11s/it, gpt_loss=0.634, lr=2.25e-7][A
Train step of epoch 0:  93%|█████████▎| 5797/6250 [6:01:11<29:00,  3.84s/it, gpt_loss=0.634, lr=2.25e-7][A
Train step of epoch 0:  93%|█████████▎| 5797/6250 [6:01:15<29:00,  3.84s/it, gpt_loss=0.695, lr=2.25e-7][A
Train step of epoch 0:  93%|█████████▎| 5798/6250 [6:01:15<29:21,  3.90s/it, gpt_loss=0.695, lr=2.25e-7][A
Train step of epoch 0:  93%|█████████▎| 5798/6250 [6:01:18<29:21,  3.90s/it, gpt_loss=0.584, lr=2.25e-7][A
Train step of epoch 0:  93%|█████████▎| 5799/6250 [6:01:18<27:08,  3.61s/it, gpt_loss=0.584, lr=2.25e-7][A[2025-04-24 05:54:00,732] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  93%|█████████▎| 5799/6250 [6:01:21<27:08,  3.61s/it, gpt_loss=0.56, lr=2.24e-7] [A
Train step of epoch 0:  93%|█████████▎| 5800/6250 [6:01:21<27:23,  3.65s/it, gpt_loss=0.56, lr=2.24e-7][A
Train step of epoch 0:  93%|█████████▎| 5800/6250 [6:01:25<27:23,  3.65s/it, gpt_loss=0.663, lr=2.24e-7][A
Train step of epoch 0:  93%|█████████▎| 5801/6250 [6:01:25<27:51,  3.72s/it, gpt_loss=0.663, lr=2.24e-7][A
Train step of epoch 0:  93%|█████████▎| 5801/6250 [6:01:29<27:51,  3.72s/it, gpt_loss=0.687, lr=2.24e-7][A
Train step of epoch 0:  93%|█████████▎| 5802/6250 [6:01:29<27:14,  3.65s/it, gpt_loss=0.687, lr=2.24e-7][A
Train step of epoch 0:  93%|█████████▎| 5802/6250 [6:01:32<27:14,  3.65s/it, gpt_loss=0.651, lr=2.24e-7][A
Train step of epoch 0:  93%|█████████▎| 5803/6250 [6:01:32<26:24,  3.55s/it, gpt_loss=0.651, lr=2.24e-7][A[2025-04-24 05:54:15,461] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  93%|█████████▎| 5803/6250 [6:01:36<26:24,  3.55s/it, gpt_loss=0.478, lr=2.24e-7][A
Train step of epoch 0:  93%|█████████▎| 5804/6250 [6:01:36<27:30,  3.70s/it, gpt_loss=0.478, lr=2.24e-7][A
Train step of epoch 0:  93%|█████████▎| 5804/6250 [6:01:41<27:30,  3.70s/it, gpt_loss=0.55, lr=2.24e-7] [A
Train step of epoch 0:  93%|█████████▎| 5805/6250 [6:01:41<28:47,  3.88s/it, gpt_loss=0.55, lr=2.24e-7][A
Train step of epoch 0:  93%|█████████▎| 5805/6250 [6:01:45<28:47,  3.88s/it, gpt_loss=0.589, lr=2.24e-7][A
Train step of epoch 0:  93%|█████████▎| 5806/6250 [6:01:45<29:23,  3.97s/it, gpt_loss=0.589, lr=2.24e-7][A
Train step of epoch 0:  93%|█████████▎| 5806/6250 [6:01:49<29:23,  3.97s/it, gpt_loss=0.62, lr=2.24e-7] [A
Train step of epoch 0:  93%|█████████▎| 5807/6250 [6:01:49<29:30,  4.00s/it, gpt_loss=0.62, lr=2.24e-7][A[2025-04-24 05:54:32,390] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  93%|█████████▎| 5807/6250 [6:01:53<29:30,  4.00s/it, gpt_loss=0.673, lr=2.23e-7][A
Train step of epoch 0:  93%|█████████▎| 5808/6250 [6:01:53<30:18,  4.11s/it, gpt_loss=0.673, lr=2.23e-7][A
Train step of epoch 0:  93%|█████████▎| 5808/6250 [6:01:57<30:18,  4.11s/it, gpt_loss=0.599, lr=2.23e-7][A
Train step of epoch 0:  93%|█████████▎| 5809/6250 [6:01:57<29:10,  3.97s/it, gpt_loss=0.599, lr=2.23e-7][A
Train step of epoch 0:  93%|█████████▎| 5809/6250 [6:02:00<29:10,  3.97s/it, gpt_loss=0.547, lr=2.23e-7][A
Train step of epoch 0:  93%|█████████▎| 5810/6250 [6:02:00<27:11,  3.71s/it, gpt_loss=0.547, lr=2.23e-7][A
Train step of epoch 0:  93%|█████████▎| 5810/6250 [6:02:03<27:11,  3.71s/it, gpt_loss=0.932, lr=2.23e-7][A
Train step of epoch 0:  93%|█████████▎| 5811/6250 [6:02:03<26:41,  3.65s/it, gpt_loss=0.932, lr=2.23e-7][A[2025-04-24 05:54:46,560] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  93%|█████████▎| 5811/6250 [6:02:07<26:41,  3.65s/it, gpt_loss=0.606, lr=2.23e-7][A
Train step of epoch 0:  93%|█████████▎| 5812/6250 [6:02:07<27:14,  3.73s/it, gpt_loss=0.606, lr=2.23e-7][A
Train step of epoch 0:  93%|█████████▎| 5812/6250 [6:02:11<27:14,  3.73s/it, gpt_loss=0.699, lr=2.23e-7][A
Train step of epoch 0:  93%|█████████▎| 5813/6250 [6:02:11<28:01,  3.85s/it, gpt_loss=0.699, lr=2.23e-7][A
Train step of epoch 0:  93%|█████████▎| 5813/6250 [6:02:14<28:01,  3.85s/it, gpt_loss=0.57, lr=2.23e-7] [A
Train step of epoch 0:  93%|█████████▎| 5814/6250 [6:02:14<25:26,  3.50s/it, gpt_loss=0.57, lr=2.23e-7][A
Train step of epoch 0:  93%|█████████▎| 5814/6250 [6:02:18<25:26,  3.50s/it, gpt_loss=0.557, lr=2.23e-7][A
Train step of epoch 0:  93%|█████████▎| 5815/6250 [6:02:18<25:55,  3.58s/it, gpt_loss=0.557, lr=2.23e-7][A[2025-04-24 05:55:00,662] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  93%|█████████▎| 5815/6250 [6:02:21<25:55,  3.58s/it, gpt_loss=0.544, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5816/6250 [6:02:21<25:47,  3.57s/it, gpt_loss=0.544, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5816/6250 [6:02:25<25:47,  3.57s/it, gpt_loss=0.604, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5817/6250 [6:02:25<25:00,  3.46s/it, gpt_loss=0.604, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5817/6250 [6:02:28<25:00,  3.46s/it, gpt_loss=0.589, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5818/6250 [6:02:28<25:33,  3.55s/it, gpt_loss=0.589, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5818/6250 [6:02:32<25:33,  3.55s/it, gpt_loss=0.608, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5819/6250 [6:02:32<25:58,  3.62s/it, gpt_loss=0.608, lr=2.22e-7][A[2025-04-24 05:55:14,862] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  93%|█████████▎| 5819/6250 [6:02:36<25:58,  3.62s/it, gpt_loss=0.675, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5820/6250 [6:02:36<25:34,  3.57s/it, gpt_loss=0.675, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5820/6250 [6:02:39<25:34,  3.57s/it, gpt_loss=0.479, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5821/6250 [6:02:39<25:52,  3.62s/it, gpt_loss=0.479, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5821/6250 [6:02:43<25:52,  3.62s/it, gpt_loss=0.555, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5822/6250 [6:02:43<25:13,  3.54s/it, gpt_loss=0.555, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5822/6250 [6:02:47<25:13,  3.54s/it, gpt_loss=0.643, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5823/6250 [6:02:47<26:28,  3.72s/it, gpt_loss=0.643, lr=2.22e-7][A[2025-04-24 05:55:31,142] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  93%|█████████▎| 5823/6250 [6:02:52<26:28,  3.72s/it, gpt_loss=0.69, lr=2.22e-7] [A
Train step of epoch 0:  93%|█████████▎| 5824/6250 [6:02:52<29:14,  4.12s/it, gpt_loss=0.69, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5824/6250 [6:02:56<29:14,  4.12s/it, gpt_loss=0.753, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5825/6250 [6:02:56<29:26,  4.16s/it, gpt_loss=0.753, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5825/6250 [6:03:01<29:26,  4.16s/it, gpt_loss=0.651, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5826/6250 [6:03:01<29:59,  4.24s/it, gpt_loss=0.651, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5826/6250 [6:03:04<29:59,  4.24s/it, gpt_loss=0.511, lr=2.22e-7][A
Train step of epoch 0:  93%|█████████▎| 5827/6250 [6:03:04<27:48,  3.94s/it, gpt_loss=0.511, lr=2.22e-7][A[2025-04-24 05:55:47,598] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  93%|█████████▎| 5827/6250 [6:03:08<27:48,  3.94s/it, gpt_loss=0.75, lr=2.21e-7] [A
Train step of epoch 0:  93%|█████████▎| 5828/6250 [6:03:08<28:57,  4.12s/it, gpt_loss=0.75, lr=2.21e-7][A
Train step of epoch 0:  93%|█████████▎| 5828/6250 [6:03:12<28:57,  4.12s/it, gpt_loss=0.51, lr=2.21e-7][A
Train step of epoch 0:  93%|█████████▎| 5829/6250 [6:03:12<27:15,  3.89s/it, gpt_loss=0.51, lr=2.21e-7][A
Train step of epoch 0:  93%|█████████▎| 5829/6250 [6:03:16<27:15,  3.89s/it, gpt_loss=0.668, lr=2.21e-7][A
Train step of epoch 0:  93%|█████████▎| 5830/6250 [6:03:16<27:50,  3.98s/it, gpt_loss=0.668, lr=2.21e-7][A
Train step of epoch 0:  93%|█████████▎| 5830/6250 [6:03:20<27:50,  3.98s/it, gpt_loss=0.664, lr=2.21e-7][A
Train step of epoch 0:  93%|█████████▎| 5831/6250 [6:03:20<27:13,  3.90s/it, gpt_loss=0.664, lr=2.21e-7][A[2025-04-24 05:56:03,837] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  93%|█████████▎| 5831/6250 [6:03:25<27:13,  3.90s/it, gpt_loss=0.642, lr=2.21e-7][A
Train step of epoch 0:  93%|█████████▎| 5832/6250 [6:03:25<29:25,  4.22s/it, gpt_loss=0.642, lr=2.21e-7][A
Train step of epoch 0:  93%|█████████▎| 5832/6250 [6:03:29<29:25,  4.22s/it, gpt_loss=0.666, lr=2.21e-7][A
Train step of epoch 0:  93%|█████████▎| 5833/6250 [6:03:29<28:55,  4.16s/it, gpt_loss=0.666, lr=2.21e-7][A
Train step of epoch 0:  93%|█████████▎| 5833/6250 [6:03:32<28:55,  4.16s/it, gpt_loss=0.719, lr=2.21e-7][A
Train step of epoch 0:  93%|█████████▎| 5834/6250 [6:03:32<28:16,  4.08s/it, gpt_loss=0.719, lr=2.21e-7][A
Train step of epoch 0:  93%|█████████▎| 5834/6250 [6:03:35<28:16,  4.08s/it, gpt_loss=0.615, lr=2.21e-7][A
Train step of epoch 0:  93%|█████████▎| 5835/6250 [6:03:35<25:17,  3.66s/it, gpt_loss=0.615, lr=2.21e-7][A[2025-04-24 05:56:18,581] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  93%|█████████▎| 5835/6250 [6:03:39<25:17,  3.66s/it, gpt_loss=0.521, lr=2.2e-7] [A
Train step of epoch 0:  93%|█████████▎| 5836/6250 [6:03:39<26:17,  3.81s/it, gpt_loss=0.521, lr=2.2e-7][A
Train step of epoch 0:  93%|█████████▎| 5836/6250 [6:03:44<26:17,  3.81s/it, gpt_loss=0.658, lr=2.2e-7][A
Train step of epoch 0:  93%|█████████▎| 5837/6250 [6:03:44<27:30,  4.00s/it, gpt_loss=0.658, lr=2.2e-7][A
Train step of epoch 0:  93%|█████████▎| 5837/6250 [6:03:47<27:30,  4.00s/it, gpt_loss=0.74, lr=2.2e-7] [A
Train step of epoch 0:  93%|█████████▎| 5838/6250 [6:03:47<26:10,  3.81s/it, gpt_loss=0.74, lr=2.2e-7][A
Train step of epoch 0:  93%|█████████▎| 5838/6250 [6:03:52<26:10,  3.81s/it, gpt_loss=0.64, lr=2.2e-7][A
Train step of epoch 0:  93%|█████████▎| 5839/6250 [6:03:52<28:15,  4.13s/it, gpt_loss=0.64, lr=2.2e-7][A[2025-04-24 05:56:35,216] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  93%|█████████▎| 5839/6250 [6:03:56<28:15,  4.13s/it, gpt_loss=0.667, lr=2.2e-7][A
Train step of epoch 0:  93%|█████████▎| 5840/6250 [6:03:56<27:51,  4.08s/it, gpt_loss=0.667, lr=2.2e-7][A
Train step of epoch 0:  93%|█████████▎| 5840/6250 [6:04:00<27:51,  4.08s/it, gpt_loss=0.51, lr=2.2e-7] [A
Train step of epoch 0:  93%|█████████▎| 5841/6250 [6:04:00<26:59,  3.96s/it, gpt_loss=0.51, lr=2.2e-7][A
Train step of epoch 0:  93%|█████████▎| 5841/6250 [6:04:03<26:59,  3.96s/it, gpt_loss=0.638, lr=2.2e-7][A
Train step of epoch 0:  93%|█████████▎| 5842/6250 [6:04:03<26:27,  3.89s/it, gpt_loss=0.638, lr=2.2e-7][A
Train step of epoch 0:  93%|█████████▎| 5842/6250 [6:04:07<26:27,  3.89s/it, gpt_loss=0.673, lr=2.2e-7][A
Train step of epoch 0:  93%|█████████▎| 5843/6250 [6:04:07<26:04,  3.84s/it, gpt_loss=0.673, lr=2.2e-7][A[2025-04-24 05:56:51,258] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  93%|█████████▎| 5843/6250 [6:04:12<26:04,  3.84s/it, gpt_loss=0.689, lr=2.2e-7][A
Train step of epoch 0:  94%|█████████▎| 5844/6250 [6:04:12<28:08,  4.16s/it, gpt_loss=0.689, lr=2.2e-7][A
Train step of epoch 0:  94%|█████████▎| 5844/6250 [6:04:16<28:08,  4.16s/it, gpt_loss=0.603, lr=2.2e-7][A
Train step of epoch 0:  94%|█████████▎| 5845/6250 [6:04:16<27:50,  4.12s/it, gpt_loss=0.603, lr=2.2e-7][A
Train step of epoch 0:  94%|█████████▎| 5845/6250 [6:04:19<27:50,  4.12s/it, gpt_loss=0.738, lr=2.2e-7][A
Train step of epoch 0:  94%|█████████▎| 5846/6250 [6:04:19<25:51,  3.84s/it, gpt_loss=0.738, lr=2.2e-7][A
Train step of epoch 0:  94%|█████████▎| 5846/6250 [6:04:23<25:51,  3.84s/it, gpt_loss=0.594, lr=2.2e-7][A
Train step of epoch 0:  94%|█████████▎| 5847/6250 [6:04:23<25:26,  3.79s/it, gpt_loss=0.594, lr=2.2e-7][A[2025-04-24 05:57:06,329] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  94%|█████████▎| 5847/6250 [6:04:27<25:26,  3.79s/it, gpt_loss=0.544, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5848/6250 [6:04:27<26:10,  3.91s/it, gpt_loss=0.544, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5848/6250 [6:04:30<26:10,  3.91s/it, gpt_loss=0.487, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5849/6250 [6:04:30<24:46,  3.71s/it, gpt_loss=0.487, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5849/6250 [6:04:34<24:46,  3.71s/it, gpt_loss=0.665, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5850/6250 [6:04:34<25:37,  3.84s/it, gpt_loss=0.665, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5850/6250 [6:04:38<25:37,  3.84s/it, gpt_loss=0.637, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5851/6250 [6:04:38<24:50,  3.74s/it, gpt_loss=0.637, lr=2.19e-7][A[2025-04-24 05:57:20,855] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  94%|█████████▎| 5851/6250 [6:04:42<24:50,  3.74s/it, gpt_loss=0.724, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5852/6250 [6:04:42<24:35,  3.71s/it, gpt_loss=0.724, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5852/6250 [6:04:46<24:35,  3.71s/it, gpt_loss=0.538, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5853/6250 [6:04:46<25:39,  3.88s/it, gpt_loss=0.538, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5853/6250 [6:04:50<25:39,  3.88s/it, gpt_loss=0.765, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5854/6250 [6:04:50<25:24,  3.85s/it, gpt_loss=0.765, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5854/6250 [6:04:53<25:24,  3.85s/it, gpt_loss=0.565, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5855/6250 [6:04:53<23:19,  3.54s/it, gpt_loss=0.565, lr=2.19e-7][A[2025-04-24 05:57:36,410] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  94%|█████████▎| 5855/6250 [6:04:57<23:19,  3.54s/it, gpt_loss=0.519, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5856/6250 [6:04:57<25:28,  3.88s/it, gpt_loss=0.519, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5856/6250 [6:05:01<25:28,  3.88s/it, gpt_loss=0.73, lr=2.19e-7] [A
Train step of epoch 0:  94%|█████████▎| 5857/6250 [6:05:01<25:30,  3.89s/it, gpt_loss=0.73, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5857/6250 [6:05:04<25:30,  3.89s/it, gpt_loss=0.64, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5858/6250 [6:05:04<24:19,  3.72s/it, gpt_loss=0.64, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5858/6250 [6:05:09<24:19,  3.72s/it, gpt_loss=0.488, lr=2.19e-7][A
Train step of epoch 0:  94%|█████████▎| 5859/6250 [6:05:09<25:02,  3.84s/it, gpt_loss=0.488, lr=2.19e-7][A[2025-04-24 05:57:51,762] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  94%|█████████▎| 5859/6250 [6:05:13<25:02,  3.84s/it, gpt_loss=0.738, lr=2.18e-7][A
Train step of epoch 0:  94%|█████████▍| 5860/6250 [6:05:13<25:14,  3.88s/it, gpt_loss=0.738, lr=2.18e-7][A
Train step of epoch 0:  94%|█████████▍| 5860/6250 [6:05:17<25:14,  3.88s/it, gpt_loss=0.663, lr=2.18e-7][A
Train step of epoch 0:  94%|█████████▍| 5861/6250 [6:05:17<26:25,  4.07s/it, gpt_loss=0.663, lr=2.18e-7][A
Train step of epoch 0:  94%|█████████▍| 5861/6250 [6:05:21<26:25,  4.07s/it, gpt_loss=0.613, lr=2.18e-7][A
Train step of epoch 0:  94%|█████████▍| 5862/6250 [6:05:21<26:24,  4.08s/it, gpt_loss=0.613, lr=2.18e-7][A
Train step of epoch 0:  94%|█████████▍| 5862/6250 [6:05:26<26:24,  4.08s/it, gpt_loss=0.672, lr=2.18e-7][A
Train step of epoch 0:  94%|█████████▍| 5863/6250 [6:05:26<27:13,  4.22s/it, gpt_loss=0.672, lr=2.18e-7][A[2025-04-24 05:58:08,747] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  94%|█████████▍| 5863/6250 [6:05:30<27:13,  4.22s/it, gpt_loss=0.668, lr=2.18e-7][A
Train step of epoch 0:  94%|█████████▍| 5864/6250 [6:05:30<26:22,  4.10s/it, gpt_loss=0.668, lr=2.18e-7][A
Train step of epoch 0:  94%|█████████▍| 5864/6250 [6:05:33<26:22,  4.10s/it, gpt_loss=0.644, lr=2.18e-7][A
Train step of epoch 0:  94%|█████████▍| 5865/6250 [6:05:33<25:33,  3.98s/it, gpt_loss=0.644, lr=2.18e-7][A
Train step of epoch 0:  94%|█████████▍| 5865/6250 [6:05:36<25:33,  3.98s/it, gpt_loss=0.476, lr=2.18e-7][A
Train step of epoch 0:  94%|█████████▍| 5866/6250 [6:05:36<23:11,  3.62s/it, gpt_loss=0.476, lr=2.18e-7][A
Train step of epoch 0:  94%|█████████▍| 5866/6250 [6:05:39<23:11,  3.62s/it, gpt_loss=0.735, lr=2.18e-7][A
Train step of epoch 0:  94%|█████████▍| 5867/6250 [6:05:39<21:25,  3.36s/it, gpt_loss=0.735, lr=2.18e-7][A[2025-04-24 05:58:21,007] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  94%|█████████▍| 5867/6250 [6:05:42<21:25,  3.36s/it, gpt_loss=0.621, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5868/6250 [6:05:42<20:44,  3.26s/it, gpt_loss=0.621, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5868/6250 [6:05:45<20:44,  3.26s/it, gpt_loss=0.537, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5869/6250 [6:05:45<20:19,  3.20s/it, gpt_loss=0.537, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5869/6250 [6:05:49<20:19,  3.20s/it, gpt_loss=0.548, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5870/6250 [6:05:49<22:40,  3.58s/it, gpt_loss=0.548, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5870/6250 [6:05:53<22:40,  3.58s/it, gpt_loss=0.552, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5871/6250 [6:05:53<23:38,  3.74s/it, gpt_loss=0.552, lr=2.17e-7][A[2025-04-24 05:58:37,168] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  94%|█████████▍| 5871/6250 [6:05:58<23:38,  3.74s/it, gpt_loss=0.794, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5872/6250 [6:05:58<25:01,  3.97s/it, gpt_loss=0.794, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5872/6250 [6:06:02<25:01,  3.97s/it, gpt_loss=0.565, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5873/6250 [6:06:02<24:42,  3.93s/it, gpt_loss=0.565, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5873/6250 [6:06:05<24:42,  3.93s/it, gpt_loss=0.471, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5874/6250 [6:06:05<24:07,  3.85s/it, gpt_loss=0.471, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5874/6250 [6:06:09<24:07,  3.85s/it, gpt_loss=0.566, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5875/6250 [6:06:09<22:38,  3.62s/it, gpt_loss=0.566, lr=2.17e-7][A[2025-04-24 05:58:52,962] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  94%|█████████▍| 5875/6250 [6:06:14<22:38,  3.62s/it, gpt_loss=0.544, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5876/6250 [6:06:14<25:32,  4.10s/it, gpt_loss=0.544, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5876/6250 [6:06:18<25:32,  4.10s/it, gpt_loss=0.546, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5877/6250 [6:06:18<25:13,  4.06s/it, gpt_loss=0.546, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5877/6250 [6:06:21<25:13,  4.06s/it, gpt_loss=0.629, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5878/6250 [6:06:21<23:32,  3.80s/it, gpt_loss=0.629, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5878/6250 [6:06:25<23:32,  3.80s/it, gpt_loss=0.679, lr=2.17e-7][A
Train step of epoch 0:  94%|█████████▍| 5879/6250 [6:06:25<24:46,  4.01s/it, gpt_loss=0.679, lr=2.17e-7][A[2025-04-24 05:59:09,221] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  94%|█████████▍| 5879/6250 [6:06:30<24:46,  4.01s/it, gpt_loss=0.698, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5880/6250 [6:06:30<25:49,  4.19s/it, gpt_loss=0.698, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5880/6250 [6:06:34<25:49,  4.19s/it, gpt_loss=0.534, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5881/6250 [6:06:34<25:16,  4.11s/it, gpt_loss=0.534, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5881/6250 [6:06:38<25:16,  4.11s/it, gpt_loss=0.666, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5882/6250 [6:06:38<25:30,  4.16s/it, gpt_loss=0.666, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5882/6250 [6:06:42<25:30,  4.16s/it, gpt_loss=0.606, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5883/6250 [6:06:42<25:26,  4.16s/it, gpt_loss=0.606, lr=2.16e-7][A[2025-04-24 05:59:25,580] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  94%|█████████▍| 5883/6250 [6:06:46<25:26,  4.16s/it, gpt_loss=0.724, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5884/6250 [6:06:46<25:04,  4.11s/it, gpt_loss=0.724, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5884/6250 [6:06:50<25:04,  4.11s/it, gpt_loss=0.539, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5885/6250 [6:06:50<24:39,  4.05s/it, gpt_loss=0.539, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5885/6250 [6:06:54<24:39,  4.05s/it, gpt_loss=0.54, lr=2.16e-7] [A
Train step of epoch 0:  94%|█████████▍| 5886/6250 [6:06:54<23:17,  3.84s/it, gpt_loss=0.54, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5886/6250 [6:06:58<23:17,  3.84s/it, gpt_loss=0.539, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5887/6250 [6:06:58<24:44,  4.09s/it, gpt_loss=0.539, lr=2.16e-7][A[2025-04-24 05:59:41,147] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  94%|█████████▍| 5887/6250 [6:07:02<24:44,  4.09s/it, gpt_loss=0.417, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5888/6250 [6:07:02<23:50,  3.95s/it, gpt_loss=0.417, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5888/6250 [6:07:06<23:50,  3.95s/it, gpt_loss=0.494, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5889/6250 [6:07:06<23:25,  3.89s/it, gpt_loss=0.494, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5889/6250 [6:07:09<23:25,  3.89s/it, gpt_loss=0.469, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5890/6250 [6:07:09<21:44,  3.62s/it, gpt_loss=0.469, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5890/6250 [6:07:11<21:44,  3.62s/it, gpt_loss=0.671, lr=2.16e-7][A
Train step of epoch 0:  94%|█████████▍| 5891/6250 [6:07:11<20:03,  3.35s/it, gpt_loss=0.671, lr=2.16e-7][A[2025-04-24 05:59:54,666] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  94%|█████████▍| 5891/6250 [6:07:15<20:03,  3.35s/it, gpt_loss=0.664, lr=2.15e-7][A
Train step of epoch 0:  94%|█████████▍| 5892/6250 [6:07:15<21:15,  3.56s/it, gpt_loss=0.664, lr=2.15e-7][A
Train step of epoch 0:  94%|█████████▍| 5892/6250 [6:07:20<21:15,  3.56s/it, gpt_loss=0.75, lr=2.15e-7] [A
Train step of epoch 0:  94%|█████████▍| 5893/6250 [6:07:20<22:49,  3.84s/it, gpt_loss=0.75, lr=2.15e-7][A
Train step of epoch 0:  94%|█████████▍| 5893/6250 [6:07:25<22:49,  3.84s/it, gpt_loss=0.671, lr=2.15e-7][A
Train step of epoch 0:  94%|█████████▍| 5894/6250 [6:07:25<24:36,  4.15s/it, gpt_loss=0.671, lr=2.15e-7][A
Train step of epoch 0:  94%|█████████▍| 5894/6250 [6:07:29<24:36,  4.15s/it, gpt_loss=0.537, lr=2.15e-7][A
Train step of epoch 0:  94%|█████████▍| 5895/6250 [6:07:29<24:42,  4.18s/it, gpt_loss=0.537, lr=2.15e-7][A[2025-04-24 06:00:12,735] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  94%|█████████▍| 5895/6250 [6:07:33<24:42,  4.18s/it, gpt_loss=0.619, lr=2.15e-7][A
Train step of epoch 0:  94%|█████████▍| 5896/6250 [6:07:33<25:10,  4.27s/it, gpt_loss=0.619, lr=2.15e-7][A
Train step of epoch 0:  94%|█████████▍| 5896/6250 [6:07:37<25:10,  4.27s/it, gpt_loss=0.503, lr=2.15e-7][A
Train step of epoch 0:  94%|█████████▍| 5897/6250 [6:07:37<23:32,  4.00s/it, gpt_loss=0.503, lr=2.15e-7][A
Train step of epoch 0:  94%|█████████▍| 5897/6250 [6:07:41<23:32,  4.00s/it, gpt_loss=0.77, lr=2.15e-7] [A
Train step of epoch 0:  94%|█████████▍| 5898/6250 [6:07:41<23:13,  3.96s/it, gpt_loss=0.77, lr=2.15e-7][A
Train step of epoch 0:  94%|█████████▍| 5898/6250 [6:07:44<23:13,  3.96s/it, gpt_loss=0.548, lr=2.15e-7][A
Train step of epoch 0:  94%|█████████▍| 5899/6250 [6:07:44<22:28,  3.84s/it, gpt_loss=0.548, lr=2.15e-7][A[2025-04-24 06:00:27,236] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  94%|█████████▍| 5899/6250 [6:07:48<22:28,  3.84s/it, gpt_loss=0.781, lr=2.15e-7][A
Train step of epoch 0:  94%|█████████▍| 5900/6250 [6:07:48<22:08,  3.80s/it, gpt_loss=0.781, lr=2.15e-7][A
Train step of epoch 0:  94%|█████████▍| 5900/6250 [6:07:51<22:08,  3.80s/it, gpt_loss=0.75, lr=2.15e-7] [A
Train step of epoch 0:  94%|█████████▍| 5901/6250 [6:07:51<21:31,  3.70s/it, gpt_loss=0.75, lr=2.15e-7][A
Train step of epoch 0:  94%|█████████▍| 5901/6250 [6:07:54<21:31,  3.70s/it, gpt_loss=0.51, lr=2.15e-7][A
Train step of epoch 0:  94%|█████████▍| 5902/6250 [6:07:54<20:01,  3.45s/it, gpt_loss=0.51, lr=2.15e-7][A
Train step of epoch 0:  94%|█████████▍| 5902/6250 [6:07:58<20:01,  3.45s/it, gpt_loss=0.719, lr=2.15e-7][A
Train step of epoch 0:  94%|█████████▍| 5903/6250 [6:07:58<20:59,  3.63s/it, gpt_loss=0.719, lr=2.15e-7][A[2025-04-24 06:00:41,495] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  94%|█████████▍| 5903/6250 [6:08:02<20:59,  3.63s/it, gpt_loss=0.612, lr=2.14e-7][A
Train step of epoch 0:  94%|█████████▍| 5904/6250 [6:08:02<21:20,  3.70s/it, gpt_loss=0.612, lr=2.14e-7][A
Train step of epoch 0:  94%|█████████▍| 5904/6250 [6:08:05<21:20,  3.70s/it, gpt_loss=0.579, lr=2.14e-7][A
Train step of epoch 0:  94%|█████████▍| 5905/6250 [6:08:05<20:26,  3.56s/it, gpt_loss=0.579, lr=2.14e-7][A
Train step of epoch 0:  94%|█████████▍| 5905/6250 [6:08:10<20:26,  3.56s/it, gpt_loss=0.606, lr=2.14e-7][A
Train step of epoch 0:  94%|█████████▍| 5906/6250 [6:08:10<21:24,  3.73s/it, gpt_loss=0.606, lr=2.14e-7][A
Train step of epoch 0:  94%|█████████▍| 5906/6250 [6:08:13<21:24,  3.73s/it, gpt_loss=0.708, lr=2.14e-7][A
Train step of epoch 0:  95%|█████████▍| 5907/6250 [6:08:13<20:46,  3.63s/it, gpt_loss=0.708, lr=2.14e-7][A[2025-04-24 06:00:57,470] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  95%|█████████▍| 5907/6250 [6:08:18<20:46,  3.63s/it, gpt_loss=0.712, lr=2.14e-7][A
Train step of epoch 0:  95%|█████████▍| 5908/6250 [6:08:18<23:23,  4.11s/it, gpt_loss=0.712, lr=2.14e-7][A
Train step of epoch 0:  95%|█████████▍| 5908/6250 [6:08:22<23:23,  4.11s/it, gpt_loss=0.633, lr=2.14e-7][A
Train step of epoch 0:  95%|█████████▍| 5909/6250 [6:08:22<23:21,  4.11s/it, gpt_loss=0.633, lr=2.14e-7][A
Train step of epoch 0:  95%|█████████▍| 5909/6250 [6:08:26<23:21,  4.11s/it, gpt_loss=0.561, lr=2.14e-7][A
Train step of epoch 0:  95%|█████████▍| 5910/6250 [6:08:26<21:59,  3.88s/it, gpt_loss=0.561, lr=2.14e-7][A
Train step of epoch 0:  95%|█████████▍| 5910/6250 [6:08:29<21:59,  3.88s/it, gpt_loss=0.632, lr=2.14e-7][A
Train step of epoch 0:  95%|█████████▍| 5911/6250 [6:08:29<21:42,  3.84s/it, gpt_loss=0.632, lr=2.14e-7][A[2025-04-24 06:01:12,734] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  95%|█████████▍| 5911/6250 [6:08:33<21:42,  3.84s/it, gpt_loss=0.61, lr=2.14e-7] [A
Train step of epoch 0:  95%|█████████▍| 5912/6250 [6:08:33<21:59,  3.90s/it, gpt_loss=0.61, lr=2.14e-7][A
Train step of epoch 0:  95%|█████████▍| 5912/6250 [6:08:38<21:59,  3.90s/it, gpt_loss=0.608, lr=2.14e-7][A
Train step of epoch 0:  95%|█████████▍| 5913/6250 [6:08:38<22:54,  4.08s/it, gpt_loss=0.608, lr=2.14e-7][A
Train step of epoch 0:  95%|█████████▍| 5913/6250 [6:08:43<22:54,  4.08s/it, gpt_loss=0.641, lr=2.14e-7][A
Train step of epoch 0:  95%|█████████▍| 5914/6250 [6:08:43<23:58,  4.28s/it, gpt_loss=0.641, lr=2.14e-7][A
Train step of epoch 0:  95%|█████████▍| 5914/6250 [6:08:47<23:58,  4.28s/it, gpt_loss=0.507, lr=2.14e-7][A
Train step of epoch 0:  95%|█████████▍| 5915/6250 [6:08:47<23:50,  4.27s/it, gpt_loss=0.507, lr=2.14e-7][A[2025-04-24 06:01:29,764] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  95%|█████████▍| 5915/6250 [6:08:51<23:50,  4.27s/it, gpt_loss=0.659, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5916/6250 [6:08:51<22:33,  4.05s/it, gpt_loss=0.659, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5916/6250 [6:08:54<22:33,  4.05s/it, gpt_loss=0.606, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5917/6250 [6:08:54<21:19,  3.84s/it, gpt_loss=0.606, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5917/6250 [6:08:58<21:19,  3.84s/it, gpt_loss=0.586, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5918/6250 [6:08:58<21:24,  3.87s/it, gpt_loss=0.586, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5918/6250 [6:09:01<21:24,  3.87s/it, gpt_loss=0.522, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5919/6250 [6:09:01<20:02,  3.63s/it, gpt_loss=0.522, lr=2.13e-7][A[2025-04-24 06:01:43,846] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  95%|█████████▍| 5919/6250 [6:09:05<20:02,  3.63s/it, gpt_loss=0.598, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5920/6250 [6:09:05<20:06,  3.66s/it, gpt_loss=0.598, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5920/6250 [6:09:09<20:06,  3.66s/it, gpt_loss=0.612, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5921/6250 [6:09:09<21:41,  3.96s/it, gpt_loss=0.612, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5921/6250 [6:09:13<21:41,  3.96s/it, gpt_loss=0.547, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5922/6250 [6:09:13<21:30,  3.93s/it, gpt_loss=0.547, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5922/6250 [6:09:18<21:30,  3.93s/it, gpt_loss=0.679, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5923/6250 [6:09:18<22:16,  4.09s/it, gpt_loss=0.679, lr=2.13e-7][A[2025-04-24 06:02:00,858] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  95%|█████████▍| 5923/6250 [6:09:22<22:16,  4.09s/it, gpt_loss=0.579, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5924/6250 [6:09:22<22:06,  4.07s/it, gpt_loss=0.579, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5924/6250 [6:09:27<22:06,  4.07s/it, gpt_loss=0.771, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5925/6250 [6:09:27<23:26,  4.33s/it, gpt_loss=0.771, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5925/6250 [6:09:30<23:26,  4.33s/it, gpt_loss=0.547, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5926/6250 [6:09:30<22:21,  4.14s/it, gpt_loss=0.547, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5926/6250 [6:09:35<22:21,  4.14s/it, gpt_loss=0.626, lr=2.13e-7][A
Train step of epoch 0:  95%|█████████▍| 5927/6250 [6:09:35<22:32,  4.19s/it, gpt_loss=0.626, lr=2.13e-7][A[2025-04-24 06:02:16,932] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  95%|█████████▍| 5927/6250 [6:09:38<22:32,  4.19s/it, gpt_loss=0.435, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▍| 5928/6250 [6:09:38<20:47,  3.87s/it, gpt_loss=0.435, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▍| 5928/6250 [6:09:42<20:47,  3.87s/it, gpt_loss=0.607, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▍| 5929/6250 [6:09:42<20:51,  3.90s/it, gpt_loss=0.607, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▍| 5929/6250 [6:09:46<20:51,  3.90s/it, gpt_loss=0.565, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▍| 5930/6250 [6:09:46<21:28,  4.03s/it, gpt_loss=0.565, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▍| 5930/6250 [6:09:50<21:28,  4.03s/it, gpt_loss=0.566, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▍| 5931/6250 [6:09:50<21:23,  4.02s/it, gpt_loss=0.566, lr=2.12e-7][A[2025-04-24 06:02:34,523] [WARNING] [stage3.py:2139:step] 8 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  95%|█████████▍| 5931/6250 [6:09:55<21:23,  4.02s/it, gpt_loss=0.584, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▍| 5932/6250 [6:09:55<23:20,  4.40s/it, gpt_loss=0.584, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▍| 5932/6250 [6:09:58<23:20,  4.40s/it, gpt_loss=0.566, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▍| 5933/6250 [6:09:58<20:28,  3.88s/it, gpt_loss=0.566, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▍| 5933/6250 [6:10:02<20:28,  3.88s/it, gpt_loss=0.571, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▍| 5934/6250 [6:10:02<21:03,  4.00s/it, gpt_loss=0.571, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▍| 5934/6250 [6:10:06<21:03,  4.00s/it, gpt_loss=0.658, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▍| 5935/6250 [6:10:06<20:14,  3.86s/it, gpt_loss=0.658, lr=2.12e-7][A[2025-04-24 06:02:47,940] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  95%|█████████▍| 5935/6250 [6:10:09<20:14,  3.86s/it, gpt_loss=0.517, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▍| 5936/6250 [6:10:09<18:46,  3.59s/it, gpt_loss=0.517, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▍| 5936/6250 [6:10:13<18:46,  3.59s/it, gpt_loss=0.615, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▍| 5937/6250 [6:10:13<19:15,  3.69s/it, gpt_loss=0.615, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▍| 5937/6250 [6:10:16<19:15,  3.69s/it, gpt_loss=0.565, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▌| 5938/6250 [6:10:16<18:04,  3.48s/it, gpt_loss=0.565, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▌| 5938/6250 [6:10:19<18:04,  3.48s/it, gpt_loss=0.609, lr=2.12e-7][A
Train step of epoch 0:  95%|█████████▌| 5939/6250 [6:10:19<18:33,  3.58s/it, gpt_loss=0.609, lr=2.12e-7][A[2025-04-24 06:03:02,268] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  95%|█████████▌| 5939/6250 [6:10:23<18:33,  3.58s/it, gpt_loss=0.584, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5940/6250 [6:10:23<18:31,  3.59s/it, gpt_loss=0.584, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5940/6250 [6:10:28<18:31,  3.59s/it, gpt_loss=0.584, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5941/6250 [6:10:28<20:17,  3.94s/it, gpt_loss=0.584, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5941/6250 [6:10:32<20:17,  3.94s/it, gpt_loss=0.575, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5942/6250 [6:10:32<20:37,  4.02s/it, gpt_loss=0.575, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5942/6250 [6:10:36<20:37,  4.02s/it, gpt_loss=0.571, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5943/6250 [6:10:36<20:13,  3.95s/it, gpt_loss=0.571, lr=2.11e-7][A[2025-04-24 06:03:18,850] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  95%|█████████▌| 5943/6250 [6:10:40<20:13,  3.95s/it, gpt_loss=0.701, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5944/6250 [6:10:40<19:57,  3.91s/it, gpt_loss=0.701, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5944/6250 [6:10:43<19:57,  3.91s/it, gpt_loss=0.433, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5945/6250 [6:10:43<19:10,  3.77s/it, gpt_loss=0.433, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5945/6250 [6:10:47<19:10,  3.77s/it, gpt_loss=0.65, lr=2.11e-7] [A
Train step of epoch 0:  95%|█████████▌| 5946/6250 [6:10:47<19:06,  3.77s/it, gpt_loss=0.65, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5946/6250 [6:10:51<19:06,  3.77s/it, gpt_loss=0.769, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5947/6250 [6:10:51<19:16,  3.82s/it, gpt_loss=0.769, lr=2.11e-7][A[2025-04-24 06:03:34,437] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  95%|█████████▌| 5947/6250 [6:10:55<19:16,  3.82s/it, gpt_loss=0.593, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5948/6250 [6:10:55<20:10,  4.01s/it, gpt_loss=0.593, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5948/6250 [6:11:00<20:10,  4.01s/it, gpt_loss=0.664, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5949/6250 [6:11:00<21:45,  4.34s/it, gpt_loss=0.664, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5949/6250 [6:11:04<21:45,  4.34s/it, gpt_loss=0.472, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5950/6250 [6:11:04<20:50,  4.17s/it, gpt_loss=0.472, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5950/6250 [6:11:07<20:50,  4.17s/it, gpt_loss=0.542, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5951/6250 [6:11:07<19:36,  3.93s/it, gpt_loss=0.542, lr=2.11e-7][A[2025-04-24 06:03:51,471] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  95%|█████████▌| 5951/6250 [6:11:12<19:36,  3.93s/it, gpt_loss=0.516, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5952/6250 [6:11:12<20:46,  4.18s/it, gpt_loss=0.516, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5952/6250 [6:11:16<20:46,  4.18s/it, gpt_loss=0.496, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5953/6250 [6:11:16<19:21,  3.91s/it, gpt_loss=0.496, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5953/6250 [6:11:19<19:21,  3.91s/it, gpt_loss=0.475, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5954/6250 [6:11:19<19:11,  3.89s/it, gpt_loss=0.475, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5954/6250 [6:11:23<19:11,  3.89s/it, gpt_loss=0.441, lr=2.11e-7][A
Train step of epoch 0:  95%|█████████▌| 5955/6250 [6:11:23<18:58,  3.86s/it, gpt_loss=0.441, lr=2.11e-7][A[2025-04-24 06:04:07,144] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  95%|█████████▌| 5955/6250 [6:11:28<18:58,  3.86s/it, gpt_loss=0.751, lr=2.1e-7] [A
Train step of epoch 0:  95%|█████████▌| 5956/6250 [6:11:28<20:15,  4.13s/it, gpt_loss=0.751, lr=2.1e-7][A
Train step of epoch 0:  95%|█████████▌| 5956/6250 [6:11:32<20:15,  4.13s/it, gpt_loss=0.453, lr=2.1e-7][A
Train step of epoch 0:  95%|█████████▌| 5957/6250 [6:11:32<19:39,  4.02s/it, gpt_loss=0.453, lr=2.1e-7][A
Train step of epoch 0:  95%|█████████▌| 5957/6250 [6:11:35<19:39,  4.02s/it, gpt_loss=0.658, lr=2.1e-7][A
Train step of epoch 0:  95%|█████████▌| 5958/6250 [6:11:35<18:45,  3.85s/it, gpt_loss=0.658, lr=2.1e-7][A
Train step of epoch 0:  95%|█████████▌| 5958/6250 [6:11:39<18:45,  3.85s/it, gpt_loss=0.589, lr=2.1e-7][A
Train step of epoch 0:  95%|█████████▌| 5959/6250 [6:11:39<19:05,  3.94s/it, gpt_loss=0.589, lr=2.1e-7][A[2025-04-24 06:04:21,805] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  95%|█████████▌| 5959/6250 [6:11:43<19:05,  3.94s/it, gpt_loss=0.763, lr=2.1e-7][A
Train step of epoch 0:  95%|█████████▌| 5960/6250 [6:11:43<18:06,  3.75s/it, gpt_loss=0.763, lr=2.1e-7][A
Train step of epoch 0:  95%|█████████▌| 5960/6250 [6:11:47<18:06,  3.75s/it, gpt_loss=0.794, lr=2.1e-7][A
Train step of epoch 0:  95%|█████████▌| 5961/6250 [6:11:47<18:48,  3.91s/it, gpt_loss=0.794, lr=2.1e-7][A
Train step of epoch 0:  95%|█████████▌| 5961/6250 [6:11:51<18:48,  3.91s/it, gpt_loss=0.666, lr=2.1e-7][A
Train step of epoch 0:  95%|█████████▌| 5962/6250 [6:11:51<18:44,  3.90s/it, gpt_loss=0.666, lr=2.1e-7][A
Train step of epoch 0:  95%|█████████▌| 5962/6250 [6:11:55<18:44,  3.90s/it, gpt_loss=0.6, lr=2.1e-7]  [A
Train step of epoch 0:  95%|█████████▌| 5963/6250 [6:11:55<18:56,  3.96s/it, gpt_loss=0.6, lr=2.1e-7][A[2025-04-24 06:04:37,896] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  95%|█████████▌| 5963/6250 [6:11:59<18:56,  3.96s/it, gpt_loss=0.566, lr=2.1e-7][A
Train step of epoch 0:  95%|█████████▌| 5964/6250 [6:11:59<18:40,  3.92s/it, gpt_loss=0.566, lr=2.1e-7][A
Train step of epoch 0:  95%|█████████▌| 5964/6250 [6:12:03<18:40,  3.92s/it, gpt_loss=0.56, lr=2.1e-7] [A
Train step of epoch 0:  95%|█████████▌| 5965/6250 [6:12:03<18:59,  4.00s/it, gpt_loss=0.56, lr=2.1e-7][A
Train step of epoch 0:  95%|█████████▌| 5965/6250 [6:12:05<18:59,  4.00s/it, gpt_loss=0.563, lr=2.1e-7][A
Train step of epoch 0:  95%|█████████▌| 5966/6250 [6:12:05<16:40,  3.52s/it, gpt_loss=0.563, lr=2.1e-7][A
Train step of epoch 0:  95%|█████████▌| 5966/6250 [6:12:10<16:40,  3.52s/it, gpt_loss=0.526, lr=2.1e-7][A
Train step of epoch 0:  95%|█████████▌| 5967/6250 [6:12:10<17:40,  3.75s/it, gpt_loss=0.526, lr=2.1e-7][A[2025-04-24 06:04:54,082] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  95%|█████████▌| 5967/6250 [6:12:15<17:40,  3.75s/it, gpt_loss=0.686, lr=2.09e-7][A
Train step of epoch 0:  95%|█████████▌| 5968/6250 [6:12:15<19:49,  4.22s/it, gpt_loss=0.686, lr=2.09e-7][A
Train step of epoch 0:  95%|█████████▌| 5968/6250 [6:12:19<19:49,  4.22s/it, gpt_loss=0.594, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5969/6250 [6:12:19<19:28,  4.16s/it, gpt_loss=0.594, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5969/6250 [6:12:23<19:28,  4.16s/it, gpt_loss=0.542, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5970/6250 [6:12:23<19:34,  4.19s/it, gpt_loss=0.542, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5970/6250 [6:12:28<19:34,  4.19s/it, gpt_loss=0.596, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5971/6250 [6:12:28<20:18,  4.37s/it, gpt_loss=0.596, lr=2.09e-7][A[2025-04-24 06:05:11,432] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  96%|█████████▌| 5971/6250 [6:12:32<20:18,  4.37s/it, gpt_loss=0.558, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5972/6250 [6:12:32<20:07,  4.34s/it, gpt_loss=0.558, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5972/6250 [6:12:36<20:07,  4.34s/it, gpt_loss=0.7, lr=2.09e-7]  [A
Train step of epoch 0:  96%|█████████▌| 5973/6250 [6:12:36<19:17,  4.18s/it, gpt_loss=0.7, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5973/6250 [6:12:39<19:17,  4.18s/it, gpt_loss=0.738, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5974/6250 [6:12:39<17:20,  3.77s/it, gpt_loss=0.738, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5974/6250 [6:12:43<17:20,  3.77s/it, gpt_loss=0.702, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5975/6250 [6:12:43<17:30,  3.82s/it, gpt_loss=0.702, lr=2.09e-7][A[2025-04-24 06:05:25,778] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  96%|█████████▌| 5975/6250 [6:12:47<17:30,  3.82s/it, gpt_loss=0.439, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5976/6250 [6:12:47<17:24,  3.81s/it, gpt_loss=0.439, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5976/6250 [6:12:50<17:24,  3.81s/it, gpt_loss=0.497, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5977/6250 [6:12:50<16:59,  3.73s/it, gpt_loss=0.497, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5977/6250 [6:12:54<16:59,  3.73s/it, gpt_loss=0.66, lr=2.09e-7] [A
Train step of epoch 0:  96%|█████████▌| 5978/6250 [6:12:54<16:33,  3.65s/it, gpt_loss=0.66, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5978/6250 [6:12:57<16:33,  3.65s/it, gpt_loss=0.422, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5979/6250 [6:12:57<15:32,  3.44s/it, gpt_loss=0.422, lr=2.09e-7][A[2025-04-24 06:05:39,534] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  96%|█████████▌| 5979/6250 [6:13:00<15:32,  3.44s/it, gpt_loss=0.754, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5980/6250 [6:13:00<15:57,  3.55s/it, gpt_loss=0.754, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5980/6250 [6:13:04<15:57,  3.55s/it, gpt_loss=0.483, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5981/6250 [6:13:04<16:03,  3.58s/it, gpt_loss=0.483, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5981/6250 [6:13:08<16:03,  3.58s/it, gpt_loss=0.519, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5982/6250 [6:13:08<15:58,  3.58s/it, gpt_loss=0.519, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5982/6250 [6:13:11<15:58,  3.58s/it, gpt_loss=0.715, lr=2.09e-7][A
Train step of epoch 0:  96%|█████████▌| 5983/6250 [6:13:11<15:35,  3.50s/it, gpt_loss=0.715, lr=2.09e-7][A[2025-04-24 06:05:53,278] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  96%|█████████▌| 5983/6250 [6:13:14<15:35,  3.50s/it, gpt_loss=0.724, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5984/6250 [6:13:14<15:06,  3.41s/it, gpt_loss=0.724, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5984/6250 [6:13:18<15:06,  3.41s/it, gpt_loss=0.558, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5985/6250 [6:13:18<16:13,  3.67s/it, gpt_loss=0.558, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5985/6250 [6:13:22<16:13,  3.67s/it, gpt_loss=0.585, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5986/6250 [6:13:22<15:54,  3.62s/it, gpt_loss=0.585, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5986/6250 [6:13:26<15:54,  3.62s/it, gpt_loss=0.57, lr=2.08e-7] [A
Train step of epoch 0:  96%|█████████▌| 5987/6250 [6:13:26<16:24,  3.74s/it, gpt_loss=0.57, lr=2.08e-7][A[2025-04-24 06:06:09,367] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  96%|█████████▌| 5987/6250 [6:13:30<16:24,  3.74s/it, gpt_loss=0.586, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5988/6250 [6:13:30<17:02,  3.90s/it, gpt_loss=0.586, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5988/6250 [6:13:34<17:02,  3.90s/it, gpt_loss=0.595, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5989/6250 [6:13:34<16:32,  3.80s/it, gpt_loss=0.595, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5989/6250 [6:13:37<16:32,  3.80s/it, gpt_loss=0.725, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5990/6250 [6:13:37<16:06,  3.72s/it, gpt_loss=0.725, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5990/6250 [6:13:41<16:06,  3.72s/it, gpt_loss=0.484, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5991/6250 [6:13:41<15:55,  3.69s/it, gpt_loss=0.484, lr=2.08e-7][A[2025-04-24 06:06:23,184] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  96%|█████████▌| 5991/6250 [6:13:44<15:55,  3.69s/it, gpt_loss=0.612, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5992/6250 [6:13:44<15:06,  3.51s/it, gpt_loss=0.612, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5992/6250 [6:13:48<15:06,  3.51s/it, gpt_loss=0.562, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5993/6250 [6:13:48<15:37,  3.65s/it, gpt_loss=0.562, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5993/6250 [6:13:52<15:37,  3.65s/it, gpt_loss=0.546, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5994/6250 [6:13:52<15:36,  3.66s/it, gpt_loss=0.546, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5994/6250 [6:13:55<15:36,  3.66s/it, gpt_loss=0.572, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5995/6250 [6:13:55<15:09,  3.57s/it, gpt_loss=0.572, lr=2.08e-7][A[2025-04-24 06:06:37,814] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  96%|█████████▌| 5995/6250 [6:13:59<15:09,  3.57s/it, gpt_loss=0.441, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5996/6250 [6:13:59<15:11,  3.59s/it, gpt_loss=0.441, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5996/6250 [6:14:02<15:11,  3.59s/it, gpt_loss=0.636, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5997/6250 [6:14:02<15:11,  3.60s/it, gpt_loss=0.636, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5997/6250 [6:14:06<15:11,  3.60s/it, gpt_loss=0.661, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5998/6250 [6:14:06<15:36,  3.72s/it, gpt_loss=0.661, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5998/6250 [6:14:10<15:36,  3.72s/it, gpt_loss=0.634, lr=2.08e-7][A
Train step of epoch 0:  96%|█████████▌| 5999/6250 [6:14:10<15:22,  3.68s/it, gpt_loss=0.634, lr=2.08e-7][A[2025-04-24 06:06:53,525] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-04-24 06:06:53,525] [INFO] [logging.py:107:log_dist] [Rank 0] step=1500, skipped=0, lr=[2.0742800299310336e-07, 2.0742800299310336e-07], mom=[(0.9, 0.95), (0.9, 0.95)]
[2025-04-24 06:06:53,526] [INFO] [timer.py:264:stop] epoch=0/micro_step=6000/global_step=1500, RunningAvgSamplesPerSec=2.2238638773266013, CurrSamplesPerSec=2.1089822968383967, MemAllocated=40.57GB, MaxMemAllocated=60.14GB

Train step of epoch 0:  96%|█████████▌| 5999/6250 [6:14:14<15:22,  3.68s/it, gpt_loss=0.742, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6000/6250 [6:14:14<16:21,  3.93s/it, gpt_loss=0.742, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6000/6250 [6:14:18<16:21,  3.93s/it, gpt_loss=0.628, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6001/6250 [6:14:18<16:22,  3.94s/it, gpt_loss=0.628, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6001/6250 [6:14:22<16:22,  3.94s/it, gpt_loss=0.414, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6002/6250 [6:14:22<16:02,  3.88s/it, gpt_loss=0.414, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6002/6250 [6:14:26<16:02,  3.88s/it, gpt_loss=0.559, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6003/6250 [6:14:26<16:22,  3.98s/it, gpt_loss=0.559, lr=2.07e-7][A[2025-04-24 06:07:09,730] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  96%|█████████▌| 6003/6250 [6:14:30<16:22,  3.98s/it, gpt_loss=0.523, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6004/6250 [6:14:30<16:41,  4.07s/it, gpt_loss=0.523, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6004/6250 [6:14:35<16:41,  4.07s/it, gpt_loss=0.742, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6005/6250 [6:14:35<16:49,  4.12s/it, gpt_loss=0.742, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6005/6250 [6:14:38<16:49,  4.12s/it, gpt_loss=0.557, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6006/6250 [6:14:38<15:38,  3.85s/it, gpt_loss=0.557, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6006/6250 [6:14:42<15:38,  3.85s/it, gpt_loss=0.567, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6007/6250 [6:14:42<15:38,  3.86s/it, gpt_loss=0.567, lr=2.07e-7][A[2025-04-24 06:07:25,197] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  96%|█████████▌| 6007/6250 [6:14:46<15:38,  3.86s/it, gpt_loss=0.635, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6008/6250 [6:14:46<15:53,  3.94s/it, gpt_loss=0.635, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6008/6250 [6:14:50<15:53,  3.94s/it, gpt_loss=0.64, lr=2.07e-7] [A
Train step of epoch 0:  96%|█████████▌| 6009/6250 [6:14:50<15:45,  3.92s/it, gpt_loss=0.64, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6009/6250 [6:14:55<15:45,  3.92s/it, gpt_loss=0.58, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6010/6250 [6:14:55<16:42,  4.18s/it, gpt_loss=0.58, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6010/6250 [6:14:59<16:42,  4.18s/it, gpt_loss=0.745, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6011/6250 [6:14:59<17:08,  4.30s/it, gpt_loss=0.745, lr=2.07e-7][A[2025-04-24 06:07:42,945] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  96%|█████████▌| 6011/6250 [6:15:04<17:08,  4.30s/it, gpt_loss=0.633, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6012/6250 [6:15:04<17:18,  4.36s/it, gpt_loss=0.633, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6012/6250 [6:15:08<17:18,  4.36s/it, gpt_loss=0.6, lr=2.07e-7]  [A
Train step of epoch 0:  96%|█████████▌| 6013/6250 [6:15:08<16:40,  4.22s/it, gpt_loss=0.6, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6013/6250 [6:15:11<16:40,  4.22s/it, gpt_loss=0.748, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6014/6250 [6:15:11<15:30,  3.94s/it, gpt_loss=0.748, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6014/6250 [6:15:15<15:30,  3.94s/it, gpt_loss=0.489, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▌| 6015/6250 [6:15:15<15:09,  3.87s/it, gpt_loss=0.489, lr=2.07e-7][A[2025-04-24 06:07:57,531] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  96%|█████████▌| 6015/6250 [6:15:18<15:09,  3.87s/it, gpt_loss=0.554, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▋| 6016/6250 [6:15:18<14:53,  3.82s/it, gpt_loss=0.554, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▋| 6016/6250 [6:15:22<14:53,  3.82s/it, gpt_loss=0.519, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▋| 6017/6250 [6:15:22<14:52,  3.83s/it, gpt_loss=0.519, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▋| 6017/6250 [6:15:25<14:52,  3.83s/it, gpt_loss=0.443, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▋| 6018/6250 [6:15:25<14:09,  3.66s/it, gpt_loss=0.443, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▋| 6018/6250 [6:15:29<14:09,  3.66s/it, gpt_loss=0.526, lr=2.07e-7][A
Train step of epoch 0:  96%|█████████▋| 6019/6250 [6:15:29<14:12,  3.69s/it, gpt_loss=0.526, lr=2.07e-7][A[2025-04-24 06:08:11,966] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  96%|█████████▋| 6019/6250 [6:15:33<14:12,  3.69s/it, gpt_loss=0.596, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6020/6250 [6:15:33<13:59,  3.65s/it, gpt_loss=0.596, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6020/6250 [6:15:36<13:59,  3.65s/it, gpt_loss=0.491, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6021/6250 [6:15:36<13:36,  3.56s/it, gpt_loss=0.491, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6021/6250 [6:15:40<13:36,  3.56s/it, gpt_loss=0.738, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6022/6250 [6:15:40<13:42,  3.61s/it, gpt_loss=0.738, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6022/6250 [6:15:44<13:42,  3.61s/it, gpt_loss=0.563, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6023/6250 [6:15:44<14:40,  3.88s/it, gpt_loss=0.563, lr=2.06e-7][A[2025-04-24 06:08:27,697] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  96%|█████████▋| 6023/6250 [6:15:48<14:40,  3.88s/it, gpt_loss=0.732, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6024/6250 [6:15:48<14:54,  3.96s/it, gpt_loss=0.732, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6024/6250 [6:15:52<14:54,  3.96s/it, gpt_loss=0.575, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6025/6250 [6:15:52<14:44,  3.93s/it, gpt_loss=0.575, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6025/6250 [6:15:56<14:44,  3.93s/it, gpt_loss=0.754, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6026/6250 [6:15:56<14:02,  3.76s/it, gpt_loss=0.754, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6026/6250 [6:15:59<14:02,  3.76s/it, gpt_loss=0.547, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6027/6250 [6:15:59<13:43,  3.69s/it, gpt_loss=0.547, lr=2.06e-7][A[2025-04-24 06:08:42,081] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  96%|█████████▋| 6027/6250 [6:16:03<13:43,  3.69s/it, gpt_loss=0.707, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6028/6250 [6:16:03<13:35,  3.67s/it, gpt_loss=0.707, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6028/6250 [6:16:07<13:35,  3.67s/it, gpt_loss=0.714, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6029/6250 [6:16:07<13:43,  3.72s/it, gpt_loss=0.714, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6029/6250 [6:16:10<13:43,  3.72s/it, gpt_loss=0.584, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6030/6250 [6:16:10<13:05,  3.57s/it, gpt_loss=0.584, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6030/6250 [6:16:14<13:05,  3.57s/it, gpt_loss=0.553, lr=2.06e-7][A
Train step of epoch 0:  96%|█████████▋| 6031/6250 [6:16:14<13:03,  3.58s/it, gpt_loss=0.553, lr=2.06e-7][A[2025-04-24 06:08:56,690] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  96%|█████████▋| 6031/6250 [6:16:17<13:03,  3.58s/it, gpt_loss=0.65, lr=2.06e-7] [A
Train step of epoch 0:  97%|█████████▋| 6032/6250 [6:16:17<13:24,  3.69s/it, gpt_loss=0.65, lr=2.06e-7][A
Train step of epoch 0:  97%|█████████▋| 6032/6250 [6:16:21<13:24,  3.69s/it, gpt_loss=0.557, lr=2.06e-7][A
Train step of epoch 0:  97%|█████████▋| 6033/6250 [6:16:21<13:33,  3.75s/it, gpt_loss=0.557, lr=2.06e-7][A
Train step of epoch 0:  97%|█████████▋| 6033/6250 [6:16:26<13:33,  3.75s/it, gpt_loss=0.629, lr=2.06e-7][A
Train step of epoch 0:  97%|█████████▋| 6034/6250 [6:16:26<14:07,  3.93s/it, gpt_loss=0.629, lr=2.06e-7][A
Train step of epoch 0:  97%|█████████▋| 6034/6250 [6:16:28<14:07,  3.93s/it, gpt_loss=0.529, lr=2.06e-7][A
Train step of epoch 0:  97%|█████████▋| 6035/6250 [6:16:28<12:49,  3.58s/it, gpt_loss=0.529, lr=2.06e-7][A[2025-04-24 06:09:11,898] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  97%|█████████▋| 6035/6250 [6:16:33<12:49,  3.58s/it, gpt_loss=0.604, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6036/6250 [6:16:33<13:26,  3.77s/it, gpt_loss=0.604, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6036/6250 [6:16:36<13:26,  3.77s/it, gpt_loss=0.572, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6037/6250 [6:16:36<12:37,  3.55s/it, gpt_loss=0.572, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6037/6250 [6:16:40<12:37,  3.55s/it, gpt_loss=0.519, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6038/6250 [6:16:40<13:03,  3.70s/it, gpt_loss=0.519, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6038/6250 [6:16:43<13:03,  3.70s/it, gpt_loss=0.544, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6039/6250 [6:16:43<12:43,  3.62s/it, gpt_loss=0.544, lr=2.05e-7][A[2025-04-24 06:09:26,831] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  97%|█████████▋| 6039/6250 [6:16:48<12:43,  3.62s/it, gpt_loss=0.47, lr=2.05e-7] [A
Train step of epoch 0:  97%|█████████▋| 6040/6250 [6:16:48<13:30,  3.86s/it, gpt_loss=0.47, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6040/6250 [6:16:52<13:30,  3.86s/it, gpt_loss=0.511, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6041/6250 [6:16:52<13:43,  3.94s/it, gpt_loss=0.511, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6041/6250 [6:16:56<13:43,  3.94s/it, gpt_loss=0.607, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6042/6250 [6:16:56<13:45,  3.97s/it, gpt_loss=0.607, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6042/6250 [6:17:00<13:45,  3.97s/it, gpt_loss=0.447, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6043/6250 [6:17:00<13:59,  4.05s/it, gpt_loss=0.447, lr=2.05e-7][A[2025-04-24 06:09:43,088] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  97%|█████████▋| 6043/6250 [6:17:04<13:59,  4.05s/it, gpt_loss=0.57, lr=2.05e-7] [A
Train step of epoch 0:  97%|█████████▋| 6044/6250 [6:17:04<13:41,  3.99s/it, gpt_loss=0.57, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6044/6250 [6:17:08<13:41,  3.99s/it, gpt_loss=0.667, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6045/6250 [6:17:08<13:21,  3.91s/it, gpt_loss=0.667, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6045/6250 [6:17:11<13:21,  3.91s/it, gpt_loss=0.742, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6046/6250 [6:17:11<12:29,  3.68s/it, gpt_loss=0.742, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6046/6250 [6:17:15<12:29,  3.68s/it, gpt_loss=0.591, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6047/6250 [6:17:15<12:36,  3.73s/it, gpt_loss=0.591, lr=2.05e-7][A[2025-04-24 06:09:57,396] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  97%|█████████▋| 6047/6250 [6:17:18<12:36,  3.73s/it, gpt_loss=0.594, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6048/6250 [6:17:18<12:25,  3.69s/it, gpt_loss=0.594, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6048/6250 [6:17:23<12:25,  3.69s/it, gpt_loss=0.618, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6049/6250 [6:17:23<13:02,  3.90s/it, gpt_loss=0.618, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6049/6250 [6:17:26<13:02,  3.90s/it, gpt_loss=0.547, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6050/6250 [6:17:26<13:02,  3.91s/it, gpt_loss=0.547, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6050/6250 [6:17:30<13:02,  3.91s/it, gpt_loss=0.669, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6051/6250 [6:17:30<12:21,  3.72s/it, gpt_loss=0.669, lr=2.05e-7][A[2025-04-24 06:10:12,403] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  97%|█████████▋| 6051/6250 [6:17:33<12:21,  3.72s/it, gpt_loss=0.491, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6052/6250 [6:17:33<11:58,  3.63s/it, gpt_loss=0.491, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6052/6250 [6:17:37<11:58,  3.63s/it, gpt_loss=0.524, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6053/6250 [6:17:37<11:58,  3.65s/it, gpt_loss=0.524, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6053/6250 [6:17:41<11:58,  3.65s/it, gpt_loss=0.523, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6054/6250 [6:17:41<12:07,  3.71s/it, gpt_loss=0.523, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6054/6250 [6:17:45<12:07,  3.71s/it, gpt_loss=0.517, lr=2.05e-7][A
Train step of epoch 0:  97%|█████████▋| 6055/6250 [6:17:45<12:11,  3.75s/it, gpt_loss=0.517, lr=2.05e-7][A[2025-04-24 06:10:27,345] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  97%|█████████▋| 6055/6250 [6:17:48<12:11,  3.75s/it, gpt_loss=0.585, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6056/6250 [6:17:48<11:55,  3.69s/it, gpt_loss=0.585, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6056/6250 [6:17:53<11:55,  3.69s/it, gpt_loss=0.78, lr=2.04e-7] [A
Train step of epoch 0:  97%|█████████▋| 6057/6250 [6:17:53<13:21,  4.15s/it, gpt_loss=0.78, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6057/6250 [6:17:56<13:21,  4.15s/it, gpt_loss=0.619, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6058/6250 [6:17:56<12:16,  3.84s/it, gpt_loss=0.619, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6058/6250 [6:18:00<12:16,  3.84s/it, gpt_loss=0.569, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6059/6250 [6:18:00<12:07,  3.81s/it, gpt_loss=0.569, lr=2.04e-7][A[2025-04-24 06:10:44,154] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  97%|█████████▋| 6059/6250 [6:18:05<12:07,  3.81s/it, gpt_loss=0.653, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6060/6250 [6:18:05<12:55,  4.08s/it, gpt_loss=0.653, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6060/6250 [6:18:09<12:55,  4.08s/it, gpt_loss=0.64, lr=2.04e-7] [A
Train step of epoch 0:  97%|█████████▋| 6061/6250 [6:18:09<12:23,  3.94s/it, gpt_loss=0.64, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6061/6250 [6:18:13<12:23,  3.94s/it, gpt_loss=0.61, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6062/6250 [6:18:13<13:08,  4.19s/it, gpt_loss=0.61, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6062/6250 [6:18:17<13:08,  4.19s/it, gpt_loss=0.554, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6063/6250 [6:18:17<12:23,  3.97s/it, gpt_loss=0.554, lr=2.04e-7][A[2025-04-24 06:10:59,286] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  97%|█████████▋| 6063/6250 [6:18:20<12:23,  3.97s/it, gpt_loss=0.734, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6064/6250 [6:18:20<11:40,  3.77s/it, gpt_loss=0.734, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6064/6250 [6:18:24<11:40,  3.77s/it, gpt_loss=0.772, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6065/6250 [6:18:24<12:01,  3.90s/it, gpt_loss=0.772, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6065/6250 [6:18:28<12:01,  3.90s/it, gpt_loss=0.535, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6066/6250 [6:18:28<11:25,  3.72s/it, gpt_loss=0.535, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6066/6250 [6:18:32<11:25,  3.72s/it, gpt_loss=0.67, lr=2.04e-7] [A
Train step of epoch 0:  97%|█████████▋| 6067/6250 [6:18:32<11:52,  3.90s/it, gpt_loss=0.67, lr=2.04e-7][A[2025-04-24 06:11:15,015] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  97%|█████████▋| 6067/6250 [6:18:36<11:52,  3.90s/it, gpt_loss=0.56, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6068/6250 [6:18:36<11:49,  3.90s/it, gpt_loss=0.56, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6068/6250 [6:18:40<11:49,  3.90s/it, gpt_loss=0.612, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6069/6250 [6:18:40<12:18,  4.08s/it, gpt_loss=0.612, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6069/6250 [6:18:44<12:18,  4.08s/it, gpt_loss=0.59, lr=2.04e-7] [A
Train step of epoch 0:  97%|█████████▋| 6070/6250 [6:18:44<11:47,  3.93s/it, gpt_loss=0.59, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6070/6250 [6:18:48<11:47,  3.93s/it, gpt_loss=0.485, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6071/6250 [6:18:48<11:37,  3.90s/it, gpt_loss=0.485, lr=2.04e-7][A[2025-04-24 06:11:30,722] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  97%|█████████▋| 6071/6250 [6:18:51<11:37,  3.90s/it, gpt_loss=0.721, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6072/6250 [6:18:51<11:28,  3.87s/it, gpt_loss=0.721, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6072/6250 [6:18:56<11:28,  3.87s/it, gpt_loss=0.662, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6073/6250 [6:18:56<11:37,  3.94s/it, gpt_loss=0.662, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6073/6250 [6:19:00<11:37,  3.94s/it, gpt_loss=0.552, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6074/6250 [6:19:00<12:02,  4.11s/it, gpt_loss=0.552, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6074/6250 [6:19:03<12:02,  4.11s/it, gpt_loss=0.531, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6075/6250 [6:19:03<11:06,  3.81s/it, gpt_loss=0.531, lr=2.04e-7][A[2025-04-24 06:11:46,781] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  97%|█████████▋| 6075/6250 [6:19:08<11:06,  3.81s/it, gpt_loss=0.73, lr=2.04e-7] [A
Train step of epoch 0:  97%|█████████▋| 6076/6250 [6:19:08<11:30,  3.97s/it, gpt_loss=0.73, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6076/6250 [6:19:11<11:30,  3.97s/it, gpt_loss=0.497, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6077/6250 [6:19:11<10:51,  3.76s/it, gpt_loss=0.497, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6077/6250 [6:19:15<10:51,  3.76s/it, gpt_loss=0.667, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6078/6250 [6:19:15<11:21,  3.96s/it, gpt_loss=0.667, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6078/6250 [6:19:19<11:21,  3.96s/it, gpt_loss=0.665, lr=2.04e-7][A
Train step of epoch 0:  97%|█████████▋| 6079/6250 [6:19:19<11:18,  3.97s/it, gpt_loss=0.665, lr=2.04e-7][A[2025-04-24 06:12:02,210] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  97%|█████████▋| 6079/6250 [6:19:23<11:18,  3.97s/it, gpt_loss=0.685, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6080/6250 [6:19:23<11:02,  3.90s/it, gpt_loss=0.685, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6080/6250 [6:19:26<11:02,  3.90s/it, gpt_loss=0.528, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6081/6250 [6:19:26<10:26,  3.71s/it, gpt_loss=0.528, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6081/6250 [6:19:31<10:26,  3.71s/it, gpt_loss=0.613, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6082/6250 [6:19:31<10:54,  3.90s/it, gpt_loss=0.613, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6082/6250 [6:19:35<10:54,  3.90s/it, gpt_loss=0.657, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6083/6250 [6:19:35<11:11,  4.02s/it, gpt_loss=0.657, lr=2.03e-7][A[2025-04-24 06:12:17,463] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  97%|█████████▋| 6083/6250 [6:19:38<11:11,  4.02s/it, gpt_loss=0.472, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6084/6250 [6:19:38<10:33,  3.82s/it, gpt_loss=0.472, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6084/6250 [6:19:42<10:33,  3.82s/it, gpt_loss=0.616, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6085/6250 [6:19:42<10:18,  3.75s/it, gpt_loss=0.616, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6085/6250 [6:19:45<10:18,  3.75s/it, gpt_loss=0.706, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6086/6250 [6:19:45<09:45,  3.57s/it, gpt_loss=0.706, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6086/6250 [6:19:49<09:45,  3.57s/it, gpt_loss=0.646, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6087/6250 [6:19:49<09:45,  3.59s/it, gpt_loss=0.646, lr=2.03e-7][A[2025-04-24 06:12:31,749] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  97%|█████████▋| 6087/6250 [6:19:53<09:45,  3.59s/it, gpt_loss=0.555, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6088/6250 [6:19:53<09:56,  3.68s/it, gpt_loss=0.555, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6088/6250 [6:19:56<09:56,  3.68s/it, gpt_loss=0.672, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6089/6250 [6:19:56<09:53,  3.69s/it, gpt_loss=0.672, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6089/6250 [6:20:00<09:53,  3.69s/it, gpt_loss=0.588, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6090/6250 [6:20:00<10:07,  3.80s/it, gpt_loss=0.588, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6090/6250 [6:20:05<10:07,  3.80s/it, gpt_loss=0.525, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6091/6250 [6:20:05<10:26,  3.94s/it, gpt_loss=0.525, lr=2.03e-7][A[2025-04-24 06:12:47,768] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  97%|█████████▋| 6091/6250 [6:20:09<10:26,  3.94s/it, gpt_loss=0.603, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6092/6250 [6:20:09<10:25,  3.96s/it, gpt_loss=0.603, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6092/6250 [6:20:13<10:25,  3.96s/it, gpt_loss=0.585, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6093/6250 [6:20:13<10:45,  4.11s/it, gpt_loss=0.585, lr=2.03e-7][A
Train step of epoch 0:  97%|█████████▋| 6093/6250 [6:20:17<10:45,  4.11s/it, gpt_loss=0.539, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6094/6250 [6:20:17<10:28,  4.03s/it, gpt_loss=0.539, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6094/6250 [6:20:21<10:28,  4.03s/it, gpt_loss=0.607, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6095/6250 [6:20:21<10:33,  4.09s/it, gpt_loss=0.607, lr=2.03e-7][A[2025-04-24 06:13:03,749] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  98%|█████████▊| 6095/6250 [6:20:25<10:33,  4.09s/it, gpt_loss=0.728, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6096/6250 [6:20:25<10:00,  3.90s/it, gpt_loss=0.728, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6096/6250 [6:20:29<10:00,  3.90s/it, gpt_loss=0.719, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6097/6250 [6:20:29<10:36,  4.16s/it, gpt_loss=0.719, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6097/6250 [6:20:33<10:36,  4.16s/it, gpt_loss=0.509, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6098/6250 [6:20:33<10:27,  4.13s/it, gpt_loss=0.509, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6098/6250 [6:20:37<10:27,  4.13s/it, gpt_loss=0.637, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6099/6250 [6:20:37<10:00,  3.98s/it, gpt_loss=0.637, lr=2.03e-7][A[2025-04-24 06:13:19,565] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  98%|█████████▊| 6099/6250 [6:20:40<10:00,  3.98s/it, gpt_loss=0.583, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6100/6250 [6:20:40<09:29,  3.79s/it, gpt_loss=0.583, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6100/6250 [6:20:46<09:29,  3.79s/it, gpt_loss=0.679, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6101/6250 [6:20:46<10:28,  4.22s/it, gpt_loss=0.679, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6101/6250 [6:20:49<10:28,  4.22s/it, gpt_loss=0.842, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6102/6250 [6:20:49<10:01,  4.06s/it, gpt_loss=0.842, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6102/6250 [6:20:52<10:01,  4.06s/it, gpt_loss=0.665, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6103/6250 [6:20:52<09:19,  3.80s/it, gpt_loss=0.665, lr=2.03e-7][A[2025-04-24 06:13:36,312] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  98%|█████████▊| 6103/6250 [6:20:57<09:19,  3.80s/it, gpt_loss=0.523, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6104/6250 [6:20:57<09:51,  4.05s/it, gpt_loss=0.523, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6104/6250 [6:21:01<09:51,  4.05s/it, gpt_loss=0.863, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6105/6250 [6:21:01<09:59,  4.14s/it, gpt_loss=0.863, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6105/6250 [6:21:05<09:59,  4.14s/it, gpt_loss=0.53, lr=2.03e-7] [A
Train step of epoch 0:  98%|█████████▊| 6106/6250 [6:21:05<09:38,  4.02s/it, gpt_loss=0.53, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6106/6250 [6:21:08<09:38,  4.02s/it, gpt_loss=0.513, lr=2.03e-7][A
Train step of epoch 0:  98%|█████████▊| 6107/6250 [6:21:08<09:05,  3.81s/it, gpt_loss=0.513, lr=2.03e-7][A[2025-04-24 06:13:52,078] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  98%|█████████▊| 6107/6250 [6:21:13<09:05,  3.81s/it, gpt_loss=0.627, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6108/6250 [6:21:13<09:24,  3.98s/it, gpt_loss=0.627, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6108/6250 [6:21:17<09:24,  3.98s/it, gpt_loss=0.661, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6109/6250 [6:21:17<09:26,  4.02s/it, gpt_loss=0.661, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6109/6250 [6:21:22<09:26,  4.02s/it, gpt_loss=0.502, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6110/6250 [6:21:22<10:10,  4.36s/it, gpt_loss=0.502, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6110/6250 [6:21:26<10:10,  4.36s/it, gpt_loss=0.645, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6111/6250 [6:21:26<09:43,  4.20s/it, gpt_loss=0.645, lr=2.02e-7][A[2025-04-24 06:14:10,141] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  98%|█████████▊| 6111/6250 [6:21:31<09:43,  4.20s/it, gpt_loss=0.61, lr=2.02e-7] [A
Train step of epoch 0:  98%|█████████▊| 6112/6250 [6:21:31<10:11,  4.43s/it, gpt_loss=0.61, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6112/6250 [6:21:35<10:11,  4.43s/it, gpt_loss=0.638, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6113/6250 [6:21:35<10:00,  4.38s/it, gpt_loss=0.638, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6113/6250 [6:21:39<10:00,  4.38s/it, gpt_loss=0.627, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6114/6250 [6:21:39<09:18,  4.11s/it, gpt_loss=0.627, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6114/6250 [6:21:42<09:18,  4.11s/it, gpt_loss=0.587, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6115/6250 [6:21:42<08:48,  3.92s/it, gpt_loss=0.587, lr=2.02e-7][A[2025-04-24 06:14:25,043] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  98%|█████████▊| 6115/6250 [6:21:46<08:48,  3.92s/it, gpt_loss=0.516, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6116/6250 [6:21:46<08:35,  3.85s/it, gpt_loss=0.516, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6116/6250 [6:21:50<08:35,  3.85s/it, gpt_loss=0.763, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6117/6250 [6:21:50<08:26,  3.81s/it, gpt_loss=0.763, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6117/6250 [6:21:53<08:26,  3.81s/it, gpt_loss=0.568, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6118/6250 [6:21:53<07:55,  3.60s/it, gpt_loss=0.568, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6118/6250 [6:21:57<07:55,  3.60s/it, gpt_loss=0.669, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6119/6250 [6:21:57<08:32,  3.92s/it, gpt_loss=0.669, lr=2.02e-7][A[2025-04-24 06:14:40,583] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  98%|█████████▊| 6119/6250 [6:22:01<08:32,  3.92s/it, gpt_loss=0.553, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6120/6250 [6:22:01<08:34,  3.96s/it, gpt_loss=0.553, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6120/6250 [6:22:05<08:34,  3.96s/it, gpt_loss=0.575, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6121/6250 [6:22:05<08:33,  3.98s/it, gpt_loss=0.575, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6121/6250 [6:22:10<08:33,  3.98s/it, gpt_loss=0.485, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6122/6250 [6:22:10<08:50,  4.14s/it, gpt_loss=0.485, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6122/6250 [6:22:14<08:50,  4.14s/it, gpt_loss=0.55, lr=2.02e-7] [A
Train step of epoch 0:  98%|█████████▊| 6123/6250 [6:22:14<08:36,  4.07s/it, gpt_loss=0.55, lr=2.02e-7][A[2025-04-24 06:14:57,106] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  98%|█████████▊| 6123/6250 [6:22:18<08:36,  4.07s/it, gpt_loss=0.649, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6124/6250 [6:22:18<08:32,  4.07s/it, gpt_loss=0.649, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6124/6250 [6:22:22<08:32,  4.07s/it, gpt_loss=0.551, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6125/6250 [6:22:22<08:40,  4.16s/it, gpt_loss=0.551, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6125/6250 [6:22:28<08:40,  4.16s/it, gpt_loss=0.494, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6126/6250 [6:22:28<09:26,  4.57s/it, gpt_loss=0.494, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6126/6250 [6:22:32<09:26,  4.57s/it, gpt_loss=0.552, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6127/6250 [6:22:32<09:12,  4.49s/it, gpt_loss=0.552, lr=2.02e-7][A[2025-04-24 06:15:15,075] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  98%|█████████▊| 6127/6250 [6:22:36<09:12,  4.49s/it, gpt_loss=0.665, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6128/6250 [6:22:36<08:41,  4.27s/it, gpt_loss=0.665, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6128/6250 [6:22:40<08:41,  4.27s/it, gpt_loss=0.601, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6129/6250 [6:22:40<08:29,  4.21s/it, gpt_loss=0.601, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6129/6250 [6:22:43<08:29,  4.21s/it, gpt_loss=0.546, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6130/6250 [6:22:43<07:36,  3.80s/it, gpt_loss=0.546, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6130/6250 [6:22:47<07:36,  3.80s/it, gpt_loss=0.431, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6131/6250 [6:22:47<07:41,  3.88s/it, gpt_loss=0.431, lr=2.02e-7][A[2025-04-24 06:15:28,746] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  98%|█████████▊| 6131/6250 [6:22:50<07:41,  3.88s/it, gpt_loss=0.632, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6132/6250 [6:22:50<06:55,  3.52s/it, gpt_loss=0.632, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6132/6250 [6:22:53<06:55,  3.52s/it, gpt_loss=0.615, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6133/6250 [6:22:53<06:57,  3.57s/it, gpt_loss=0.615, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6133/6250 [6:22:57<06:57,  3.57s/it, gpt_loss=0.603, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6134/6250 [6:22:57<07:00,  3.63s/it, gpt_loss=0.603, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6134/6250 [6:23:01<07:00,  3.63s/it, gpt_loss=0.604, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6135/6250 [6:23:01<06:59,  3.65s/it, gpt_loss=0.604, lr=2.02e-7][A[2025-04-24 06:15:43,487] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  98%|█████████▊| 6135/6250 [6:23:04<06:59,  3.65s/it, gpt_loss=0.621, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6136/6250 [6:23:04<06:54,  3.64s/it, gpt_loss=0.621, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6136/6250 [6:23:09<06:54,  3.64s/it, gpt_loss=0.518, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6137/6250 [6:23:09<07:17,  3.87s/it, gpt_loss=0.518, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6137/6250 [6:23:13<07:17,  3.87s/it, gpt_loss=0.613, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6138/6250 [6:23:13<07:37,  4.08s/it, gpt_loss=0.613, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6138/6250 [6:23:18<07:37,  4.08s/it, gpt_loss=0.444, lr=2.02e-7][A
Train step of epoch 0:  98%|█████████▊| 6139/6250 [6:23:18<07:50,  4.24s/it, gpt_loss=0.444, lr=2.02e-7][A[2025-04-24 06:16:01,615] [WARNING] [stage3.py:2139:step] 7 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  98%|█████████▊| 6139/6250 [6:23:22<07:50,  4.24s/it, gpt_loss=0.506, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6140/6250 [6:23:22<07:56,  4.33s/it, gpt_loss=0.506, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6140/6250 [6:23:27<07:56,  4.33s/it, gpt_loss=0.747, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6141/6250 [6:23:27<07:59,  4.40s/it, gpt_loss=0.747, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6141/6250 [6:23:32<07:59,  4.40s/it, gpt_loss=0.461, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6142/6250 [6:23:32<08:05,  4.49s/it, gpt_loss=0.461, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6142/6250 [6:23:35<08:05,  4.49s/it, gpt_loss=0.585, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6143/6250 [6:23:35<07:19,  4.11s/it, gpt_loss=0.585, lr=2.01e-7][A[2025-04-24 06:16:18,485] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  98%|█████████▊| 6143/6250 [6:23:39<07:19,  4.11s/it, gpt_loss=0.597, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6144/6250 [6:23:39<07:24,  4.19s/it, gpt_loss=0.597, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6144/6250 [6:23:43<07:24,  4.19s/it, gpt_loss=0.684, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6145/6250 [6:23:43<07:15,  4.14s/it, gpt_loss=0.684, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6145/6250 [6:23:48<07:15,  4.14s/it, gpt_loss=0.587, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6146/6250 [6:23:48<07:13,  4.17s/it, gpt_loss=0.587, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6146/6250 [6:23:51<07:13,  4.17s/it, gpt_loss=0.57, lr=2.01e-7] [A
Train step of epoch 0:  98%|█████████▊| 6147/6250 [6:23:51<06:59,  4.07s/it, gpt_loss=0.57, lr=2.01e-7][A[2025-04-24 06:16:33,935] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  98%|█████████▊| 6147/6250 [6:23:55<06:59,  4.07s/it, gpt_loss=0.484, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6148/6250 [6:23:55<06:33,  3.85s/it, gpt_loss=0.484, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6148/6250 [6:24:00<06:33,  3.85s/it, gpt_loss=0.623, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6149/6250 [6:24:00<07:22,  4.38s/it, gpt_loss=0.623, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6149/6250 [6:24:03<07:22,  4.38s/it, gpt_loss=0.471, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6150/6250 [6:24:03<06:39,  3.99s/it, gpt_loss=0.471, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6150/6250 [6:24:07<06:39,  3.99s/it, gpt_loss=0.63, lr=2.01e-7] [A
Train step of epoch 0:  98%|█████████▊| 6151/6250 [6:24:07<06:30,  3.94s/it, gpt_loss=0.63, lr=2.01e-7][A[2025-04-24 06:16:50,573] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  98%|█████████▊| 6151/6250 [6:24:11<06:30,  3.94s/it, gpt_loss=0.508, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6152/6250 [6:24:11<06:31,  3.99s/it, gpt_loss=0.508, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6152/6250 [6:24:16<06:31,  3.99s/it, gpt_loss=0.498, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6153/6250 [6:24:16<06:51,  4.25s/it, gpt_loss=0.498, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6153/6250 [6:24:19<06:51,  4.25s/it, gpt_loss=0.533, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6154/6250 [6:24:19<06:13,  3.89s/it, gpt_loss=0.533, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6154/6250 [6:24:23<06:13,  3.89s/it, gpt_loss=0.542, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6155/6250 [6:24:23<06:05,  3.85s/it, gpt_loss=0.542, lr=2.01e-7][A[2025-04-24 06:17:05,941] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  98%|█████████▊| 6155/6250 [6:24:27<06:05,  3.85s/it, gpt_loss=0.482, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6156/6250 [6:24:27<05:58,  3.81s/it, gpt_loss=0.482, lr=2.01e-7][A
Train step of epoch 0:  98%|█████████▊| 6156/6250 [6:24:32<05:58,  3.81s/it, gpt_loss=0.719, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6157/6250 [6:24:32<06:32,  4.22s/it, gpt_loss=0.719, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6157/6250 [6:24:35<06:32,  4.22s/it, gpt_loss=0.502, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6158/6250 [6:24:35<05:47,  3.78s/it, gpt_loss=0.502, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6158/6250 [6:24:38<05:47,  3.78s/it, gpt_loss=0.479, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6159/6250 [6:24:38<05:28,  3.61s/it, gpt_loss=0.479, lr=2.01e-7][A[2025-04-24 06:17:20,681] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  99%|█████████▊| 6159/6250 [6:24:41<05:28,  3.61s/it, gpt_loss=0.619, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6160/6250 [6:24:41<05:24,  3.61s/it, gpt_loss=0.619, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6160/6250 [6:24:45<05:24,  3.61s/it, gpt_loss=0.584, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6161/6250 [6:24:45<05:10,  3.48s/it, gpt_loss=0.584, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6161/6250 [6:24:48<05:10,  3.48s/it, gpt_loss=0.538, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6162/6250 [6:24:48<05:09,  3.51s/it, gpt_loss=0.538, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6162/6250 [6:24:53<05:09,  3.51s/it, gpt_loss=0.84, lr=2.01e-7] [A
Train step of epoch 0:  99%|█████████▊| 6163/6250 [6:24:53<05:37,  3.88s/it, gpt_loss=0.84, lr=2.01e-7][A[2025-04-24 06:17:36,026] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  99%|█████████▊| 6163/6250 [6:24:57<05:37,  3.88s/it, gpt_loss=0.557, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6164/6250 [6:24:57<05:32,  3.87s/it, gpt_loss=0.557, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6164/6250 [6:25:01<05:32,  3.87s/it, gpt_loss=0.509, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6165/6250 [6:25:01<05:49,  4.12s/it, gpt_loss=0.509, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6165/6250 [6:25:05<05:49,  4.12s/it, gpt_loss=0.524, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6166/6250 [6:25:05<05:27,  3.89s/it, gpt_loss=0.524, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6166/6250 [6:25:08<05:27,  3.89s/it, gpt_loss=0.498, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6167/6250 [6:25:08<05:15,  3.80s/it, gpt_loss=0.498, lr=2.01e-7][A[2025-04-24 06:17:51,341] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  99%|█████████▊| 6167/6250 [6:25:12<05:15,  3.80s/it, gpt_loss=0.582, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6168/6250 [6:25:12<05:08,  3.76s/it, gpt_loss=0.582, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6168/6250 [6:25:17<05:08,  3.76s/it, gpt_loss=0.792, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6169/6250 [6:25:17<05:29,  4.06s/it, gpt_loss=0.792, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6169/6250 [6:25:20<05:29,  4.06s/it, gpt_loss=0.833, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6170/6250 [6:25:20<04:58,  3.74s/it, gpt_loss=0.833, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6170/6250 [6:25:24<04:58,  3.74s/it, gpt_loss=0.567, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▊| 6171/6250 [6:25:24<04:56,  3.75s/it, gpt_loss=0.567, lr=2.01e-7][A[2025-04-24 06:18:07,151] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  99%|█████████▊| 6171/6250 [6:25:28<04:56,  3.75s/it, gpt_loss=0.57, lr=2.01e-7] [A
Train step of epoch 0:  99%|█████████▉| 6172/6250 [6:25:28<05:04,  3.91s/it, gpt_loss=0.57, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6172/6250 [6:25:32<05:04,  3.91s/it, gpt_loss=0.685, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6173/6250 [6:25:32<05:07,  3.99s/it, gpt_loss=0.685, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6173/6250 [6:25:35<05:07,  3.99s/it, gpt_loss=0.612, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6174/6250 [6:25:35<04:46,  3.77s/it, gpt_loss=0.612, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6174/6250 [6:25:40<04:46,  3.77s/it, gpt_loss=0.592, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6175/6250 [6:25:40<04:59,  3.99s/it, gpt_loss=0.592, lr=2.01e-7][A[2025-04-24 06:18:22,724] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  99%|█████████▉| 6175/6250 [6:25:43<04:59,  3.99s/it, gpt_loss=0.726, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6176/6250 [6:25:43<04:47,  3.88s/it, gpt_loss=0.726, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6176/6250 [6:25:48<04:47,  3.88s/it, gpt_loss=0.748, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6177/6250 [6:25:48<04:51,  4.00s/it, gpt_loss=0.748, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6177/6250 [6:25:52<04:51,  4.00s/it, gpt_loss=0.584, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6178/6250 [6:25:52<05:02,  4.20s/it, gpt_loss=0.584, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6178/6250 [6:25:56<05:02,  4.20s/it, gpt_loss=0.724, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6179/6250 [6:25:56<04:49,  4.08s/it, gpt_loss=0.724, lr=2.01e-7][A[2025-04-24 06:18:37,897] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  99%|█████████▉| 6179/6250 [6:25:59<04:49,  4.08s/it, gpt_loss=0.538, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6180/6250 [6:25:59<04:11,  3.59s/it, gpt_loss=0.538, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6180/6250 [6:26:03<04:11,  3.59s/it, gpt_loss=0.516, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6181/6250 [6:26:03<04:27,  3.88s/it, gpt_loss=0.516, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6181/6250 [6:26:07<04:27,  3.88s/it, gpt_loss=0.623, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6182/6250 [6:26:07<04:21,  3.84s/it, gpt_loss=0.623, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6182/6250 [6:26:10<04:21,  3.84s/it, gpt_loss=0.701, lr=2.01e-7][A
Train step of epoch 0:  99%|█████████▉| 6183/6250 [6:26:10<04:08,  3.70s/it, gpt_loss=0.701, lr=2.01e-7][A[2025-04-24 06:18:52,805] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  99%|█████████▉| 6183/6250 [6:26:14<04:08,  3.70s/it, gpt_loss=0.592, lr=2e-7]   [A
Train step of epoch 0:  99%|█████████▉| 6184/6250 [6:26:14<03:54,  3.56s/it, gpt_loss=0.592, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6184/6250 [6:26:18<03:54,  3.56s/it, gpt_loss=0.671, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6185/6250 [6:26:18<04:06,  3.80s/it, gpt_loss=0.671, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6185/6250 [6:26:22<04:06,  3.80s/it, gpt_loss=0.544, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6186/6250 [6:26:22<04:02,  3.80s/it, gpt_loss=0.544, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6186/6250 [6:26:26<04:02,  3.80s/it, gpt_loss=0.547, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6187/6250 [6:26:26<04:06,  3.91s/it, gpt_loss=0.547, lr=2e-7][A[2025-04-24 06:19:09,004] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  99%|█████████▉| 6187/6250 [6:26:30<04:06,  3.91s/it, gpt_loss=0.662, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6188/6250 [6:26:30<04:01,  3.90s/it, gpt_loss=0.662, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6188/6250 [6:26:34<04:01,  3.90s/it, gpt_loss=0.689, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6189/6250 [6:26:34<04:06,  4.05s/it, gpt_loss=0.689, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6189/6250 [6:26:37<04:06,  4.05s/it, gpt_loss=0.543, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6190/6250 [6:26:37<03:46,  3.77s/it, gpt_loss=0.543, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6190/6250 [6:26:41<03:46,  3.77s/it, gpt_loss=0.652, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6191/6250 [6:26:41<03:38,  3.70s/it, gpt_loss=0.652, lr=2e-7][A[2025-04-24 06:19:23,919] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  99%|█████████▉| 6191/6250 [6:26:45<03:38,  3.70s/it, gpt_loss=0.605, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6192/6250 [6:26:45<03:37,  3.75s/it, gpt_loss=0.605, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6192/6250 [6:26:48<03:37,  3.75s/it, gpt_loss=0.58, lr=2e-7] [A
Train step of epoch 0:  99%|█████████▉| 6193/6250 [6:26:48<03:26,  3.63s/it, gpt_loss=0.58, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6193/6250 [6:26:51<03:26,  3.63s/it, gpt_loss=0.732, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6194/6250 [6:26:51<03:11,  3.42s/it, gpt_loss=0.732, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6194/6250 [6:26:54<03:11,  3.42s/it, gpt_loss=0.452, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6195/6250 [6:26:54<03:04,  3.35s/it, gpt_loss=0.452, lr=2e-7][A[2025-04-24 06:19:37,823] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  99%|█████████▉| 6195/6250 [6:26:59<03:04,  3.35s/it, gpt_loss=0.767, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6196/6250 [6:26:59<03:18,  3.68s/it, gpt_loss=0.767, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6196/6250 [6:27:04<03:18,  3.68s/it, gpt_loss=0.663, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6197/6250 [6:27:04<03:35,  4.07s/it, gpt_loss=0.663, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6197/6250 [6:27:07<03:35,  4.07s/it, gpt_loss=0.486, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6198/6250 [6:27:07<03:25,  3.95s/it, gpt_loss=0.486, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6198/6250 [6:27:10<03:25,  3.95s/it, gpt_loss=0.574, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6199/6250 [6:27:10<03:02,  3.59s/it, gpt_loss=0.574, lr=2e-7][A[2025-04-24 06:19:54,466] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  99%|█████████▉| 6199/6250 [6:27:15<03:02,  3.59s/it, gpt_loss=0.617, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6200/6250 [6:27:15<03:24,  4.08s/it, gpt_loss=0.617, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6200/6250 [6:27:19<03:24,  4.08s/it, gpt_loss=0.631, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6201/6250 [6:27:19<03:21,  4.11s/it, gpt_loss=0.631, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6201/6250 [6:27:24<03:21,  4.11s/it, gpt_loss=0.554, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6202/6250 [6:27:24<03:20,  4.17s/it, gpt_loss=0.554, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6202/6250 [6:27:27<03:20,  4.17s/it, gpt_loss=0.604, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6203/6250 [6:27:27<03:04,  3.92s/it, gpt_loss=0.604, lr=2e-7][A[2025-04-24 06:20:10,773] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  99%|█████████▉| 6203/6250 [6:27:32<03:04,  3.92s/it, gpt_loss=0.576, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6204/6250 [6:27:32<03:08,  4.09s/it, gpt_loss=0.576, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6204/6250 [6:27:37<03:08,  4.09s/it, gpt_loss=0.425, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6205/6250 [6:27:37<03:18,  4.42s/it, gpt_loss=0.425, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6205/6250 [6:27:40<03:18,  4.42s/it, gpt_loss=0.669, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6206/6250 [6:27:40<02:54,  3.96s/it, gpt_loss=0.669, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6206/6250 [6:27:43<02:54,  3.96s/it, gpt_loss=0.782, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6207/6250 [6:27:43<02:41,  3.77s/it, gpt_loss=0.782, lr=2e-7][A[2025-04-24 06:20:25,977] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  99%|█████████▉| 6207/6250 [6:27:47<02:41,  3.77s/it, gpt_loss=0.428, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6208/6250 [6:27:47<02:38,  3.78s/it, gpt_loss=0.428, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6208/6250 [6:27:50<02:38,  3.78s/it, gpt_loss=0.739, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6209/6250 [6:27:50<02:31,  3.70s/it, gpt_loss=0.739, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6209/6250 [6:27:54<02:31,  3.70s/it, gpt_loss=0.616, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6210/6250 [6:27:54<02:32,  3.81s/it, gpt_loss=0.616, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6210/6250 [6:27:58<02:32,  3.81s/it, gpt_loss=0.453, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6211/6250 [6:27:58<02:25,  3.72s/it, gpt_loss=0.453, lr=2e-7][A[2025-04-24 06:20:40,588] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  99%|█████████▉| 6211/6250 [6:28:01<02:25,  3.72s/it, gpt_loss=0.632, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6212/6250 [6:28:01<02:19,  3.66s/it, gpt_loss=0.632, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6212/6250 [6:28:06<02:19,  3.66s/it, gpt_loss=0.607, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6213/6250 [6:28:06<02:23,  3.87s/it, gpt_loss=0.607, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6213/6250 [6:28:09<02:23,  3.87s/it, gpt_loss=0.783, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6214/6250 [6:28:09<02:17,  3.83s/it, gpt_loss=0.783, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6214/6250 [6:28:13<02:17,  3.83s/it, gpt_loss=0.536, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6215/6250 [6:28:13<02:08,  3.67s/it, gpt_loss=0.536, lr=2e-7][A[2025-04-24 06:20:55,581] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0:  99%|█████████▉| 6215/6250 [6:28:16<02:08,  3.67s/it, gpt_loss=0.571, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6216/6250 [6:28:16<02:04,  3.65s/it, gpt_loss=0.571, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6216/6250 [6:28:21<02:04,  3.65s/it, gpt_loss=0.656, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6217/6250 [6:28:21<02:06,  3.82s/it, gpt_loss=0.656, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6217/6250 [6:28:24<02:06,  3.82s/it, gpt_loss=0.644, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6218/6250 [6:28:24<01:59,  3.72s/it, gpt_loss=0.644, lr=2e-7][A
Train step of epoch 0:  99%|█████████▉| 6218/6250 [6:28:28<01:59,  3.72s/it, gpt_loss=0.674, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6219/6250 [6:28:28<01:52,  3.64s/it, gpt_loss=0.674, lr=2e-7][A[2025-04-24 06:21:11,216] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0: 100%|█████████▉| 6219/6250 [6:28:32<01:52,  3.64s/it, gpt_loss=0.714, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6220/6250 [6:28:32<01:56,  3.89s/it, gpt_loss=0.714, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6220/6250 [6:28:35<01:56,  3.89s/it, gpt_loss=0.506, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6221/6250 [6:28:35<01:49,  3.76s/it, gpt_loss=0.506, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6221/6250 [6:28:39<01:49,  3.76s/it, gpt_loss=0.466, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6222/6250 [6:28:39<01:39,  3.56s/it, gpt_loss=0.466, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6222/6250 [6:28:42<01:39,  3.56s/it, gpt_loss=0.729, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6223/6250 [6:28:42<01:31,  3.39s/it, gpt_loss=0.729, lr=2e-7][A[2025-04-24 06:21:24,872] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0: 100%|█████████▉| 6223/6250 [6:28:46<01:31,  3.39s/it, gpt_loss=0.436, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6224/6250 [6:28:46<01:33,  3.61s/it, gpt_loss=0.436, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6224/6250 [6:28:50<01:33,  3.61s/it, gpt_loss=0.511, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6225/6250 [6:28:50<01:33,  3.75s/it, gpt_loss=0.511, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6225/6250 [6:28:53<01:33,  3.75s/it, gpt_loss=0.632, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6226/6250 [6:28:53<01:29,  3.74s/it, gpt_loss=0.632, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6226/6250 [6:28:58<01:29,  3.74s/it, gpt_loss=0.702, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6227/6250 [6:28:58<01:29,  3.88s/it, gpt_loss=0.702, lr=2e-7][A[2025-04-24 06:21:41,115] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0: 100%|█████████▉| 6227/6250 [6:29:02<01:29,  3.88s/it, gpt_loss=0.599, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6228/6250 [6:29:02<01:27,  3.98s/it, gpt_loss=0.599, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6228/6250 [6:29:05<01:27,  3.98s/it, gpt_loss=0.554, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6229/6250 [6:29:05<01:20,  3.81s/it, gpt_loss=0.554, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6229/6250 [6:29:09<01:20,  3.81s/it, gpt_loss=0.512, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6230/6250 [6:29:09<01:13,  3.65s/it, gpt_loss=0.512, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6230/6250 [6:29:13<01:13,  3.65s/it, gpt_loss=0.765, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6231/6250 [6:29:13<01:12,  3.81s/it, gpt_loss=0.765, lr=2e-7][A[2025-04-24 06:21:55,672] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0: 100%|█████████▉| 6231/6250 [6:29:16<01:12,  3.81s/it, gpt_loss=0.655, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6232/6250 [6:29:16<01:07,  3.77s/it, gpt_loss=0.655, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6232/6250 [6:29:19<01:07,  3.77s/it, gpt_loss=0.373, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6233/6250 [6:29:19<00:59,  3.51s/it, gpt_loss=0.373, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6233/6250 [6:29:23<00:59,  3.51s/it, gpt_loss=0.655, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6234/6250 [6:29:23<00:58,  3.68s/it, gpt_loss=0.655, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6234/6250 [6:29:27<00:58,  3.68s/it, gpt_loss=0.733, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6235/6250 [6:29:27<00:55,  3.72s/it, gpt_loss=0.733, lr=2e-7][A[2025-04-24 06:22:09,739] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0: 100%|█████████▉| 6235/6250 [6:29:30<00:55,  3.72s/it, gpt_loss=0.455, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6236/6250 [6:29:30<00:50,  3.59s/it, gpt_loss=0.455, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6236/6250 [6:29:35<00:50,  3.59s/it, gpt_loss=0.627, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6237/6250 [6:29:35<00:48,  3.75s/it, gpt_loss=0.627, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6237/6250 [6:29:38<00:48,  3.75s/it, gpt_loss=0.568, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6238/6250 [6:29:38<00:42,  3.54s/it, gpt_loss=0.568, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6238/6250 [6:29:42<00:42,  3.54s/it, gpt_loss=0.789, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6239/6250 [6:29:42<00:40,  3.68s/it, gpt_loss=0.789, lr=2e-7][A[2025-04-24 06:22:25,037] [WARNING] [stage3.py:2139:step] 6 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0: 100%|█████████▉| 6239/6250 [6:29:46<00:40,  3.68s/it, gpt_loss=0.607, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6240/6250 [6:29:46<00:38,  3.81s/it, gpt_loss=0.607, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6240/6250 [6:29:50<00:38,  3.81s/it, gpt_loss=0.748, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6241/6250 [6:29:50<00:34,  3.82s/it, gpt_loss=0.748, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6241/6250 [6:29:53<00:34,  3.82s/it, gpt_loss=0.673, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6242/6250 [6:29:53<00:29,  3.64s/it, gpt_loss=0.673, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6242/6250 [6:29:55<00:29,  3.64s/it, gpt_loss=0.484, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6243/6250 [6:29:55<00:21,  3.12s/it, gpt_loss=0.484, lr=2e-7][A[2025-04-24 06:22:37,382] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0: 100%|█████████▉| 6243/6250 [6:29:58<00:21,  3.12s/it, gpt_loss=0.674, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6244/6250 [6:29:58<00:19,  3.20s/it, gpt_loss=0.674, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6244/6250 [6:30:02<00:19,  3.20s/it, gpt_loss=0.638, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6245/6250 [6:30:02<00:16,  3.38s/it, gpt_loss=0.638, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6245/6250 [6:30:06<00:16,  3.38s/it, gpt_loss=0.672, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6246/6250 [6:30:06<00:13,  3.46s/it, gpt_loss=0.672, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6246/6250 [6:30:09<00:13,  3.46s/it, gpt_loss=0.846, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6247/6250 [6:30:09<00:10,  3.49s/it, gpt_loss=0.846, lr=2e-7][A[2025-04-24 06:22:52,433] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time

Train step of epoch 0: 100%|█████████▉| 6247/6250 [6:30:13<00:10,  3.49s/it, gpt_loss=0.623, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6248/6250 [6:30:13<00:07,  3.65s/it, gpt_loss=0.623, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6248/6250 [6:30:17<00:07,  3.65s/it, gpt_loss=0.31, lr=2e-7] [A
Train step of epoch 0: 100%|█████████▉| 6249/6250 [6:30:17<00:03,  3.67s/it, gpt_loss=0.31, lr=2e-7][A
Train step of epoch 0: 100%|█████████▉| 6249/6250 [6:30:21<00:03,  3.67s/it, gpt_loss=0.464, lr=2e-7][A
Train step of epoch 0: 100%|██████████| 6250/6250 [6:30:21<00:00,  3.84s/it, gpt_loss=0.464, lr=2e-7][ATrain epoch: 100%|██████████| 1/1 [6:30:21<00:00, 23421.64s/it]wandb: uploading output.log; uploading config.yaml
wandb:                                                                                
wandb: 
wandb: Run history:
wandb: train/global_step ▁▁▁▂▂▂▂▃▃▃▃▄▄▄▄▅▅▅▅▅▆▆▆▆▇▇▇▇███
wandb:    train/gpt_loss ▅▂▃▆▄▃▅▁▃▂▂▆█▅▇▂█▃▃▅▇▁▂▂▄▃▄▃▃▆▄
wandb:   train/loss_mean ▄▄▅█▅▂▆▅▂▃▂▅▅▃▄▂▅▂▂▅▂▂▄▁▄▅▂▄▃▄▁
wandb:          train/lr ██████▇▇▇▇▆▆▆▅▅▅▄▄▃▃▃▂▂▂▂▂▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb: train/global_step 1550
wandb:    train/gpt_loss 0.61743
wandb:   train/loss_mean 0.52163
wandb:          train/lr 0.0
wandb: 
wandb: 🚀 View run qwen-2.5-vl-3b-sft-text at: https://wandb.ai/swgj/openrlhf_train_sft/runs/025ikyus
wandb: ⭐️ View project at: https://wandb.ai/swgj/openrlhf_train_sft
wandb: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)
wandb: Find logs at: ./wandb/run-20250423_235237-025ikyus/logs
Train epoch: 100%|██████████| 1/1 [6:30:23<00:00, 23423.61s/it]
Train step of epoch 0: 100%|██████████| 6250/6250 [6:30:23<00:00,  3.75s/it, gpt_loss=0.464, lr=2e-7]
[2025-04-24 06:23:26,025] [INFO] [launch.py:351:main] Process 928948 exits successfully.
[2025-04-24 06:23:27,025] [INFO] [launch.py:351:main] Process 928947 exits successfully.
